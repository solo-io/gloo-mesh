// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_appmesh is a generated GoMock package.
package mock_appmesh

import (
	context "context"
	appmesh "github.com/aws/aws-sdk-go/service/appmesh"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1"
	reflect "reflect"
)

// MockAppmeshAccessControlDao is a mock of AppmeshAccessControlDao interface.
type MockAppmeshAccessControlDao struct {
	ctrl     *gomock.Controller
	recorder *MockAppmeshAccessControlDaoMockRecorder
}

// MockAppmeshAccessControlDaoMockRecorder is the mock recorder for MockAppmeshAccessControlDao.
type MockAppmeshAccessControlDaoMockRecorder struct {
	mock *MockAppmeshAccessControlDao
}

// NewMockAppmeshAccessControlDao creates a new mock instance.
func NewMockAppmeshAccessControlDao(ctrl *gomock.Controller) *MockAppmeshAccessControlDao {
	mock := &MockAppmeshAccessControlDao{ctrl: ctrl}
	mock.recorder = &MockAppmeshAccessControlDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppmeshAccessControlDao) EXPECT() *MockAppmeshAccessControlDaoMockRecorder {
	return m.recorder
}

// GetServicesAndWorkloadsForMesh mocks base method.
func (m *MockAppmeshAccessControlDao) GetServicesAndWorkloadsForMesh(ctx context.Context, mesh *v1alpha1.Mesh) (map[*v1alpha1.MeshService][]*v1alpha1.MeshWorkload, map[*v1alpha1.MeshWorkload][]*v1alpha1.MeshService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesAndWorkloadsForMesh", ctx, mesh)
	ret0, _ := ret[0].(map[*v1alpha1.MeshService][]*v1alpha1.MeshWorkload)
	ret1, _ := ret[1].(map[*v1alpha1.MeshWorkload][]*v1alpha1.MeshService)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServicesAndWorkloadsForMesh indicates an expected call of GetServicesAndWorkloadsForMesh.
func (mr *MockAppmeshAccessControlDaoMockRecorder) GetServicesAndWorkloadsForMesh(ctx, mesh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesAndWorkloadsForMesh", reflect.TypeOf((*MockAppmeshAccessControlDao)(nil).GetServicesAndWorkloadsForMesh), ctx, mesh)
}

// EnsureVirtualService mocks base method.
func (m *MockAppmeshAccessControlDao) EnsureVirtualService(mesh *v1alpha1.Mesh, virtualServiceData *appmesh.VirtualServiceData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureVirtualService", mesh, virtualServiceData)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureVirtualService indicates an expected call of EnsureVirtualService.
func (mr *MockAppmeshAccessControlDaoMockRecorder) EnsureVirtualService(mesh, virtualServiceData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureVirtualService", reflect.TypeOf((*MockAppmeshAccessControlDao)(nil).EnsureVirtualService), mesh, virtualServiceData)
}

// EnsureVirtualRouter mocks base method.
func (m *MockAppmeshAccessControlDao) EnsureVirtualRouter(mesh *v1alpha1.Mesh, virtualRouter *appmesh.VirtualRouterData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureVirtualRouter", mesh, virtualRouter)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureVirtualRouter indicates an expected call of EnsureVirtualRouter.
func (mr *MockAppmeshAccessControlDaoMockRecorder) EnsureVirtualRouter(mesh, virtualRouter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureVirtualRouter", reflect.TypeOf((*MockAppmeshAccessControlDao)(nil).EnsureVirtualRouter), mesh, virtualRouter)
}

// EnsureRoute mocks base method.
func (m *MockAppmeshAccessControlDao) EnsureRoute(mesh *v1alpha1.Mesh, route *appmesh.RouteData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureRoute", mesh, route)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureRoute indicates an expected call of EnsureRoute.
func (mr *MockAppmeshAccessControlDaoMockRecorder) EnsureRoute(mesh, route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureRoute", reflect.TypeOf((*MockAppmeshAccessControlDao)(nil).EnsureRoute), mesh, route)
}

// EnsureVirtualNode mocks base method.
func (m *MockAppmeshAccessControlDao) EnsureVirtualNode(mesh *v1alpha1.Mesh, virtualNode *appmesh.VirtualNodeData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureVirtualNode", mesh, virtualNode)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureVirtualNode indicates an expected call of EnsureVirtualNode.
func (mr *MockAppmeshAccessControlDaoMockRecorder) EnsureVirtualNode(mesh, virtualNode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureVirtualNode", reflect.TypeOf((*MockAppmeshAccessControlDao)(nil).EnsureVirtualNode), mesh, virtualNode)
}
