// Code generated by MockGen. DO NOT EDIT.
// Source: ./registrant.go

// Package mock_registration is a generated GoMock package.
package mock_registration

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/skv2/pkg/api/multicluster.solo.io/v1alpha1"
)

// MockClusterRegistrant is a mock of ClusterRegistrant interface
type MockClusterRegistrant struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRegistrantMockRecorder
}

// MockClusterRegistrantMockRecorder is the mock recorder for MockClusterRegistrant
type MockClusterRegistrantMockRecorder struct {
	mock *MockClusterRegistrant
}

// NewMockClusterRegistrant creates a new mock instance
func NewMockClusterRegistrant(ctrl *gomock.Controller) *MockClusterRegistrant {
	mock := &MockClusterRegistrant{ctrl: ctrl}
	mock.recorder = &MockClusterRegistrantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterRegistrant) EXPECT() *MockClusterRegistrantMockRecorder {
	return m.recorder
}

// RegisterCluster mocks base method
func (m *MockClusterRegistrant) RegisterCluster(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCluster", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterCluster indicates an expected call of RegisterCluster
func (mr *MockClusterRegistrantMockRecorder) RegisterCluster(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCluster", reflect.TypeOf((*MockClusterRegistrant)(nil).RegisterCluster), ctx)
}

// RegisterProviderCluster mocks base method
func (m *MockClusterRegistrant) RegisterProviderCluster(ctx context.Context, providerInfo *v1alpha1.KubernetesClusterSpec_ProviderInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterProviderCluster", ctx, providerInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterProviderCluster indicates an expected call of RegisterProviderCluster
func (mr *MockClusterRegistrantMockRecorder) RegisterProviderCluster(ctx, providerInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterProviderCluster", reflect.TypeOf((*MockClusterRegistrant)(nil).RegisterProviderCluster), ctx, providerInfo)
}

// DeregisterCluster mocks base method
func (m *MockClusterRegistrant) DeregisterCluster(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterCluster", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterCluster indicates an expected call of DeregisterCluster
func (mr *MockClusterRegistrantMockRecorder) DeregisterCluster(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterCluster", reflect.TypeOf((*MockClusterRegistrant)(nil).DeregisterCluster), ctx)
}
