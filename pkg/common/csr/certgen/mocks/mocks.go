// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_certgen is a generated GoMock package.
package mock_certgen

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	types "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha1/types"
	cert_secrets "github.com/solo-io/service-mesh-hub/pkg/common/csr/certgen/secrets"
	util "istio.io/istio/security/pkg/pki/util"
)

// MockRootCertGenerator is a mock of RootCertGenerator interface.
type MockRootCertGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockRootCertGeneratorMockRecorder
}

// MockRootCertGeneratorMockRecorder is the mock recorder for MockRootCertGenerator.
type MockRootCertGeneratorMockRecorder struct {
	mock *MockRootCertGenerator
}

// NewMockRootCertGenerator creates a new mock instance.
func NewMockRootCertGenerator(ctrl *gomock.Controller) *MockRootCertGenerator {
	mock := &MockRootCertGenerator{ctrl: ctrl}
	mock.recorder = &MockRootCertGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRootCertGenerator) EXPECT() *MockRootCertGeneratorMockRecorder {
	return m.recorder
}

// GenRootCertAndKey mocks base method.
func (m *MockRootCertGenerator) GenRootCertAndKey(builtinCA *types.VirtualMeshSpec_CertificateAuthority_Builtin) (*cert_secrets.RootCAData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenRootCertAndKey", builtinCA)
	ret0, _ := ret[0].(*cert_secrets.RootCAData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenRootCertAndKey indicates an expected call of GenRootCertAndKey.
func (mr *MockRootCertGeneratorMockRecorder) GenRootCertAndKey(builtinCA interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenRootCertAndKey", reflect.TypeOf((*MockRootCertGenerator)(nil).GenRootCertAndKey), builtinCA)
}

// MockSigner is a mock of Signer interface.
type MockSigner struct {
	ctrl     *gomock.Controller
	recorder *MockSignerMockRecorder
}

// MockSignerMockRecorder is the mock recorder for MockSigner.
type MockSignerMockRecorder struct {
	mock *MockSigner
}

// NewMockSigner creates a new mock instance.
func NewMockSigner(ctrl *gomock.Controller) *MockSigner {
	mock := &MockSigner{ctrl: ctrl}
	mock.recorder = &MockSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigner) EXPECT() *MockSignerMockRecorder {
	return m.recorder
}

// GenCertFromEncodedCSR mocks base method.
func (m *MockSigner) GenCertFromEncodedCSR(csrPem, signingCertPem, signingKey []byte, subjectIDs []string, ttl time.Duration, isCA bool) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenCertFromEncodedCSR", csrPem, signingCertPem, signingKey, subjectIDs, ttl, isCA)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenCertFromEncodedCSR indicates an expected call of GenCertFromEncodedCSR.
func (mr *MockSignerMockRecorder) GenCertFromEncodedCSR(csrPem, signingCertPem, signingKey, subjectIDs, ttl, isCA interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenCertFromEncodedCSR", reflect.TypeOf((*MockSigner)(nil).GenCertFromEncodedCSR), csrPem, signingCertPem, signingKey, subjectIDs, ttl, isCA)
}

// GenCSRWithKey mocks base method.
func (m *MockSigner) GenCSRWithKey(options util.CertOptions) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenCSRWithKey", options)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenCSRWithKey indicates an expected call of GenCSRWithKey.
func (mr *MockSignerMockRecorder) GenCSRWithKey(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenCSRWithKey", reflect.TypeOf((*MockSigner)(nil).GenCSRWithKey), options)
}

// GenCSR mocks base method.
func (m *MockSigner) GenCSR(options util.CertOptions) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenCSR", options)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenCSR indicates an expected call of GenCSR.
func (mr *MockSignerMockRecorder) GenCSR(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenCSR", reflect.TypeOf((*MockSigner)(nil).GenCSR), options)
}
