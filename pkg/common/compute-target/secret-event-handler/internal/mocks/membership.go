// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_internal_watcher is a generated GoMock package.
package mock_internal_watcher

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockComputeTargetSecretHandler is a mock of ComputeTargetSecretHandler interface.
type MockComputeTargetSecretHandler struct {
	ctrl     *gomock.Controller
	recorder *MockComputeTargetSecretHandlerMockRecorder
}

// MockComputeTargetSecretHandlerMockRecorder is the mock recorder for MockComputeTargetSecretHandler.
type MockComputeTargetSecretHandlerMockRecorder struct {
	mock *MockComputeTargetSecretHandler
}

// NewMockComputeTargetSecretHandler creates a new mock instance.
func NewMockComputeTargetSecretHandler(ctrl *gomock.Controller) *MockComputeTargetSecretHandler {
	mock := &MockComputeTargetSecretHandler{ctrl: ctrl}
	mock.recorder = &MockComputeTargetSecretHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeTargetSecretHandler) EXPECT() *MockComputeTargetSecretHandlerMockRecorder {
	return m.recorder
}

// ComputeTargetSecretAdded mocks base method.
func (m *MockComputeTargetSecretHandler) ComputeTargetSecretAdded(ctx context.Context, s *v1.Secret) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeTargetSecretAdded", ctx, s)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeTargetSecretAdded indicates an expected call of ComputeTargetSecretAdded.
func (mr *MockComputeTargetSecretHandlerMockRecorder) ComputeTargetSecretAdded(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeTargetSecretAdded", reflect.TypeOf((*MockComputeTargetSecretHandler)(nil).ComputeTargetSecretAdded), ctx, s)
}

// ComputeTargetSecretRemoved mocks base method.
func (m *MockComputeTargetSecretHandler) ComputeTargetSecretRemoved(ctx context.Context, s *v1.Secret) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeTargetSecretRemoved", ctx, s)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeTargetSecretRemoved indicates an expected call of ComputeTargetSecretRemoved.
func (mr *MockComputeTargetSecretHandlerMockRecorder) ComputeTargetSecretRemoved(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeTargetSecretRemoved", reflect.TypeOf((*MockComputeTargetSecretHandler)(nil).ComputeTargetSecretRemoved), ctx, s)
}
