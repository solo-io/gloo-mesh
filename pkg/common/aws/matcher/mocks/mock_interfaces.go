// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_matcher is a generated GoMock package.
package mock_matcher

import (
	reflect "reflect"

	appmesh "github.com/aws/aws-sdk-go/service/appmesh"
	gomock "github.com/golang/mock/gomock"
)

// MockAppmeshMatcher is a mock of AppmeshMatcher interface.
type MockAppmeshMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockAppmeshMatcherMockRecorder
}

// MockAppmeshMatcherMockRecorder is the mock recorder for MockAppmeshMatcher.
type MockAppmeshMatcherMockRecorder struct {
	mock *MockAppmeshMatcher
}

// NewMockAppmeshMatcher creates a new mock instance.
func NewMockAppmeshMatcher(ctrl *gomock.Controller) *MockAppmeshMatcher {
	mock := &MockAppmeshMatcher{ctrl: ctrl}
	mock.recorder = &MockAppmeshMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppmeshMatcher) EXPECT() *MockAppmeshMatcherMockRecorder {
	return m.recorder
}

// AreRoutesEqual mocks base method.
func (m *MockAppmeshMatcher) AreRoutesEqual(routeA, routeB *appmesh.RouteData) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AreRoutesEqual", routeA, routeB)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AreRoutesEqual indicates an expected call of AreRoutesEqual.
func (mr *MockAppmeshMatcherMockRecorder) AreRoutesEqual(routeA, routeB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AreRoutesEqual", reflect.TypeOf((*MockAppmeshMatcher)(nil).AreRoutesEqual), routeA, routeB)
}

// AreVirtualNodesEqual mocks base method.
func (m *MockAppmeshMatcher) AreVirtualNodesEqual(virtualNodeA, virtualNodeB *appmesh.VirtualNodeData) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AreVirtualNodesEqual", virtualNodeA, virtualNodeB)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AreVirtualNodesEqual indicates an expected call of AreVirtualNodesEqual.
func (mr *MockAppmeshMatcherMockRecorder) AreVirtualNodesEqual(virtualNodeA, virtualNodeB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AreVirtualNodesEqual", reflect.TypeOf((*MockAppmeshMatcher)(nil).AreVirtualNodesEqual), virtualNodeA, virtualNodeB)
}

// AreVirtualServicesEqual mocks base method.
func (m *MockAppmeshMatcher) AreVirtualServicesEqual(virtualServiceA, virtualServiceB *appmesh.VirtualServiceData) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AreVirtualServicesEqual", virtualServiceA, virtualServiceB)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AreVirtualServicesEqual indicates an expected call of AreVirtualServicesEqual.
func (mr *MockAppmeshMatcherMockRecorder) AreVirtualServicesEqual(virtualServiceA, virtualServiceB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AreVirtualServicesEqual", reflect.TypeOf((*MockAppmeshMatcher)(nil).AreVirtualServicesEqual), virtualServiceA, virtualServiceB)
}

// AreVirtualRoutersEqual mocks base method.
func (m *MockAppmeshMatcher) AreVirtualRoutersEqual(virtualRouterA, virtualRouterB *appmesh.VirtualRouterData) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AreVirtualRoutersEqual", virtualRouterA, virtualRouterB)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AreVirtualRoutersEqual indicates an expected call of AreVirtualRoutersEqual.
func (mr *MockAppmeshMatcherMockRecorder) AreVirtualRoutersEqual(virtualRouterA, virtualRouterB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AreVirtualRoutersEqual", reflect.TypeOf((*MockAppmeshMatcher)(nil).AreVirtualRoutersEqual), virtualRouterA, virtualRouterB)
}
