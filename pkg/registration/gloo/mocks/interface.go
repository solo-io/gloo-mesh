// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/supergloo/pkg/api/v1"
)

// MockGlooIngressPlugin is a mock of GlooIngressPlugin interface
type MockGlooIngressPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockGlooIngressPluginMockRecorder
}

// MockGlooIngressPluginMockRecorder is the mock recorder for MockGlooIngressPlugin
type MockGlooIngressPluginMockRecorder struct {
	mock *MockGlooIngressPlugin
}

// NewMockGlooIngressPlugin creates a new mock instance
func NewMockGlooIngressPlugin(ctrl *gomock.Controller) *MockGlooIngressPlugin {
	mock := &MockGlooIngressPlugin{ctrl: ctrl}
	mock.recorder = &MockGlooIngressPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGlooIngressPlugin) EXPECT() *MockGlooIngressPluginMockRecorder {
	return m.recorder
}

// HandleMeshes mocks base method
func (m *MockGlooIngressPlugin) HandleMeshes(ctx context.Context, ingress *v1.MeshIngress, meshes v1.MeshList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleMeshes", ctx, ingress, meshes)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleMeshes indicates an expected call of HandleMeshes
func (mr *MockGlooIngressPluginMockRecorder) HandleMeshes(ctx, ingress, meshes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMeshes", reflect.TypeOf((*MockGlooIngressPlugin)(nil).HandleMeshes), ctx, ingress, meshes)
}
