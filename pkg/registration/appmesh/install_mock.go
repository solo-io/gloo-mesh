// Code generated by MockGen. DO NOT EDIT.
// Source: install.go

// Package appmesh is a generated GoMock package.
package appmesh

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInstaller is a mock of Installer interface
type MockInstaller struct {
	ctrl     *gomock.Controller
	recorder *MockInstallerMockRecorder
}

// MockInstallerMockRecorder is the mock recorder for MockInstaller
type MockInstallerMockRecorder struct {
	mock *MockInstaller
}

// NewMockInstaller creates a new mock instance
func NewMockInstaller(ctrl *gomock.Controller) *MockInstaller {
	mock := &MockInstaller{ctrl: ctrl}
	mock.recorder = &MockInstallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstaller) EXPECT() *MockInstallerMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockInstaller) Delete(namespace string, reader io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", namespace, reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockInstallerMockRecorder) Delete(namespace, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstaller)(nil).Delete), namespace, reader)
}

// Create mocks base method
func (m *MockInstaller) Create(namespace string, reader io.Reader, timeout int64, shouldWait bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", namespace, reader, timeout, shouldWait)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockInstallerMockRecorder) Create(namespace, reader, timeout, shouldWait interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInstaller)(nil).Create), namespace, reader, timeout, shouldWait)
}
