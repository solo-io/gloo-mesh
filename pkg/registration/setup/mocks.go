// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/supergloo/pkg/registration (interfaces: ConfigLoop)

// Package mock_registration is a generated GoMock package.
package setup

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	eventloop "github.com/solo-io/solo-kit/pkg/api/v1/eventloop"
	registration "github.com/solo-io/supergloo/pkg/registration"
)

// MockConfigLoop is a mock of ConfigLoop interface
type MockConfigLoop struct {
	ctrl     *gomock.Controller
	recorder *MockConfigLoopMockRecorder
}

// MockConfigLoopMockRecorder is the mock recorder for MockConfigLoop
type MockConfigLoopMockRecorder struct {
	mock *MockConfigLoop
}

// NewMockConfigLoop creates a new mock instance
func NewMockConfigLoop(ctrl *gomock.Controller) *MockConfigLoop {
	mock := &MockConfigLoop{ctrl: ctrl}
	mock.recorder = &MockConfigLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigLoop) EXPECT() *MockConfigLoopMockRecorder {
	return m.recorder
}

// Enabled mocks base method
func (m *MockConfigLoop) Enabled(arg0 registration.EnabledConfigLoops) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enabled", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enabled indicates an expected call of Enabled
func (mr *MockConfigLoopMockRecorder) Enabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enabled", reflect.TypeOf((*MockConfigLoop)(nil).Enabled), arg0)
}

// Start mocks base method
func (m *MockConfigLoop) Start(arg0 context.Context, arg1 registration.EnabledConfigLoops) (eventloop.EventLoop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(eventloop.EventLoop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockConfigLoopMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConfigLoop)(nil).Start), arg0, arg1)
}
