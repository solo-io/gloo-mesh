// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wire

import (
	"context"

	v1 "github.com/solo-io/service-mesh-hub/pkg/api/kubernetes/core/v1"
	"github.com/solo-io/service-mesh-hub/pkg/api/security.smh.solo.io/v1alpha1"
	mc_wire "github.com/solo-io/service-mesh-hub/pkg/common/compute-target/wire"
	csr_generator "github.com/solo-io/service-mesh-hub/pkg/common/csr-generator"
	"github.com/solo-io/service-mesh-hub/pkg/common/csr/certgen"
)

// Injectors from wire.go:

func InitializeCsrAgent(ctx context.Context) (CsrAgentContext, error) {
	config, err := mc_wire.LocalKubeConfigProvider()
	if err != nil {
		return CsrAgentContext{}, err
	}
	asyncManager, err := mc_wire.LocalManagerProvider(ctx, config)
	if err != nil {
		return CsrAgentContext{}, err
	}
	virtualMeshCertificateSigningRequestEventWatcher := csr_generator.CsrControllerProviderLocal(asyncManager)
	virtualMeshCSRDataSourceFactory := csr_generator.NewVirtualMeshCSRDataSourceFactory()
	client := mc_wire.DynamicClientProvider(asyncManager)
	virtualMeshCertificateSigningRequestClient := v1alpha1.VirtualMeshCertificateSigningRequestClientProvider(client)
	secretClient := v1.SecretClientProvider(client)
	signer := certgen.NewSigner()
	privateKeyGenerator := csr_generator.NewPrivateKeyGenerator()
	certClient := csr_generator.NewCertClient(secretClient, signer, privateKeyGenerator)
	istioCSRGenerator := csr_generator.NewIstioCSRGenerator(virtualMeshCertificateSigningRequestClient, secretClient, certClient, signer)
	virtualMeshCSRProcessor := csr_generator.NewCsrAgentIstioProcessor(istioCSRGenerator)
	csrAgentContext := CsrAgentContextProvider(ctx, asyncManager, virtualMeshCertificateSigningRequestEventWatcher, virtualMeshCSRDataSourceFactory, virtualMeshCSRProcessor, virtualMeshCertificateSigningRequestClient)
	return csrAgentContext, nil
}
