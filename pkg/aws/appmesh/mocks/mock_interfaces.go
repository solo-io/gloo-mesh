// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_appmesh is a generated GoMock package.
package mock_appmesh

import (
	reflect "reflect"

	appmesh "github.com/aws/aws-sdk-go/service/appmesh"
	sts "github.com/aws/aws-sdk-go/service/sts"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1"
)

// MockAppmeshMatcher is a mock of AppmeshMatcher interface.
type MockAppmeshMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockAppmeshMatcherMockRecorder
}

// MockAppmeshMatcherMockRecorder is the mock recorder for MockAppmeshMatcher.
type MockAppmeshMatcherMockRecorder struct {
	mock *MockAppmeshMatcher
}

// NewMockAppmeshMatcher creates a new mock instance.
func NewMockAppmeshMatcher(ctrl *gomock.Controller) *MockAppmeshMatcher {
	mock := &MockAppmeshMatcher{ctrl: ctrl}
	mock.recorder = &MockAppmeshMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppmeshMatcher) EXPECT() *MockAppmeshMatcherMockRecorder {
	return m.recorder
}

// AreRoutesEqual mocks base method.
func (m *MockAppmeshMatcher) AreRoutesEqual(routeA, routeB *appmesh.RouteData) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AreRoutesEqual", routeA, routeB)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AreRoutesEqual indicates an expected call of AreRoutesEqual.
func (mr *MockAppmeshMatcherMockRecorder) AreRoutesEqual(routeA, routeB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AreRoutesEqual", reflect.TypeOf((*MockAppmeshMatcher)(nil).AreRoutesEqual), routeA, routeB)
}

// AreVirtualNodesEqual mocks base method.
func (m *MockAppmeshMatcher) AreVirtualNodesEqual(virtualNodeA, virtualNodeB *appmesh.VirtualNodeData) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AreVirtualNodesEqual", virtualNodeA, virtualNodeB)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AreVirtualNodesEqual indicates an expected call of AreVirtualNodesEqual.
func (mr *MockAppmeshMatcherMockRecorder) AreVirtualNodesEqual(virtualNodeA, virtualNodeB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AreVirtualNodesEqual", reflect.TypeOf((*MockAppmeshMatcher)(nil).AreVirtualNodesEqual), virtualNodeA, virtualNodeB)
}

// AreVirtualServicesEqual mocks base method.
func (m *MockAppmeshMatcher) AreVirtualServicesEqual(virtualServiceA, virtualServiceB *appmesh.VirtualServiceData) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AreVirtualServicesEqual", virtualServiceA, virtualServiceB)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AreVirtualServicesEqual indicates an expected call of AreVirtualServicesEqual.
func (mr *MockAppmeshMatcherMockRecorder) AreVirtualServicesEqual(virtualServiceA, virtualServiceB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AreVirtualServicesEqual", reflect.TypeOf((*MockAppmeshMatcher)(nil).AreVirtualServicesEqual), virtualServiceA, virtualServiceB)
}

// AreVirtualRoutersEqual mocks base method.
func (m *MockAppmeshMatcher) AreVirtualRoutersEqual(virtualRouterA, virtualRouterB *appmesh.VirtualRouterData) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AreVirtualRoutersEqual", virtualRouterA, virtualRouterB)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AreVirtualRoutersEqual indicates an expected call of AreVirtualRoutersEqual.
func (mr *MockAppmeshMatcherMockRecorder) AreVirtualRoutersEqual(virtualRouterA, virtualRouterB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AreVirtualRoutersEqual", reflect.TypeOf((*MockAppmeshMatcher)(nil).AreVirtualRoutersEqual), virtualRouterA, virtualRouterB)
}

// MockAppmeshTranslator is a mock of AppmeshTranslator interface.
type MockAppmeshTranslator struct {
	ctrl     *gomock.Controller
	recorder *MockAppmeshTranslatorMockRecorder
}

// MockAppmeshTranslatorMockRecorder is the mock recorder for MockAppmeshTranslator.
type MockAppmeshTranslatorMockRecorder struct {
	mock *MockAppmeshTranslator
}

// NewMockAppmeshTranslator creates a new mock instance.
func NewMockAppmeshTranslator(ctrl *gomock.Controller) *MockAppmeshTranslator {
	mock := &MockAppmeshTranslator{ctrl: ctrl}
	mock.recorder = &MockAppmeshTranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppmeshTranslator) EXPECT() *MockAppmeshTranslatorMockRecorder {
	return m.recorder
}

// BuildDefaultVirtualNode mocks base method.
func (m *MockAppmeshTranslator) BuildDefaultVirtualNode(appmeshName *string, meshWorkload *v1alpha1.MeshWorkload, meshService *v1alpha1.MeshService, upstreamServices []*v1alpha1.MeshService) *appmesh.VirtualNodeData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildDefaultVirtualNode", appmeshName, meshWorkload, meshService, upstreamServices)
	ret0, _ := ret[0].(*appmesh.VirtualNodeData)
	return ret0
}

// BuildDefaultVirtualNode indicates an expected call of BuildDefaultVirtualNode.
func (mr *MockAppmeshTranslatorMockRecorder) BuildDefaultVirtualNode(appmeshName, meshWorkload, meshService, upstreamServices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildDefaultVirtualNode", reflect.TypeOf((*MockAppmeshTranslator)(nil).BuildDefaultVirtualNode), appmeshName, meshWorkload, meshService, upstreamServices)
}

// BuildDefaultRoute mocks base method.
func (m *MockAppmeshTranslator) BuildDefaultRoute(appmeshName *string, meshService *v1alpha1.MeshService, meshWorkloads []*v1alpha1.MeshWorkload) (*appmesh.RouteData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildDefaultRoute", appmeshName, meshService, meshWorkloads)
	ret0, _ := ret[0].(*appmesh.RouteData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildDefaultRoute indicates an expected call of BuildDefaultRoute.
func (mr *MockAppmeshTranslatorMockRecorder) BuildDefaultRoute(appmeshName, meshService, meshWorkloads interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildDefaultRoute", reflect.TypeOf((*MockAppmeshTranslator)(nil).BuildDefaultRoute), appmeshName, meshService, meshWorkloads)
}

// BuildVirtualService mocks base method.
func (m *MockAppmeshTranslator) BuildVirtualService(appmeshName *string, meshService *v1alpha1.MeshService) *appmesh.VirtualServiceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildVirtualService", appmeshName, meshService)
	ret0, _ := ret[0].(*appmesh.VirtualServiceData)
	return ret0
}

// BuildVirtualService indicates an expected call of BuildVirtualService.
func (mr *MockAppmeshTranslatorMockRecorder) BuildVirtualService(appmeshName, meshService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildVirtualService", reflect.TypeOf((*MockAppmeshTranslator)(nil).BuildVirtualService), appmeshName, meshService)
}

// BuildVirtualRouter mocks base method.
func (m *MockAppmeshTranslator) BuildVirtualRouter(appmeshName *string, meshService *v1alpha1.MeshService) *appmesh.VirtualRouterData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildVirtualRouter", appmeshName, meshService)
	ret0, _ := ret[0].(*appmesh.VirtualRouterData)
	return ret0
}

// BuildVirtualRouter indicates an expected call of BuildVirtualRouter.
func (mr *MockAppmeshTranslatorMockRecorder) BuildVirtualRouter(appmeshName, meshService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildVirtualRouter", reflect.TypeOf((*MockAppmeshTranslator)(nil).BuildVirtualRouter), appmeshName, meshService)
}

// MockAppmeshClient is a mock of AppmeshClient interface.
type MockAppmeshClient struct {
	ctrl     *gomock.Controller
	recorder *MockAppmeshClientMockRecorder
}

// MockAppmeshClientMockRecorder is the mock recorder for MockAppmeshClient.
type MockAppmeshClientMockRecorder struct {
	mock *MockAppmeshClient
}

// NewMockAppmeshClient creates a new mock instance.
func NewMockAppmeshClient(ctrl *gomock.Controller) *MockAppmeshClient {
	mock := &MockAppmeshClient{ctrl: ctrl}
	mock.recorder = &MockAppmeshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppmeshClient) EXPECT() *MockAppmeshClientMockRecorder {
	return m.recorder
}

// EnsureVirtualService mocks base method.
func (m *MockAppmeshClient) EnsureVirtualService(virtualServiceData *appmesh.VirtualServiceData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureVirtualService", virtualServiceData)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureVirtualService indicates an expected call of EnsureVirtualService.
func (mr *MockAppmeshClientMockRecorder) EnsureVirtualService(virtualServiceData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureVirtualService", reflect.TypeOf((*MockAppmeshClient)(nil).EnsureVirtualService), virtualServiceData)
}

// EnsureVirtualRouter mocks base method.
func (m *MockAppmeshClient) EnsureVirtualRouter(virtualRouter *appmesh.VirtualRouterData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureVirtualRouter", virtualRouter)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureVirtualRouter indicates an expected call of EnsureVirtualRouter.
func (mr *MockAppmeshClientMockRecorder) EnsureVirtualRouter(virtualRouter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureVirtualRouter", reflect.TypeOf((*MockAppmeshClient)(nil).EnsureVirtualRouter), virtualRouter)
}

// EnsureRoute mocks base method.
func (m *MockAppmeshClient) EnsureRoute(route *appmesh.RouteData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureRoute", route)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureRoute indicates an expected call of EnsureRoute.
func (mr *MockAppmeshClientMockRecorder) EnsureRoute(route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureRoute", reflect.TypeOf((*MockAppmeshClient)(nil).EnsureRoute), route)
}

// EnsureVirtualNode mocks base method.
func (m *MockAppmeshClient) EnsureVirtualNode(virtualNode *appmesh.VirtualNodeData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureVirtualNode", virtualNode)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureVirtualNode indicates an expected call of EnsureVirtualNode.
func (mr *MockAppmeshClientMockRecorder) EnsureVirtualNode(virtualNode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureVirtualNode", reflect.TypeOf((*MockAppmeshClient)(nil).EnsureVirtualNode), virtualNode)
}

// MockSTSClient is a mock of STSClient interface.
type MockSTSClient struct {
	ctrl     *gomock.Controller
	recorder *MockSTSClientMockRecorder
}

// MockSTSClientMockRecorder is the mock recorder for MockSTSClient.
type MockSTSClientMockRecorder struct {
	mock *MockSTSClient
}

// NewMockSTSClient creates a new mock instance.
func NewMockSTSClient(ctrl *gomock.Controller) *MockSTSClient {
	mock := &MockSTSClient{ctrl: ctrl}
	mock.recorder = &MockSTSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSTSClient) EXPECT() *MockSTSClientMockRecorder {
	return m.recorder
}

// GetCallerIdentity mocks base method.
func (m *MockSTSClient) GetCallerIdentity() (*sts.GetCallerIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallerIdentity")
	ret0, _ := ret[0].(*sts.GetCallerIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCallerIdentity indicates an expected call of GetCallerIdentity.
func (mr *MockSTSClientMockRecorder) GetCallerIdentity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallerIdentity", reflect.TypeOf((*MockSTSClient)(nil).GetCallerIdentity))
}
