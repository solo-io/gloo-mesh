// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package service_discovery_mocks is a generated GoMock package.
package service_discovery_mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/controller"
	controller0 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha1/controller"
)

// MockMeshServiceFinder is a mock of MeshServiceFinder interface.
type MockMeshServiceFinder struct {
	ctrl     *gomock.Controller
	recorder *MockMeshServiceFinderMockRecorder
}

// MockMeshServiceFinderMockRecorder is the mock recorder for MockMeshServiceFinder.
type MockMeshServiceFinderMockRecorder struct {
	mock *MockMeshServiceFinder
}

// NewMockMeshServiceFinder creates a new mock instance.
func NewMockMeshServiceFinder(ctrl *gomock.Controller) *MockMeshServiceFinder {
	mock := &MockMeshServiceFinder{ctrl: ctrl}
	mock.recorder = &MockMeshServiceFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshServiceFinder) EXPECT() *MockMeshServiceFinderMockRecorder {
	return m.recorder
}

// StartDiscovery mocks base method.
func (m *MockMeshServiceFinder) StartDiscovery(serviceEventWatcher controller.ServiceEventWatcher, meshWorkloadEventWatcher controller0.MeshWorkloadEventWatcher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDiscovery", serviceEventWatcher, meshWorkloadEventWatcher)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartDiscovery indicates an expected call of StartDiscovery.
func (mr *MockMeshServiceFinderMockRecorder) StartDiscovery(serviceEventWatcher, meshWorkloadEventWatcher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDiscovery", reflect.TypeOf((*MockMeshServiceFinder)(nil).StartDiscovery), serviceEventWatcher, meshWorkloadEventWatcher)
}
