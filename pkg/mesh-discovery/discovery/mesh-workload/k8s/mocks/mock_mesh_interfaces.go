// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_mesh_workload is a generated GoMock package.
package mock_mesh_workload

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha1"
	v1 "k8s.io/api/apps/v1"
	v10 "k8s.io/api/core/v1"
)

// MockMeshWorkloadDiscovery is a mock of MeshWorkloadDiscovery interface.
type MockMeshWorkloadDiscovery struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadDiscoveryMockRecorder
}

// MockMeshWorkloadDiscoveryMockRecorder is the mock recorder for MockMeshWorkloadDiscovery.
type MockMeshWorkloadDiscoveryMockRecorder struct {
	mock *MockMeshWorkloadDiscovery
}

// NewMockMeshWorkloadDiscovery creates a new mock instance.
func NewMockMeshWorkloadDiscovery(ctrl *gomock.Controller) *MockMeshWorkloadDiscovery {
	mock := &MockMeshWorkloadDiscovery{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadDiscoveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshWorkloadDiscovery) EXPECT() *MockMeshWorkloadDiscoveryMockRecorder {
	return m.recorder
}

// DiscoverMeshWorkloads mocks base method.
func (m *MockMeshWorkloadDiscovery) DiscoverMeshWorkloads(ctx context.Context, clusterName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverMeshWorkloads", ctx, clusterName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DiscoverMeshWorkloads indicates an expected call of DiscoverMeshWorkloads.
func (mr *MockMeshWorkloadDiscoveryMockRecorder) DiscoverMeshWorkloads(ctx, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverMeshWorkloads", reflect.TypeOf((*MockMeshWorkloadDiscovery)(nil).DiscoverMeshWorkloads), ctx, clusterName)
}

// MockOwnerFetcher is a mock of OwnerFetcher interface.
type MockOwnerFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockOwnerFetcherMockRecorder
}

// MockOwnerFetcherMockRecorder is the mock recorder for MockOwnerFetcher.
type MockOwnerFetcherMockRecorder struct {
	mock *MockOwnerFetcher
}

// NewMockOwnerFetcher creates a new mock instance.
func NewMockOwnerFetcher(ctrl *gomock.Controller) *MockOwnerFetcher {
	mock := &MockOwnerFetcher{ctrl: ctrl}
	mock.recorder = &MockOwnerFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOwnerFetcher) EXPECT() *MockOwnerFetcherMockRecorder {
	return m.recorder
}

// GetDeployment mocks base method.
func (m *MockOwnerFetcher) GetDeployment(ctx context.Context, pod *v10.Pod) (*v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", ctx, pod)
	ret0, _ := ret[0].(*v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockOwnerFetcherMockRecorder) GetDeployment(ctx, pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockOwnerFetcher)(nil).GetDeployment), ctx, pod)
}

// MockMeshWorkloadScanner is a mock of MeshWorkloadScanner interface.
type MockMeshWorkloadScanner struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadScannerMockRecorder
}

// MockMeshWorkloadScannerMockRecorder is the mock recorder for MockMeshWorkloadScanner.
type MockMeshWorkloadScannerMockRecorder struct {
	mock *MockMeshWorkloadScanner
}

// NewMockMeshWorkloadScanner creates a new mock instance.
func NewMockMeshWorkloadScanner(ctrl *gomock.Controller) *MockMeshWorkloadScanner {
	mock := &MockMeshWorkloadScanner{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshWorkloadScanner) EXPECT() *MockMeshWorkloadScannerMockRecorder {
	return m.recorder
}

// ScanPod mocks base method.
func (m *MockMeshWorkloadScanner) ScanPod(ctx context.Context, pod *v10.Pod, clusterName string) (*v1alpha1.MeshWorkload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanPod", ctx, pod, clusterName)
	ret0, _ := ret[0].(*v1alpha1.MeshWorkload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanPod indicates an expected call of ScanPod.
func (mr *MockMeshWorkloadScannerMockRecorder) ScanPod(ctx, pod, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanPod", reflect.TypeOf((*MockMeshWorkloadScanner)(nil).ScanPod), ctx, pod, clusterName)
}
