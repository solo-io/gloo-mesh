// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/k8s/apps/v1/controller"
	controller0 "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/controller"
	controller1 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha1/controller"
	mc_manager "github.com/solo-io/service-mesh-hub/pkg/common/compute-target/k8s"
)

// MockDeploymentEventWatcherFactory is a mock of DeploymentEventWatcherFactory interface.
type MockDeploymentEventWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentEventWatcherFactoryMockRecorder
}

// MockDeploymentEventWatcherFactoryMockRecorder is the mock recorder for MockDeploymentEventWatcherFactory.
type MockDeploymentEventWatcherFactoryMockRecorder struct {
	mock *MockDeploymentEventWatcherFactory
}

// NewMockDeploymentEventWatcherFactory creates a new mock instance.
func NewMockDeploymentEventWatcherFactory(ctrl *gomock.Controller) *MockDeploymentEventWatcherFactory {
	mock := &MockDeploymentEventWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockDeploymentEventWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentEventWatcherFactory) EXPECT() *MockDeploymentEventWatcherFactoryMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockDeploymentEventWatcherFactory) Build(mgr mc_manager.AsyncManager, clusterName string) controller.DeploymentEventWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", mgr, clusterName)
	ret0, _ := ret[0].(controller.DeploymentEventWatcher)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockDeploymentEventWatcherFactoryMockRecorder) Build(mgr, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockDeploymentEventWatcherFactory)(nil).Build), mgr, clusterName)
}

// MockPodEventWatcherFactory is a mock of PodEventWatcherFactory interface.
type MockPodEventWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockPodEventWatcherFactoryMockRecorder
}

// MockPodEventWatcherFactoryMockRecorder is the mock recorder for MockPodEventWatcherFactory.
type MockPodEventWatcherFactoryMockRecorder struct {
	mock *MockPodEventWatcherFactory
}

// NewMockPodEventWatcherFactory creates a new mock instance.
func NewMockPodEventWatcherFactory(ctrl *gomock.Controller) *MockPodEventWatcherFactory {
	mock := &MockPodEventWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockPodEventWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodEventWatcherFactory) EXPECT() *MockPodEventWatcherFactoryMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockPodEventWatcherFactory) Build(mgr mc_manager.AsyncManager, clusterName string) controller0.PodEventWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", mgr, clusterName)
	ret0, _ := ret[0].(controller0.PodEventWatcher)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockPodEventWatcherFactoryMockRecorder) Build(mgr, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockPodEventWatcherFactory)(nil).Build), mgr, clusterName)
}

// MockMeshEventWatcherFactory is a mock of MeshEventWatcherFactory interface.
type MockMeshEventWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockMeshEventWatcherFactoryMockRecorder
}

// MockMeshEventWatcherFactoryMockRecorder is the mock recorder for MockMeshEventWatcherFactory.
type MockMeshEventWatcherFactoryMockRecorder struct {
	mock *MockMeshEventWatcherFactory
}

// NewMockMeshEventWatcherFactory creates a new mock instance.
func NewMockMeshEventWatcherFactory(ctrl *gomock.Controller) *MockMeshEventWatcherFactory {
	mock := &MockMeshEventWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockMeshEventWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshEventWatcherFactory) EXPECT() *MockMeshEventWatcherFactoryMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockMeshEventWatcherFactory) Build(mgr mc_manager.AsyncManager, clusterName string) controller1.MeshEventWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", mgr, clusterName)
	ret0, _ := ret[0].(controller1.MeshEventWatcher)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockMeshEventWatcherFactoryMockRecorder) Build(mgr, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockMeshEventWatcherFactory)(nil).Build), mgr, clusterName)
}

// MockMeshWorkloadEventWatcherFactory is a mock of MeshWorkloadEventWatcherFactory interface.
type MockMeshWorkloadEventWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadEventWatcherFactoryMockRecorder
}

// MockMeshWorkloadEventWatcherFactoryMockRecorder is the mock recorder for MockMeshWorkloadEventWatcherFactory.
type MockMeshWorkloadEventWatcherFactoryMockRecorder struct {
	mock *MockMeshWorkloadEventWatcherFactory
}

// NewMockMeshWorkloadEventWatcherFactory creates a new mock instance.
func NewMockMeshWorkloadEventWatcherFactory(ctrl *gomock.Controller) *MockMeshWorkloadEventWatcherFactory {
	mock := &MockMeshWorkloadEventWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadEventWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshWorkloadEventWatcherFactory) EXPECT() *MockMeshWorkloadEventWatcherFactoryMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockMeshWorkloadEventWatcherFactory) Build(mgr mc_manager.AsyncManager, clusterName string) controller1.MeshWorkloadEventWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", mgr, clusterName)
	ret0, _ := ret[0].(controller1.MeshWorkloadEventWatcher)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockMeshWorkloadEventWatcherFactoryMockRecorder) Build(mgr, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockMeshWorkloadEventWatcherFactory)(nil).Build), mgr, clusterName)
}

// MockServiceEventWatcherFactory is a mock of ServiceEventWatcherFactory interface.
type MockServiceEventWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockServiceEventWatcherFactoryMockRecorder
}

// MockServiceEventWatcherFactoryMockRecorder is the mock recorder for MockServiceEventWatcherFactory.
type MockServiceEventWatcherFactoryMockRecorder struct {
	mock *MockServiceEventWatcherFactory
}

// NewMockServiceEventWatcherFactory creates a new mock instance.
func NewMockServiceEventWatcherFactory(ctrl *gomock.Controller) *MockServiceEventWatcherFactory {
	mock := &MockServiceEventWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockServiceEventWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceEventWatcherFactory) EXPECT() *MockServiceEventWatcherFactoryMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockServiceEventWatcherFactory) Build(mgr mc_manager.AsyncManager, clusterName string) controller0.ServiceEventWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", mgr, clusterName)
	ret0, _ := ret[0].(controller0.ServiceEventWatcher)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockServiceEventWatcherFactoryMockRecorder) Build(mgr, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockServiceEventWatcherFactory)(nil).Build), mgr, clusterName)
}
