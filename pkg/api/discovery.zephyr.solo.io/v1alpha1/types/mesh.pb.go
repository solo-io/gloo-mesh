// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/service-mesh-hub/api/discovery/v1alpha1/mesh.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	types "github.com/solo-io/service-mesh-hub/pkg/api/core.zephyr.solo.io/v1alpha1/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//Meshes represent a currently registered service mesh.
type MeshSpec struct {
	// Types that are valid to be assigned to MeshType:
	//	*MeshSpec_Istio
	//	*MeshSpec_AwsAppMesh_
	//	*MeshSpec_Linkerd
	//	*MeshSpec_ConsulConnect
	MeshType isMeshSpec_MeshType `protobuf_oneof:"mesh_type"`
	// The cluster on which this mesh resides.
	Cluster              *types.ResourceRef `protobuf:"bytes,5,opt,name=cluster,proto3" json:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MeshSpec) Reset()         { *m = MeshSpec{} }
func (m *MeshSpec) String() string { return proto.CompactTextString(m) }
func (*MeshSpec) ProtoMessage()    {}
func (*MeshSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_345fdec2269fec48, []int{0}
}
func (m *MeshSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshSpec.Unmarshal(m, b)
}
func (m *MeshSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshSpec.Marshal(b, m, deterministic)
}
func (m *MeshSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshSpec.Merge(m, src)
}
func (m *MeshSpec) XXX_Size() int {
	return xxx_messageInfo_MeshSpec.Size(m)
}
func (m *MeshSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MeshSpec proto.InternalMessageInfo

type isMeshSpec_MeshType interface {
	isMeshSpec_MeshType()
	Equal(interface{}) bool
}

type MeshSpec_Istio struct {
	Istio *MeshSpec_IstioMesh `protobuf:"bytes,1,opt,name=istio,proto3,oneof" json:"istio,omitempty"`
}
type MeshSpec_AwsAppMesh_ struct {
	AwsAppMesh *MeshSpec_AwsAppMesh `protobuf:"bytes,2,opt,name=aws_app_mesh,json=awsAppMesh,proto3,oneof" json:"aws_app_mesh,omitempty"`
}
type MeshSpec_Linkerd struct {
	Linkerd *MeshSpec_LinkerdMesh `protobuf:"bytes,3,opt,name=linkerd,proto3,oneof" json:"linkerd,omitempty"`
}
type MeshSpec_ConsulConnect struct {
	ConsulConnect *MeshSpec_ConsulConnectMesh `protobuf:"bytes,4,opt,name=consul_connect,json=consulConnect,proto3,oneof" json:"consul_connect,omitempty"`
}

func (*MeshSpec_Istio) isMeshSpec_MeshType()         {}
func (*MeshSpec_AwsAppMesh_) isMeshSpec_MeshType()   {}
func (*MeshSpec_Linkerd) isMeshSpec_MeshType()       {}
func (*MeshSpec_ConsulConnect) isMeshSpec_MeshType() {}

func (m *MeshSpec) GetMeshType() isMeshSpec_MeshType {
	if m != nil {
		return m.MeshType
	}
	return nil
}

func (m *MeshSpec) GetIstio() *MeshSpec_IstioMesh {
	if x, ok := m.GetMeshType().(*MeshSpec_Istio); ok {
		return x.Istio
	}
	return nil
}

func (m *MeshSpec) GetAwsAppMesh() *MeshSpec_AwsAppMesh {
	if x, ok := m.GetMeshType().(*MeshSpec_AwsAppMesh_); ok {
		return x.AwsAppMesh
	}
	return nil
}

func (m *MeshSpec) GetLinkerd() *MeshSpec_LinkerdMesh {
	if x, ok := m.GetMeshType().(*MeshSpec_Linkerd); ok {
		return x.Linkerd
	}
	return nil
}

func (m *MeshSpec) GetConsulConnect() *MeshSpec_ConsulConnectMesh {
	if x, ok := m.GetMeshType().(*MeshSpec_ConsulConnect); ok {
		return x.ConsulConnect
	}
	return nil
}

func (m *MeshSpec) GetCluster() *types.ResourceRef {
	if m != nil {
		return m.Cluster
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MeshSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MeshSpec_Istio)(nil),
		(*MeshSpec_AwsAppMesh_)(nil),
		(*MeshSpec_Linkerd)(nil),
		(*MeshSpec_ConsulConnect)(nil),
	}
}

type MeshSpec_MeshInstallation struct {
	// Namespace in which the control plane has been installed.
	InstallationNamespace string `protobuf:"bytes,1,opt,name=installation_namespace,json=installationNamespace,proto3" json:"installation_namespace,omitempty"`
	//
	//version of the mesh which has been installed
	//Note that the version may be "latest"
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshSpec_MeshInstallation) Reset()         { *m = MeshSpec_MeshInstallation{} }
func (m *MeshSpec_MeshInstallation) String() string { return proto.CompactTextString(m) }
func (*MeshSpec_MeshInstallation) ProtoMessage()    {}
func (*MeshSpec_MeshInstallation) Descriptor() ([]byte, []int) {
	return fileDescriptor_345fdec2269fec48, []int{0, 0}
}
func (m *MeshSpec_MeshInstallation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshSpec_MeshInstallation.Unmarshal(m, b)
}
func (m *MeshSpec_MeshInstallation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshSpec_MeshInstallation.Marshal(b, m, deterministic)
}
func (m *MeshSpec_MeshInstallation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshSpec_MeshInstallation.Merge(m, src)
}
func (m *MeshSpec_MeshInstallation) XXX_Size() int {
	return xxx_messageInfo_MeshSpec_MeshInstallation.Size(m)
}
func (m *MeshSpec_MeshInstallation) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshSpec_MeshInstallation.DiscardUnknown(m)
}

var xxx_messageInfo_MeshSpec_MeshInstallation proto.InternalMessageInfo

func (m *MeshSpec_MeshInstallation) GetInstallationNamespace() string {
	if m != nil {
		return m.InstallationNamespace
	}
	return ""
}

func (m *MeshSpec_MeshInstallation) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// Mesh object representing an installed Istio control plane
type MeshSpec_IstioMesh struct {
	Installation         *MeshSpec_MeshInstallation      `protobuf:"bytes,1,opt,name=installation,proto3" json:"installation,omitempty"`
	CitadelInfo          *MeshSpec_IstioMesh_CitadelInfo `protobuf:"bytes,2,opt,name=citadel_info,json=citadelInfo,proto3" json:"citadel_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *MeshSpec_IstioMesh) Reset()         { *m = MeshSpec_IstioMesh{} }
func (m *MeshSpec_IstioMesh) String() string { return proto.CompactTextString(m) }
func (*MeshSpec_IstioMesh) ProtoMessage()    {}
func (*MeshSpec_IstioMesh) Descriptor() ([]byte, []int) {
	return fileDescriptor_345fdec2269fec48, []int{0, 1}
}
func (m *MeshSpec_IstioMesh) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshSpec_IstioMesh.Unmarshal(m, b)
}
func (m *MeshSpec_IstioMesh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshSpec_IstioMesh.Marshal(b, m, deterministic)
}
func (m *MeshSpec_IstioMesh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshSpec_IstioMesh.Merge(m, src)
}
func (m *MeshSpec_IstioMesh) XXX_Size() int {
	return xxx_messageInfo_MeshSpec_IstioMesh.Size(m)
}
func (m *MeshSpec_IstioMesh) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshSpec_IstioMesh.DiscardUnknown(m)
}

var xxx_messageInfo_MeshSpec_IstioMesh proto.InternalMessageInfo

func (m *MeshSpec_IstioMesh) GetInstallation() *MeshSpec_MeshInstallation {
	if m != nil {
		return m.Installation
	}
	return nil
}

func (m *MeshSpec_IstioMesh) GetCitadelInfo() *MeshSpec_IstioMesh_CitadelInfo {
	if m != nil {
		return m.CitadelInfo
	}
	return nil
}

type MeshSpec_IstioMesh_CitadelInfo struct {
	//
	//Istio trust domain used for https/spiffe identity.
	//https://spiffe.io/spiffe/concepts/#trust-domain
	//https://istio.io/docs/reference/glossary/#identity
	//
	//If empty will default to "cluster.local"
	TrustDomain string `protobuf:"bytes,1,opt,name=trust_domain,json=trustDomain,proto3" json:"trust_domain,omitempty"`
	//
	//istio-citadel namespace, used to determine identity for the Istio CA cert.
	//If empty will default to MeshInstallation.installation_namespace
	CitadelNamespace string `protobuf:"bytes,2,opt,name=citadel_namespace,json=citadelNamespace,proto3" json:"citadel_namespace,omitempty"`
	//
	//istio-citadel service account, used to determine identity for the Istio CA cert.
	//If empty will default to "istio-citadel"
	CitadelServiceAccount string   `protobuf:"bytes,3,opt,name=citadel_service_account,json=citadelServiceAccount,proto3" json:"citadel_service_account,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *MeshSpec_IstioMesh_CitadelInfo) Reset()         { *m = MeshSpec_IstioMesh_CitadelInfo{} }
func (m *MeshSpec_IstioMesh_CitadelInfo) String() string { return proto.CompactTextString(m) }
func (*MeshSpec_IstioMesh_CitadelInfo) ProtoMessage()    {}
func (*MeshSpec_IstioMesh_CitadelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_345fdec2269fec48, []int{0, 1, 0}
}
func (m *MeshSpec_IstioMesh_CitadelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshSpec_IstioMesh_CitadelInfo.Unmarshal(m, b)
}
func (m *MeshSpec_IstioMesh_CitadelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshSpec_IstioMesh_CitadelInfo.Marshal(b, m, deterministic)
}
func (m *MeshSpec_IstioMesh_CitadelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshSpec_IstioMesh_CitadelInfo.Merge(m, src)
}
func (m *MeshSpec_IstioMesh_CitadelInfo) XXX_Size() int {
	return xxx_messageInfo_MeshSpec_IstioMesh_CitadelInfo.Size(m)
}
func (m *MeshSpec_IstioMesh_CitadelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshSpec_IstioMesh_CitadelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MeshSpec_IstioMesh_CitadelInfo proto.InternalMessageInfo

func (m *MeshSpec_IstioMesh_CitadelInfo) GetTrustDomain() string {
	if m != nil {
		return m.TrustDomain
	}
	return ""
}

func (m *MeshSpec_IstioMesh_CitadelInfo) GetCitadelNamespace() string {
	if m != nil {
		return m.CitadelNamespace
	}
	return ""
}

func (m *MeshSpec_IstioMesh_CitadelInfo) GetCitadelServiceAccount() string {
	if m != nil {
		return m.CitadelServiceAccount
	}
	return ""
}

// Mesh object representing AWS App Mesh
type MeshSpec_AwsAppMesh struct {
	Installation *MeshSpec_MeshInstallation `protobuf:"bytes,1,opt,name=installation,proto3" json:"installation,omitempty"`
	// The AWS region the AWS App Mesh control plane resources exist in.
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshSpec_AwsAppMesh) Reset()         { *m = MeshSpec_AwsAppMesh{} }
func (m *MeshSpec_AwsAppMesh) String() string { return proto.CompactTextString(m) }
func (*MeshSpec_AwsAppMesh) ProtoMessage()    {}
func (*MeshSpec_AwsAppMesh) Descriptor() ([]byte, []int) {
	return fileDescriptor_345fdec2269fec48, []int{0, 2}
}
func (m *MeshSpec_AwsAppMesh) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshSpec_AwsAppMesh.Unmarshal(m, b)
}
func (m *MeshSpec_AwsAppMesh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshSpec_AwsAppMesh.Marshal(b, m, deterministic)
}
func (m *MeshSpec_AwsAppMesh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshSpec_AwsAppMesh.Merge(m, src)
}
func (m *MeshSpec_AwsAppMesh) XXX_Size() int {
	return xxx_messageInfo_MeshSpec_AwsAppMesh.Size(m)
}
func (m *MeshSpec_AwsAppMesh) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshSpec_AwsAppMesh.DiscardUnknown(m)
}

var xxx_messageInfo_MeshSpec_AwsAppMesh proto.InternalMessageInfo

func (m *MeshSpec_AwsAppMesh) GetInstallation() *MeshSpec_MeshInstallation {
	if m != nil {
		return m.Installation
	}
	return nil
}

func (m *MeshSpec_AwsAppMesh) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

// Mesh object representing an installed Linkerd control plane
type MeshSpec_LinkerdMesh struct {
	Installation *MeshSpec_MeshInstallation `protobuf:"bytes,1,opt,name=installation,proto3" json:"installation,omitempty"`
	// The cluster domain suffix this Linkerd mesh is configured with.
	// See https://linkerd.io/2/tasks/using-custom-domain/ for info
	ClusterDomain        string   `protobuf:"bytes,2,opt,name=cluster_domain,json=clusterDomain,proto3" json:"cluster_domain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshSpec_LinkerdMesh) Reset()         { *m = MeshSpec_LinkerdMesh{} }
func (m *MeshSpec_LinkerdMesh) String() string { return proto.CompactTextString(m) }
func (*MeshSpec_LinkerdMesh) ProtoMessage()    {}
func (*MeshSpec_LinkerdMesh) Descriptor() ([]byte, []int) {
	return fileDescriptor_345fdec2269fec48, []int{0, 3}
}
func (m *MeshSpec_LinkerdMesh) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshSpec_LinkerdMesh.Unmarshal(m, b)
}
func (m *MeshSpec_LinkerdMesh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshSpec_LinkerdMesh.Marshal(b, m, deterministic)
}
func (m *MeshSpec_LinkerdMesh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshSpec_LinkerdMesh.Merge(m, src)
}
func (m *MeshSpec_LinkerdMesh) XXX_Size() int {
	return xxx_messageInfo_MeshSpec_LinkerdMesh.Size(m)
}
func (m *MeshSpec_LinkerdMesh) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshSpec_LinkerdMesh.DiscardUnknown(m)
}

var xxx_messageInfo_MeshSpec_LinkerdMesh proto.InternalMessageInfo

func (m *MeshSpec_LinkerdMesh) GetInstallation() *MeshSpec_MeshInstallation {
	if m != nil {
		return m.Installation
	}
	return nil
}

func (m *MeshSpec_LinkerdMesh) GetClusterDomain() string {
	if m != nil {
		return m.ClusterDomain
	}
	return ""
}

type MeshSpec_ConsulConnectMesh struct {
	Installation         *MeshSpec_MeshInstallation `protobuf:"bytes,1,opt,name=installation,proto3" json:"installation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *MeshSpec_ConsulConnectMesh) Reset()         { *m = MeshSpec_ConsulConnectMesh{} }
func (m *MeshSpec_ConsulConnectMesh) String() string { return proto.CompactTextString(m) }
func (*MeshSpec_ConsulConnectMesh) ProtoMessage()    {}
func (*MeshSpec_ConsulConnectMesh) Descriptor() ([]byte, []int) {
	return fileDescriptor_345fdec2269fec48, []int{0, 4}
}
func (m *MeshSpec_ConsulConnectMesh) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshSpec_ConsulConnectMesh.Unmarshal(m, b)
}
func (m *MeshSpec_ConsulConnectMesh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshSpec_ConsulConnectMesh.Marshal(b, m, deterministic)
}
func (m *MeshSpec_ConsulConnectMesh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshSpec_ConsulConnectMesh.Merge(m, src)
}
func (m *MeshSpec_ConsulConnectMesh) XXX_Size() int {
	return xxx_messageInfo_MeshSpec_ConsulConnectMesh.Size(m)
}
func (m *MeshSpec_ConsulConnectMesh) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshSpec_ConsulConnectMesh.DiscardUnknown(m)
}

var xxx_messageInfo_MeshSpec_ConsulConnectMesh proto.InternalMessageInfo

func (m *MeshSpec_ConsulConnectMesh) GetInstallation() *MeshSpec_MeshInstallation {
	if m != nil {
		return m.Installation
	}
	return nil
}

type MeshStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshStatus) Reset()         { *m = MeshStatus{} }
func (m *MeshStatus) String() string { return proto.CompactTextString(m) }
func (*MeshStatus) ProtoMessage()    {}
func (*MeshStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_345fdec2269fec48, []int{1}
}
func (m *MeshStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshStatus.Unmarshal(m, b)
}
func (m *MeshStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshStatus.Marshal(b, m, deterministic)
}
func (m *MeshStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshStatus.Merge(m, src)
}
func (m *MeshStatus) XXX_Size() int {
	return xxx_messageInfo_MeshStatus.Size(m)
}
func (m *MeshStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MeshStatus proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MeshSpec)(nil), "discovery.zephyr.solo.io.MeshSpec")
	proto.RegisterType((*MeshSpec_MeshInstallation)(nil), "discovery.zephyr.solo.io.MeshSpec.MeshInstallation")
	proto.RegisterType((*MeshSpec_IstioMesh)(nil), "discovery.zephyr.solo.io.MeshSpec.IstioMesh")
	proto.RegisterType((*MeshSpec_IstioMesh_CitadelInfo)(nil), "discovery.zephyr.solo.io.MeshSpec.IstioMesh.CitadelInfo")
	proto.RegisterType((*MeshSpec_AwsAppMesh)(nil), "discovery.zephyr.solo.io.MeshSpec.AwsAppMesh")
	proto.RegisterType((*MeshSpec_LinkerdMesh)(nil), "discovery.zephyr.solo.io.MeshSpec.LinkerdMesh")
	proto.RegisterType((*MeshSpec_ConsulConnectMesh)(nil), "discovery.zephyr.solo.io.MeshSpec.ConsulConnectMesh")
	proto.RegisterType((*MeshStatus)(nil), "discovery.zephyr.solo.io.MeshStatus")
}

func init() {
	proto.RegisterFile("github.com/solo-io/service-mesh-hub/api/discovery/v1alpha1/mesh.proto", fileDescriptor_345fdec2269fec48)
}

var fileDescriptor_345fdec2269fec48 = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xdf, 0x6a, 0xd4, 0x4e,
	0x14, 0xc7, 0x7f, 0xdb, 0x9f, 0x6d, 0xcd, 0xc9, 0xb6, 0xb4, 0x83, 0xad, 0x21, 0x17, 0xa5, 0x16,
	0x04, 0xc1, 0x6e, 0x42, 0xad, 0x8a, 0x78, 0xd7, 0x3f, 0x82, 0x15, 0x15, 0x4c, 0x2f, 0x44, 0x45,
	0xc2, 0xec, 0xec, 0x6c, 0x32, 0x34, 0x3b, 0x33, 0xcc, 0x4c, 0xb6, 0x54, 0xf0, 0x11, 0xbc, 0xf4,
	0x1d, 0x7c, 0x21, 0x2f, 0xbc, 0xf5, 0x49, 0x24, 0x93, 0x49, 0x93, 0x56, 0x85, 0xf5, 0x62, 0xef,
	0x72, 0xce, 0x37, 0xe7, 0x93, 0xc3, 0xf7, 0x9c, 0x1c, 0x78, 0x96, 0x31, 0x93, 0x97, 0xc3, 0x88,
	0x88, 0x49, 0xac, 0x45, 0x21, 0x06, 0x4c, 0xc4, 0x9a, 0xaa, 0x29, 0x23, 0x74, 0x30, 0xa1, 0x3a,
	0x1f, 0xe4, 0xe5, 0x30, 0xc6, 0x92, 0xc5, 0x23, 0xa6, 0x89, 0x98, 0x52, 0x75, 0x11, 0x4f, 0xf7,
	0x70, 0x21, 0x73, 0xbc, 0x17, 0x57, 0x7a, 0x24, 0x95, 0x30, 0x02, 0x05, 0x97, 0x72, 0xf4, 0x89,
	0xca, 0xfc, 0x42, 0x45, 0x15, 0x2c, 0x62, 0x22, 0xdc, 0xfd, 0x23, 0x8d, 0x08, 0x45, 0x5b, 0x90,
	0xa2, 0xe3, 0x9a, 0x13, 0x6e, 0x65, 0x42, 0x64, 0x05, 0x8d, 0x6d, 0x34, 0x2c, 0xc7, 0xf1, 0xb9,
	0xc2, 0x52, 0x52, 0xa5, 0x9d, 0x7e, 0x2b, 0x13, 0x99, 0xb0, 0x8f, 0x71, 0xf5, 0x54, 0x67, 0x77,
	0xbe, 0x7b, 0x70, 0xf3, 0x15, 0xd5, 0xf9, 0xa9, 0xa4, 0x04, 0x1d, 0xc3, 0x22, 0xd3, 0x86, 0x89,
	0xa0, 0xb7, 0xdd, 0xbb, 0xe7, 0x3f, 0xd8, 0x8d, 0xfe, 0xd6, 0x5a, 0xd4, 0x94, 0x44, 0x27, 0xd5,
	0xfb, 0x55, 0xf4, 0xfc, 0xbf, 0xa4, 0x2e, 0x46, 0x6f, 0xa0, 0x8f, 0xcf, 0x75, 0x8a, 0xa5, 0x4c,
	0xab, 0xc6, 0x83, 0x05, 0x0b, 0x1b, 0xcc, 0x00, 0x3b, 0x38, 0xd7, 0x07, 0x52, 0x3a, 0x1a, 0xe0,
	0xcb, 0x08, 0xbd, 0x80, 0xe5, 0x82, 0xf1, 0x33, 0xaa, 0x46, 0xc1, 0xff, 0x96, 0x16, 0xcd, 0x40,
	0x7b, 0x59, 0x57, 0x38, 0x5c, 0x03, 0x40, 0x1f, 0x61, 0x95, 0x08, 0xae, 0xcb, 0x22, 0x25, 0x82,
	0x73, 0x4a, 0x4c, 0x70, 0xc3, 0x22, 0x1f, 0xce, 0x80, 0x3c, 0xb2, 0x85, 0x47, 0x75, 0x9d, 0x03,
	0xaf, 0x90, 0x6e, 0x12, 0x3d, 0x85, 0x65, 0x52, 0x94, 0xda, 0x50, 0x15, 0x2c, 0x5a, 0xee, 0x76,
	0x54, 0x4d, 0xec, 0x3a, 0x32, 0xa1, 0x5a, 0x94, 0x8a, 0xd0, 0x84, 0x8e, 0x93, 0xa6, 0x20, 0x24,
	0xb0, 0x56, 0x41, 0x4f, 0xb8, 0x36, 0xb8, 0x28, 0xb0, 0x61, 0x82, 0xa3, 0x47, 0xb0, 0xc9, 0x3a,
	0x71, 0xca, 0xf1, 0x84, 0x6a, 0x89, 0x09, 0xb5, 0x43, 0xf2, 0x92, 0x8d, 0xae, 0xfa, 0xba, 0x11,
	0x51, 0x00, 0xcb, 0x53, 0xaa, 0x34, 0x13, 0xdc, 0xfa, 0xef, 0x25, 0x4d, 0x18, 0xfe, 0x58, 0x00,
	0xef, 0x72, 0x6a, 0xe8, 0x2d, 0xf4, 0xbb, 0x00, 0x37, 0xf9, 0xfd, 0x19, 0xbc, 0xb8, 0xde, 0x69,
	0x72, 0x05, 0x84, 0x3e, 0x40, 0x9f, 0x30, 0x83, 0x47, 0xb4, 0x48, 0x19, 0x1f, 0x0b, 0xb7, 0x05,
	0x4f, 0xfe, 0x65, 0xa5, 0xa2, 0xa3, 0x1a, 0x70, 0xc2, 0xc7, 0x22, 0xf1, 0x49, 0x1b, 0x84, 0x5f,
	0x7b, 0xe0, 0x77, 0x44, 0x74, 0x07, 0xfa, 0x46, 0x95, 0xda, 0xa4, 0x23, 0x31, 0xc1, 0x8c, 0x3b,
	0x6b, 0x7c, 0x9b, 0x3b, 0xb6, 0x29, 0x74, 0x1f, 0xd6, 0x9b, 0x7e, 0x5a, 0x0b, 0x6b, 0x6b, 0xd6,
	0x9c, 0xd0, 0xba, 0xf7, 0x18, 0x6e, 0x37, 0x2f, 0xbb, 0x7f, 0x30, 0xc5, 0x84, 0x88, 0x92, 0x1b,
	0xbb, 0x7f, 0x5e, 0xb2, 0xe1, 0xe4, 0xd3, 0x5a, 0x3d, 0xa8, 0xc5, 0xf0, 0x33, 0x40, 0xbb, 0xc3,
	0xf3, 0xf3, 0x76, 0x13, 0x96, 0x14, 0xcd, 0xda, 0xd9, 0xba, 0x28, 0xfc, 0xd2, 0x03, 0xbf, 0xb3,
	0xf5, 0xf3, 0x6b, 0xe0, 0x2e, 0xac, 0xba, 0x9d, 0x6d, 0x1c, 0xaf, 0x1b, 0x59, 0x71, 0xd9, 0xda,
	0xf3, 0xb0, 0x80, 0xf5, 0xdf, 0xfe, 0x98, 0xb9, 0x35, 0x75, 0xe8, 0x83, 0x57, 0xdd, 0x9b, 0xd4,
	0x5c, 0x48, 0xba, 0xd3, 0x07, 0xb0, 0x75, 0x06, 0x9b, 0x52, 0x1f, 0xbe, 0xfb, 0xf6, 0x73, 0xab,
	0xf7, 0xfe, 0x74, 0x96, 0x83, 0x2d, 0xcf, 0xb2, 0xab, 0x47, 0xfb, 0x5a, 0x3b, 0xed, 0xe9, 0xad,
	0xbe, 0xa3, 0x87, 0x4b, 0xf6, 0x8e, 0xee, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xe0, 0xe9, 0xa1,
	0x32, 0x0e, 0x06, 0x00, 0x00,
}

func (this *MeshSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshSpec)
	if !ok {
		that2, ok := that.(MeshSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.MeshType == nil {
		if this.MeshType != nil {
			return false
		}
	} else if this.MeshType == nil {
		return false
	} else if !this.MeshType.Equal(that1.MeshType) {
		return false
	}
	if !this.Cluster.Equal(that1.Cluster) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshSpec_Istio) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshSpec_Istio)
	if !ok {
		that2, ok := that.(MeshSpec_Istio)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Istio.Equal(that1.Istio) {
		return false
	}
	return true
}
func (this *MeshSpec_AwsAppMesh_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshSpec_AwsAppMesh_)
	if !ok {
		that2, ok := that.(MeshSpec_AwsAppMesh_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsAppMesh.Equal(that1.AwsAppMesh) {
		return false
	}
	return true
}
func (this *MeshSpec_Linkerd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshSpec_Linkerd)
	if !ok {
		that2, ok := that.(MeshSpec_Linkerd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Linkerd.Equal(that1.Linkerd) {
		return false
	}
	return true
}
func (this *MeshSpec_ConsulConnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshSpec_ConsulConnect)
	if !ok {
		that2, ok := that.(MeshSpec_ConsulConnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConsulConnect.Equal(that1.ConsulConnect) {
		return false
	}
	return true
}
func (this *MeshSpec_MeshInstallation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshSpec_MeshInstallation)
	if !ok {
		that2, ok := that.(MeshSpec_MeshInstallation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InstallationNamespace != that1.InstallationNamespace {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshSpec_IstioMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshSpec_IstioMesh)
	if !ok {
		that2, ok := that.(MeshSpec_IstioMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Installation.Equal(that1.Installation) {
		return false
	}
	if !this.CitadelInfo.Equal(that1.CitadelInfo) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshSpec_IstioMesh_CitadelInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshSpec_IstioMesh_CitadelInfo)
	if !ok {
		that2, ok := that.(MeshSpec_IstioMesh_CitadelInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TrustDomain != that1.TrustDomain {
		return false
	}
	if this.CitadelNamespace != that1.CitadelNamespace {
		return false
	}
	if this.CitadelServiceAccount != that1.CitadelServiceAccount {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshSpec_AwsAppMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshSpec_AwsAppMesh)
	if !ok {
		that2, ok := that.(MeshSpec_AwsAppMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Installation.Equal(that1.Installation) {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshSpec_LinkerdMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshSpec_LinkerdMesh)
	if !ok {
		that2, ok := that.(MeshSpec_LinkerdMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Installation.Equal(that1.Installation) {
		return false
	}
	if this.ClusterDomain != that1.ClusterDomain {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshSpec_ConsulConnectMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshSpec_ConsulConnectMesh)
	if !ok {
		that2, ok := that.(MeshSpec_ConsulConnectMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Installation.Equal(that1.Installation) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshStatus)
	if !ok {
		that2, ok := that.(MeshStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
