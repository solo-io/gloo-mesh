/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MeshWorkloadLister helps list MeshWorkloads.
type MeshWorkloadLister interface {
	// List lists all MeshWorkloads in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MeshWorkload, err error)
	// MeshWorkloads returns an object that can list and get MeshWorkloads.
	MeshWorkloads(namespace string) MeshWorkloadNamespaceLister
	MeshWorkloadListerExpansion
}

// meshWorkloadLister implements the MeshWorkloadLister interface.
type meshWorkloadLister struct {
	indexer cache.Indexer
}

// NewMeshWorkloadLister returns a new MeshWorkloadLister.
func NewMeshWorkloadLister(indexer cache.Indexer) MeshWorkloadLister {
	return &meshWorkloadLister{indexer: indexer}
}

// List lists all MeshWorkloads in the indexer.
func (s *meshWorkloadLister) List(selector labels.Selector) (ret []*v1alpha1.MeshWorkload, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MeshWorkload))
	})
	return ret, err
}

// MeshWorkloads returns an object that can list and get MeshWorkloads.
func (s *meshWorkloadLister) MeshWorkloads(namespace string) MeshWorkloadNamespaceLister {
	return meshWorkloadNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MeshWorkloadNamespaceLister helps list and get MeshWorkloads.
type MeshWorkloadNamespaceLister interface {
	// List lists all MeshWorkloads in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MeshWorkload, err error)
	// Get retrieves the MeshWorkload from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MeshWorkload, error)
	MeshWorkloadNamespaceListerExpansion
}

// meshWorkloadNamespaceLister implements the MeshWorkloadNamespaceLister
// interface.
type meshWorkloadNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MeshWorkloads in the indexer for a given namespace.
func (s meshWorkloadNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MeshWorkload, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MeshWorkload))
	})
	return ret, err
}

// Get retrieves the MeshWorkload from the indexer for a given namespace and name.
func (s meshWorkloadNamespaceLister) Get(name string) (*v1alpha1.MeshWorkload, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("meshworkload"), name)
	}
	return obj.(*v1alpha1.MeshWorkload), nil
}
