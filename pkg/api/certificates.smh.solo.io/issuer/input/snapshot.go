// Code generated by skv2. DO NOT EDIT.

// The Input Snapshot contains the set of all:
// * CertificateRequests
// read from a given cluster or set of clusters, across all namespaces.
//
// A snapshot can be constructed from either a single Manager (for a single cluster)
// or a ClusterWatcher (for multiple clusters) using the SnapshotBuilder.
//
// Resources in a MultiCluster snapshot will have their ClusterName set to the
// name of the cluster from which the resource was read.

package input

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/go-multierror"
	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"sigs.k8s.io/controller-runtime/pkg/client"

	certificates_smh_solo_io_v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/certificates.smh.solo.io/v1alpha2"
	certificates_smh_solo_io_v1alpha2_sets "github.com/solo-io/service-mesh-hub/pkg/api/certificates.smh.solo.io/v1alpha2/sets"
)

// the snapshot of input resources consumed by translation
type Snapshot interface {

	// return the set of input CertificateRequests
	CertificateRequests() certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet
	// update the status of all input objects which support
	// the Status subresource
	SyncStatuses(ctx context.Context, c client.Client) error
	// serialize the entire snapshot as JSON
	MarshalJSON() ([]byte, error)
}

type snapshot struct {
	name string

	certificateRequests certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet
}

func NewSnapshot(
	name string,

	certificateRequests certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet,

) Snapshot {
	return &snapshot{
		name: name,

		certificateRequests: certificateRequests,
	}
}

func (s snapshot) CertificateRequests() certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet {
	return s.certificateRequests
}
func (s snapshot) SyncStatuses(ctx context.Context, c client.Client) error {

	for _, obj := range s.CertificateRequests().List() {
		if _, err := controllerutils.UpdateStatus(ctx, c, obj); err != nil {
			return err
		}
	}
	return nil
}

func (s snapshot) MarshalJSON() ([]byte, error) {
	snapshotMap := map[string]interface{}{"name": s.name}

	snapshotMap["certificateRequests"] = s.certificateRequests.List()
	return json.Marshal(snapshotMap)
}

// builds the input snapshot from API Clients.
// Two types of builders are available:
// a builder for snapshots of resources across multiple clusters
// a builder for snapshots of resources within a single cluster
type Builder interface {
	BuildSnapshot(ctx context.Context, name string, opts BuildOptions) (Snapshot, error)
}

// Options for building a snapshot
type BuildOptions struct {

	// List options for composing a snapshot from CertificateRequests
	CertificateRequests []client.ListOption
}

// build a snapshot from resources across multiple clusters
type multiClusterBuilder struct {
	clusters multicluster.ClusterSet

	certificateRequests certificates_smh_solo_io_v1alpha2.MulticlusterCertificateRequestClient
}

// Produces snapshots of resources across all clusters defined in the ClusterSet
func NewMultiClusterBuilder(
	clusters multicluster.ClusterSet,
	client multicluster.Client,
) Builder {
	return &multiClusterBuilder{
		clusters: clusters,

		certificateRequests: certificates_smh_solo_io_v1alpha2.NewMulticlusterCertificateRequestClient(client),
	}
}

func (b *multiClusterBuilder) BuildSnapshot(ctx context.Context, name string, opts BuildOptions) (Snapshot, error) {

	certificateRequests := certificates_smh_solo_io_v1alpha2_sets.NewCertificateRequestSet()

	var errs error

	for _, cluster := range b.clusters.ListClusters() {

		if err := b.insertCertificateRequestsFromCluster(ctx, cluster, certificateRequests, opts.CertificateRequests...); err != nil {
			errs = multierror.Append(errs, err)
		}

	}

	outputSnap := NewSnapshot(
		name,

		certificateRequests,
	)

	return outputSnap, errs
}

func (b *multiClusterBuilder) insertCertificateRequestsFromCluster(ctx context.Context, cluster string, certificateRequests certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet, opts ...client.ListOption) error {
	certificateRequestClient, err := b.certificateRequests.Cluster(cluster)
	if err != nil {
		return err
	}

	certificateRequestList, err := certificateRequestClient.ListCertificateRequest(ctx, opts...)
	if err != nil {
		return err
	}

	for _, item := range certificateRequestList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		certificateRequests.Insert(&item)
	}

	return nil
}

// build a snapshot from resources in a single cluster
type singleClusterBuilder struct {
	certificateRequests certificates_smh_solo_io_v1alpha2.CertificateRequestClient
}

// Produces snapshots of resources across all clusters defined in the ClusterSet
func NewSingleClusterBuilder(
	client client.Client,
) Builder {
	return &singleClusterBuilder{

		certificateRequests: certificates_smh_solo_io_v1alpha2.NewCertificateRequestClient(client),
	}
}

func (b *singleClusterBuilder) BuildSnapshot(ctx context.Context, name string, opts BuildOptions) (Snapshot, error) {

	certificateRequests := certificates_smh_solo_io_v1alpha2_sets.NewCertificateRequestSet()

	var errs error

	if err := b.insertCertificateRequests(ctx, certificateRequests, opts.CertificateRequests...); err != nil {
		errs = multierror.Append(errs, err)
	}

	outputSnap := NewSnapshot(
		name,

		certificateRequests,
	)

	return outputSnap, errs
}

func (b *singleClusterBuilder) insertCertificateRequests(ctx context.Context, certificateRequests certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet, opts ...client.ListOption) error {
	certificateRequestList, err := b.certificateRequests.ListCertificateRequest(ctx, opts...)
	if err != nil {
		return err
	}

	for _, item := range certificateRequestList.Items {
		item := item // pike
		certificateRequests.Insert(&item)
	}

	return nil
}
