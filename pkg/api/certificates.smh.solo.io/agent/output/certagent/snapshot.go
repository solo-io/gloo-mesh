// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./snapshot.go -destination mocks/snapshot.go

// Definitions for Output Snapshots
package certagent

import (
	"context"
	"encoding/json"
	"sort"

	"github.com/solo-io/go-utils/contextutils"

	"github.com/rotisserie/eris"
	"github.com/solo-io/skv2/contrib/pkg/output"
	"github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	"sigs.k8s.io/controller-runtime/pkg/client"

	certificates_smh_solo_io_v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/certificates.smh.solo.io/v1alpha2"
	certificates_smh_solo_io_v1alpha2_sets "github.com/solo-io/service-mesh-hub/pkg/api/certificates.smh.solo.io/v1alpha2/sets"

	v1_sets "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/sets"
	v1 "k8s.io/api/core/v1"
)

// this error can occur if constructing a Partitioned Snapshot from a resource
// that is missing the partition label
var MissingRequiredLabelError = func(labelKey, resourceKind string, obj ezkube.ResourceId) error {
	return eris.Errorf("expected label %v not on labels of %v %v", labelKey, resourceKind, sets.Key(obj))
}

// the snapshot of output resources produced by a translation
type Snapshot interface {

	// return the set of CertificateRequests with a given set of labels
	CertificateRequests() []LabeledCertificateRequestSet
	// return the set of Secrets with a given set of labels
	Secrets() []LabeledSecretSet

	// apply the snapshot to the local cluster, garbage collecting stale resources
	ApplyLocalCluster(ctx context.Context, clusterClient client.Client, errHandler output.ErrorHandler)

	// apply resources from the snapshot across multiple clusters, garbage collecting stale resources
	ApplyMultiCluster(ctx context.Context, multiClusterClient multicluster.Client, errHandler output.ErrorHandler)

	// serialize the entire snapshot as JSON
	MarshalJSON() ([]byte, error)
}

type snapshot struct {
	name string

	certificateRequests []LabeledCertificateRequestSet
	secrets             []LabeledSecretSet
	clusters            []string
}

func NewSnapshot(
	name string,

	certificateRequests []LabeledCertificateRequestSet,
	secrets []LabeledSecretSet,
	clusters ...string, // the set of clusters to apply the snapshot to. only required for multicluster snapshots.
) Snapshot {
	return &snapshot{
		name: name,

		certificateRequests: certificateRequests,
		secrets:             secrets,
		clusters:            clusters,
	}
}

// automatically partitions the input resources
// by the presence of the provided label.
func NewLabelPartitionedSnapshot(
	name,
	labelKey string, // the key by which to partition the resources

	certificateRequests certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet,

	secrets v1_sets.SecretSet,
	clusters ...string, // the set of clusters to apply the snapshot to. only required for multicluster snapshots.
) (Snapshot, error) {

	partitionedCertificateRequests, err := partitionCertificateRequestsByLabel(labelKey, certificateRequests)
	if err != nil {
		return nil, err
	}
	partitionedSecrets, err := partitionSecretsByLabel(labelKey, secrets)
	if err != nil {
		return nil, err
	}

	return NewSnapshot(
		name,

		partitionedCertificateRequests,
		partitionedSecrets,
		clusters...,
	), nil
}

// simplified constructor for a snapshot
// with a single label partition (i.e. all resources share a single set of labels).
func NewSinglePartitionedSnapshot(
	name string,
	snapshotLabels map[string]string, // a single set of labels shared by all resources

	certificateRequests certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet,

	secrets v1_sets.SecretSet,
	clusters ...string, // the set of clusters to apply the snapshot to. only required for multicluster snapshots.
) (Snapshot, error) {

	labeledCertificateRequests, err := NewLabeledCertificateRequestSet(certificateRequests, snapshotLabels)
	if err != nil {
		return nil, err
	}
	labeledSecrets, err := NewLabeledSecretSet(secrets, snapshotLabels)
	if err != nil {
		return nil, err
	}

	return NewSnapshot(
		name,

		[]LabeledCertificateRequestSet{labeledCertificateRequests},
		[]LabeledSecretSet{labeledSecrets},
		clusters...,
	), nil
}

// apply the desired resources to the cluster state; remove stale resources where necessary
func (s *snapshot) ApplyLocalCluster(ctx context.Context, cli client.Client, errHandler output.ErrorHandler) {
	var genericLists []output.ResourceList

	for _, outputSet := range s.certificateRequests {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.secrets {
		genericLists = append(genericLists, outputSet.Generic())
	}

	output.Snapshot{
		Name:        s.name,
		ListsToSync: genericLists,
	}.SyncLocalCluster(ctx, cli, errHandler)
}

// apply the desired resources to multiple cluster states; remove stale resources where necessary
func (s *snapshot) ApplyMultiCluster(ctx context.Context, multiClusterClient multicluster.Client, errHandler output.ErrorHandler) {
	var genericLists []output.ResourceList

	for _, outputSet := range s.certificateRequests {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.secrets {
		genericLists = append(genericLists, outputSet.Generic())
	}

	output.Snapshot{
		Name:        s.name,
		Clusters:    s.clusters,
		ListsToSync: genericLists,
	}.SyncMultiCluster(ctx, multiClusterClient, errHandler)
}

func partitionCertificateRequestsByLabel(labelKey string, set certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet) ([]LabeledCertificateRequestSet, error) {
	setsByLabel := map[string]certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet{}

	for _, obj := range set.List() {
		if obj.Labels == nil {
			return nil, MissingRequiredLabelError(labelKey, "CertificateRequest", obj)
		}
		labelValue := obj.Labels[labelKey]
		if labelValue == "" {
			return nil, MissingRequiredLabelError(labelKey, "CertificateRequest", obj)
		}

		setForValue, ok := setsByLabel[labelValue]
		if !ok {
			setForValue = certificates_smh_solo_io_v1alpha2_sets.NewCertificateRequestSet()
			setsByLabel[labelValue] = setForValue
		}
		setForValue.Insert(obj)
	}

	// partition by label key
	var partitionedCertificateRequests []LabeledCertificateRequestSet

	for labelValue, setForValue := range setsByLabel {
		labels := map[string]string{labelKey: labelValue}

		partitionedSet, err := NewLabeledCertificateRequestSet(setForValue, labels)
		if err != nil {
			return nil, err
		}

		partitionedCertificateRequests = append(partitionedCertificateRequests, partitionedSet)
	}

	// sort for idempotency
	sort.SliceStable(partitionedCertificateRequests, func(i, j int) bool {
		leftLabelValue := partitionedCertificateRequests[i].Labels()[labelKey]
		rightLabelValue := partitionedCertificateRequests[j].Labels()[labelKey]
		return leftLabelValue < rightLabelValue
	})

	return partitionedCertificateRequests, nil
}

func partitionSecretsByLabel(labelKey string, set v1_sets.SecretSet) ([]LabeledSecretSet, error) {
	setsByLabel := map[string]v1_sets.SecretSet{}

	for _, obj := range set.List() {
		if obj.Labels == nil {
			return nil, MissingRequiredLabelError(labelKey, "Secret", obj)
		}
		labelValue := obj.Labels[labelKey]
		if labelValue == "" {
			return nil, MissingRequiredLabelError(labelKey, "Secret", obj)
		}

		setForValue, ok := setsByLabel[labelValue]
		if !ok {
			setForValue = v1_sets.NewSecretSet()
			setsByLabel[labelValue] = setForValue
		}
		setForValue.Insert(obj)
	}

	// partition by label key
	var partitionedSecrets []LabeledSecretSet

	for labelValue, setForValue := range setsByLabel {
		labels := map[string]string{labelKey: labelValue}

		partitionedSet, err := NewLabeledSecretSet(setForValue, labels)
		if err != nil {
			return nil, err
		}

		partitionedSecrets = append(partitionedSecrets, partitionedSet)
	}

	// sort for idempotency
	sort.SliceStable(partitionedSecrets, func(i, j int) bool {
		leftLabelValue := partitionedSecrets[i].Labels()[labelKey]
		rightLabelValue := partitionedSecrets[j].Labels()[labelKey]
		return leftLabelValue < rightLabelValue
	})

	return partitionedSecrets, nil
}

func (s snapshot) CertificateRequests() []LabeledCertificateRequestSet {
	return s.certificateRequests
}

func (s snapshot) Secrets() []LabeledSecretSet {
	return s.secrets
}

func (s snapshot) MarshalJSON() ([]byte, error) {
	snapshotMap := map[string]interface{}{"name": s.name}

	certificateRequestSet := certificates_smh_solo_io_v1alpha2_sets.NewCertificateRequestSet()
	for _, set := range s.certificateRequests {
		certificateRequestSet = certificateRequestSet.Union(set.Set())
	}
	snapshotMap["certificateRequests"] = certificateRequestSet.List()

	secretSet := v1_sets.NewSecretSet()
	for _, set := range s.secrets {
		secretSet = secretSet.Union(set.Set())
	}
	snapshotMap["secrets"] = secretSet.List()

	return json.Marshal(snapshotMap)
}

// LabeledCertificateRequestSet represents a set of certificateRequests
// which share a common set of labels.
// These labels are used to find diffs between CertificateRequestSets.
type LabeledCertificateRequestSet interface {
	// returns the set of Labels shared by this CertificateRequestSet
	Labels() map[string]string

	// returns the set of CertificateRequestes with the given labels
	Set() certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet

	// converts the set to a generic format which can be applied by the Snapshot.Apply functions
	Generic() output.ResourceList
}

type labeledCertificateRequestSet struct {
	set    certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet
	labels map[string]string
}

func NewLabeledCertificateRequestSet(set certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet, labels map[string]string) (LabeledCertificateRequestSet, error) {
	// validate that each CertificateRequest contains the labels, else this is not a valid LabeledCertificateRequestSet
	for _, item := range set.List() {
		for k, v := range labels {
			// k=v must be present in the item
			if item.Labels[k] != v {
				return nil, eris.Errorf("internal error: %v=%v missing on CertificateRequest %v", k, v, item.Name)
			}
		}
	}

	return &labeledCertificateRequestSet{set: set, labels: labels}, nil
}

func (l *labeledCertificateRequestSet) Labels() map[string]string {
	return l.labels
}

func (l *labeledCertificateRequestSet) Set() certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet {
	return l.set
}

func (l labeledCertificateRequestSet) Generic() output.ResourceList {
	var desiredResources []ezkube.Object
	for _, desired := range l.set.List() {
		desiredResources = append(desiredResources, desired)
	}

	// enable list func for garbage collection
	listFunc := func(ctx context.Context, cli client.Client) ([]ezkube.Object, error) {
		var list certificates_smh_solo_io_v1alpha2.CertificateRequestList
		if err := cli.List(ctx, &list, client.MatchingLabels(l.labels)); err != nil {
			return nil, err
		}
		var items []ezkube.Object
		for _, item := range list.Items {
			item := item // pike
			items = append(items, &item)
		}
		return items, nil
	}

	return output.ResourceList{
		Resources:    desiredResources,
		ListFunc:     listFunc,
		ResourceKind: "CertificateRequest",
	}
}

// LabeledSecretSet represents a set of secrets
// which share a common set of labels.
// These labels are used to find diffs between SecretSets.
type LabeledSecretSet interface {
	// returns the set of Labels shared by this SecretSet
	Labels() map[string]string

	// returns the set of Secretes with the given labels
	Set() v1_sets.SecretSet

	// converts the set to a generic format which can be applied by the Snapshot.Apply functions
	Generic() output.ResourceList
}

type labeledSecretSet struct {
	set    v1_sets.SecretSet
	labels map[string]string
}

func NewLabeledSecretSet(set v1_sets.SecretSet, labels map[string]string) (LabeledSecretSet, error) {
	// validate that each Secret contains the labels, else this is not a valid LabeledSecretSet
	for _, item := range set.List() {
		for k, v := range labels {
			// k=v must be present in the item
			if item.Labels[k] != v {
				return nil, eris.Errorf("internal error: %v=%v missing on Secret %v", k, v, item.Name)
			}
		}
	}

	return &labeledSecretSet{set: set, labels: labels}, nil
}

func (l *labeledSecretSet) Labels() map[string]string {
	return l.labels
}

func (l *labeledSecretSet) Set() v1_sets.SecretSet {
	return l.set
}

func (l labeledSecretSet) Generic() output.ResourceList {
	var desiredResources []ezkube.Object
	for _, desired := range l.set.List() {
		desiredResources = append(desiredResources, desired)
	}

	// enable list func for garbage collection
	listFunc := func(ctx context.Context, cli client.Client) ([]ezkube.Object, error) {
		var list v1.SecretList
		if err := cli.List(ctx, &list, client.MatchingLabels(l.labels)); err != nil {
			return nil, err
		}
		var items []ezkube.Object
		for _, item := range list.Items {
			item := item // pike
			items = append(items, &item)
		}
		return items, nil
	}

	return output.ResourceList{
		Resources:    desiredResources,
		ListFunc:     listFunc,
		ResourceKind: "Secret",
	}
}

type builder struct {
	ctx      context.Context
	name     string
	clusters []string

	certificateRequests certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet

	secrets v1_sets.SecretSet
}

func NewBuilder(ctx context.Context, name string) *builder {
	return &builder{
		ctx:  ctx,
		name: name,

		certificateRequests: certificates_smh_solo_io_v1alpha2_sets.NewCertificateRequestSet(),

		secrets: v1_sets.NewSecretSet(),
	}
}

// the output Builder uses a builder pattern to allow
// iteratively collecting outputs before producing a final snapshot
type Builder interface {

	// add CertificateRequests to the collected outputs
	AddCertificateRequests(certificateRequests ...*certificates_smh_solo_io_v1alpha2.CertificateRequest)

	// get the collected CertificateRequests
	GetCertificateRequests() certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet

	// add Secrets to the collected outputs
	AddSecrets(secrets ...*v1.Secret)

	// get the collected Secrets
	GetSecrets() v1_sets.SecretSet

	// build the collected outputs into a label-partitioned snapshot
	BuildLabelPartitionedSnapshot(labelKey string) (Snapshot, error)

	// build the collected outputs into a snapshot with a single partition
	BuildSinglePartitionedSnapshot(snapshotLabels map[string]string) (Snapshot, error)

	// add a cluster to the collected clusters.
	// this can be used to collect clusters for use with MultiCluster snapshots.
	AddCluster(cluster string)
}

func (b *builder) AddCertificateRequests(certificateRequests ...*certificates_smh_solo_io_v1alpha2.CertificateRequest) {
	for _, obj := range certificateRequests {
		if obj == nil {
			continue
		}
		contextutils.LoggerFrom(b.ctx).Debugf("added output CertificateRequest %v", sets.Key(obj))
		b.certificateRequests.Insert(obj)
	}
}
func (b *builder) AddSecrets(secrets ...*v1.Secret) {
	for _, obj := range secrets {
		if obj == nil {
			continue
		}
		contextutils.LoggerFrom(b.ctx).Debugf("added output Secret %v", sets.Key(obj))
		b.secrets.Insert(obj)
	}
}

func (b *builder) GetCertificateRequests() certificates_smh_solo_io_v1alpha2_sets.CertificateRequestSet {
	return b.certificateRequests
}

func (b *builder) GetSecrets() v1_sets.SecretSet {
	return b.secrets
}

func (b *builder) BuildLabelPartitionedSnapshot(labelKey string) (Snapshot, error) {
	return NewLabelPartitionedSnapshot(
		b.name,
		labelKey,

		b.certificateRequests,

		b.secrets,
		b.clusters...,
	)
}

func (b *builder) BuildSinglePartitionedSnapshot(snapshotLabels map[string]string) (Snapshot, error) {
	return NewSinglePartitionedSnapshot(
		b.name,
		snapshotLabels,

		b.certificateRequests,

		b.secrets,
		b.clusters...,
	)
}

func (b *builder) AddCluster(cluster string) {
	b.clusters = append(b.clusters, cluster)
}
