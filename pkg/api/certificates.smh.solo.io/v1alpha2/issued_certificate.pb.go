// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/service-mesh-hub/api/certificates/issued_certificate.proto

package v1alpha2

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//IssuedCertificates are used to issue SSL certificates
//to remote Kubernetes clusters from a central (out-of-cluster) Certificate Authority.
//
//When an IssuedCertificate is created, a certificate is issued to a remote cluster by a central Certificate Authority via
//the following workflow:
//- The Certificate Issuer creates the IssuedCertificate resource on the remote cluster
//- The Certificate Signature Requesting Agent installed to the remote cluster generates
//a Certificate Signing Request and writes it to the status of the IssuedCertificate
//- Finally, the Certificate Issuer generates signed a certificate for the CSR and writes
//it back as Secret in the remote cluster.
//
//Shared trust can therefore be established across clusters without requiring
//private keys to ever leave the node.
type IssuedCertificateSpec struct {
	//
	//list of hostnames and IPs to generate a certificate for.
	//This can also be set to the identity running the workload,
	//like kubernetes service account.
	//
	//Generally for an Istio CA this will take the form `spiffe://cluster.local/ns/istio-system/sa/citadel`.
	//
	//"cluster.local" may be replaced by the root of trust domain for the mesh.
	Hosts []string `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// Organization for this certificate.
	Org string `protobuf:"bytes,2,opt,name=org,proto3" json:"org,omitempty"`
	// the secret containing the SSL certificate to be generated for this IssuedCertificate
	SecretRef            *v1.ObjectRef `protobuf:"bytes,3,opt,name=secret_ref,json=secretRef,proto3" json:"secret_ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *IssuedCertificateSpec) Reset()         { *m = IssuedCertificateSpec{} }
func (m *IssuedCertificateSpec) String() string { return proto.CompactTextString(m) }
func (*IssuedCertificateSpec) ProtoMessage()    {}
func (*IssuedCertificateSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4866f21673c5e5b, []int{0}
}
func (m *IssuedCertificateSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssuedCertificateSpec.Unmarshal(m, b)
}
func (m *IssuedCertificateSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssuedCertificateSpec.Marshal(b, m, deterministic)
}
func (m *IssuedCertificateSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuedCertificateSpec.Merge(m, src)
}
func (m *IssuedCertificateSpec) XXX_Size() int {
	return xxx_messageInfo_IssuedCertificateSpec.Size(m)
}
func (m *IssuedCertificateSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuedCertificateSpec.DiscardUnknown(m)
}

var xxx_messageInfo_IssuedCertificateSpec proto.InternalMessageInfo

func (m *IssuedCertificateSpec) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *IssuedCertificateSpec) GetOrg() string {
	if m != nil {
		return m.Org
	}
	return ""
}

func (m *IssuedCertificateSpec) GetSecretRef() *v1.ObjectRef {
	if m != nil {
		return m.SecretRef
	}
	return nil
}

// the IssuedCertificate status is written by the CertificateRequesting agent
type IssuedCertificateStatus struct {
	// The most recent generation observed in the the IssuedCertificate metadata.
	// if the observedGeneration does not match generation, the Certificate Requesting Agent has not processed the most
	// recent version of this IssuedCertificate.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// any errors observed which prevented the IssuedCertificate from being processed.
	// if errors is empty, the request has been processed successfully
	Errors []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// the name of the CertificateRequest containing the Certificate Signing Request,
	// generated for the IssuedCertificate.
	CertificateRequestName string   `protobuf:"bytes,3,opt,name=certificate_request_name,json=certificateRequestName,proto3" json:"certificate_request_name,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *IssuedCertificateStatus) Reset()         { *m = IssuedCertificateStatus{} }
func (m *IssuedCertificateStatus) String() string { return proto.CompactTextString(m) }
func (*IssuedCertificateStatus) ProtoMessage()    {}
func (*IssuedCertificateStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4866f21673c5e5b, []int{1}
}
func (m *IssuedCertificateStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssuedCertificateStatus.Unmarshal(m, b)
}
func (m *IssuedCertificateStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssuedCertificateStatus.Marshal(b, m, deterministic)
}
func (m *IssuedCertificateStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuedCertificateStatus.Merge(m, src)
}
func (m *IssuedCertificateStatus) XXX_Size() int {
	return xxx_messageInfo_IssuedCertificateStatus.Size(m)
}
func (m *IssuedCertificateStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuedCertificateStatus.DiscardUnknown(m)
}

var xxx_messageInfo_IssuedCertificateStatus proto.InternalMessageInfo

func (m *IssuedCertificateStatus) GetObservedGeneration() int64 {
	if m != nil {
		return m.ObservedGeneration
	}
	return 0
}

func (m *IssuedCertificateStatus) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *IssuedCertificateStatus) GetCertificateRequestName() string {
	if m != nil {
		return m.CertificateRequestName
	}
	return ""
}

func init() {
	proto.RegisterType((*IssuedCertificateSpec)(nil), "certificates.smh.solo.io.IssuedCertificateSpec")
	proto.RegisterType((*IssuedCertificateStatus)(nil), "certificates.smh.solo.io.IssuedCertificateStatus")
}

func init() {
	proto.RegisterFile("github.com/solo-io/service-mesh-hub/api/certificates/issued_certificate.proto", fileDescriptor_f4866f21673c5e5b)
}

var fileDescriptor_f4866f21673c5e5b = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x55, 0x1a, 0x51, 0x29, 0xe6, 0x82, 0x4c, 0x29, 0x51, 0x85, 0x4a, 0xd4, 0x53, 0x2e, 0xb5,
	0xd5, 0x72, 0x41, 0xe2, 0x06, 0x07, 0xc4, 0x01, 0x90, 0xdc, 0x1b, 0x97, 0xc8, 0x49, 0x27, 0x8e,
	0x69, 0xd3, 0x09, 0xb6, 0x93, 0x13, 0x9f, 0xb2, 0x1f, 0xb0, 0xdf, 0xb5, 0x5f, 0xb2, 0x8a, 0xd3,
	0xee, 0x46, 0xdb, 0x3d, 0xec, 0xc9, 0x33, 0x7e, 0x4f, 0x33, 0xef, 0xcd, 0x0c, 0xf9, 0xa9, 0xb4,
	0xab, 0xda, 0x9c, 0x15, 0x58, 0x73, 0x8b, 0x47, 0x5c, 0x6b, 0xe4, 0x16, 0x4c, 0xa7, 0x0b, 0x58,
	0xd7, 0x60, 0xab, 0x75, 0xd5, 0xe6, 0x5c, 0x36, 0x9a, 0x17, 0x60, 0x9c, 0x2e, 0x75, 0x21, 0x1d,
	0x58, 0xae, 0xad, 0x6d, 0x61, 0x9f, 0x8d, 0xfe, 0x58, 0x63, 0xd0, 0x21, 0x8d, 0xc7, 0x34, 0x66,
	0xeb, 0x8a, 0xf5, 0x45, 0x99, 0xc6, 0x05, 0x7b, 0xae, 0xd1, 0xa1, 0xdb, 0x0e, 0xc5, 0xd1, 0x00,
	0xef, 0x36, 0xfe, 0x1d, 0x2a, 0x2d, 0x3e, 0x2a, 0x44, 0x75, 0x04, 0xee, 0xb3, 0xbc, 0x2d, 0xb9,
	0xd3, 0x35, 0x58, 0x27, 0xeb, 0xe6, 0x4c, 0x58, 0x3e, 0x25, 0xec, 0x5b, 0x23, 0x9d, 0xc6, 0xd3,
	0x19, 0x9f, 0x29, 0x54, 0xe8, 0x43, 0xde, 0x47, 0xc3, 0xef, 0xea, 0x3f, 0x79, 0xf7, 0xc3, 0x8b,
	0xff, 0xf6, 0x28, 0x74, 0xd7, 0x40, 0x41, 0x67, 0xe4, 0x55, 0x85, 0xd6, 0xd9, 0x38, 0x48, 0xc2,
	0x34, 0x12, 0x43, 0x42, 0xdf, 0x90, 0x10, 0x8d, 0x8a, 0x27, 0x49, 0x90, 0x46, 0xa2, 0x0f, 0xe9,
	0x17, 0x42, 0x2c, 0x14, 0x06, 0x5c, 0x66, 0xa0, 0x8c, 0xc3, 0x24, 0x48, 0x5f, 0x6f, 0x3f, 0x30,
	0x2f, 0xbc, 0xb7, 0x73, 0xf1, 0xcb, 0x7e, 0xe7, 0x7f, 0xa1, 0x70, 0x02, 0x4a, 0x11, 0x0d, 0x7c,
	0x01, 0xe5, 0xea, 0x26, 0x20, 0xef, 0xaf, 0xdb, 0x3b, 0xe9, 0x5a, 0x4b, 0x39, 0x79, 0x8b, 0x79,
	0x3f, 0x7a, 0xd8, 0x67, 0x0a, 0x4e, 0x30, 0x98, 0x89, 0x83, 0x24, 0x48, 0x43, 0x41, 0x2f, 0xd0,
	0xf7, 0x07, 0x84, 0xce, 0xc9, 0x14, 0x8c, 0x41, 0x63, 0xe3, 0x89, 0x97, 0x7c, 0xce, 0xe8, 0x67,
	0x32, 0xde, 0x42, 0x66, 0xe0, 0x5f, 0x0b, 0xd6, 0x65, 0x27, 0x59, 0x83, 0xd7, 0x1b, 0x89, 0xf9,
	0x08, 0x17, 0x03, 0xfc, 0x4b, 0xd6, 0xf0, 0x75, 0x77, 0x7b, 0xb7, 0x0c, 0xfe, 0xbc, 0xe8, 0x24,
	0x9a, 0x83, 0xba, 0x3a, 0x8b, 0xf1, 0xbe, 0x79, 0xb7, 0x91, 0xc7, 0xa6, 0x92, 0xdb, 0x7c, 0xea,
	0x07, 0xff, 0xe9, 0x3e, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xdc, 0x5c, 0x18, 0x6a, 0x02, 0x00, 0x00,
}

func (this *IssuedCertificateSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IssuedCertificateSpec)
	if !ok {
		that2, ok := that.(IssuedCertificateSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Hosts) != len(that1.Hosts) {
		return false
	}
	for i := range this.Hosts {
		if this.Hosts[i] != that1.Hosts[i] {
			return false
		}
	}
	if this.Org != that1.Org {
		return false
	}
	if !this.SecretRef.Equal(that1.SecretRef) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *IssuedCertificateStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IssuedCertificateStatus)
	if !ok {
		that2, ok := that.(IssuedCertificateStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObservedGeneration != that1.ObservedGeneration {
		return false
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if this.Errors[i] != that1.Errors[i] {
			return false
		}
	}
	if this.CertificateRequestName != that1.CertificateRequestName {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
