// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1alpha2 is a generated GoMock package.
package mock_v1alpha2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/certificates.smh.solo.io/v1alpha2"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1alpha2.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// IssuedCertificates mocks base method.
func (m *MockClientset) IssuedCertificates() v1alpha2.IssuedCertificateClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuedCertificates")
	ret0, _ := ret[0].(v1alpha2.IssuedCertificateClient)
	return ret0
}

// IssuedCertificates indicates an expected call of IssuedCertificates.
func (mr *MockClientsetMockRecorder) IssuedCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuedCertificates", reflect.TypeOf((*MockClientset)(nil).IssuedCertificates))
}

// CertificateRequests mocks base method.
func (m *MockClientset) CertificateRequests() v1alpha2.CertificateRequestClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificateRequests")
	ret0, _ := ret[0].(v1alpha2.CertificateRequestClient)
	return ret0
}

// CertificateRequests indicates an expected call of CertificateRequests.
func (mr *MockClientsetMockRecorder) CertificateRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificateRequests", reflect.TypeOf((*MockClientset)(nil).CertificateRequests))
}

// MockIssuedCertificateReader is a mock of IssuedCertificateReader interface.
type MockIssuedCertificateReader struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateReaderMockRecorder
}

// MockIssuedCertificateReaderMockRecorder is the mock recorder for MockIssuedCertificateReader.
type MockIssuedCertificateReaderMockRecorder struct {
	mock *MockIssuedCertificateReader
}

// NewMockIssuedCertificateReader creates a new mock instance.
func NewMockIssuedCertificateReader(ctrl *gomock.Controller) *MockIssuedCertificateReader {
	mock := &MockIssuedCertificateReader{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuedCertificateReader) EXPECT() *MockIssuedCertificateReaderMockRecorder {
	return m.recorder
}

// GetIssuedCertificate mocks base method.
func (m *MockIssuedCertificateReader) GetIssuedCertificate(ctx context.Context, key client.ObjectKey) (*v1alpha2.IssuedCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuedCertificate", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.IssuedCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuedCertificate indicates an expected call of GetIssuedCertificate.
func (mr *MockIssuedCertificateReaderMockRecorder) GetIssuedCertificate(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateReader)(nil).GetIssuedCertificate), ctx, key)
}

// ListIssuedCertificate mocks base method.
func (m *MockIssuedCertificateReader) ListIssuedCertificate(ctx context.Context, opts ...client.ListOption) (*v1alpha2.IssuedCertificateList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIssuedCertificate", varargs...)
	ret0, _ := ret[0].(*v1alpha2.IssuedCertificateList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIssuedCertificate indicates an expected call of ListIssuedCertificate.
func (mr *MockIssuedCertificateReaderMockRecorder) ListIssuedCertificate(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateReader)(nil).ListIssuedCertificate), varargs...)
}

// MockIssuedCertificateWriter is a mock of IssuedCertificateWriter interface.
type MockIssuedCertificateWriter struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateWriterMockRecorder
}

// MockIssuedCertificateWriterMockRecorder is the mock recorder for MockIssuedCertificateWriter.
type MockIssuedCertificateWriterMockRecorder struct {
	mock *MockIssuedCertificateWriter
}

// NewMockIssuedCertificateWriter creates a new mock instance.
func NewMockIssuedCertificateWriter(ctrl *gomock.Controller) *MockIssuedCertificateWriter {
	mock := &MockIssuedCertificateWriter{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuedCertificateWriter) EXPECT() *MockIssuedCertificateWriterMockRecorder {
	return m.recorder
}

// CreateIssuedCertificate mocks base method.
func (m *MockIssuedCertificateWriter) CreateIssuedCertificate(ctx context.Context, obj *v1alpha2.IssuedCertificate, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIssuedCertificate indicates an expected call of CreateIssuedCertificate.
func (mr *MockIssuedCertificateWriterMockRecorder) CreateIssuedCertificate(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateWriter)(nil).CreateIssuedCertificate), varargs...)
}

// DeleteIssuedCertificate mocks base method.
func (m *MockIssuedCertificateWriter) DeleteIssuedCertificate(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIssuedCertificate indicates an expected call of DeleteIssuedCertificate.
func (mr *MockIssuedCertificateWriterMockRecorder) DeleteIssuedCertificate(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateWriter)(nil).DeleteIssuedCertificate), varargs...)
}

// UpdateIssuedCertificate mocks base method.
func (m *MockIssuedCertificateWriter) UpdateIssuedCertificate(ctx context.Context, obj *v1alpha2.IssuedCertificate, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssuedCertificate indicates an expected call of UpdateIssuedCertificate.
func (mr *MockIssuedCertificateWriterMockRecorder) UpdateIssuedCertificate(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateWriter)(nil).UpdateIssuedCertificate), varargs...)
}

// PatchIssuedCertificate mocks base method.
func (m *MockIssuedCertificateWriter) PatchIssuedCertificate(ctx context.Context, obj *v1alpha2.IssuedCertificate, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchIssuedCertificate indicates an expected call of PatchIssuedCertificate.
func (mr *MockIssuedCertificateWriterMockRecorder) PatchIssuedCertificate(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateWriter)(nil).PatchIssuedCertificate), varargs...)
}

// DeleteAllOfIssuedCertificate mocks base method.
func (m *MockIssuedCertificateWriter) DeleteAllOfIssuedCertificate(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfIssuedCertificate indicates an expected call of DeleteAllOfIssuedCertificate.
func (mr *MockIssuedCertificateWriterMockRecorder) DeleteAllOfIssuedCertificate(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateWriter)(nil).DeleteAllOfIssuedCertificate), varargs...)
}

// UpsertIssuedCertificate mocks base method.
func (m *MockIssuedCertificateWriter) UpsertIssuedCertificate(ctx context.Context, obj *v1alpha2.IssuedCertificate, transitionFuncs ...v1alpha2.IssuedCertificateTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertIssuedCertificate indicates an expected call of UpsertIssuedCertificate.
func (mr *MockIssuedCertificateWriterMockRecorder) UpsertIssuedCertificate(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateWriter)(nil).UpsertIssuedCertificate), varargs...)
}

// MockIssuedCertificateStatusWriter is a mock of IssuedCertificateStatusWriter interface.
type MockIssuedCertificateStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateStatusWriterMockRecorder
}

// MockIssuedCertificateStatusWriterMockRecorder is the mock recorder for MockIssuedCertificateStatusWriter.
type MockIssuedCertificateStatusWriterMockRecorder struct {
	mock *MockIssuedCertificateStatusWriter
}

// NewMockIssuedCertificateStatusWriter creates a new mock instance.
func NewMockIssuedCertificateStatusWriter(ctrl *gomock.Controller) *MockIssuedCertificateStatusWriter {
	mock := &MockIssuedCertificateStatusWriter{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuedCertificateStatusWriter) EXPECT() *MockIssuedCertificateStatusWriterMockRecorder {
	return m.recorder
}

// UpdateIssuedCertificateStatus mocks base method.
func (m *MockIssuedCertificateStatusWriter) UpdateIssuedCertificateStatus(ctx context.Context, obj *v1alpha2.IssuedCertificate, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIssuedCertificateStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssuedCertificateStatus indicates an expected call of UpdateIssuedCertificateStatus.
func (mr *MockIssuedCertificateStatusWriterMockRecorder) UpdateIssuedCertificateStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssuedCertificateStatus", reflect.TypeOf((*MockIssuedCertificateStatusWriter)(nil).UpdateIssuedCertificateStatus), varargs...)
}

// PatchIssuedCertificateStatus mocks base method.
func (m *MockIssuedCertificateStatusWriter) PatchIssuedCertificateStatus(ctx context.Context, obj *v1alpha2.IssuedCertificate, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchIssuedCertificateStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchIssuedCertificateStatus indicates an expected call of PatchIssuedCertificateStatus.
func (mr *MockIssuedCertificateStatusWriterMockRecorder) PatchIssuedCertificateStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchIssuedCertificateStatus", reflect.TypeOf((*MockIssuedCertificateStatusWriter)(nil).PatchIssuedCertificateStatus), varargs...)
}

// MockIssuedCertificateClient is a mock of IssuedCertificateClient interface.
type MockIssuedCertificateClient struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateClientMockRecorder
}

// MockIssuedCertificateClientMockRecorder is the mock recorder for MockIssuedCertificateClient.
type MockIssuedCertificateClientMockRecorder struct {
	mock *MockIssuedCertificateClient
}

// NewMockIssuedCertificateClient creates a new mock instance.
func NewMockIssuedCertificateClient(ctrl *gomock.Controller) *MockIssuedCertificateClient {
	mock := &MockIssuedCertificateClient{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuedCertificateClient) EXPECT() *MockIssuedCertificateClientMockRecorder {
	return m.recorder
}

// GetIssuedCertificate mocks base method.
func (m *MockIssuedCertificateClient) GetIssuedCertificate(ctx context.Context, key client.ObjectKey) (*v1alpha2.IssuedCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuedCertificate", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.IssuedCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuedCertificate indicates an expected call of GetIssuedCertificate.
func (mr *MockIssuedCertificateClientMockRecorder) GetIssuedCertificate(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateClient)(nil).GetIssuedCertificate), ctx, key)
}

// ListIssuedCertificate mocks base method.
func (m *MockIssuedCertificateClient) ListIssuedCertificate(ctx context.Context, opts ...client.ListOption) (*v1alpha2.IssuedCertificateList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIssuedCertificate", varargs...)
	ret0, _ := ret[0].(*v1alpha2.IssuedCertificateList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIssuedCertificate indicates an expected call of ListIssuedCertificate.
func (mr *MockIssuedCertificateClientMockRecorder) ListIssuedCertificate(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateClient)(nil).ListIssuedCertificate), varargs...)
}

// CreateIssuedCertificate mocks base method.
func (m *MockIssuedCertificateClient) CreateIssuedCertificate(ctx context.Context, obj *v1alpha2.IssuedCertificate, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIssuedCertificate indicates an expected call of CreateIssuedCertificate.
func (mr *MockIssuedCertificateClientMockRecorder) CreateIssuedCertificate(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateClient)(nil).CreateIssuedCertificate), varargs...)
}

// DeleteIssuedCertificate mocks base method.
func (m *MockIssuedCertificateClient) DeleteIssuedCertificate(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIssuedCertificate indicates an expected call of DeleteIssuedCertificate.
func (mr *MockIssuedCertificateClientMockRecorder) DeleteIssuedCertificate(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateClient)(nil).DeleteIssuedCertificate), varargs...)
}

// UpdateIssuedCertificate mocks base method.
func (m *MockIssuedCertificateClient) UpdateIssuedCertificate(ctx context.Context, obj *v1alpha2.IssuedCertificate, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssuedCertificate indicates an expected call of UpdateIssuedCertificate.
func (mr *MockIssuedCertificateClientMockRecorder) UpdateIssuedCertificate(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateClient)(nil).UpdateIssuedCertificate), varargs...)
}

// PatchIssuedCertificate mocks base method.
func (m *MockIssuedCertificateClient) PatchIssuedCertificate(ctx context.Context, obj *v1alpha2.IssuedCertificate, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchIssuedCertificate indicates an expected call of PatchIssuedCertificate.
func (mr *MockIssuedCertificateClientMockRecorder) PatchIssuedCertificate(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateClient)(nil).PatchIssuedCertificate), varargs...)
}

// DeleteAllOfIssuedCertificate mocks base method.
func (m *MockIssuedCertificateClient) DeleteAllOfIssuedCertificate(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfIssuedCertificate indicates an expected call of DeleteAllOfIssuedCertificate.
func (mr *MockIssuedCertificateClientMockRecorder) DeleteAllOfIssuedCertificate(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateClient)(nil).DeleteAllOfIssuedCertificate), varargs...)
}

// UpsertIssuedCertificate mocks base method.
func (m *MockIssuedCertificateClient) UpsertIssuedCertificate(ctx context.Context, obj *v1alpha2.IssuedCertificate, transitionFuncs ...v1alpha2.IssuedCertificateTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertIssuedCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertIssuedCertificate indicates an expected call of UpsertIssuedCertificate.
func (mr *MockIssuedCertificateClientMockRecorder) UpsertIssuedCertificate(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateClient)(nil).UpsertIssuedCertificate), varargs...)
}

// UpdateIssuedCertificateStatus mocks base method.
func (m *MockIssuedCertificateClient) UpdateIssuedCertificateStatus(ctx context.Context, obj *v1alpha2.IssuedCertificate, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIssuedCertificateStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssuedCertificateStatus indicates an expected call of UpdateIssuedCertificateStatus.
func (mr *MockIssuedCertificateClientMockRecorder) UpdateIssuedCertificateStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssuedCertificateStatus", reflect.TypeOf((*MockIssuedCertificateClient)(nil).UpdateIssuedCertificateStatus), varargs...)
}

// PatchIssuedCertificateStatus mocks base method.
func (m *MockIssuedCertificateClient) PatchIssuedCertificateStatus(ctx context.Context, obj *v1alpha2.IssuedCertificate, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchIssuedCertificateStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchIssuedCertificateStatus indicates an expected call of PatchIssuedCertificateStatus.
func (mr *MockIssuedCertificateClientMockRecorder) PatchIssuedCertificateStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchIssuedCertificateStatus", reflect.TypeOf((*MockIssuedCertificateClient)(nil).PatchIssuedCertificateStatus), varargs...)
}

// MockMulticlusterIssuedCertificateClient is a mock of MulticlusterIssuedCertificateClient interface.
type MockMulticlusterIssuedCertificateClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterIssuedCertificateClientMockRecorder
}

// MockMulticlusterIssuedCertificateClientMockRecorder is the mock recorder for MockMulticlusterIssuedCertificateClient.
type MockMulticlusterIssuedCertificateClientMockRecorder struct {
	mock *MockMulticlusterIssuedCertificateClient
}

// NewMockMulticlusterIssuedCertificateClient creates a new mock instance.
func NewMockMulticlusterIssuedCertificateClient(ctrl *gomock.Controller) *MockMulticlusterIssuedCertificateClient {
	mock := &MockMulticlusterIssuedCertificateClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterIssuedCertificateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterIssuedCertificateClient) EXPECT() *MockMulticlusterIssuedCertificateClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterIssuedCertificateClient) Cluster(cluster string) (v1alpha2.IssuedCertificateClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.IssuedCertificateClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterIssuedCertificateClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterIssuedCertificateClient)(nil).Cluster), cluster)
}

// MockCertificateRequestReader is a mock of CertificateRequestReader interface.
type MockCertificateRequestReader struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestReaderMockRecorder
}

// MockCertificateRequestReaderMockRecorder is the mock recorder for MockCertificateRequestReader.
type MockCertificateRequestReaderMockRecorder struct {
	mock *MockCertificateRequestReader
}

// NewMockCertificateRequestReader creates a new mock instance.
func NewMockCertificateRequestReader(ctrl *gomock.Controller) *MockCertificateRequestReader {
	mock := &MockCertificateRequestReader{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRequestReader) EXPECT() *MockCertificateRequestReaderMockRecorder {
	return m.recorder
}

// GetCertificateRequest mocks base method.
func (m *MockCertificateRequestReader) GetCertificateRequest(ctx context.Context, key client.ObjectKey) (*v1alpha2.CertificateRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateRequest", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.CertificateRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateRequest indicates an expected call of GetCertificateRequest.
func (mr *MockCertificateRequestReaderMockRecorder) GetCertificateRequest(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateRequest", reflect.TypeOf((*MockCertificateRequestReader)(nil).GetCertificateRequest), ctx, key)
}

// ListCertificateRequest mocks base method.
func (m *MockCertificateRequestReader) ListCertificateRequest(ctx context.Context, opts ...client.ListOption) (*v1alpha2.CertificateRequestList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCertificateRequest", varargs...)
	ret0, _ := ret[0].(*v1alpha2.CertificateRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificateRequest indicates an expected call of ListCertificateRequest.
func (mr *MockCertificateRequestReaderMockRecorder) ListCertificateRequest(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificateRequest", reflect.TypeOf((*MockCertificateRequestReader)(nil).ListCertificateRequest), varargs...)
}

// MockCertificateRequestWriter is a mock of CertificateRequestWriter interface.
type MockCertificateRequestWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestWriterMockRecorder
}

// MockCertificateRequestWriterMockRecorder is the mock recorder for MockCertificateRequestWriter.
type MockCertificateRequestWriterMockRecorder struct {
	mock *MockCertificateRequestWriter
}

// NewMockCertificateRequestWriter creates a new mock instance.
func NewMockCertificateRequestWriter(ctrl *gomock.Controller) *MockCertificateRequestWriter {
	mock := &MockCertificateRequestWriter{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRequestWriter) EXPECT() *MockCertificateRequestWriterMockRecorder {
	return m.recorder
}

// CreateCertificateRequest mocks base method.
func (m *MockCertificateRequestWriter) CreateCertificateRequest(ctx context.Context, obj *v1alpha2.CertificateRequest, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCertificateRequest indicates an expected call of CreateCertificateRequest.
func (mr *MockCertificateRequestWriterMockRecorder) CreateCertificateRequest(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).CreateCertificateRequest), varargs...)
}

// DeleteCertificateRequest mocks base method.
func (m *MockCertificateRequestWriter) DeleteCertificateRequest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificateRequest indicates an expected call of DeleteCertificateRequest.
func (mr *MockCertificateRequestWriterMockRecorder) DeleteCertificateRequest(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).DeleteCertificateRequest), varargs...)
}

// UpdateCertificateRequest mocks base method.
func (m *MockCertificateRequestWriter) UpdateCertificateRequest(ctx context.Context, obj *v1alpha2.CertificateRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificateRequest indicates an expected call of UpdateCertificateRequest.
func (mr *MockCertificateRequestWriterMockRecorder) UpdateCertificateRequest(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).UpdateCertificateRequest), varargs...)
}

// PatchCertificateRequest mocks base method.
func (m *MockCertificateRequestWriter) PatchCertificateRequest(ctx context.Context, obj *v1alpha2.CertificateRequest, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCertificateRequest indicates an expected call of PatchCertificateRequest.
func (mr *MockCertificateRequestWriterMockRecorder) PatchCertificateRequest(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).PatchCertificateRequest), varargs...)
}

// DeleteAllOfCertificateRequest mocks base method.
func (m *MockCertificateRequestWriter) DeleteAllOfCertificateRequest(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfCertificateRequest indicates an expected call of DeleteAllOfCertificateRequest.
func (mr *MockCertificateRequestWriterMockRecorder) DeleteAllOfCertificateRequest(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).DeleteAllOfCertificateRequest), varargs...)
}

// UpsertCertificateRequest mocks base method.
func (m *MockCertificateRequestWriter) UpsertCertificateRequest(ctx context.Context, obj *v1alpha2.CertificateRequest, transitionFuncs ...v1alpha2.CertificateRequestTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCertificateRequest indicates an expected call of UpsertCertificateRequest.
func (mr *MockCertificateRequestWriterMockRecorder) UpsertCertificateRequest(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).UpsertCertificateRequest), varargs...)
}

// MockCertificateRequestStatusWriter is a mock of CertificateRequestStatusWriter interface.
type MockCertificateRequestStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestStatusWriterMockRecorder
}

// MockCertificateRequestStatusWriterMockRecorder is the mock recorder for MockCertificateRequestStatusWriter.
type MockCertificateRequestStatusWriterMockRecorder struct {
	mock *MockCertificateRequestStatusWriter
}

// NewMockCertificateRequestStatusWriter creates a new mock instance.
func NewMockCertificateRequestStatusWriter(ctrl *gomock.Controller) *MockCertificateRequestStatusWriter {
	mock := &MockCertificateRequestStatusWriter{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRequestStatusWriter) EXPECT() *MockCertificateRequestStatusWriterMockRecorder {
	return m.recorder
}

// UpdateCertificateRequestStatus mocks base method.
func (m *MockCertificateRequestStatusWriter) UpdateCertificateRequestStatus(ctx context.Context, obj *v1alpha2.CertificateRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCertificateRequestStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificateRequestStatus indicates an expected call of UpdateCertificateRequestStatus.
func (mr *MockCertificateRequestStatusWriterMockRecorder) UpdateCertificateRequestStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateRequestStatus", reflect.TypeOf((*MockCertificateRequestStatusWriter)(nil).UpdateCertificateRequestStatus), varargs...)
}

// PatchCertificateRequestStatus mocks base method.
func (m *MockCertificateRequestStatusWriter) PatchCertificateRequestStatus(ctx context.Context, obj *v1alpha2.CertificateRequest, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCertificateRequestStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCertificateRequestStatus indicates an expected call of PatchCertificateRequestStatus.
func (mr *MockCertificateRequestStatusWriterMockRecorder) PatchCertificateRequestStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCertificateRequestStatus", reflect.TypeOf((*MockCertificateRequestStatusWriter)(nil).PatchCertificateRequestStatus), varargs...)
}

// MockCertificateRequestClient is a mock of CertificateRequestClient interface.
type MockCertificateRequestClient struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestClientMockRecorder
}

// MockCertificateRequestClientMockRecorder is the mock recorder for MockCertificateRequestClient.
type MockCertificateRequestClientMockRecorder struct {
	mock *MockCertificateRequestClient
}

// NewMockCertificateRequestClient creates a new mock instance.
func NewMockCertificateRequestClient(ctrl *gomock.Controller) *MockCertificateRequestClient {
	mock := &MockCertificateRequestClient{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRequestClient) EXPECT() *MockCertificateRequestClientMockRecorder {
	return m.recorder
}

// GetCertificateRequest mocks base method.
func (m *MockCertificateRequestClient) GetCertificateRequest(ctx context.Context, key client.ObjectKey) (*v1alpha2.CertificateRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateRequest", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.CertificateRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateRequest indicates an expected call of GetCertificateRequest.
func (mr *MockCertificateRequestClientMockRecorder) GetCertificateRequest(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).GetCertificateRequest), ctx, key)
}

// ListCertificateRequest mocks base method.
func (m *MockCertificateRequestClient) ListCertificateRequest(ctx context.Context, opts ...client.ListOption) (*v1alpha2.CertificateRequestList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCertificateRequest", varargs...)
	ret0, _ := ret[0].(*v1alpha2.CertificateRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificateRequest indicates an expected call of ListCertificateRequest.
func (mr *MockCertificateRequestClientMockRecorder) ListCertificateRequest(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).ListCertificateRequest), varargs...)
}

// CreateCertificateRequest mocks base method.
func (m *MockCertificateRequestClient) CreateCertificateRequest(ctx context.Context, obj *v1alpha2.CertificateRequest, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCertificateRequest indicates an expected call of CreateCertificateRequest.
func (mr *MockCertificateRequestClientMockRecorder) CreateCertificateRequest(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).CreateCertificateRequest), varargs...)
}

// DeleteCertificateRequest mocks base method.
func (m *MockCertificateRequestClient) DeleteCertificateRequest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificateRequest indicates an expected call of DeleteCertificateRequest.
func (mr *MockCertificateRequestClientMockRecorder) DeleteCertificateRequest(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).DeleteCertificateRequest), varargs...)
}

// UpdateCertificateRequest mocks base method.
func (m *MockCertificateRequestClient) UpdateCertificateRequest(ctx context.Context, obj *v1alpha2.CertificateRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificateRequest indicates an expected call of UpdateCertificateRequest.
func (mr *MockCertificateRequestClientMockRecorder) UpdateCertificateRequest(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).UpdateCertificateRequest), varargs...)
}

// PatchCertificateRequest mocks base method.
func (m *MockCertificateRequestClient) PatchCertificateRequest(ctx context.Context, obj *v1alpha2.CertificateRequest, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCertificateRequest indicates an expected call of PatchCertificateRequest.
func (mr *MockCertificateRequestClientMockRecorder) PatchCertificateRequest(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).PatchCertificateRequest), varargs...)
}

// DeleteAllOfCertificateRequest mocks base method.
func (m *MockCertificateRequestClient) DeleteAllOfCertificateRequest(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfCertificateRequest indicates an expected call of DeleteAllOfCertificateRequest.
func (mr *MockCertificateRequestClientMockRecorder) DeleteAllOfCertificateRequest(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).DeleteAllOfCertificateRequest), varargs...)
}

// UpsertCertificateRequest mocks base method.
func (m *MockCertificateRequestClient) UpsertCertificateRequest(ctx context.Context, obj *v1alpha2.CertificateRequest, transitionFuncs ...v1alpha2.CertificateRequestTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCertificateRequest indicates an expected call of UpsertCertificateRequest.
func (mr *MockCertificateRequestClientMockRecorder) UpsertCertificateRequest(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).UpsertCertificateRequest), varargs...)
}

// UpdateCertificateRequestStatus mocks base method.
func (m *MockCertificateRequestClient) UpdateCertificateRequestStatus(ctx context.Context, obj *v1alpha2.CertificateRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCertificateRequestStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificateRequestStatus indicates an expected call of UpdateCertificateRequestStatus.
func (mr *MockCertificateRequestClientMockRecorder) UpdateCertificateRequestStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateRequestStatus", reflect.TypeOf((*MockCertificateRequestClient)(nil).UpdateCertificateRequestStatus), varargs...)
}

// PatchCertificateRequestStatus mocks base method.
func (m *MockCertificateRequestClient) PatchCertificateRequestStatus(ctx context.Context, obj *v1alpha2.CertificateRequest, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCertificateRequestStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCertificateRequestStatus indicates an expected call of PatchCertificateRequestStatus.
func (mr *MockCertificateRequestClientMockRecorder) PatchCertificateRequestStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCertificateRequestStatus", reflect.TypeOf((*MockCertificateRequestClient)(nil).PatchCertificateRequestStatus), varargs...)
}

// MockMulticlusterCertificateRequestClient is a mock of MulticlusterCertificateRequestClient interface.
type MockMulticlusterCertificateRequestClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCertificateRequestClientMockRecorder
}

// MockMulticlusterCertificateRequestClientMockRecorder is the mock recorder for MockMulticlusterCertificateRequestClient.
type MockMulticlusterCertificateRequestClientMockRecorder struct {
	mock *MockMulticlusterCertificateRequestClient
}

// NewMockMulticlusterCertificateRequestClient creates a new mock instance.
func NewMockMulticlusterCertificateRequestClient(ctrl *gomock.Controller) *MockMulticlusterCertificateRequestClient {
	mock := &MockMulticlusterCertificateRequestClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCertificateRequestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterCertificateRequestClient) EXPECT() *MockMulticlusterCertificateRequestClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterCertificateRequestClient) Cluster(cluster string) (v1alpha2.CertificateRequestClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.CertificateRequestClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterCertificateRequestClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterCertificateRequestClient)(nil).Cluster), cluster)
}
