// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/service-mesh-hub/api/certificates/pod_bounce_directive.proto

package v1alpha2

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//When certificates are issued, pods may need to be bounced (restarted) to ensure they pick up the
//new certificates. If so, the certificate Issuer will create a PodBounceDirective containing the namespaces and labels
//of the pods that need to be bounced in order to pick up the new certs.
type PodBounceDirectiveSpec struct {
	// A list of k8s pods to bounce (delete and cause a restart)
	// when the certificate is issued.
	// This will include the control plane pods as well as any pods
	// which share a data plane with the target mesh.
	PodsToBounce         []*PodBounceDirectiveSpec_PodSelector `protobuf:"bytes,6,rep,name=pods_to_bounce,json=podsToBounce,proto3" json:"pods_to_bounce,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *PodBounceDirectiveSpec) Reset()         { *m = PodBounceDirectiveSpec{} }
func (m *PodBounceDirectiveSpec) String() string { return proto.CompactTextString(m) }
func (*PodBounceDirectiveSpec) ProtoMessage()    {}
func (*PodBounceDirectiveSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec6c216a60a414a3, []int{0}
}
func (m *PodBounceDirectiveSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodBounceDirectiveSpec.Unmarshal(m, b)
}
func (m *PodBounceDirectiveSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodBounceDirectiveSpec.Marshal(b, m, deterministic)
}
func (m *PodBounceDirectiveSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodBounceDirectiveSpec.Merge(m, src)
}
func (m *PodBounceDirectiveSpec) XXX_Size() int {
	return xxx_messageInfo_PodBounceDirectiveSpec.Size(m)
}
func (m *PodBounceDirectiveSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PodBounceDirectiveSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PodBounceDirectiveSpec proto.InternalMessageInfo

func (m *PodBounceDirectiveSpec) GetPodsToBounce() []*PodBounceDirectiveSpec_PodSelector {
	if m != nil {
		return m.PodsToBounce
	}
	return nil
}

// Pods that will be restarted.
type PodBounceDirectiveSpec_PodSelector struct {
	// The namespace in which the pods live.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Any labels shared by the pods.
	Labels               map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PodBounceDirectiveSpec_PodSelector) Reset()         { *m = PodBounceDirectiveSpec_PodSelector{} }
func (m *PodBounceDirectiveSpec_PodSelector) String() string { return proto.CompactTextString(m) }
func (*PodBounceDirectiveSpec_PodSelector) ProtoMessage()    {}
func (*PodBounceDirectiveSpec_PodSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec6c216a60a414a3, []int{0, 0}
}
func (m *PodBounceDirectiveSpec_PodSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodBounceDirectiveSpec_PodSelector.Unmarshal(m, b)
}
func (m *PodBounceDirectiveSpec_PodSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodBounceDirectiveSpec_PodSelector.Marshal(b, m, deterministic)
}
func (m *PodBounceDirectiveSpec_PodSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodBounceDirectiveSpec_PodSelector.Merge(m, src)
}
func (m *PodBounceDirectiveSpec_PodSelector) XXX_Size() int {
	return xxx_messageInfo_PodBounceDirectiveSpec_PodSelector.Size(m)
}
func (m *PodBounceDirectiveSpec_PodSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_PodBounceDirectiveSpec_PodSelector.DiscardUnknown(m)
}

var xxx_messageInfo_PodBounceDirectiveSpec_PodSelector proto.InternalMessageInfo

func (m *PodBounceDirectiveSpec_PodSelector) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodBounceDirectiveSpec_PodSelector) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func init() {
	proto.RegisterType((*PodBounceDirectiveSpec)(nil), "certificates.smh.solo.io.PodBounceDirectiveSpec")
	proto.RegisterType((*PodBounceDirectiveSpec_PodSelector)(nil), "certificates.smh.solo.io.PodBounceDirectiveSpec.PodSelector")
	proto.RegisterMapType((map[string]string)(nil), "certificates.smh.solo.io.PodBounceDirectiveSpec.PodSelector.LabelsEntry")
}

func init() {
	proto.RegisterFile("github.com/solo-io/service-mesh-hub/api/certificates/pod_bounce_directive.proto", fileDescriptor_ec6c216a60a414a3)
}

var fileDescriptor_ec6c216a60a414a3 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xcf, 0x6a, 0xdb, 0x40,
	0x10, 0xc6, 0x91, 0x4c, 0x0d, 0x5e, 0x97, 0x52, 0x84, 0x29, 0x42, 0x2d, 0xae, 0xe9, 0xc9, 0x17,
	0xef, 0x62, 0xf7, 0xd2, 0x96, 0x9e, 0x4c, 0x0b, 0x3d, 0x34, 0x24, 0xd8, 0x39, 0xe5, 0xe2, 0xac,
	0x56, 0x63, 0x69, 0xb1, 0xa4, 0x59, 0x76, 0x57, 0x02, 0xbf, 0x51, 0xde, 0x24, 0x79, 0x8e, 0x3c,
	0x49, 0xd0, 0x4a, 0x21, 0x22, 0x7f, 0x20, 0x90, 0x93, 0x66, 0xbe, 0xf9, 0xf4, 0xf1, 0x1b, 0x76,
	0xc8, 0x69, 0x2a, 0x6d, 0x56, 0xc5, 0x54, 0x60, 0xc1, 0x0c, 0xe6, 0xb8, 0x90, 0xc8, 0x0c, 0xe8,
	0x5a, 0x0a, 0x58, 0x14, 0x60, 0xb2, 0x45, 0x56, 0xc5, 0x8c, 0x2b, 0xc9, 0x04, 0x68, 0x2b, 0xf7,
	0x52, 0x70, 0x0b, 0x86, 0x29, 0x4c, 0x76, 0x31, 0x56, 0xa5, 0x80, 0x5d, 0x22, 0x35, 0x08, 0x2b,
	0x6b, 0xa0, 0x4a, 0xa3, 0xc5, 0x20, 0xec, 0x1b, 0xa9, 0x29, 0x32, 0xda, 0xc4, 0x52, 0x89, 0xd1,
	0x67, 0x73, 0xa8, 0x57, 0x6d, 0x16, 0x6a, 0x60, 0xf5, 0xd2, 0x7d, 0xdb, 0xdf, 0xa2, 0xaf, 0x29,
	0x62, 0x9a, 0x03, 0x73, 0x5d, 0x5c, 0xed, 0x99, 0x95, 0x05, 0x18, 0xcb, 0x0b, 0xd5, 0x19, 0xa6,
	0x8f, 0x0d, 0x49, 0xa5, 0xb9, 0x95, 0x58, 0x76, 0xf3, 0x49, 0x8a, 0x29, 0xba, 0x92, 0x35, 0x55,
	0xab, 0x7e, 0xbb, 0xf6, 0xc9, 0xa7, 0x33, 0x4c, 0xd6, 0x8e, 0xf5, 0xcf, 0x3d, 0xea, 0x56, 0x81,
	0x08, 0x62, 0xf2, 0x41, 0x61, 0x62, 0x76, 0x16, 0xbb, 0x55, 0xc2, 0xe1, 0x6c, 0x30, 0x1f, 0xaf,
	0x7e, 0xd3, 0x97, 0x36, 0xa0, 0xcf, 0x27, 0x35, 0xf2, 0x16, 0x72, 0x10, 0x16, 0xf5, 0xe6, 0x7d,
	0x93, 0x79, 0x8e, 0xad, 0x2d, 0xba, 0xf1, 0xc8, 0xb8, 0x37, 0x0d, 0xbe, 0x90, 0x51, 0xc9, 0x0b,
	0x30, 0x8a, 0x0b, 0x08, 0xbd, 0x99, 0x37, 0x1f, 0x6d, 0x1e, 0x84, 0xe0, 0x92, 0x0c, 0x73, 0x1e,
	0x43, 0x6e, 0x42, 0xdf, 0x91, 0xfc, 0x7b, 0x0b, 0x09, 0xfd, 0xef, 0xa2, 0xfe, 0x96, 0x56, 0x1f,
	0x37, 0x5d, 0x6e, 0xf4, 0x93, 0x8c, 0x7b, 0x72, 0xf0, 0x91, 0x0c, 0x0e, 0x70, 0xec, 0x40, 0x9a,
	0x32, 0x98, 0x90, 0x77, 0x35, 0xcf, 0x2b, 0x08, 0x7d, 0xa7, 0xb5, 0xcd, 0x2f, 0xff, 0x87, 0xb7,
	0xde, 0x5e, 0xdd, 0x4e, 0xbd, 0x8b, 0x93, 0xd7, 0x9c, 0x8b, 0x3a, 0xa4, 0x4f, 0x4e, 0xa6, 0x4f,
	0xcf, 0xea, 0x25, 0xcf, 0x55, 0xc6, 0x57, 0xf1, 0xd0, 0xbd, 0xd2, 0xf7, 0xbb, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xca, 0x5c, 0x4c, 0x8b, 0x86, 0x02, 0x00, 0x00,
}

func (this *PodBounceDirectiveSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodBounceDirectiveSpec)
	if !ok {
		that2, ok := that.(PodBounceDirectiveSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PodsToBounce) != len(that1.PodsToBounce) {
		return false
	}
	for i := range this.PodsToBounce {
		if !this.PodsToBounce[i].Equal(that1.PodsToBounce[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PodBounceDirectiveSpec_PodSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodBounceDirectiveSpec_PodSelector)
	if !ok {
		that2, ok := that.(PodBounceDirectiveSpec_PodSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
