// Code generated by MockGen. DO NOT EDIT.
// Source: ./sets.go

// Package mock_v1alpha2sets is a generated GoMock package.
package mock_v1alpha2sets

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/certificates.smh.solo.io/v1alpha2"
	v1alpha2sets "github.com/solo-io/service-mesh-hub/pkg/api/certificates.smh.solo.io/v1alpha2/sets"
	ezkube "github.com/solo-io/skv2/pkg/ezkube"
	sets "k8s.io/apimachinery/pkg/util/sets"
)

// MockIssuedCertificateSet is a mock of IssuedCertificateSet interface.
type MockIssuedCertificateSet struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateSetMockRecorder
}

// MockIssuedCertificateSetMockRecorder is the mock recorder for MockIssuedCertificateSet.
type MockIssuedCertificateSetMockRecorder struct {
	mock *MockIssuedCertificateSet
}

// NewMockIssuedCertificateSet creates a new mock instance.
func NewMockIssuedCertificateSet(ctrl *gomock.Controller) *MockIssuedCertificateSet {
	mock := &MockIssuedCertificateSet{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuedCertificateSet) EXPECT() *MockIssuedCertificateSetMockRecorder {
	return m.recorder
}

// Keys mocks base method.
func (m *MockIssuedCertificateSet) Keys() sets.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockIssuedCertificateSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Keys))
}

// List mocks base method.
func (m *MockIssuedCertificateSet) List(filterResource ...func(*v1alpha2.IssuedCertificate) bool) []*v1alpha2.IssuedCertificate {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1alpha2.IssuedCertificate)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockIssuedCertificateSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIssuedCertificateSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockIssuedCertificateSet) Map() map[string]*v1alpha2.IssuedCertificate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1alpha2.IssuedCertificate)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockIssuedCertificateSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Map))
}

// Insert mocks base method.
func (m *MockIssuedCertificateSet) Insert(issuedCertificate ...*v1alpha2.IssuedCertificate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range issuedCertificate {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockIssuedCertificateSetMockRecorder) Insert(issuedCertificate ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Insert), issuedCertificate...)
}

// Equal mocks base method.
func (m *MockIssuedCertificateSet) Equal(issuedCertificateSet v1alpha2sets.IssuedCertificateSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", issuedCertificateSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockIssuedCertificateSetMockRecorder) Equal(issuedCertificateSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Equal), issuedCertificateSet)
}

// Has mocks base method.
func (m *MockIssuedCertificateSet) Has(issuedCertificate ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", issuedCertificate)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockIssuedCertificateSetMockRecorder) Has(issuedCertificate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Has), issuedCertificate)
}

// Delete mocks base method.
func (m *MockIssuedCertificateSet) Delete(issuedCertificate ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", issuedCertificate)
}

// Delete indicates an expected call of Delete.
func (mr *MockIssuedCertificateSetMockRecorder) Delete(issuedCertificate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Delete), issuedCertificate)
}

// Union mocks base method.
func (m *MockIssuedCertificateSet) Union(set v1alpha2sets.IssuedCertificateSet) v1alpha2sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1alpha2sets.IssuedCertificateSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockIssuedCertificateSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Union), set)
}

// Difference mocks base method.
func (m *MockIssuedCertificateSet) Difference(set v1alpha2sets.IssuedCertificateSet) v1alpha2sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1alpha2sets.IssuedCertificateSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockIssuedCertificateSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Difference), set)
}

// Intersection mocks base method.
func (m *MockIssuedCertificateSet) Intersection(set v1alpha2sets.IssuedCertificateSet) v1alpha2sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1alpha2sets.IssuedCertificateSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockIssuedCertificateSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Intersection), set)
}

// Find mocks base method.
func (m *MockIssuedCertificateSet) Find(id ezkube.ResourceId) (*v1alpha2.IssuedCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1alpha2.IssuedCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIssuedCertificateSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Find), id)
}

// Length mocks base method.
func (m *MockIssuedCertificateSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockIssuedCertificateSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Length))
}

// MockCertificateRequestSet is a mock of CertificateRequestSet interface.
type MockCertificateRequestSet struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestSetMockRecorder
}

// MockCertificateRequestSetMockRecorder is the mock recorder for MockCertificateRequestSet.
type MockCertificateRequestSetMockRecorder struct {
	mock *MockCertificateRequestSet
}

// NewMockCertificateRequestSet creates a new mock instance.
func NewMockCertificateRequestSet(ctrl *gomock.Controller) *MockCertificateRequestSet {
	mock := &MockCertificateRequestSet{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRequestSet) EXPECT() *MockCertificateRequestSetMockRecorder {
	return m.recorder
}

// Keys mocks base method.
func (m *MockCertificateRequestSet) Keys() sets.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockCertificateRequestSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockCertificateRequestSet)(nil).Keys))
}

// List mocks base method.
func (m *MockCertificateRequestSet) List(filterResource ...func(*v1alpha2.CertificateRequest) bool) []*v1alpha2.CertificateRequest {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1alpha2.CertificateRequest)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockCertificateRequestSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCertificateRequestSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockCertificateRequestSet) Map() map[string]*v1alpha2.CertificateRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1alpha2.CertificateRequest)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockCertificateRequestSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockCertificateRequestSet)(nil).Map))
}

// Insert mocks base method.
func (m *MockCertificateRequestSet) Insert(certificateRequest ...*v1alpha2.CertificateRequest) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range certificateRequest {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockCertificateRequestSetMockRecorder) Insert(certificateRequest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCertificateRequestSet)(nil).Insert), certificateRequest...)
}

// Equal mocks base method.
func (m *MockCertificateRequestSet) Equal(certificateRequestSet v1alpha2sets.CertificateRequestSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", certificateRequestSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockCertificateRequestSetMockRecorder) Equal(certificateRequestSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockCertificateRequestSet)(nil).Equal), certificateRequestSet)
}

// Has mocks base method.
func (m *MockCertificateRequestSet) Has(certificateRequest ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", certificateRequest)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockCertificateRequestSetMockRecorder) Has(certificateRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockCertificateRequestSet)(nil).Has), certificateRequest)
}

// Delete mocks base method.
func (m *MockCertificateRequestSet) Delete(certificateRequest ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", certificateRequest)
}

// Delete indicates an expected call of Delete.
func (mr *MockCertificateRequestSetMockRecorder) Delete(certificateRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCertificateRequestSet)(nil).Delete), certificateRequest)
}

// Union mocks base method.
func (m *MockCertificateRequestSet) Union(set v1alpha2sets.CertificateRequestSet) v1alpha2sets.CertificateRequestSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1alpha2sets.CertificateRequestSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockCertificateRequestSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockCertificateRequestSet)(nil).Union), set)
}

// Difference mocks base method.
func (m *MockCertificateRequestSet) Difference(set v1alpha2sets.CertificateRequestSet) v1alpha2sets.CertificateRequestSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1alpha2sets.CertificateRequestSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockCertificateRequestSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockCertificateRequestSet)(nil).Difference), set)
}

// Intersection mocks base method.
func (m *MockCertificateRequestSet) Intersection(set v1alpha2sets.CertificateRequestSet) v1alpha2sets.CertificateRequestSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1alpha2sets.CertificateRequestSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockCertificateRequestSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockCertificateRequestSet)(nil).Intersection), set)
}

// Find mocks base method.
func (m *MockCertificateRequestSet) Find(id ezkube.ResourceId) (*v1alpha2.CertificateRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1alpha2.CertificateRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCertificateRequestSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCertificateRequestSet)(nil).Find), id)
}

// Length mocks base method.
func (m *MockCertificateRequestSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockCertificateRequestSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockCertificateRequestSet)(nil).Length))
}
