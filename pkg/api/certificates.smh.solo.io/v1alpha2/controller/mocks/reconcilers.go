// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/certificates.smh.solo.io/v1alpha2"
	controller "github.com/solo-io/service-mesh-hub/pkg/api/certificates.smh.solo.io/v1alpha2/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockIssuedCertificateReconciler is a mock of IssuedCertificateReconciler interface
type MockIssuedCertificateReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateReconcilerMockRecorder
}

// MockIssuedCertificateReconcilerMockRecorder is the mock recorder for MockIssuedCertificateReconciler
type MockIssuedCertificateReconcilerMockRecorder struct {
	mock *MockIssuedCertificateReconciler
}

// NewMockIssuedCertificateReconciler creates a new mock instance
func NewMockIssuedCertificateReconciler(ctrl *gomock.Controller) *MockIssuedCertificateReconciler {
	mock := &MockIssuedCertificateReconciler{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIssuedCertificateReconciler) EXPECT() *MockIssuedCertificateReconcilerMockRecorder {
	return m.recorder
}

// ReconcileIssuedCertificate mocks base method
func (m *MockIssuedCertificateReconciler) ReconcileIssuedCertificate(obj *v1alpha2.IssuedCertificate) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileIssuedCertificate", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileIssuedCertificate indicates an expected call of ReconcileIssuedCertificate
func (mr *MockIssuedCertificateReconcilerMockRecorder) ReconcileIssuedCertificate(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateReconciler)(nil).ReconcileIssuedCertificate), obj)
}

// MockIssuedCertificateDeletionReconciler is a mock of IssuedCertificateDeletionReconciler interface
type MockIssuedCertificateDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateDeletionReconcilerMockRecorder
}

// MockIssuedCertificateDeletionReconcilerMockRecorder is the mock recorder for MockIssuedCertificateDeletionReconciler
type MockIssuedCertificateDeletionReconcilerMockRecorder struct {
	mock *MockIssuedCertificateDeletionReconciler
}

// NewMockIssuedCertificateDeletionReconciler creates a new mock instance
func NewMockIssuedCertificateDeletionReconciler(ctrl *gomock.Controller) *MockIssuedCertificateDeletionReconciler {
	mock := &MockIssuedCertificateDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIssuedCertificateDeletionReconciler) EXPECT() *MockIssuedCertificateDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileIssuedCertificateDeletion mocks base method
func (m *MockIssuedCertificateDeletionReconciler) ReconcileIssuedCertificateDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileIssuedCertificateDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileIssuedCertificateDeletion indicates an expected call of ReconcileIssuedCertificateDeletion
func (mr *MockIssuedCertificateDeletionReconcilerMockRecorder) ReconcileIssuedCertificateDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileIssuedCertificateDeletion", reflect.TypeOf((*MockIssuedCertificateDeletionReconciler)(nil).ReconcileIssuedCertificateDeletion), req)
}

// MockIssuedCertificateFinalizer is a mock of IssuedCertificateFinalizer interface
type MockIssuedCertificateFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateFinalizerMockRecorder
}

// MockIssuedCertificateFinalizerMockRecorder is the mock recorder for MockIssuedCertificateFinalizer
type MockIssuedCertificateFinalizerMockRecorder struct {
	mock *MockIssuedCertificateFinalizer
}

// NewMockIssuedCertificateFinalizer creates a new mock instance
func NewMockIssuedCertificateFinalizer(ctrl *gomock.Controller) *MockIssuedCertificateFinalizer {
	mock := &MockIssuedCertificateFinalizer{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIssuedCertificateFinalizer) EXPECT() *MockIssuedCertificateFinalizerMockRecorder {
	return m.recorder
}

// ReconcileIssuedCertificate mocks base method
func (m *MockIssuedCertificateFinalizer) ReconcileIssuedCertificate(obj *v1alpha2.IssuedCertificate) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileIssuedCertificate", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileIssuedCertificate indicates an expected call of ReconcileIssuedCertificate
func (mr *MockIssuedCertificateFinalizerMockRecorder) ReconcileIssuedCertificate(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateFinalizer)(nil).ReconcileIssuedCertificate), obj)
}

// IssuedCertificateFinalizerName mocks base method
func (m *MockIssuedCertificateFinalizer) IssuedCertificateFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuedCertificateFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// IssuedCertificateFinalizerName indicates an expected call of IssuedCertificateFinalizerName
func (mr *MockIssuedCertificateFinalizerMockRecorder) IssuedCertificateFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuedCertificateFinalizerName", reflect.TypeOf((*MockIssuedCertificateFinalizer)(nil).IssuedCertificateFinalizerName))
}

// FinalizeIssuedCertificate mocks base method
func (m *MockIssuedCertificateFinalizer) FinalizeIssuedCertificate(obj *v1alpha2.IssuedCertificate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeIssuedCertificate", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeIssuedCertificate indicates an expected call of FinalizeIssuedCertificate
func (mr *MockIssuedCertificateFinalizerMockRecorder) FinalizeIssuedCertificate(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeIssuedCertificate", reflect.TypeOf((*MockIssuedCertificateFinalizer)(nil).FinalizeIssuedCertificate), obj)
}

// MockIssuedCertificateReconcileLoop is a mock of IssuedCertificateReconcileLoop interface
type MockIssuedCertificateReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateReconcileLoopMockRecorder
}

// MockIssuedCertificateReconcileLoopMockRecorder is the mock recorder for MockIssuedCertificateReconcileLoop
type MockIssuedCertificateReconcileLoopMockRecorder struct {
	mock *MockIssuedCertificateReconcileLoop
}

// NewMockIssuedCertificateReconcileLoop creates a new mock instance
func NewMockIssuedCertificateReconcileLoop(ctrl *gomock.Controller) *MockIssuedCertificateReconcileLoop {
	mock := &MockIssuedCertificateReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIssuedCertificateReconcileLoop) EXPECT() *MockIssuedCertificateReconcileLoopMockRecorder {
	return m.recorder
}

// RunIssuedCertificateReconciler mocks base method
func (m *MockIssuedCertificateReconcileLoop) RunIssuedCertificateReconciler(ctx context.Context, rec controller.IssuedCertificateReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunIssuedCertificateReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunIssuedCertificateReconciler indicates an expected call of RunIssuedCertificateReconciler
func (mr *MockIssuedCertificateReconcileLoopMockRecorder) RunIssuedCertificateReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunIssuedCertificateReconciler", reflect.TypeOf((*MockIssuedCertificateReconcileLoop)(nil).RunIssuedCertificateReconciler), varargs...)
}

// MockCertificateRequestReconciler is a mock of CertificateRequestReconciler interface
type MockCertificateRequestReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestReconcilerMockRecorder
}

// MockCertificateRequestReconcilerMockRecorder is the mock recorder for MockCertificateRequestReconciler
type MockCertificateRequestReconcilerMockRecorder struct {
	mock *MockCertificateRequestReconciler
}

// NewMockCertificateRequestReconciler creates a new mock instance
func NewMockCertificateRequestReconciler(ctrl *gomock.Controller) *MockCertificateRequestReconciler {
	mock := &MockCertificateRequestReconciler{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertificateRequestReconciler) EXPECT() *MockCertificateRequestReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCertificateRequest mocks base method
func (m *MockCertificateRequestReconciler) ReconcileCertificateRequest(obj *v1alpha2.CertificateRequest) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCertificateRequest", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileCertificateRequest indicates an expected call of ReconcileCertificateRequest
func (mr *MockCertificateRequestReconcilerMockRecorder) ReconcileCertificateRequest(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCertificateRequest", reflect.TypeOf((*MockCertificateRequestReconciler)(nil).ReconcileCertificateRequest), obj)
}

// MockCertificateRequestDeletionReconciler is a mock of CertificateRequestDeletionReconciler interface
type MockCertificateRequestDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestDeletionReconcilerMockRecorder
}

// MockCertificateRequestDeletionReconcilerMockRecorder is the mock recorder for MockCertificateRequestDeletionReconciler
type MockCertificateRequestDeletionReconcilerMockRecorder struct {
	mock *MockCertificateRequestDeletionReconciler
}

// NewMockCertificateRequestDeletionReconciler creates a new mock instance
func NewMockCertificateRequestDeletionReconciler(ctrl *gomock.Controller) *MockCertificateRequestDeletionReconciler {
	mock := &MockCertificateRequestDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertificateRequestDeletionReconciler) EXPECT() *MockCertificateRequestDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCertificateRequestDeletion mocks base method
func (m *MockCertificateRequestDeletionReconciler) ReconcileCertificateRequestDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCertificateRequestDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileCertificateRequestDeletion indicates an expected call of ReconcileCertificateRequestDeletion
func (mr *MockCertificateRequestDeletionReconcilerMockRecorder) ReconcileCertificateRequestDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCertificateRequestDeletion", reflect.TypeOf((*MockCertificateRequestDeletionReconciler)(nil).ReconcileCertificateRequestDeletion), req)
}

// MockCertificateRequestFinalizer is a mock of CertificateRequestFinalizer interface
type MockCertificateRequestFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestFinalizerMockRecorder
}

// MockCertificateRequestFinalizerMockRecorder is the mock recorder for MockCertificateRequestFinalizer
type MockCertificateRequestFinalizerMockRecorder struct {
	mock *MockCertificateRequestFinalizer
}

// NewMockCertificateRequestFinalizer creates a new mock instance
func NewMockCertificateRequestFinalizer(ctrl *gomock.Controller) *MockCertificateRequestFinalizer {
	mock := &MockCertificateRequestFinalizer{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertificateRequestFinalizer) EXPECT() *MockCertificateRequestFinalizerMockRecorder {
	return m.recorder
}

// ReconcileCertificateRequest mocks base method
func (m *MockCertificateRequestFinalizer) ReconcileCertificateRequest(obj *v1alpha2.CertificateRequest) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCertificateRequest", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileCertificateRequest indicates an expected call of ReconcileCertificateRequest
func (mr *MockCertificateRequestFinalizerMockRecorder) ReconcileCertificateRequest(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCertificateRequest", reflect.TypeOf((*MockCertificateRequestFinalizer)(nil).ReconcileCertificateRequest), obj)
}

// CertificateRequestFinalizerName mocks base method
func (m *MockCertificateRequestFinalizer) CertificateRequestFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificateRequestFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// CertificateRequestFinalizerName indicates an expected call of CertificateRequestFinalizerName
func (mr *MockCertificateRequestFinalizerMockRecorder) CertificateRequestFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificateRequestFinalizerName", reflect.TypeOf((*MockCertificateRequestFinalizer)(nil).CertificateRequestFinalizerName))
}

// FinalizeCertificateRequest mocks base method
func (m *MockCertificateRequestFinalizer) FinalizeCertificateRequest(obj *v1alpha2.CertificateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCertificateRequest", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeCertificateRequest indicates an expected call of FinalizeCertificateRequest
func (mr *MockCertificateRequestFinalizerMockRecorder) FinalizeCertificateRequest(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCertificateRequest", reflect.TypeOf((*MockCertificateRequestFinalizer)(nil).FinalizeCertificateRequest), obj)
}

// MockCertificateRequestReconcileLoop is a mock of CertificateRequestReconcileLoop interface
type MockCertificateRequestReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestReconcileLoopMockRecorder
}

// MockCertificateRequestReconcileLoopMockRecorder is the mock recorder for MockCertificateRequestReconcileLoop
type MockCertificateRequestReconcileLoopMockRecorder struct {
	mock *MockCertificateRequestReconcileLoop
}

// NewMockCertificateRequestReconcileLoop creates a new mock instance
func NewMockCertificateRequestReconcileLoop(ctrl *gomock.Controller) *MockCertificateRequestReconcileLoop {
	mock := &MockCertificateRequestReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertificateRequestReconcileLoop) EXPECT() *MockCertificateRequestReconcileLoopMockRecorder {
	return m.recorder
}

// RunCertificateRequestReconciler mocks base method
func (m *MockCertificateRequestReconcileLoop) RunCertificateRequestReconciler(ctx context.Context, rec controller.CertificateRequestReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCertificateRequestReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCertificateRequestReconciler indicates an expected call of RunCertificateRequestReconciler
func (mr *MockCertificateRequestReconcileLoopMockRecorder) RunCertificateRequestReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCertificateRequestReconciler", reflect.TypeOf((*MockCertificateRequestReconcileLoop)(nil).RunCertificateRequestReconciler), varargs...)
}
