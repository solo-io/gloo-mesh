// Code generated by MockGen. DO NOT EDIT.
// Source: ./sets.go

// Package mock_v1alpha1sets is a generated GoMock package.
package mock_v1alpha1sets

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/observability.enterprise.mesh.gloo.solo.io/v1alpha1"
	v1alpha1sets "github.com/solo-io/gloo-mesh/pkg/api/observability.enterprise.mesh.gloo.solo.io/v1alpha1/sets"
	sets "github.com/solo-io/skv2/contrib/pkg/sets"
	ezkube "github.com/solo-io/skv2/pkg/ezkube"
	sets0 "k8s.io/apimachinery/pkg/util/sets"
)

// MockAccessLogCollectionSet is a mock of AccessLogCollectionSet interface
type MockAccessLogCollectionSet struct {
	ctrl     *gomock.Controller
	recorder *MockAccessLogCollectionSetMockRecorder
}

// MockAccessLogCollectionSetMockRecorder is the mock recorder for MockAccessLogCollectionSet
type MockAccessLogCollectionSetMockRecorder struct {
	mock *MockAccessLogCollectionSet
}

// NewMockAccessLogCollectionSet creates a new mock instance
func NewMockAccessLogCollectionSet(ctrl *gomock.Controller) *MockAccessLogCollectionSet {
	mock := &MockAccessLogCollectionSet{ctrl: ctrl}
	mock.recorder = &MockAccessLogCollectionSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccessLogCollectionSet) EXPECT() *MockAccessLogCollectionSetMockRecorder {
	return m.recorder
}

// Keys mocks base method
func (m *MockAccessLogCollectionSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys
func (mr *MockAccessLogCollectionSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockAccessLogCollectionSet)(nil).Keys))
}

// List mocks base method
func (m *MockAccessLogCollectionSet) List(filterResource ...func(*v1alpha1.AccessLogCollection) bool) []*v1alpha1.AccessLogCollection {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1alpha1.AccessLogCollection)
	return ret0
}

// List indicates an expected call of List
func (mr *MockAccessLogCollectionSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccessLogCollectionSet)(nil).List), filterResource...)
}

// Map mocks base method
func (m *MockAccessLogCollectionSet) Map() map[string]*v1alpha1.AccessLogCollection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1alpha1.AccessLogCollection)
	return ret0
}

// Map indicates an expected call of Map
func (mr *MockAccessLogCollectionSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockAccessLogCollectionSet)(nil).Map))
}

// Insert mocks base method
func (m *MockAccessLogCollectionSet) Insert(accessLogCollection ...*v1alpha1.AccessLogCollection) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range accessLogCollection {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert
func (mr *MockAccessLogCollectionSetMockRecorder) Insert(accessLogCollection ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAccessLogCollectionSet)(nil).Insert), accessLogCollection...)
}

// Equal mocks base method
func (m *MockAccessLogCollectionSet) Equal(accessLogCollectionSet v1alpha1sets.AccessLogCollectionSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", accessLogCollectionSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockAccessLogCollectionSetMockRecorder) Equal(accessLogCollectionSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockAccessLogCollectionSet)(nil).Equal), accessLogCollectionSet)
}

// Has mocks base method
func (m *MockAccessLogCollectionSet) Has(accessLogCollection ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", accessLogCollection)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockAccessLogCollectionSetMockRecorder) Has(accessLogCollection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockAccessLogCollectionSet)(nil).Has), accessLogCollection)
}

// Delete mocks base method
func (m *MockAccessLogCollectionSet) Delete(accessLogCollection ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", accessLogCollection)
}

// Delete indicates an expected call of Delete
func (mr *MockAccessLogCollectionSetMockRecorder) Delete(accessLogCollection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccessLogCollectionSet)(nil).Delete), accessLogCollection)
}

// Union mocks base method
func (m *MockAccessLogCollectionSet) Union(set v1alpha1sets.AccessLogCollectionSet) v1alpha1sets.AccessLogCollectionSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1alpha1sets.AccessLogCollectionSet)
	return ret0
}

// Union indicates an expected call of Union
func (mr *MockAccessLogCollectionSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockAccessLogCollectionSet)(nil).Union), set)
}

// Difference mocks base method
func (m *MockAccessLogCollectionSet) Difference(set v1alpha1sets.AccessLogCollectionSet) v1alpha1sets.AccessLogCollectionSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1alpha1sets.AccessLogCollectionSet)
	return ret0
}

// Difference indicates an expected call of Difference
func (mr *MockAccessLogCollectionSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockAccessLogCollectionSet)(nil).Difference), set)
}

// Intersection mocks base method
func (m *MockAccessLogCollectionSet) Intersection(set v1alpha1sets.AccessLogCollectionSet) v1alpha1sets.AccessLogCollectionSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1alpha1sets.AccessLogCollectionSet)
	return ret0
}

// Intersection indicates an expected call of Intersection
func (mr *MockAccessLogCollectionSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockAccessLogCollectionSet)(nil).Intersection), set)
}

// Find mocks base method
func (m *MockAccessLogCollectionSet) Find(id ezkube.ResourceId) (*v1alpha1.AccessLogCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1alpha1.AccessLogCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockAccessLogCollectionSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAccessLogCollectionSet)(nil).Find), id)
}

// Length mocks base method
func (m *MockAccessLogCollectionSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockAccessLogCollectionSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockAccessLogCollectionSet)(nil).Length))
}

// Generic mocks base method
func (m *MockAccessLogCollectionSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockAccessLogCollectionSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockAccessLogCollectionSet)(nil).Generic))
}

// Delta mocks base method
func (m *MockAccessLogCollectionSet) Delta(newSet v1alpha1sets.AccessLogCollectionSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockAccessLogCollectionSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockAccessLogCollectionSet)(nil).Delta), newSet)
}
