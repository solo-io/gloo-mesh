// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1alpha1

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the observability.enterprise.mesh.gloo.solo.io/v1alpha1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the observability.enterprise.mesh.gloo.solo.io/v1alpha1 APIs
type Clientset interface {
	// clienset for the observability.enterprise.mesh.gloo.solo.io/v1alpha1/v1alpha1 APIs
	AccessLogCollections() AccessLogCollectionClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the observability.enterprise.mesh.gloo.solo.io/v1alpha1/v1alpha1 APIs
func (c *clientSet) AccessLogCollections() AccessLogCollectionClient {
	return NewAccessLogCollectionClient(c.client)
}

// Reader knows how to read and list AccessLogCollections.
type AccessLogCollectionReader interface {
	// Get retrieves a AccessLogCollection for the given object key
	GetAccessLogCollection(ctx context.Context, key client.ObjectKey) (*AccessLogCollection, error)

	// List retrieves list of AccessLogCollections for a given namespace and list options.
	ListAccessLogCollection(ctx context.Context, opts ...client.ListOption) (*AccessLogCollectionList, error)
}

// AccessLogCollectionTransitionFunction instructs the AccessLogCollectionWriter how to transition between an existing
// AccessLogCollection object and a desired on an Upsert
type AccessLogCollectionTransitionFunction func(existing, desired *AccessLogCollection) error

// Writer knows how to create, delete, and update AccessLogCollections.
type AccessLogCollectionWriter interface {
	// Create saves the AccessLogCollection object.
	CreateAccessLogCollection(ctx context.Context, obj *AccessLogCollection, opts ...client.CreateOption) error

	// Delete deletes the AccessLogCollection object.
	DeleteAccessLogCollection(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given AccessLogCollection object.
	UpdateAccessLogCollection(ctx context.Context, obj *AccessLogCollection, opts ...client.UpdateOption) error

	// Patch patches the given AccessLogCollection object.
	PatchAccessLogCollection(ctx context.Context, obj *AccessLogCollection, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all AccessLogCollection objects matching the given options.
	DeleteAllOfAccessLogCollection(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the AccessLogCollection object.
	UpsertAccessLogCollection(ctx context.Context, obj *AccessLogCollection, transitionFuncs ...AccessLogCollectionTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a AccessLogCollection object.
type AccessLogCollectionStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given AccessLogCollection object.
	UpdateAccessLogCollectionStatus(ctx context.Context, obj *AccessLogCollection, opts ...client.UpdateOption) error

	// Patch patches the given AccessLogCollection object's subresource.
	PatchAccessLogCollectionStatus(ctx context.Context, obj *AccessLogCollection, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on AccessLogCollections.
type AccessLogCollectionClient interface {
	AccessLogCollectionReader
	AccessLogCollectionWriter
	AccessLogCollectionStatusWriter
}

type accessLogCollectionClient struct {
	client client.Client
}

func NewAccessLogCollectionClient(client client.Client) *accessLogCollectionClient {
	return &accessLogCollectionClient{client: client}
}

func (c *accessLogCollectionClient) GetAccessLogCollection(ctx context.Context, key client.ObjectKey) (*AccessLogCollection, error) {
	obj := &AccessLogCollection{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *accessLogCollectionClient) ListAccessLogCollection(ctx context.Context, opts ...client.ListOption) (*AccessLogCollectionList, error) {
	list := &AccessLogCollectionList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *accessLogCollectionClient) CreateAccessLogCollection(ctx context.Context, obj *AccessLogCollection, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *accessLogCollectionClient) DeleteAccessLogCollection(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &AccessLogCollection{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *accessLogCollectionClient) UpdateAccessLogCollection(ctx context.Context, obj *AccessLogCollection, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *accessLogCollectionClient) PatchAccessLogCollection(ctx context.Context, obj *AccessLogCollection, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *accessLogCollectionClient) DeleteAllOfAccessLogCollection(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &AccessLogCollection{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *accessLogCollectionClient) UpsertAccessLogCollection(ctx context.Context, obj *AccessLogCollection, transitionFuncs ...AccessLogCollectionTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*AccessLogCollection), desired.(*AccessLogCollection)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *accessLogCollectionClient) UpdateAccessLogCollectionStatus(ctx context.Context, obj *AccessLogCollection, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *accessLogCollectionClient) PatchAccessLogCollectionStatus(ctx context.Context, obj *AccessLogCollection, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides AccessLogCollectionClients for multiple clusters.
type MulticlusterAccessLogCollectionClient interface {
	// Cluster returns a AccessLogCollectionClient for the given cluster
	Cluster(cluster string) (AccessLogCollectionClient, error)
}

type multiclusterAccessLogCollectionClient struct {
	client multicluster.Client
}

func NewMulticlusterAccessLogCollectionClient(client multicluster.Client) MulticlusterAccessLogCollectionClient {
	return &multiclusterAccessLogCollectionClient{client: client}
}

func (m *multiclusterAccessLogCollectionClient) Cluster(cluster string) (AccessLogCollectionClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewAccessLogCollectionClient(client), nil
}
