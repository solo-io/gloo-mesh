// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	observability_enterprise_mesh_gloo_solo_io_v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/observability.enterprise.mesh.gloo.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the AccessLogCollection Resource across clusters.
// implemented by the user
type MulticlusterAccessLogCollectionReconciler interface {
	ReconcileAccessLogCollection(clusterName string, obj *observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection) (reconcile.Result, error)
}

// Reconcile deletion events for the AccessLogCollection Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterAccessLogCollectionDeletionReconciler interface {
	ReconcileAccessLogCollectionDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterAccessLogCollectionReconcilerFuncs struct {
	OnReconcileAccessLogCollection         func(clusterName string, obj *observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection) (reconcile.Result, error)
	OnReconcileAccessLogCollectionDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterAccessLogCollectionReconcilerFuncs) ReconcileAccessLogCollection(clusterName string, obj *observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection) (reconcile.Result, error) {
	if f.OnReconcileAccessLogCollection == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileAccessLogCollection(clusterName, obj)
}

func (f *MulticlusterAccessLogCollectionReconcilerFuncs) ReconcileAccessLogCollectionDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileAccessLogCollectionDeletion == nil {
		return nil
	}
	return f.OnReconcileAccessLogCollectionDeletion(clusterName, req)
}

type MulticlusterAccessLogCollectionReconcileLoop interface {
	// AddMulticlusterAccessLogCollectionReconciler adds a MulticlusterAccessLogCollectionReconciler to the MulticlusterAccessLogCollectionReconcileLoop.
	AddMulticlusterAccessLogCollectionReconciler(ctx context.Context, rec MulticlusterAccessLogCollectionReconciler, predicates ...predicate.Predicate)
}

type multiclusterAccessLogCollectionReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterAccessLogCollectionReconcileLoop) AddMulticlusterAccessLogCollectionReconciler(ctx context.Context, rec MulticlusterAccessLogCollectionReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericAccessLogCollectionMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterAccessLogCollectionReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterAccessLogCollectionReconcileLoop {
	return &multiclusterAccessLogCollectionReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection{}, options)}
}

type genericAccessLogCollectionMulticlusterReconciler struct {
	reconciler MulticlusterAccessLogCollectionReconciler
}

func (g genericAccessLogCollectionMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterAccessLogCollectionDeletionReconciler); ok {
		return deletionReconciler.ReconcileAccessLogCollectionDeletion(cluster, req)
	}
	return nil
}

func (g genericAccessLogCollectionMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: AccessLogCollection handler received event for %T", object)
	}
	return g.reconciler.ReconcileAccessLogCollection(cluster, obj)
}
