// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/observability.enterprise.mesh.gloo.solo.io/v1alpha1"
	controller "github.com/solo-io/gloo-mesh/pkg/api/observability.enterprise.mesh.gloo.solo.io/v1alpha1/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockAccessLogCollectionEventHandler is a mock of AccessLogCollectionEventHandler interface
type MockAccessLogCollectionEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAccessLogCollectionEventHandlerMockRecorder
}

// MockAccessLogCollectionEventHandlerMockRecorder is the mock recorder for MockAccessLogCollectionEventHandler
type MockAccessLogCollectionEventHandlerMockRecorder struct {
	mock *MockAccessLogCollectionEventHandler
}

// NewMockAccessLogCollectionEventHandler creates a new mock instance
func NewMockAccessLogCollectionEventHandler(ctrl *gomock.Controller) *MockAccessLogCollectionEventHandler {
	mock := &MockAccessLogCollectionEventHandler{ctrl: ctrl}
	mock.recorder = &MockAccessLogCollectionEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccessLogCollectionEventHandler) EXPECT() *MockAccessLogCollectionEventHandlerMockRecorder {
	return m.recorder
}

// CreateAccessLogCollection mocks base method
func (m *MockAccessLogCollectionEventHandler) CreateAccessLogCollection(obj *v1alpha1.AccessLogCollection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessLogCollection", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccessLogCollection indicates an expected call of CreateAccessLogCollection
func (mr *MockAccessLogCollectionEventHandlerMockRecorder) CreateAccessLogCollection(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessLogCollection", reflect.TypeOf((*MockAccessLogCollectionEventHandler)(nil).CreateAccessLogCollection), obj)
}

// UpdateAccessLogCollection mocks base method
func (m *MockAccessLogCollectionEventHandler) UpdateAccessLogCollection(old, new *v1alpha1.AccessLogCollection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessLogCollection", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessLogCollection indicates an expected call of UpdateAccessLogCollection
func (mr *MockAccessLogCollectionEventHandlerMockRecorder) UpdateAccessLogCollection(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessLogCollection", reflect.TypeOf((*MockAccessLogCollectionEventHandler)(nil).UpdateAccessLogCollection), old, new)
}

// DeleteAccessLogCollection mocks base method
func (m *MockAccessLogCollectionEventHandler) DeleteAccessLogCollection(obj *v1alpha1.AccessLogCollection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessLogCollection", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessLogCollection indicates an expected call of DeleteAccessLogCollection
func (mr *MockAccessLogCollectionEventHandlerMockRecorder) DeleteAccessLogCollection(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessLogCollection", reflect.TypeOf((*MockAccessLogCollectionEventHandler)(nil).DeleteAccessLogCollection), obj)
}

// GenericAccessLogCollection mocks base method
func (m *MockAccessLogCollectionEventHandler) GenericAccessLogCollection(obj *v1alpha1.AccessLogCollection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericAccessLogCollection", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericAccessLogCollection indicates an expected call of GenericAccessLogCollection
func (mr *MockAccessLogCollectionEventHandlerMockRecorder) GenericAccessLogCollection(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericAccessLogCollection", reflect.TypeOf((*MockAccessLogCollectionEventHandler)(nil).GenericAccessLogCollection), obj)
}

// MockAccessLogCollectionEventWatcher is a mock of AccessLogCollectionEventWatcher interface
type MockAccessLogCollectionEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockAccessLogCollectionEventWatcherMockRecorder
}

// MockAccessLogCollectionEventWatcherMockRecorder is the mock recorder for MockAccessLogCollectionEventWatcher
type MockAccessLogCollectionEventWatcherMockRecorder struct {
	mock *MockAccessLogCollectionEventWatcher
}

// NewMockAccessLogCollectionEventWatcher creates a new mock instance
func NewMockAccessLogCollectionEventWatcher(ctrl *gomock.Controller) *MockAccessLogCollectionEventWatcher {
	mock := &MockAccessLogCollectionEventWatcher{ctrl: ctrl}
	mock.recorder = &MockAccessLogCollectionEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccessLogCollectionEventWatcher) EXPECT() *MockAccessLogCollectionEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
func (m *MockAccessLogCollectionEventWatcher) AddEventHandler(ctx context.Context, h controller.AccessLogCollectionEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler
func (mr *MockAccessLogCollectionEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockAccessLogCollectionEventWatcher)(nil).AddEventHandler), varargs...)
}
