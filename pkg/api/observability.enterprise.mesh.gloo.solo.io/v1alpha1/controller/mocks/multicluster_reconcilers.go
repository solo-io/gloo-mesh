// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/observability.enterprise.mesh.gloo.solo.io/v1alpha1"
	controller "github.com/solo-io/gloo-mesh/pkg/api/observability.enterprise.mesh.gloo.solo.io/v1alpha1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterAccessLogCollectionReconciler is a mock of MulticlusterAccessLogCollectionReconciler interface
type MockMulticlusterAccessLogCollectionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterAccessLogCollectionReconcilerMockRecorder
}

// MockMulticlusterAccessLogCollectionReconcilerMockRecorder is the mock recorder for MockMulticlusterAccessLogCollectionReconciler
type MockMulticlusterAccessLogCollectionReconcilerMockRecorder struct {
	mock *MockMulticlusterAccessLogCollectionReconciler
}

// NewMockMulticlusterAccessLogCollectionReconciler creates a new mock instance
func NewMockMulticlusterAccessLogCollectionReconciler(ctrl *gomock.Controller) *MockMulticlusterAccessLogCollectionReconciler {
	mock := &MockMulticlusterAccessLogCollectionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterAccessLogCollectionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterAccessLogCollectionReconciler) EXPECT() *MockMulticlusterAccessLogCollectionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileAccessLogCollection mocks base method
func (m *MockMulticlusterAccessLogCollectionReconciler) ReconcileAccessLogCollection(clusterName string, obj *v1alpha1.AccessLogCollection) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileAccessLogCollection", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileAccessLogCollection indicates an expected call of ReconcileAccessLogCollection
func (mr *MockMulticlusterAccessLogCollectionReconcilerMockRecorder) ReconcileAccessLogCollection(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileAccessLogCollection", reflect.TypeOf((*MockMulticlusterAccessLogCollectionReconciler)(nil).ReconcileAccessLogCollection), clusterName, obj)
}

// MockMulticlusterAccessLogCollectionDeletionReconciler is a mock of MulticlusterAccessLogCollectionDeletionReconciler interface
type MockMulticlusterAccessLogCollectionDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterAccessLogCollectionDeletionReconcilerMockRecorder
}

// MockMulticlusterAccessLogCollectionDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterAccessLogCollectionDeletionReconciler
type MockMulticlusterAccessLogCollectionDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterAccessLogCollectionDeletionReconciler
}

// NewMockMulticlusterAccessLogCollectionDeletionReconciler creates a new mock instance
func NewMockMulticlusterAccessLogCollectionDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterAccessLogCollectionDeletionReconciler {
	mock := &MockMulticlusterAccessLogCollectionDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterAccessLogCollectionDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterAccessLogCollectionDeletionReconciler) EXPECT() *MockMulticlusterAccessLogCollectionDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileAccessLogCollectionDeletion mocks base method
func (m *MockMulticlusterAccessLogCollectionDeletionReconciler) ReconcileAccessLogCollectionDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileAccessLogCollectionDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileAccessLogCollectionDeletion indicates an expected call of ReconcileAccessLogCollectionDeletion
func (mr *MockMulticlusterAccessLogCollectionDeletionReconcilerMockRecorder) ReconcileAccessLogCollectionDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileAccessLogCollectionDeletion", reflect.TypeOf((*MockMulticlusterAccessLogCollectionDeletionReconciler)(nil).ReconcileAccessLogCollectionDeletion), clusterName, req)
}

// MockMulticlusterAccessLogCollectionReconcileLoop is a mock of MulticlusterAccessLogCollectionReconcileLoop interface
type MockMulticlusterAccessLogCollectionReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterAccessLogCollectionReconcileLoopMockRecorder
}

// MockMulticlusterAccessLogCollectionReconcileLoopMockRecorder is the mock recorder for MockMulticlusterAccessLogCollectionReconcileLoop
type MockMulticlusterAccessLogCollectionReconcileLoopMockRecorder struct {
	mock *MockMulticlusterAccessLogCollectionReconcileLoop
}

// NewMockMulticlusterAccessLogCollectionReconcileLoop creates a new mock instance
func NewMockMulticlusterAccessLogCollectionReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterAccessLogCollectionReconcileLoop {
	mock := &MockMulticlusterAccessLogCollectionReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterAccessLogCollectionReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterAccessLogCollectionReconcileLoop) EXPECT() *MockMulticlusterAccessLogCollectionReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterAccessLogCollectionReconciler mocks base method
func (m *MockMulticlusterAccessLogCollectionReconcileLoop) AddMulticlusterAccessLogCollectionReconciler(ctx context.Context, rec controller.MulticlusterAccessLogCollectionReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterAccessLogCollectionReconciler", varargs...)
}

// AddMulticlusterAccessLogCollectionReconciler indicates an expected call of AddMulticlusterAccessLogCollectionReconciler
func (mr *MockMulticlusterAccessLogCollectionReconcileLoopMockRecorder) AddMulticlusterAccessLogCollectionReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterAccessLogCollectionReconciler", reflect.TypeOf((*MockMulticlusterAccessLogCollectionReconcileLoop)(nil).AddMulticlusterAccessLogCollectionReconciler), varargs...)
}
