// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	observability_enterprise_mesh_gloo_solo_io_v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/observability.enterprise.mesh.gloo.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the AccessLogCollection Resource
// DEPRECATED: Prefer reconciler pattern.
type AccessLogCollectionEventHandler interface {
	CreateAccessLogCollection(obj *observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection) error
	UpdateAccessLogCollection(old, new *observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection) error
	DeleteAccessLogCollection(obj *observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection) error
	GenericAccessLogCollection(obj *observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection) error
}

type AccessLogCollectionEventHandlerFuncs struct {
	OnCreate  func(obj *observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection) error
	OnUpdate  func(old, new *observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection) error
	OnDelete  func(obj *observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection) error
	OnGeneric func(obj *observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection) error
}

func (f *AccessLogCollectionEventHandlerFuncs) CreateAccessLogCollection(obj *observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *AccessLogCollectionEventHandlerFuncs) DeleteAccessLogCollection(obj *observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *AccessLogCollectionEventHandlerFuncs) UpdateAccessLogCollection(objOld, objNew *observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *AccessLogCollectionEventHandlerFuncs) GenericAccessLogCollection(obj *observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type AccessLogCollectionEventWatcher interface {
	AddEventHandler(ctx context.Context, h AccessLogCollectionEventHandler, predicates ...predicate.Predicate) error
}

type accessLogCollectionEventWatcher struct {
	watcher events.EventWatcher
}

func NewAccessLogCollectionEventWatcher(name string, mgr manager.Manager) AccessLogCollectionEventWatcher {
	return &accessLogCollectionEventWatcher{
		watcher: events.NewWatcher(name, mgr, &observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection{}),
	}
}

func (c *accessLogCollectionEventWatcher) AddEventHandler(ctx context.Context, h AccessLogCollectionEventHandler, predicates ...predicate.Predicate) error {
	handler := genericAccessLogCollectionHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericAccessLogCollectionHandler implements a generic events.EventHandler
type genericAccessLogCollectionHandler struct {
	handler AccessLogCollectionEventHandler
}

func (h genericAccessLogCollectionHandler) Create(object runtime.Object) error {
	obj, ok := object.(*observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection)
	if !ok {
		return errors.Errorf("internal error: AccessLogCollection handler received event for %T", object)
	}
	return h.handler.CreateAccessLogCollection(obj)
}

func (h genericAccessLogCollectionHandler) Delete(object runtime.Object) error {
	obj, ok := object.(*observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection)
	if !ok {
		return errors.Errorf("internal error: AccessLogCollection handler received event for %T", object)
	}
	return h.handler.DeleteAccessLogCollection(obj)
}

func (h genericAccessLogCollectionHandler) Update(old, new runtime.Object) error {
	objOld, ok := old.(*observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection)
	if !ok {
		return errors.Errorf("internal error: AccessLogCollection handler received event for %T", old)
	}
	objNew, ok := new.(*observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection)
	if !ok {
		return errors.Errorf("internal error: AccessLogCollection handler received event for %T", new)
	}
	return h.handler.UpdateAccessLogCollection(objOld, objNew)
}

func (h genericAccessLogCollectionHandler) Generic(object runtime.Object) error {
	obj, ok := object.(*observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogCollection)
	if !ok {
		return errors.Errorf("internal error: AccessLogCollection handler received event for %T", object)
	}
	return h.handler.GenericAccessLogCollection(obj)
}
