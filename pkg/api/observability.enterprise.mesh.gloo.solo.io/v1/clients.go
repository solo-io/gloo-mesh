// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the observability.enterprise.mesh.gloo.solo.io/v1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the observability.enterprise.mesh.gloo.solo.io/v1 APIs
type Clientset interface {
	// clienset for the observability.enterprise.mesh.gloo.solo.io/v1/v1 APIs
	AccessLogRecords() AccessLogRecordClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the observability.enterprise.mesh.gloo.solo.io/v1/v1 APIs
func (c *clientSet) AccessLogRecords() AccessLogRecordClient {
	return NewAccessLogRecordClient(c.client)
}

// Reader knows how to read and list AccessLogRecords.
type AccessLogRecordReader interface {
	// Get retrieves a AccessLogRecord for the given object key
	GetAccessLogRecord(ctx context.Context, key client.ObjectKey) (*AccessLogRecord, error)

	// List retrieves list of AccessLogRecords for a given namespace and list options.
	ListAccessLogRecord(ctx context.Context, opts ...client.ListOption) (*AccessLogRecordList, error)
}

// AccessLogRecordTransitionFunction instructs the AccessLogRecordWriter how to transition between an existing
// AccessLogRecord object and a desired on an Upsert
type AccessLogRecordTransitionFunction func(existing, desired *AccessLogRecord) error

// Writer knows how to create, delete, and update AccessLogRecords.
type AccessLogRecordWriter interface {
	// Create saves the AccessLogRecord object.
	CreateAccessLogRecord(ctx context.Context, obj *AccessLogRecord, opts ...client.CreateOption) error

	// Delete deletes the AccessLogRecord object.
	DeleteAccessLogRecord(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given AccessLogRecord object.
	UpdateAccessLogRecord(ctx context.Context, obj *AccessLogRecord, opts ...client.UpdateOption) error

	// Patch patches the given AccessLogRecord object.
	PatchAccessLogRecord(ctx context.Context, obj *AccessLogRecord, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all AccessLogRecord objects matching the given options.
	DeleteAllOfAccessLogRecord(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the AccessLogRecord object.
	UpsertAccessLogRecord(ctx context.Context, obj *AccessLogRecord, transitionFuncs ...AccessLogRecordTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a AccessLogRecord object.
type AccessLogRecordStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given AccessLogRecord object.
	UpdateAccessLogRecordStatus(ctx context.Context, obj *AccessLogRecord, opts ...client.UpdateOption) error

	// Patch patches the given AccessLogRecord object's subresource.
	PatchAccessLogRecordStatus(ctx context.Context, obj *AccessLogRecord, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on AccessLogRecords.
type AccessLogRecordClient interface {
	AccessLogRecordReader
	AccessLogRecordWriter
	AccessLogRecordStatusWriter
}

type accessLogRecordClient struct {
	client client.Client
}

func NewAccessLogRecordClient(client client.Client) *accessLogRecordClient {
	return &accessLogRecordClient{client: client}
}

func (c *accessLogRecordClient) GetAccessLogRecord(ctx context.Context, key client.ObjectKey) (*AccessLogRecord, error) {
	obj := &AccessLogRecord{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *accessLogRecordClient) ListAccessLogRecord(ctx context.Context, opts ...client.ListOption) (*AccessLogRecordList, error) {
	list := &AccessLogRecordList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *accessLogRecordClient) CreateAccessLogRecord(ctx context.Context, obj *AccessLogRecord, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *accessLogRecordClient) DeleteAccessLogRecord(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &AccessLogRecord{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *accessLogRecordClient) UpdateAccessLogRecord(ctx context.Context, obj *AccessLogRecord, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *accessLogRecordClient) PatchAccessLogRecord(ctx context.Context, obj *AccessLogRecord, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *accessLogRecordClient) DeleteAllOfAccessLogRecord(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &AccessLogRecord{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *accessLogRecordClient) UpsertAccessLogRecord(ctx context.Context, obj *AccessLogRecord, transitionFuncs ...AccessLogRecordTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*AccessLogRecord), desired.(*AccessLogRecord)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *accessLogRecordClient) UpdateAccessLogRecordStatus(ctx context.Context, obj *AccessLogRecord, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *accessLogRecordClient) PatchAccessLogRecordStatus(ctx context.Context, obj *AccessLogRecord, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides AccessLogRecordClients for multiple clusters.
type MulticlusterAccessLogRecordClient interface {
	// Cluster returns a AccessLogRecordClient for the given cluster
	Cluster(cluster string) (AccessLogRecordClient, error)
}

type multiclusterAccessLogRecordClient struct {
	client multicluster.Client
}

func NewMulticlusterAccessLogRecordClient(client multicluster.Client) MulticlusterAccessLogRecordClient {
	return &multiclusterAccessLogRecordClient{client: client}
}

func (m *multiclusterAccessLogRecordClient) Cluster(cluster string) (AccessLogRecordClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewAccessLogRecordClient(client), nil
}
