// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1alpha2sets

import (
	settings_smh_solo_io_v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/settings.smh.solo.io/v1alpha2"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type SettingsSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*settings_smh_solo_io_v1alpha2.Settings) bool) []*settings_smh_solo_io_v1alpha2.Settings
	// Return the Set as a map of key to resource.
	Map() map[string]*settings_smh_solo_io_v1alpha2.Settings
	// Insert a resource into the set.
	Insert(settings ...*settings_smh_solo_io_v1alpha2.Settings)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(settingsSet SettingsSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(settings ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(settings ezkube.ResourceId)
	// Return the union with the provided set
	Union(set SettingsSet) SettingsSet
	// Return the difference with the provided set
	Difference(set SettingsSet) SettingsSet
	// Return the intersection with the provided set
	Intersection(set SettingsSet) SettingsSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*settings_smh_solo_io_v1alpha2.Settings, error)
	// Get the length of the set
	Length() int
}

func makeGenericSettingsSet(settingsList []*settings_smh_solo_io_v1alpha2.Settings) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range settingsList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type settingsSet struct {
	set sksets.ResourceSet
}

func NewSettingsSet(settingsList ...*settings_smh_solo_io_v1alpha2.Settings) SettingsSet {
	return &settingsSet{set: makeGenericSettingsSet(settingsList)}
}

func NewSettingsSetFromList(settingsList *settings_smh_solo_io_v1alpha2.SettingsList) SettingsSet {
	list := make([]*settings_smh_solo_io_v1alpha2.Settings, 0, len(settingsList.Items))
	for idx := range settingsList.Items {
		list = append(list, &settingsList.Items[idx])
	}
	return &settingsSet{set: makeGenericSettingsSet(list)}
}

func (s *settingsSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.set.Keys()
}

func (s *settingsSet) List(filterResource ...func(*settings_smh_solo_io_v1alpha2.Settings) bool) []*settings_smh_solo_io_v1alpha2.Settings {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*settings_smh_solo_io_v1alpha2.Settings))
		})
	}

	var settingsList []*settings_smh_solo_io_v1alpha2.Settings
	for _, obj := range s.set.List(genericFilters...) {
		settingsList = append(settingsList, obj.(*settings_smh_solo_io_v1alpha2.Settings))
	}
	return settingsList
}

func (s *settingsSet) Map() map[string]*settings_smh_solo_io_v1alpha2.Settings {
	if s == nil {
		return nil
	}

	newMap := map[string]*settings_smh_solo_io_v1alpha2.Settings{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*settings_smh_solo_io_v1alpha2.Settings)
	}
	return newMap
}

func (s *settingsSet) Insert(
	settingsList ...*settings_smh_solo_io_v1alpha2.Settings,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range settingsList {
		s.set.Insert(obj)
	}
}

func (s *settingsSet) Has(settings ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.set.Has(settings)
}

func (s *settingsSet) Equal(
	settingsSet SettingsSet,
) bool {
	if s == nil {
		return settingsSet == nil
	}
	return s.set.Equal(makeGenericSettingsSet(settingsSet.List()))
}

func (s *settingsSet) Delete(Settings ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.set.Delete(Settings)
}

func (s *settingsSet) Union(set SettingsSet) SettingsSet {
	if s == nil {
		return set
	}
	return NewSettingsSet(append(s.List(), set.List()...)...)
}

func (s *settingsSet) Difference(set SettingsSet) SettingsSet {
	if s == nil {
		return set
	}
	newSet := s.set.Difference(makeGenericSettingsSet(set.List()))
	return &settingsSet{set: newSet}
}

func (s *settingsSet) Intersection(set SettingsSet) SettingsSet {
	if s == nil {
		return nil
	}
	newSet := s.set.Intersection(makeGenericSettingsSet(set.List()))
	var settingsList []*settings_smh_solo_io_v1alpha2.Settings
	for _, obj := range newSet.List() {
		settingsList = append(settingsList, obj.(*settings_smh_solo_io_v1alpha2.Settings))
	}
	return NewSettingsSet(settingsList...)
}

func (s *settingsSet) Find(id ezkube.ResourceId) (*settings_smh_solo_io_v1alpha2.Settings, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find Settings %v", sksets.Key(id))
	}
	obj, err := s.set.Find(&settings_smh_solo_io_v1alpha2.Settings{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*settings_smh_solo_io_v1alpha2.Settings), nil
}

func (s *settingsSet) Length() int {
	if s == nil {
		return 0
	}
	return s.set.Length()
}
