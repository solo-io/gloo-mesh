// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/service-mesh-hub/api/settings/v1alpha2/settings.proto

package v1alpha2

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha2"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Configure global settings and defaults.
type SettingsSpec struct {
	// Configure default mTLS settings for TrafficTargets (MTLS declared in TrafficPolicies take precedence)
	Mtls *v1alpha2.TrafficPolicySpec_MTLS `protobuf:"bytes,1,opt,name=mtls,proto3" json:"mtls,omitempty"`
	// Configure SMH Networking to communicate with one or more external gRPC NetworkingExtensions servers.
	NetworkingExtensionServers []*NetworkingExtensionsServer `protobuf:"bytes,2,rep,name=networking_extension_servers,json=networkingExtensionServers,proto3" json:"networking_extension_servers,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                      `json:"-"`
	XXX_unrecognized           []byte                        `json:"-"`
	XXX_sizecache              int32                         `json:"-"`
}

func (m *SettingsSpec) Reset()         { *m = SettingsSpec{} }
func (m *SettingsSpec) String() string { return proto.CompactTextString(m) }
func (*SettingsSpec) ProtoMessage()    {}
func (*SettingsSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a4f9d8dd279fffe, []int{0}
}
func (m *SettingsSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsSpec.Unmarshal(m, b)
}
func (m *SettingsSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsSpec.Marshal(b, m, deterministic)
}
func (m *SettingsSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsSpec.Merge(m, src)
}
func (m *SettingsSpec) XXX_Size() int {
	return xxx_messageInfo_SettingsSpec.Size(m)
}
func (m *SettingsSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsSpec proto.InternalMessageInfo

func (m *SettingsSpec) GetMtls() *v1alpha2.TrafficPolicySpec_MTLS {
	if m != nil {
		return m.Mtls
	}
	return nil
}

func (m *SettingsSpec) GetNetworkingExtensionServers() []*NetworkingExtensionsServer {
	if m != nil {
		return m.NetworkingExtensionServers
	}
	return nil
}

// Options for connecting to an external gRPC NetworkingExternsions server
type NetworkingExtensionsServer struct {
	// TCP address of the Networking Extensions Server (including port)
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Communicate over HTTP rather than HTTPS
	Insecure bool `protobuf:"varint,2,opt,name=insecure,proto3" json:"insecure,omitempty"`
	// Instruct SMH to automatically reconnect to the server on network failures
	ReconnectOnNetworkFailures bool     `protobuf:"varint,3,opt,name=reconnect_on_network_failures,json=reconnectOnNetworkFailures,proto3" json:"reconnect_on_network_failures,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *NetworkingExtensionsServer) Reset()         { *m = NetworkingExtensionsServer{} }
func (m *NetworkingExtensionsServer) String() string { return proto.CompactTextString(m) }
func (*NetworkingExtensionsServer) ProtoMessage()    {}
func (*NetworkingExtensionsServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a4f9d8dd279fffe, []int{1}
}
func (m *NetworkingExtensionsServer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkingExtensionsServer.Unmarshal(m, b)
}
func (m *NetworkingExtensionsServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkingExtensionsServer.Marshal(b, m, deterministic)
}
func (m *NetworkingExtensionsServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkingExtensionsServer.Merge(m, src)
}
func (m *NetworkingExtensionsServer) XXX_Size() int {
	return xxx_messageInfo_NetworkingExtensionsServer.Size(m)
}
func (m *NetworkingExtensionsServer) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkingExtensionsServer.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkingExtensionsServer proto.InternalMessageInfo

func (m *NetworkingExtensionsServer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NetworkingExtensionsServer) GetInsecure() bool {
	if m != nil {
		return m.Insecure
	}
	return false
}

func (m *NetworkingExtensionsServer) GetReconnectOnNetworkFailures() bool {
	if m != nil {
		return m.ReconnectOnNetworkFailures
	}
	return false
}

type SettingsStatus struct {
	// The most recent generation observed in the the Settings metadata.
	// If the observedGeneration does not match generation, the controller has not processed the most
	// recent version of this resource.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// The state of the overall resource.
	// It will only show accepted if no processing errors encountered.
	State v1alpha2.ApprovalState `protobuf:"varint,2,opt,name=state,proto3,enum=networking.smh.solo.io.ApprovalState" json:"state,omitempty"`
	// Any errors encountered while processing Settings object.
	Errors               []string `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettingsStatus) Reset()         { *m = SettingsStatus{} }
func (m *SettingsStatus) String() string { return proto.CompactTextString(m) }
func (*SettingsStatus) ProtoMessage()    {}
func (*SettingsStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a4f9d8dd279fffe, []int{2}
}
func (m *SettingsStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingsStatus.Unmarshal(m, b)
}
func (m *SettingsStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingsStatus.Marshal(b, m, deterministic)
}
func (m *SettingsStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsStatus.Merge(m, src)
}
func (m *SettingsStatus) XXX_Size() int {
	return xxx_messageInfo_SettingsStatus.Size(m)
}
func (m *SettingsStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsStatus proto.InternalMessageInfo

func (m *SettingsStatus) GetObservedGeneration() int64 {
	if m != nil {
		return m.ObservedGeneration
	}
	return 0
}

func (m *SettingsStatus) GetState() v1alpha2.ApprovalState {
	if m != nil {
		return m.State
	}
	return v1alpha2.ApprovalState_PENDING
}

func (m *SettingsStatus) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterType((*SettingsSpec)(nil), "settings.smh.solo.io.SettingsSpec")
	proto.RegisterType((*NetworkingExtensionsServer)(nil), "settings.smh.solo.io.NetworkingExtensionsServer")
	proto.RegisterType((*SettingsStatus)(nil), "settings.smh.solo.io.SettingsStatus")
}

func init() {
	proto.RegisterFile("github.com/solo-io/service-mesh-hub/api/settings/v1alpha2/settings.proto", fileDescriptor_9a4f9d8dd279fffe)
}

var fileDescriptor_9a4f9d8dd279fffe = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe5, 0x06, 0x4a, 0xbb, 0x45, 0x3d, 0x2c, 0x15, 0xb2, 0x2c, 0x40, 0x51, 0x24, 0xa4,
	0x5c, 0xb2, 0x86, 0x70, 0x44, 0x08, 0xb5, 0x12, 0xff, 0x24, 0xa0, 0xc8, 0xe9, 0x89, 0x8b, 0xb5,
	0x71, 0x26, 0xf6, 0xaa, 0xf6, 0x8e, 0xb5, 0xb3, 0x36, 0xf0, 0x20, 0xf0, 0x0c, 0x3c, 0x09, 0x0f,
	0xc2, 0x93, 0x20, 0xaf, 0x9d, 0x4d, 0x51, 0x5b, 0x29, 0x37, 0x8f, 0x67, 0x7e, 0xdf, 0x7c, 0x3b,
	0x33, 0xec, 0x7d, 0xae, 0x6c, 0xd1, 0x2c, 0x45, 0x86, 0x55, 0x4c, 0x58, 0xe2, 0x4c, 0x61, 0x4c,
	0x60, 0x5a, 0x95, 0xc1, 0xac, 0x02, 0x2a, 0x66, 0x45, 0xb3, 0x8c, 0x65, 0xad, 0x62, 0x02, 0x6b,
	0x95, 0xce, 0x29, 0x6e, 0x9f, 0xcb, 0xb2, 0x2e, 0xe4, 0xdc, 0xff, 0x11, 0xb5, 0x41, 0x8b, 0xfc,
	0xc4, 0xc7, 0x54, 0x15, 0xa2, 0xd3, 0x12, 0x0a, 0xa3, 0x93, 0x1c, 0x73, 0x74, 0x05, 0x71, 0xf7,
	0xd5, 0xd7, 0x46, 0xaf, 0x6f, 0x6c, 0xa1, 0xc1, 0x7e, 0x43, 0x73, 0xa9, 0x74, 0xbe, 0x6d, 0xd2,
	0xca, 0x52, 0xad, 0xa4, 0x55, 0xa8, 0x53, 0xb2, 0xd2, 0xc2, 0x20, 0xf0, 0x6a, 0x67, 0x01, 0x6b,
	0xe4, 0x7a, 0xad, 0xb2, 0xb4, 0xc6, 0x52, 0x65, 0x3f, 0x7a, 0x7c, 0xf2, 0x27, 0x60, 0xf7, 0x17,
	0x83, 0xdd, 0x45, 0x0d, 0x19, 0x3f, 0x63, 0x77, 0x2a, 0x5b, 0x52, 0x18, 0x8c, 0x83, 0xe9, 0xd1,
	0x5c, 0x88, 0xad, 0xd2, 0xd5, 0xd7, 0x88, 0x8b, 0x5e, 0xec, 0x8b, 0xd3, 0xea, 0x40, 0xf1, 0xe9,
	0xe2, 0xe3, 0x22, 0x71, 0x2c, 0x37, 0xec, 0xd1, 0x16, 0x4b, 0xe1, 0xbb, 0x05, 0x4d, 0xce, 0x37,
	0x98, 0x16, 0x0c, 0x85, 0x7b, 0xe3, 0xd1, 0xf4, 0x68, 0xfe, 0x4c, 0xdc, 0x34, 0x27, 0xf1, 0xd9,
	0x93, 0x6f, 0x36, 0x20, 0x2d, 0x1c, 0x98, 0x44, 0xfa, 0x7a, 0xae, 0x4f, 0xd1, 0xe4, 0x67, 0xc0,
	0xa2, 0xdb, 0x51, 0x1e, 0xb2, 0x7b, 0x72, 0xb5, 0x32, 0x40, 0xfd, 0xcb, 0x0e, 0x93, 0x4d, 0xc8,
	0x23, 0x76, 0xa0, 0x34, 0x41, 0xd6, 0x18, 0x08, 0xf7, 0xc6, 0xc1, 0xf4, 0x20, 0xf1, 0x31, 0x3f,
	0x65, 0x8f, 0x0d, 0x64, 0xa8, 0x35, 0x64, 0x36, 0x45, 0x9d, 0x0e, 0xfd, 0xd3, 0xb5, 0x54, 0x65,
	0x63, 0x80, 0xc2, 0x91, 0x03, 0x22, 0x5f, 0x74, 0xae, 0x07, 0x0f, 0x6f, 0x87, 0x8a, 0xc9, 0xaf,
	0x80, 0x1d, 0xfb, 0x01, 0x5b, 0x69, 0x1b, 0xe2, 0x31, 0x7b, 0x80, 0x4b, 0x37, 0x8b, 0x55, 0x9a,
	0x83, 0x06, 0xe3, 0xb6, 0xea, 0x7c, 0x8d, 0x12, 0xbe, 0x49, 0xbd, 0xf3, 0x19, 0xfe, 0x92, 0xdd,
	0x75, 0x2b, 0x77, 0xfe, 0x8e, 0xe7, 0x4f, 0x6f, 0x5b, 0xca, 0x69, 0x5d, 0x1b, 0x6c, 0x65, 0xd9,
	0xf5, 0x81, 0xa4, 0x67, 0xf8, 0x43, 0xb6, 0x0f, 0xc6, 0xa0, 0xe9, 0xcc, 0x8e, 0xa6, 0x87, 0xc9,
	0x10, 0x9d, 0x9d, 0xff, 0xfe, 0xfb, 0x24, 0xf8, 0xfa, 0x61, 0x97, 0xab, 0xaf, 0x2f, 0xf3, 0xff,
	0x2e, 0xff, 0x6a, 0x53, 0x7f, 0x5f, 0xcb, 0x7d, 0x77, 0x51, 0x2f, 0xfe, 0x05, 0x00, 0x00, 0xff,
	0xff, 0xa2, 0x50, 0xcd, 0x86, 0x49, 0x03, 0x00, 0x00,
}

func (this *SettingsSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsSpec)
	if !ok {
		that2, ok := that.(SettingsSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mtls.Equal(that1.Mtls) {
		return false
	}
	if len(this.NetworkingExtensionServers) != len(that1.NetworkingExtensionServers) {
		return false
	}
	for i := range this.NetworkingExtensionServers {
		if !this.NetworkingExtensionServers[i].Equal(that1.NetworkingExtensionServers[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NetworkingExtensionsServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkingExtensionsServer)
	if !ok {
		that2, ok := that.(NetworkingExtensionsServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Insecure != that1.Insecure {
		return false
	}
	if this.ReconnectOnNetworkFailures != that1.ReconnectOnNetworkFailures {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SettingsStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SettingsStatus)
	if !ok {
		that2, ok := that.(SettingsStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObservedGeneration != that1.ObservedGeneration {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if this.Errors[i] != that1.Errors[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
