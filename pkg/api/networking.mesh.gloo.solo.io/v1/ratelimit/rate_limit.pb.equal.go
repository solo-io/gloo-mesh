// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo-mesh/api/networking/v1/ratelimit/rate_limit.proto

package ratelimit

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *GatewayRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GatewayRateLimit)
	if !ok {
		that2, ok := that.(GatewayRateLimit)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRatelimitServerRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRatelimitServerRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRatelimitServerRef(), target.GetRatelimitServerRef()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRequestTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequestTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequestTimeout(), target.GetRequestTimeout()) {
			return false
		}
	}

	if m.GetDenyOnFail() != target.GetDenyOnFail() {
		return false
	}

	if m.GetRateLimitBeforeAuth() != target.GetRateLimitBeforeAuth() {
		return false
	}

	return true
}

// Equal function
func (m *RouteRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteRateLimit)
	if !ok {
		that2, ok := that.(RouteRateLimit)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.RateLimitConfigType.(type) {

	case *RouteRateLimit_Basic:
		if _, ok := target.RateLimitConfigType.(*RouteRateLimit_Basic); !ok {
			return false
		}

		if h, ok := interface{}(m.GetBasic()).(equality.Equalizer); ok {
			if !h.Equal(target.GetBasic()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetBasic(), target.GetBasic()) {
				return false
			}
		}

	case *RouteRateLimit_Advanced:
		if _, ok := target.RateLimitConfigType.(*RouteRateLimit_Advanced); !ok {
			return false
		}

		if h, ok := interface{}(m.GetAdvanced()).(equality.Equalizer); ok {
			if !h.Equal(target.GetAdvanced()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetAdvanced(), target.GetAdvanced()) {
				return false
			}
		}

	case *RouteRateLimit_ConfigRefs:
		if _, ok := target.RateLimitConfigType.(*RouteRateLimit_ConfigRefs); !ok {
			return false
		}

		if h, ok := interface{}(m.GetConfigRefs()).(equality.Equalizer); ok {
			if !h.Equal(target.GetConfigRefs()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetConfigRefs(), target.GetConfigRefs()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.RateLimitConfigType != target.RateLimitConfigType {
			return false
		}
	}

	return true
}

// Equal function
func (m *RouteRateLimit_BasicRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteRateLimit_BasicRateLimit)
	if !ok {
		that2, ok := that.(RouteRateLimit_BasicRateLimit)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetAuthorizedLimits()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAuthorizedLimits()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAuthorizedLimits(), target.GetAuthorizedLimits()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetAnonymousLimits()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAnonymousLimits()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAnonymousLimits(), target.GetAnonymousLimits()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *RouteRateLimit_AdvancedRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteRateLimit_AdvancedRateLimit)
	if !ok {
		that2, ok := that.(RouteRateLimit_AdvancedRateLimit)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetActions()) != len(target.GetActions()) {
		return false
	}
	for idx, v := range m.GetActions() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetActions()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetActions()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *RouteRateLimit_BasicRateLimit_RateLimitRatio) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteRateLimit_BasicRateLimit_RateLimitRatio)
	if !ok {
		that2, ok := that.(RouteRateLimit_BasicRateLimit_RateLimitRatio)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetUnit() != target.GetUnit() {
		return false
	}

	if m.GetRequestsPerUnit() != target.GetRequestsPerUnit() {
		return false
	}

	return true
}

// Equal function
func (m *RouteRateLimit_AdvancedRateLimit_RateLimitActions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteRateLimit_AdvancedRateLimit_RateLimitActions)
	if !ok {
		that2, ok := that.(RouteRateLimit_AdvancedRateLimit_RateLimitActions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetActions()) != len(target.GetActions()) {
		return false
	}
	for idx, v := range m.GetActions() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetActions()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetActions()[idx]) {
				return false
			}
		}

	}

	if len(m.GetSetActions()) != len(target.GetSetActions()) {
		return false
	}
	for idx, v := range m.GetSetActions() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSetActions()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSetActions()[idx]) {
				return false
			}
		}

	}

	return true
}
