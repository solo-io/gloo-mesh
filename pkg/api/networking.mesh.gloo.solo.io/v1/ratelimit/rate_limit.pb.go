// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo-mesh/api/networking/v1/ratelimit/rate_limit.proto

package ratelimit

import (
	reflect "reflect"
	sync "sync"

	_ "cuelang.org/go/encoding/protobuf/cue"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	v1alpha1 "github.com/solo-io/solo-apis/pkg/api/ratelimit.solo.io/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Configure the Rate-Limit Filter on a Gateway
type GatewayRateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RatelimitServerRef *v1.ObjectRef      `protobuf:"bytes,1,opt,name=ratelimit_server_ref,json=ratelimitServerRef,proto3" json:"ratelimit_server_ref,omitempty"`
	RequestTimeout     *duration.Duration `protobuf:"bytes,2,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	DenyOnFail         bool               `protobuf:"varint,3,opt,name=deny_on_fail,json=denyOnFail,proto3" json:"deny_on_fail,omitempty"`
	// Set this is set to true if you would like to rate limit traffic before applying external auth to it.
	// *Note*: When this is true, you will lose some features like being able to rate limit a request based on its auth state
	RateLimitBeforeAuth bool `protobuf:"varint,9,opt,name=rate_limit_before_auth,json=rateLimitBeforeAuth,proto3" json:"rate_limit_before_auth,omitempty"`
}

func (x *GatewayRateLimit) Reset() {
	*x = GatewayRateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRateLimit) ProtoMessage() {}

func (x *GatewayRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRateLimit.ProtoReflect.Descriptor instead.
func (*GatewayRateLimit) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{0}
}

func (x *GatewayRateLimit) GetRatelimitServerRef() *v1.ObjectRef {
	if x != nil {
		return x.RatelimitServerRef
	}
	return nil
}

func (x *GatewayRateLimit) GetRequestTimeout() *duration.Duration {
	if x != nil {
		return x.RequestTimeout
	}
	return nil
}

func (x *GatewayRateLimit) GetDenyOnFail() bool {
	if x != nil {
		return x.DenyOnFail
	}
	return false
}

func (x *GatewayRateLimit) GetRateLimitBeforeAuth() bool {
	if x != nil {
		return x.RateLimitBeforeAuth
	}
	return false
}

// The RateLimitClient specifies either a simplified, abstracted rate limiting model that allows different limits for
// both authorized and anonymous users (Basic) and the ratelimit Actions directly (Advanced).
// The corresponding server config should be set in the RateLimitConfig.
type RateLimitClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ConfigType:
	//	*RateLimitClient_Advanced
	//	*RateLimitClient_Basic
	ConfigType isRateLimitClient_ConfigType `protobuf_oneof:"config_type"`
}

func (x *RateLimitClient) Reset() {
	*x = RateLimitClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitClient) ProtoMessage() {}

func (x *RateLimitClient) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitClient.ProtoReflect.Descriptor instead.
func (*RateLimitClient) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{1}
}

func (m *RateLimitClient) GetConfigType() isRateLimitClient_ConfigType {
	if m != nil {
		return m.ConfigType
	}
	return nil
}

func (x *RateLimitClient) GetAdvanced() *RateLimitClient_AdvancedRateLimit {
	if x, ok := x.GetConfigType().(*RateLimitClient_Advanced); ok {
		return x.Advanced
	}
	return nil
}

func (x *RateLimitClient) GetBasic() *RateLimitClient_BasicRateLimit {
	if x, ok := x.GetConfigType().(*RateLimitClient_Basic); ok {
		return x.Basic
	}
	return nil
}

type isRateLimitClient_ConfigType interface {
	isRateLimitClient_ConfigType()
}

type RateLimitClient_Advanced struct {
	Advanced *RateLimitClient_AdvancedRateLimit `protobuf:"bytes,1,opt,name=advanced,proto3,oneof"`
}

type RateLimitClient_Basic struct {
	Basic *RateLimitClient_BasicRateLimit `protobuf:"bytes,2,opt,name=basic,proto3,oneof"`
}

func (*RateLimitClient_Advanced) isRateLimitClient_ConfigType() {}

func (*RateLimitClient_Basic) isRateLimitClient_ConfigType() {}

// Rate limit configuration for a Route or TrafficPolicy. Configures rate limits for individual HTTP routes
type RouteRateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RateLimitConfig ref
	RatelimitConfigRef *v1.ObjectRef `protobuf:"bytes,1,opt,name=ratelimit_config_ref,json=ratelimitConfigRef,proto3" json:"ratelimit_config_ref,omitempty"`
	// Types that are assignable to RateLimitConfigType:
	//	*RouteRateLimit_Client
	//	*RouteRateLimit_RatelimitClientConfigRef
	RateLimitConfigType isRouteRateLimit_RateLimitConfigType `protobuf_oneof:"rate_limit_config_type"`
}

func (x *RouteRateLimit) Reset() {
	*x = RouteRateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteRateLimit) ProtoMessage() {}

func (x *RouteRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteRateLimit.ProtoReflect.Descriptor instead.
func (*RouteRateLimit) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{2}
}

func (x *RouteRateLimit) GetRatelimitConfigRef() *v1.ObjectRef {
	if x != nil {
		return x.RatelimitConfigRef
	}
	return nil
}

func (m *RouteRateLimit) GetRateLimitConfigType() isRouteRateLimit_RateLimitConfigType {
	if m != nil {
		return m.RateLimitConfigType
	}
	return nil
}

func (x *RouteRateLimit) GetClient() *RateLimitClient {
	if x, ok := x.GetRateLimitConfigType().(*RouteRateLimit_Client); ok {
		return x.Client
	}
	return nil
}

func (x *RouteRateLimit) GetRatelimitClientConfigRef() *v1.ObjectRef {
	if x, ok := x.GetRateLimitConfigType().(*RouteRateLimit_RatelimitClientConfigRef); ok {
		return x.RatelimitClientConfigRef
	}
	return nil
}

type isRouteRateLimit_RateLimitConfigType interface {
	isRouteRateLimit_RateLimitConfigType()
}

type RouteRateLimit_Client struct {
	Client *RateLimitClient `protobuf:"bytes,2,opt,name=client,proto3,oneof"`
}

type RouteRateLimit_RatelimitClientConfigRef struct {
	RatelimitClientConfigRef *v1.ObjectRef `protobuf:"bytes,3,opt,name=ratelimit_client_config_ref,json=ratelimitClientConfigRef,proto3,oneof"`
}

func (*RouteRateLimit_Client) isRouteRateLimit_RateLimitConfigType() {}

func (*RouteRateLimit_RatelimitClientConfigRef) isRouteRateLimit_RateLimitConfigType() {}

// Basic rate-limiting API
type RateLimitClient_BasicRateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RateLimitClient_BasicRateLimit) Reset() {
	*x = RateLimitClient_BasicRateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitClient_BasicRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitClient_BasicRateLimit) ProtoMessage() {}

func (x *RateLimitClient_BasicRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitClient_BasicRateLimit.ProtoReflect.Descriptor instead.
func (*RateLimitClient_BasicRateLimit) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{1, 0}
}

// Use this field if you want to inline the Envoy rate limits.
// Note that this does not configure the rate limit server. If you are running Gloo Mesh, you need to
// specify the server configuration via the appropriate field in the Gloo Mesh `RateLimitConfig` resource.
// If you are running a custom rate limit server you need to configure it yourself.
type RateLimitClient_AdvancedRateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Actions specify how the client (Envoy) will compose the descriptors that
	// will be sent to the server to make a rate limiting decision.
	Actions []*v1alpha1.RateLimitActions `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *RateLimitClient_AdvancedRateLimit) Reset() {
	*x = RateLimitClient_AdvancedRateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitClient_AdvancedRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitClient_AdvancedRateLimit) ProtoMessage() {}

func (x *RateLimitClient_AdvancedRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitClient_AdvancedRateLimit.ProtoReflect.Descriptor instead.
func (*RateLimitClient_AdvancedRateLimit) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{1, 1}
}

func (x *RateLimitClient_AdvancedRateLimit) GetActions() []*v1alpha1.RateLimitActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

var File_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDesc = []byte{
	0x0a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x72, 0x61, 0x74,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x75, 0x65, 0x2f, 0x63, 0x75, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6b, 0x76, 0x32, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72,
	0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd,
	0x01, 0x0a, 0x10, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52,
	0x12, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x65, 0x6e, 0x79, 0x5f,
	0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64,
	0x65, 0x6e, 0x79, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x22, 0xd3,
	0x02, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x67, 0x0a, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x05, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x72, 0x61, 0x74,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x1a, 0x10, 0x0a, 0x0e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x56, 0x0a,
	0x11, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x72, 0x61, 0x74, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76,
	0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x66, 0x52, 0x12, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x12, 0x51, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x1b, 0x72, 0x61,
	0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52,
	0x18, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x42, 0x18, 0x0a, 0x16, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x54, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x74, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0xc0, 0xf5, 0x04, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescData = file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_goTypes = []interface{}{
	(*GatewayRateLimit)(nil),                  // 0: ratelimit.networking.mesh.gloo.solo.io.GatewayRateLimit
	(*RateLimitClient)(nil),                   // 1: ratelimit.networking.mesh.gloo.solo.io.RateLimitClient
	(*RouteRateLimit)(nil),                    // 2: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit
	(*RateLimitClient_BasicRateLimit)(nil),    // 3: ratelimit.networking.mesh.gloo.solo.io.RateLimitClient.BasicRateLimit
	(*RateLimitClient_AdvancedRateLimit)(nil), // 4: ratelimit.networking.mesh.gloo.solo.io.RateLimitClient.AdvancedRateLimit
	(*v1.ObjectRef)(nil),                      // 5: core.skv2.solo.io.ObjectRef
	(*duration.Duration)(nil),                 // 6: google.protobuf.Duration
	(*v1alpha1.RateLimitActions)(nil),         // 7: ratelimit.api.solo.io.RateLimitActions
}
var file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_depIdxs = []int32{
	5, // 0: ratelimit.networking.mesh.gloo.solo.io.GatewayRateLimit.ratelimit_server_ref:type_name -> core.skv2.solo.io.ObjectRef
	6, // 1: ratelimit.networking.mesh.gloo.solo.io.GatewayRateLimit.request_timeout:type_name -> google.protobuf.Duration
	4, // 2: ratelimit.networking.mesh.gloo.solo.io.RateLimitClient.advanced:type_name -> ratelimit.networking.mesh.gloo.solo.io.RateLimitClient.AdvancedRateLimit
	3, // 3: ratelimit.networking.mesh.gloo.solo.io.RateLimitClient.basic:type_name -> ratelimit.networking.mesh.gloo.solo.io.RateLimitClient.BasicRateLimit
	5, // 4: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.ratelimit_config_ref:type_name -> core.skv2.solo.io.ObjectRef
	1, // 5: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.client:type_name -> ratelimit.networking.mesh.gloo.solo.io.RateLimitClient
	5, // 6: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.ratelimit_client_config_ref:type_name -> core.skv2.solo.io.ObjectRef
	7, // 7: ratelimit.networking.mesh.gloo.solo.io.RateLimitClient.AdvancedRateLimit.actions:type_name -> ratelimit.api.solo.io.RateLimitActions
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_init() }
func file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_init() {
	if File_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteRateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitClient_BasicRateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitClient_AdvancedRateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RateLimitClient_Advanced)(nil),
		(*RateLimitClient_Basic)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RouteRateLimit_Client)(nil),
		(*RouteRateLimit_RatelimitClientConfigRef)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto = out.File
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_depIdxs = nil
}
