// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo-mesh/api/networking/v1/ratelimit/rate_limit.proto

package ratelimit

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	v11 "github.com/solo-io/gloo-mesh/pkg/api/common.mesh.gloo.solo.io/v1"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit int32

const (
	RouteRateLimit_BasicRateLimit_RateLimitRatio_UNKNOWN RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit = 0
	RouteRateLimit_BasicRateLimit_RateLimitRatio_SECOND  RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit = 1
	RouteRateLimit_BasicRateLimit_RateLimitRatio_MINUTE  RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit = 2
	RouteRateLimit_BasicRateLimit_RateLimitRatio_HOUR    RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit = 3
	RouteRateLimit_BasicRateLimit_RateLimitRatio_DAY     RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit = 4
)

// Enum value maps for RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit.
var (
	RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit_name = map[int32]string{
		0: "UNKNOWN",
		1: "SECOND",
		2: "MINUTE",
		3: "HOUR",
		4: "DAY",
	}
	RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit_value = map[string]int32{
		"UNKNOWN": 0,
		"SECOND":  1,
		"MINUTE":  2,
		"HOUR":    3,
		"DAY":     4,
	}
)

func (x RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit) Enum() *RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit {
	p := new(RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit)
	*p = x
	return p
}

func (x RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_enumTypes[0].Descriptor()
}

func (RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_enumTypes[0]
}

func (x RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit.Descriptor instead.
func (RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{1, 0, 0, 0}
}

type Action_Metadata_Source int32

const (
	// Query [dynamic metadata](https://www.envoyproxy.io/docs/envoy/latest/configuration/advanced/well_known_dynamic_metadata#well-known-dynamic-metadata).
	Action_Metadata_DYNAMIC Action_Metadata_Source = 0
	// Query [route entry metadata](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-route-metadata).
	Action_Metadata_ROUTE_ENTRY Action_Metadata_Source = 1
)

// Enum value maps for Action_Metadata_Source.
var (
	Action_Metadata_Source_name = map[int32]string{
		0: "DYNAMIC",
		1: "ROUTE_ENTRY",
	}
	Action_Metadata_Source_value = map[string]int32{
		"DYNAMIC":     0,
		"ROUTE_ENTRY": 1,
	}
)

func (x Action_Metadata_Source) Enum() *Action_Metadata_Source {
	p := new(Action_Metadata_Source)
	*p = x
	return p
}

func (x Action_Metadata_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_Metadata_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_enumTypes[1].Descriptor()
}

func (Action_Metadata_Source) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_enumTypes[1]
}

func (x Action_Metadata_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_Metadata_Source.Descriptor instead.
func (Action_Metadata_Source) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{2, 6, 0}
}

// Configure the Rate-Limit Filter on a Gateway
type GatewayRateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RatelimitServerRef *v1.ObjectRef      `protobuf:"bytes,1,opt,name=ratelimit_server_ref,json=ratelimitServerRef,proto3" json:"ratelimit_server_ref,omitempty"`
	RequestTimeout     *duration.Duration `protobuf:"bytes,2,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	DenyOnFail         bool               `protobuf:"varint,3,opt,name=deny_on_fail,json=denyOnFail,proto3" json:"deny_on_fail,omitempty"`
	// Set this is set to true if you would like to rate limit traffic before applying external auth to it.
	// *Note*: When this is true, you will lose some features like being able to rate limit a request based on its auth state
	RateLimitBeforeAuth bool `protobuf:"varint,9,opt,name=rate_limit_before_auth,json=rateLimitBeforeAuth,proto3" json:"rate_limit_before_auth,omitempty"`
}

func (x *GatewayRateLimit) Reset() {
	*x = GatewayRateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRateLimit) ProtoMessage() {}

func (x *GatewayRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRateLimit.ProtoReflect.Descriptor instead.
func (*GatewayRateLimit) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{0}
}

func (x *GatewayRateLimit) GetRatelimitServerRef() *v1.ObjectRef {
	if x != nil {
		return x.RatelimitServerRef
	}
	return nil
}

func (x *GatewayRateLimit) GetRequestTimeout() *duration.Duration {
	if x != nil {
		return x.RequestTimeout
	}
	return nil
}

func (x *GatewayRateLimit) GetDenyOnFail() bool {
	if x != nil {
		return x.DenyOnFail
	}
	return false
}

func (x *GatewayRateLimit) GetRateLimitBeforeAuth() bool {
	if x != nil {
		return x.RateLimitBeforeAuth
	}
	return false
}

// Rate limit configuration for a Route or TrafficPolicy. Configures rate limits for individual HTTP routes
type RouteRateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RateLimitConfigType:
	//	*RouteRateLimit_Basic
	//	*RouteRateLimit_Advanced
	//	*RouteRateLimit_ConfigRefs
	RateLimitConfigType isRouteRateLimit_RateLimitConfigType `protobuf_oneof:"rate_limit_config_type"`
}

func (x *RouteRateLimit) Reset() {
	*x = RouteRateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteRateLimit) ProtoMessage() {}

func (x *RouteRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteRateLimit.ProtoReflect.Descriptor instead.
func (*RouteRateLimit) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{1}
}

func (m *RouteRateLimit) GetRateLimitConfigType() isRouteRateLimit_RateLimitConfigType {
	if m != nil {
		return m.RateLimitConfigType
	}
	return nil
}

func (x *RouteRateLimit) GetBasic() *RouteRateLimit_BasicRateLimit {
	if x, ok := x.GetRateLimitConfigType().(*RouteRateLimit_Basic); ok {
		return x.Basic
	}
	return nil
}

func (x *RouteRateLimit) GetAdvanced() *RouteRateLimit_AdvancedRateLimit {
	if x, ok := x.GetRateLimitConfigType().(*RouteRateLimit_Advanced); ok {
		return x.Advanced
	}
	return nil
}

func (x *RouteRateLimit) GetConfigRefs() *v11.ObjectRefList {
	if x, ok := x.GetRateLimitConfigType().(*RouteRateLimit_ConfigRefs); ok {
		return x.ConfigRefs
	}
	return nil
}

type isRouteRateLimit_RateLimitConfigType interface {
	isRouteRateLimit_RateLimitConfigType()
}

type RouteRateLimit_Basic struct {
	// Config for rate-limiting using simplified (gloo-specific) API
	Basic *RouteRateLimit_BasicRateLimit `protobuf:"bytes,1,opt,name=basic,proto3,oneof"`
}

type RouteRateLimit_Advanced struct {
	// Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
	// supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
	// Configure rate-limit *actions* here, which define how request characteristics get translated into
	// descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
	// their associated limits on the Gloo settings.
	// Only one of `ratelimit` or `rate_limit_configs` can be set.
	Advanced *RouteRateLimit_AdvancedRateLimit `protobuf:"bytes,2,opt,name=advanced,proto3,oneof"`
}

type RouteRateLimit_ConfigRefs struct {
	// References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
	// Only one of `ratelimit` or `rate_limit_configs` can be set.
	ConfigRefs *v11.ObjectRefList `protobuf:"bytes,3,opt,name=config_refs,json=configRefs,proto3,oneof"`
}

func (*RouteRateLimit_Basic) isRouteRateLimit_RateLimitConfigType() {}

func (*RouteRateLimit_Advanced) isRouteRateLimit_RateLimitConfigType() {}

func (*RouteRateLimit_ConfigRefs) isRouteRateLimit_RateLimitConfigType() {}

// Copied directly from envoy
// https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-msg-config-route-v3-ratelimit-action
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ActionSpecifier:
	//	*Action_SourceCluster_
	//	*Action_DestinationCluster_
	//	*Action_RequestHeaders_
	//	*Action_RemoteAddress_
	//	*Action_GenericKey_
	//	*Action_HeaderValueMatch_
	//	*Action_Metadata_
	ActionSpecifier isAction_ActionSpecifier `protobuf_oneof:"action_specifier"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{2}
}

func (m *Action) GetActionSpecifier() isAction_ActionSpecifier {
	if m != nil {
		return m.ActionSpecifier
	}
	return nil
}

func (x *Action) GetSourceCluster() *Action_SourceCluster {
	if x, ok := x.GetActionSpecifier().(*Action_SourceCluster_); ok {
		return x.SourceCluster
	}
	return nil
}

func (x *Action) GetDestinationCluster() *Action_DestinationCluster {
	if x, ok := x.GetActionSpecifier().(*Action_DestinationCluster_); ok {
		return x.DestinationCluster
	}
	return nil
}

func (x *Action) GetRequestHeaders() *Action_RequestHeaders {
	if x, ok := x.GetActionSpecifier().(*Action_RequestHeaders_); ok {
		return x.RequestHeaders
	}
	return nil
}

func (x *Action) GetRemoteAddress() *Action_RemoteAddress {
	if x, ok := x.GetActionSpecifier().(*Action_RemoteAddress_); ok {
		return x.RemoteAddress
	}
	return nil
}

func (x *Action) GetGenericKey() *Action_GenericKey {
	if x, ok := x.GetActionSpecifier().(*Action_GenericKey_); ok {
		return x.GenericKey
	}
	return nil
}

func (x *Action) GetHeaderValueMatch() *Action_HeaderValueMatch {
	if x, ok := x.GetActionSpecifier().(*Action_HeaderValueMatch_); ok {
		return x.HeaderValueMatch
	}
	return nil
}

func (x *Action) GetMetadata() *Action_Metadata {
	if x, ok := x.GetActionSpecifier().(*Action_Metadata_); ok {
		return x.Metadata
	}
	return nil
}

type isAction_ActionSpecifier interface {
	isAction_ActionSpecifier()
}

type Action_SourceCluster_ struct {
	// Rate limit on source cluster.
	SourceCluster *Action_SourceCluster `protobuf:"bytes,1,opt,name=source_cluster,json=sourceCluster,proto3,oneof"`
}

type Action_DestinationCluster_ struct {
	// Rate limit on destination cluster.
	DestinationCluster *Action_DestinationCluster `protobuf:"bytes,2,opt,name=destination_cluster,json=destinationCluster,proto3,oneof"`
}

type Action_RequestHeaders_ struct {
	// Rate limit on request headers.
	RequestHeaders *Action_RequestHeaders `protobuf:"bytes,3,opt,name=request_headers,json=requestHeaders,proto3,oneof"`
}

type Action_RemoteAddress_ struct {
	// Rate limit on remote address.
	RemoteAddress *Action_RemoteAddress `protobuf:"bytes,4,opt,name=remote_address,json=remoteAddress,proto3,oneof"`
}

type Action_GenericKey_ struct {
	// Rate limit on a generic key.
	GenericKey *Action_GenericKey `protobuf:"bytes,5,opt,name=generic_key,json=genericKey,proto3,oneof"`
}

type Action_HeaderValueMatch_ struct {
	// Rate limit on the existence of request headers.
	HeaderValueMatch *Action_HeaderValueMatch `protobuf:"bytes,6,opt,name=header_value_match,json=headerValueMatch,proto3,oneof"`
}

type Action_Metadata_ struct {
	// Rate limit on metadata.
	Metadata *Action_Metadata `protobuf:"bytes,8,opt,name=metadata,proto3,oneof"`
}

func (*Action_SourceCluster_) isAction_ActionSpecifier() {}

func (*Action_DestinationCluster_) isAction_ActionSpecifier() {}

func (*Action_RequestHeaders_) isAction_ActionSpecifier() {}

func (*Action_RemoteAddress_) isAction_ActionSpecifier() {}

func (*Action_GenericKey_) isAction_ActionSpecifier() {}

func (*Action_HeaderValueMatch_) isAction_ActionSpecifier() {}

func (*Action_Metadata_) isAction_ActionSpecifier() {}

// Basic rate-limiting API
type RouteRateLimit_BasicRateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// limits for authorized users
	AuthorizedLimits *RouteRateLimit_BasicRateLimit_RateLimitRatio `protobuf:"bytes,1,opt,name=authorized_limits,json=authorizedLimits,proto3" json:"authorized_limits,omitempty"`
	// limits for unauthorized users
	AnonymousLimits *RouteRateLimit_BasicRateLimit_RateLimitRatio `protobuf:"bytes,2,opt,name=anonymous_limits,json=anonymousLimits,proto3" json:"anonymous_limits,omitempty"`
}

func (x *RouteRateLimit_BasicRateLimit) Reset() {
	*x = RouteRateLimit_BasicRateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteRateLimit_BasicRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteRateLimit_BasicRateLimit) ProtoMessage() {}

func (x *RouteRateLimit_BasicRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteRateLimit_BasicRateLimit.ProtoReflect.Descriptor instead.
func (*RouteRateLimit_BasicRateLimit) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RouteRateLimit_BasicRateLimit) GetAuthorizedLimits() *RouteRateLimit_BasicRateLimit_RateLimitRatio {
	if x != nil {
		return x.AuthorizedLimits
	}
	return nil
}

func (x *RouteRateLimit_BasicRateLimit) GetAnonymousLimits() *RouteRateLimit_BasicRateLimit_RateLimitRatio {
	if x != nil {
		return x.AnonymousLimits
	}
	return nil
}

// Use this field if you want to inline the Envoy rate limits for this VirtualHost.
// Note that this does not configure the rate limit server. If you are running Gloo Enterprise, you need to
// specify the server configuration via the appropriate field in the Gloo `Settings` resource. If you are
// running a custom rate limit server you need to configure it yourself.
type RouteRateLimit_AdvancedRateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Define individual rate limits here. Each rate limit will be evaluated, if any rate limit
	// would be throttled, the entire request returns a 429 (gets throttled)
	Actions []*RouteRateLimit_AdvancedRateLimit_RateLimitActions `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *RouteRateLimit_AdvancedRateLimit) Reset() {
	*x = RouteRateLimit_AdvancedRateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteRateLimit_AdvancedRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteRateLimit_AdvancedRateLimit) ProtoMessage() {}

func (x *RouteRateLimit_AdvancedRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteRateLimit_AdvancedRateLimit.ProtoReflect.Descriptor instead.
func (*RouteRateLimit_AdvancedRateLimit) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{1, 1}
}

func (x *RouteRateLimit_AdvancedRateLimit) GetActions() []*RouteRateLimit_AdvancedRateLimit_RateLimitActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

// A `RateLimitRatio` specifies the actual ratio of requests that will be permitted when there is a match.
type RouteRateLimit_BasicRateLimit_RateLimitRatio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit            RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit `protobuf:"varint,1,opt,name=unit,proto3,enum=ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit" json:"unit,omitempty"`
	RequestsPerUnit uint32                                            `protobuf:"varint,2,opt,name=requests_per_unit,json=requestsPerUnit,proto3" json:"requests_per_unit,omitempty"`
}

func (x *RouteRateLimit_BasicRateLimit_RateLimitRatio) Reset() {
	*x = RouteRateLimit_BasicRateLimit_RateLimitRatio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteRateLimit_BasicRateLimit_RateLimitRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteRateLimit_BasicRateLimit_RateLimitRatio) ProtoMessage() {}

func (x *RouteRateLimit_BasicRateLimit_RateLimitRatio) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteRateLimit_BasicRateLimit_RateLimitRatio.ProtoReflect.Descriptor instead.
func (*RouteRateLimit_BasicRateLimit_RateLimitRatio) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *RouteRateLimit_BasicRateLimit_RateLimitRatio) GetUnit() RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit {
	if x != nil {
		return x.Unit
	}
	return RouteRateLimit_BasicRateLimit_RateLimitRatio_UNKNOWN
}

func (x *RouteRateLimit_BasicRateLimit_RateLimitRatio) GetRequestsPerUnit() uint32 {
	if x != nil {
		return x.RequestsPerUnit
	}
	return 0
}

// Each action and setAction in the lists maps part of the request (or its context) to a descriptor. The tuple or set of descriptors
// generated by the provided actions is sent to the rate limit server and matched against rate limit rules.
// Order matters on provided actions but not on setActions, e.g. the following actions:
// - actions:
//   - requestHeaders:
//      descriptorKey: account_id
//      headerName: x-account-id
//   - requestHeaders:
//      descriptorKey: plan
//      headerName: x-plan
// define an ordered descriptor tuple like so: ('account_id', '<x-account-id value>'), ('plan', '<x-plan value>')
//
// While the current form matches, the same tuple in reverse order would not match the following descriptor:
//
// descriptors:
// - key: account_id
//   descriptors:
//   - key: plan
//     value: BASIC
//     rateLimit:
//       requestsPerUnit: 1
//       unit: MINUTE
//  - key: plan
//    value: PLUS
//    rateLimit:
//      requestsPerUnit: 20
//      unit: MINUTE
//
// Similarly, the following setActions:
// - setActions:
//   - requestHeaders:
//      descriptorKey: account_id
//      headerName: x-account-id
//   - requestHeaders:
//      descriptorKey: plan
//      headerName: x-plan
// define an unordered descriptor set like so: {('account_id', '<x-account-id value>'), ('plan', '<x-plan value>')}
//
// This set would match the following setDescriptor:
//
// setDescriptors:
// - simpleDescriptors:
//   - key: plan
//     value: BASIC
//   - key: account_id
//  rateLimit:
//    requestsPerUnit: 20
//    unit: MINUTE
//
// It would also match the following setDescriptor which includes only a subset of the setActions enumerated:
//
// setDescriptors:
// - simpleDescriptors:
//   - key: account_id
//  rateLimit:
//    requestsPerUnit: 20
//    unit: MINUTE
//
// It would even match the following setDescriptor.
// Any setActions list would match this setDescriptor which has simpleDescriptors omitted entirely:
//
// setDescriptors:
// - rateLimit:
//    requestsPerUnit: 20
//    unit: MINUTE
type RouteRateLimit_AdvancedRateLimit_RateLimitActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: come up with descriptive names and comments for these fields
	Actions    []*Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	SetActions []*Action `protobuf:"bytes,2,rep,name=set_actions,json=setActions,proto3" json:"set_actions,omitempty"`
}

func (x *RouteRateLimit_AdvancedRateLimit_RateLimitActions) Reset() {
	*x = RouteRateLimit_AdvancedRateLimit_RateLimitActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteRateLimit_AdvancedRateLimit_RateLimitActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteRateLimit_AdvancedRateLimit_RateLimitActions) ProtoMessage() {}

func (x *RouteRateLimit_AdvancedRateLimit_RateLimitActions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteRateLimit_AdvancedRateLimit_RateLimitActions.ProtoReflect.Descriptor instead.
func (*RouteRateLimit_AdvancedRateLimit_RateLimitActions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *RouteRateLimit_AdvancedRateLimit_RateLimitActions) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *RouteRateLimit_AdvancedRateLimit_RateLimitActions) GetSetActions() []*Action {
	if x != nil {
		return x.SetActions
	}
	return nil
}

// The following descriptor entry is appended to the descriptor:
//
// ```
//   ("source_cluster", "<local service cluster>")
// ```
//
// <local service cluster> is derived from the :option:`--service-cluster` option.
type Action_SourceCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Action_SourceCluster) Reset() {
	*x = Action_SourceCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_SourceCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_SourceCluster) ProtoMessage() {}

func (x *Action_SourceCluster) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_SourceCluster.ProtoReflect.Descriptor instead.
func (*Action_SourceCluster) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{2, 0}
}

// The following descriptor entry is appended to the descriptor:
//
// ```
//   ("destination_cluster", "<routed target cluster>")
// ```
//
// Once a request matches against a route table rule, a routed cluster is determined by one of
// the following `route table configuration (envoy_api_msg_RouteConfiguration)`
// settings:
//
// * `cluster (envoy_api_field_route.RouteAction.cluster)` indicates the upstream cluster
//   to route to.
// * `weighted_clusters (envoy_api_field_route.RouteAction.weighted_clusters)`
//   chooses a cluster randomly from a set of clusters with attributed weight.
// * `cluster_header (envoy_api_field_route.RouteAction.cluster_header)` indicates which
//   header in the request contains the target cluster.
type Action_DestinationCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Action_DestinationCluster) Reset() {
	*x = Action_DestinationCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_DestinationCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_DestinationCluster) ProtoMessage() {}

func (x *Action_DestinationCluster) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_DestinationCluster.ProtoReflect.Descriptor instead.
func (*Action_DestinationCluster) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{2, 1}
}

// The following descriptor entry is appended when a header contains a key that matches the
// *header_name*:
//
// ```
//   ("<descriptor_key>", "<header_value_queried_from_header>")
// ```
type Action_RequestHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The header name to be queried from the request headers. The header’s
	// value is used to populate the value of the descriptor entry for the
	// descriptor_key.
	HeaderName string `protobuf:"bytes,1,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"` // [(validate.rules).string.min_bytes = 1];
	// The key to use in the descriptor entry.
	DescriptorKey string `protobuf:"bytes,2,opt,name=descriptor_key,json=descriptorKey,proto3" json:"descriptor_key,omitempty"` // [(validate.rules).string.min_bytes = 1];
}

func (x *Action_RequestHeaders) Reset() {
	*x = Action_RequestHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_RequestHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_RequestHeaders) ProtoMessage() {}

func (x *Action_RequestHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_RequestHeaders.ProtoReflect.Descriptor instead.
func (*Action_RequestHeaders) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Action_RequestHeaders) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

func (x *Action_RequestHeaders) GetDescriptorKey() string {
	if x != nil {
		return x.DescriptorKey
	}
	return ""
}

// The following descriptor entry is appended to the descriptor and is populated using the
// trusted address from `x-forwarded-for (config_http_conn_man_headers_x-forwarded-for)`:
//
// ```
//   ("remote_address", "<trusted address from x-forwarded-for>")
// ```
type Action_RemoteAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Action_RemoteAddress) Reset() {
	*x = Action_RemoteAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_RemoteAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_RemoteAddress) ProtoMessage() {}

func (x *Action_RemoteAddress) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_RemoteAddress.ProtoReflect.Descriptor instead.
func (*Action_RemoteAddress) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{2, 3}
}

// The following descriptor entry is appended to the descriptor:
//
// ```
//   ("generic_key", "<descriptor_value>")
// ```
type Action_GenericKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value to use in the descriptor entry.
	DescriptorValue string `protobuf:"bytes,1,opt,name=descriptor_value,json=descriptorValue,proto3" json:"descriptor_value,omitempty"` // [(validate.rules).string.min_bytes = 1];
}

func (x *Action_GenericKey) Reset() {
	*x = Action_GenericKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_GenericKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_GenericKey) ProtoMessage() {}

func (x *Action_GenericKey) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_GenericKey.ProtoReflect.Descriptor instead.
func (*Action_GenericKey) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{2, 4}
}

func (x *Action_GenericKey) GetDescriptorValue() string {
	if x != nil {
		return x.DescriptorValue
	}
	return ""
}

// The following descriptor entry is appended to the descriptor:
//
// ```
//   ("header_match", "<descriptor_value>")
// ```
type Action_HeaderValueMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value to use in the descriptor entry.
	DescriptorValue string `protobuf:"bytes,1,opt,name=descriptor_value,json=descriptorValue,proto3" json:"descriptor_value,omitempty"` // [(validate.rules).string.min_bytes = 1];
	// If set to true, the action will append a descriptor entry when the
	// request matches the headers. If set to false, the action will append a
	// descriptor entry when the request does not match the headers. The
	// default value is true.
	ExpectMatch *wrappers.BoolValue `protobuf:"bytes,2,opt,name=expect_match,json=expectMatch,proto3" json:"expect_match,omitempty"`
	// Specifies a set of headers that the rate limit action should match
	// on. The action will check the request’s headers against all the
	// specified headers in the config. A match will happen if all the
	// headers in the config are present in the request with the same values
	// (or based on presence if the value field is not in the config).
	Headers []*Action_HeaderValueMatch_HeaderMatcher `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"` // [(validate.rules).repeated .min_items = 1];
}

func (x *Action_HeaderValueMatch) Reset() {
	*x = Action_HeaderValueMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_HeaderValueMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_HeaderValueMatch) ProtoMessage() {}

func (x *Action_HeaderValueMatch) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_HeaderValueMatch.ProtoReflect.Descriptor instead.
func (*Action_HeaderValueMatch) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{2, 5}
}

func (x *Action_HeaderValueMatch) GetDescriptorValue() string {
	if x != nil {
		return x.DescriptorValue
	}
	return ""
}

func (x *Action_HeaderValueMatch) GetExpectMatch() *wrappers.BoolValue {
	if x != nil {
		return x.ExpectMatch
	}
	return nil
}

func (x *Action_HeaderValueMatch) GetHeaders() []*Action_HeaderValueMatch_HeaderMatcher {
	if x != nil {
		return x.Headers
	}
	return nil
}

// The following descriptor entry is appended when the metadata contains a key value:
//   ("<descriptor_key>", "<value_queried_from_metadata>")
type Action_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The key to use in the descriptor entry.
	DescriptorKey string `protobuf:"bytes,1,opt,name=descriptor_key,json=descriptorKey,proto3" json:"descriptor_key,omitempty"` // [(validate.rules).string = {min_len: 1}];
	// Required. Metadata struct that defines the key and path to retrieve the string value. A match will
	// only happen if the value in the metadata is of type string.
	MetadataKey *Action_Metadata_MetadataKey `protobuf:"bytes,2,opt,name=metadata_key,json=metadataKey,proto3" json:"metadata_key,omitempty"` // [(validate.rules).message = {required: true}];
	// An optional value to use if *metadata_key* is empty. If not set and
	// no value is present under the metadata_key then no descriptor is generated.
	DefaultValue string `protobuf:"bytes,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Source of metadata
	Source Action_Metadata_Source `protobuf:"varint,4,opt,name=source,proto3,enum=ratelimit.networking.mesh.gloo.solo.io.Action_Metadata_Source" json:"source,omitempty"` // [(validate.rules).enum = {defined_only: true}];
}

func (x *Action_Metadata) Reset() {
	*x = Action_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_Metadata) ProtoMessage() {}

func (x *Action_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_Metadata.ProtoReflect.Descriptor instead.
func (*Action_Metadata) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{2, 6}
}

func (x *Action_Metadata) GetDescriptorKey() string {
	if x != nil {
		return x.DescriptorKey
	}
	return ""
}

func (x *Action_Metadata) GetMetadataKey() *Action_Metadata_MetadataKey {
	if x != nil {
		return x.MetadataKey
	}
	return nil
}

func (x *Action_Metadata) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *Action_Metadata) GetSource() Action_Metadata_Source {
	if x != nil {
		return x.Source
	}
	return Action_Metadata_DYNAMIC
}

type Action_HeaderValueMatch_HeaderMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the name of the header in the request.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // [(validate.rules).string.min_bytes = 1];
	// Specifies how the header match will be performed to route the request.
	//
	// Types that are assignable to HeaderMatchSpecifier:
	//	*Action_HeaderValueMatch_HeaderMatcher_ExactMatch
	//	*Action_HeaderValueMatch_HeaderMatcher_RegexMatch
	//	*Action_HeaderValueMatch_HeaderMatcher_RangeMatch
	//	*Action_HeaderValueMatch_HeaderMatcher_PresentMatch
	//	*Action_HeaderValueMatch_HeaderMatcher_PrefixMatch
	//	*Action_HeaderValueMatch_HeaderMatcher_SuffixMatch
	HeaderMatchSpecifier isAction_HeaderValueMatch_HeaderMatcher_HeaderMatchSpecifier `protobuf_oneof:"header_match_specifier"`
	// If specified, the match result will be inverted before checking. Defaults to false.
	//
	// Examples:
	//
	// * The regex *\d{3}* does not match the value *1234*, so it will match when inverted.
	// * The range [-10,0) will match the value -1, so it will not match when inverted.
	InvertMatch bool `protobuf:"varint,8,opt,name=invert_match,json=invertMatch,proto3" json:"invert_match,omitempty"`
}

func (x *Action_HeaderValueMatch_HeaderMatcher) Reset() {
	*x = Action_HeaderValueMatch_HeaderMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_HeaderValueMatch_HeaderMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_HeaderValueMatch_HeaderMatcher) ProtoMessage() {}

func (x *Action_HeaderValueMatch_HeaderMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_HeaderValueMatch_HeaderMatcher.ProtoReflect.Descriptor instead.
func (*Action_HeaderValueMatch_HeaderMatcher) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{2, 5, 0}
}

func (x *Action_HeaderValueMatch_HeaderMatcher) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Action_HeaderValueMatch_HeaderMatcher) GetHeaderMatchSpecifier() isAction_HeaderValueMatch_HeaderMatcher_HeaderMatchSpecifier {
	if m != nil {
		return m.HeaderMatchSpecifier
	}
	return nil
}

func (x *Action_HeaderValueMatch_HeaderMatcher) GetExactMatch() string {
	if x, ok := x.GetHeaderMatchSpecifier().(*Action_HeaderValueMatch_HeaderMatcher_ExactMatch); ok {
		return x.ExactMatch
	}
	return ""
}

func (x *Action_HeaderValueMatch_HeaderMatcher) GetRegexMatch() string {
	if x, ok := x.GetHeaderMatchSpecifier().(*Action_HeaderValueMatch_HeaderMatcher_RegexMatch); ok {
		return x.RegexMatch
	}
	return ""
}

func (x *Action_HeaderValueMatch_HeaderMatcher) GetRangeMatch() *Action_HeaderValueMatch_HeaderMatcher_Int64Range {
	if x, ok := x.GetHeaderMatchSpecifier().(*Action_HeaderValueMatch_HeaderMatcher_RangeMatch); ok {
		return x.RangeMatch
	}
	return nil
}

func (x *Action_HeaderValueMatch_HeaderMatcher) GetPresentMatch() bool {
	if x, ok := x.GetHeaderMatchSpecifier().(*Action_HeaderValueMatch_HeaderMatcher_PresentMatch); ok {
		return x.PresentMatch
	}
	return false
}

func (x *Action_HeaderValueMatch_HeaderMatcher) GetPrefixMatch() string {
	if x, ok := x.GetHeaderMatchSpecifier().(*Action_HeaderValueMatch_HeaderMatcher_PrefixMatch); ok {
		return x.PrefixMatch
	}
	return ""
}

func (x *Action_HeaderValueMatch_HeaderMatcher) GetSuffixMatch() string {
	if x, ok := x.GetHeaderMatchSpecifier().(*Action_HeaderValueMatch_HeaderMatcher_SuffixMatch); ok {
		return x.SuffixMatch
	}
	return ""
}

func (x *Action_HeaderValueMatch_HeaderMatcher) GetInvertMatch() bool {
	if x != nil {
		return x.InvertMatch
	}
	return false
}

type isAction_HeaderValueMatch_HeaderMatcher_HeaderMatchSpecifier interface {
	isAction_HeaderValueMatch_HeaderMatcher_HeaderMatchSpecifier()
}

type Action_HeaderValueMatch_HeaderMatcher_ExactMatch struct {
	// If specified, header match will be performed based on the value of the header.
	ExactMatch string `protobuf:"bytes,4,opt,name=exact_match,json=exactMatch,proto3,oneof"`
}

type Action_HeaderValueMatch_HeaderMatcher_RegexMatch struct {
	// If specified, this regex string is a regular expression rule which implies the entire request
	// header value must match the regex. The rule will not match if only a subsequence of the
	// request header value matches the regex. The regex grammar used in the value field is defined
	// `(here)[https://en.cppreference.com/w/cpp/regex/ecmascript]`.
	//
	// Examples:
	//
	// * The regex *\d{3}* matches the value *123*
	// * The regex *\d{3}* does not match the value *1234*
	// * The regex *\d{3}* does not match the value *123.456*
	RegexMatch string `protobuf:"bytes,5,opt,name=regex_match,json=regexMatch,proto3,oneof"` // [(validate.rules).string.max_bytes = 1024];
}

type Action_HeaderValueMatch_HeaderMatcher_RangeMatch struct {
	// If specified, header match will be performed based on range.
	// The rule will match if the request header value is within this range.
	// The entire request header value must represent an integer in base 10 notation: consisting of
	// an optional plus or minus sign followed by a sequence of digits. The rule will not match if
	// the header value does not represent an integer. Match will fail for empty values, floating
	// point numbers or if only a subsequence of the header value is an integer.
	//
	// Examples:
	//
	// * For range [-10,0), route will match for header value -1, but not for 0, "somestring", 10.9,
	//   "-1somestring"
	RangeMatch *Action_HeaderValueMatch_HeaderMatcher_Int64Range `protobuf:"bytes,6,opt,name=range_match,json=rangeMatch,proto3,oneof"`
}

type Action_HeaderValueMatch_HeaderMatcher_PresentMatch struct {
	// If specified, header match will be performed based on whether the header is in the
	// request.
	PresentMatch bool `protobuf:"varint,7,opt,name=present_match,json=presentMatch,proto3,oneof"`
}

type Action_HeaderValueMatch_HeaderMatcher_PrefixMatch struct {
	// If specified, header match will be performed based on the prefix of the header value.
	// Note: empty prefix is not allowed, please use present_match instead.
	//
	// Examples:
	//
	// * The prefix *abcd* matches the value *abcdxyz*, but not for *abcxyz*.
	PrefixMatch string `protobuf:"bytes,9,opt,name=prefix_match,json=prefixMatch,proto3,oneof"` // [(validate.rules).string.min_bytes = 1];
}

type Action_HeaderValueMatch_HeaderMatcher_SuffixMatch struct {
	// If specified, header match will be performed based on the suffix of the header value.
	// Note: empty suffix is not allowed, please use present_match instead.
	//
	// Examples:
	//
	// * The suffix *abcd* matches the value *xyzabcd*, but not for *xyzbcd*.
	SuffixMatch string `protobuf:"bytes,10,opt,name=suffix_match,json=suffixMatch,proto3,oneof"` // [(validate.rules).string.min_bytes = 1];
}

func (*Action_HeaderValueMatch_HeaderMatcher_ExactMatch) isAction_HeaderValueMatch_HeaderMatcher_HeaderMatchSpecifier() {
}

func (*Action_HeaderValueMatch_HeaderMatcher_RegexMatch) isAction_HeaderValueMatch_HeaderMatcher_HeaderMatchSpecifier() {
}

func (*Action_HeaderValueMatch_HeaderMatcher_RangeMatch) isAction_HeaderValueMatch_HeaderMatcher_HeaderMatchSpecifier() {
}

func (*Action_HeaderValueMatch_HeaderMatcher_PresentMatch) isAction_HeaderValueMatch_HeaderMatcher_HeaderMatchSpecifier() {
}

func (*Action_HeaderValueMatch_HeaderMatcher_PrefixMatch) isAction_HeaderValueMatch_HeaderMatcher_HeaderMatchSpecifier() {
}

func (*Action_HeaderValueMatch_HeaderMatcher_SuffixMatch) isAction_HeaderValueMatch_HeaderMatcher_HeaderMatchSpecifier() {
}

// Specifies the int64 start and end of the range using half-open interval semantics [start,
// end).
type Action_HeaderValueMatch_HeaderMatcher_Int64Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start of the range (inclusive)
	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// end of the range (exclusive)
	End int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Action_HeaderValueMatch_HeaderMatcher_Int64Range) Reset() {
	*x = Action_HeaderValueMatch_HeaderMatcher_Int64Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_HeaderValueMatch_HeaderMatcher_Int64Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_HeaderValueMatch_HeaderMatcher_Int64Range) ProtoMessage() {}

func (x *Action_HeaderValueMatch_HeaderMatcher_Int64Range) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_HeaderValueMatch_HeaderMatcher_Int64Range.ProtoReflect.Descriptor instead.
func (*Action_HeaderValueMatch_HeaderMatcher_Int64Range) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{2, 5, 0, 0}
}

func (x *Action_HeaderValueMatch_HeaderMatcher_Int64Range) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Action_HeaderValueMatch_HeaderMatcher_Int64Range) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

// MetadataKey provides a general interface using `key` and `path` to retrieve value from
// [`Metadata`](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/base.proto#envoy-v3-api-msg-config-core-v3-metadata).
//
// For example, for the following Metadata:
//
// ```yaml
// filter_metadata:
//   envoy.xxx:
//     prop:
//       foo: bar
//       xyz:
//         hello: envoy
// ```
//
// The following MetadataKey will retrieve a string value "bar" from the Metadata.
//
// ```yaml
// key: envoy.xxx
// path:
// - key: prop
// - key: foo
// ```
//
type Action_Metadata_MetadataKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The key name of Metadata to retrieve the Struct from the metadata.
	// Typically, it represents a builtin subsystem or custom extension.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // [(validate.rules).string = {min_len: 1}];
	// Must have at least one element. The path to retrieve the Value from the Struct. It can be a prefix or a full path,
	// e.g. ``[prop, xyz]`` for a struct or ``[prop, foo]`` for a string in the example,
	// which depends on the particular scenario.
	//
	// Note: Due to that only the key type segment is supported, the path can not specify a list
	// unless the list is the last segment.
	Path []*Action_Metadata_MetadataKey_PathSegment `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"` // [(validate.rules).repeated = {min_items: 1}];
}

func (x *Action_Metadata_MetadataKey) Reset() {
	*x = Action_Metadata_MetadataKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_Metadata_MetadataKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_Metadata_MetadataKey) ProtoMessage() {}

func (x *Action_Metadata_MetadataKey) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_Metadata_MetadataKey.ProtoReflect.Descriptor instead.
func (*Action_Metadata_MetadataKey) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{2, 6, 0}
}

func (x *Action_Metadata_MetadataKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Action_Metadata_MetadataKey) GetPath() []*Action_Metadata_MetadataKey_PathSegment {
	if x != nil {
		return x.Path
	}
	return nil
}

// Specifies the segment in a path to retrieve value from Metadata.
// Currently it is only supported to specify the key, i.e. field name, as one segment of a path.
type Action_Metadata_MetadataKey_PathSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Segment:
	//	*Action_Metadata_MetadataKey_PathSegment_Key
	Segment isAction_Metadata_MetadataKey_PathSegment_Segment `protobuf_oneof:"segment"`
}

func (x *Action_Metadata_MetadataKey_PathSegment) Reset() {
	*x = Action_Metadata_MetadataKey_PathSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_Metadata_MetadataKey_PathSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_Metadata_MetadataKey_PathSegment) ProtoMessage() {}

func (x *Action_Metadata_MetadataKey_PathSegment) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_Metadata_MetadataKey_PathSegment.ProtoReflect.Descriptor instead.
func (*Action_Metadata_MetadataKey_PathSegment) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP(), []int{2, 6, 0, 0}
}

func (m *Action_Metadata_MetadataKey_PathSegment) GetSegment() isAction_Metadata_MetadataKey_PathSegment_Segment {
	if m != nil {
		return m.Segment
	}
	return nil
}

func (x *Action_Metadata_MetadataKey_PathSegment) GetKey() string {
	if x, ok := x.GetSegment().(*Action_Metadata_MetadataKey_PathSegment_Key); ok {
		return x.Key
	}
	return ""
}

type isAction_Metadata_MetadataKey_PathSegment_Segment interface {
	isAction_Metadata_MetadataKey_PathSegment_Segment()
}

type Action_Metadata_MetadataKey_PathSegment_Key struct {
	// Required. If specified, use the key to retrieve the value in a Struct.
	Key string `protobuf:"bytes,1,opt,name=key,proto3,oneof"` // [(validate.rules).string = {min_len: 1}];
}

func (*Action_Metadata_MetadataKey_PathSegment_Key) isAction_Metadata_MetadataKey_PathSegment_Segment() {
}

var File_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDesc = []byte{
	0x0a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x72, 0x61, 0x74,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x1a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73,
	0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f,
	0x2f, 0x73, 0x6b, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x01, 0x0a,
	0x10, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x4e, 0x0a, 0x14, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x12, 0x72,
	0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x6f, 0x6e,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x6e,
	0x79, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x22, 0xfe, 0x08, 0x0a,
	0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x5d, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x12, 0x66,
	0x0a, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x08, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x66, 0x73, 0x1a, 0x83, 0x04, 0x0a, 0x0e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x54, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x7f, 0x0a, 0x10, 0x61, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x0f, 0x61, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0xeb, 0x01, 0x0a, 0x0e, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x6d, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x59, 0x2e, 0x72, 0x61,
	0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x3e, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x4e,
	0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x04, 0x1a, 0xb8, 0x02, 0x0a, 0x11, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x73,
	0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x59, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0xad, 0x01, 0x0a, 0x10, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x61, 0x74, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf2, 0x10,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x74, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x72,
	0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x65, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72, 0x61,
	0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x6f, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x48, 0x00, 0x52, 0x10, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x55, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x0f, 0x0a, 0x0d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x14, 0x0a,
	0x12, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x1a, 0x58, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x1a, 0x0f, 0x0a,
	0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x37,
	0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xbe, 0x05, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x67, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a,
	0xd6, 0x03, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78,
	0x61, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x72, 0x65, 0x67, 0x65, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x7b, 0x0a, 0x0b, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x58, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x23, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x34, 0x0a, 0x0a,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x1a, 0xf3, 0x03, 0x0a, 0x08, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x66, 0x0a, 0x0c,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x72, 0x61, 0x74, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x1a, 0xb2, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x63, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4f, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x2c, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x68,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x26, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x01, 0x42, 0x12,
	0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x42, 0x54, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65,
	0x73, 0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0xc0, 0xf5, 0x04, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescData = file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_goTypes = []interface{}{
	(RouteRateLimit_BasicRateLimit_RateLimitRatio_Unit)(0),    // 0: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.BasicRateLimit.RateLimitRatio.Unit
	(Action_Metadata_Source)(0),                               // 1: ratelimit.networking.mesh.gloo.solo.io.Action.Metadata.Source
	(*GatewayRateLimit)(nil),                                  // 2: ratelimit.networking.mesh.gloo.solo.io.GatewayRateLimit
	(*RouteRateLimit)(nil),                                    // 3: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit
	(*Action)(nil),                                            // 4: ratelimit.networking.mesh.gloo.solo.io.Action
	(*RouteRateLimit_BasicRateLimit)(nil),                     // 5: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.BasicRateLimit
	(*RouteRateLimit_AdvancedRateLimit)(nil),                  // 6: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.AdvancedRateLimit
	(*RouteRateLimit_BasicRateLimit_RateLimitRatio)(nil),      // 7: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.BasicRateLimit.RateLimitRatio
	(*RouteRateLimit_AdvancedRateLimit_RateLimitActions)(nil), // 8: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.AdvancedRateLimit.RateLimitActions
	(*Action_SourceCluster)(nil),                              // 9: ratelimit.networking.mesh.gloo.solo.io.Action.SourceCluster
	(*Action_DestinationCluster)(nil),                         // 10: ratelimit.networking.mesh.gloo.solo.io.Action.DestinationCluster
	(*Action_RequestHeaders)(nil),                             // 11: ratelimit.networking.mesh.gloo.solo.io.Action.RequestHeaders
	(*Action_RemoteAddress)(nil),                              // 12: ratelimit.networking.mesh.gloo.solo.io.Action.RemoteAddress
	(*Action_GenericKey)(nil),                                 // 13: ratelimit.networking.mesh.gloo.solo.io.Action.GenericKey
	(*Action_HeaderValueMatch)(nil),                           // 14: ratelimit.networking.mesh.gloo.solo.io.Action.HeaderValueMatch
	(*Action_Metadata)(nil),                                   // 15: ratelimit.networking.mesh.gloo.solo.io.Action.Metadata
	(*Action_HeaderValueMatch_HeaderMatcher)(nil),             // 16: ratelimit.networking.mesh.gloo.solo.io.Action.HeaderValueMatch.HeaderMatcher
	(*Action_HeaderValueMatch_HeaderMatcher_Int64Range)(nil),  // 17: ratelimit.networking.mesh.gloo.solo.io.Action.HeaderValueMatch.HeaderMatcher.Int64Range
	(*Action_Metadata_MetadataKey)(nil),                       // 18: ratelimit.networking.mesh.gloo.solo.io.Action.Metadata.MetadataKey
	(*Action_Metadata_MetadataKey_PathSegment)(nil),           // 19: ratelimit.networking.mesh.gloo.solo.io.Action.Metadata.MetadataKey.PathSegment
	(*v1.ObjectRef)(nil),                                      // 20: core.skv2.solo.io.ObjectRef
	(*duration.Duration)(nil),                                 // 21: google.protobuf.Duration
	(*v11.ObjectRefList)(nil),                                 // 22: common.mesh.gloo.solo.io.ObjectRefList
	(*wrappers.BoolValue)(nil),                                // 23: google.protobuf.BoolValue
}
var file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_depIdxs = []int32{
	20, // 0: ratelimit.networking.mesh.gloo.solo.io.GatewayRateLimit.ratelimit_server_ref:type_name -> core.skv2.solo.io.ObjectRef
	21, // 1: ratelimit.networking.mesh.gloo.solo.io.GatewayRateLimit.request_timeout:type_name -> google.protobuf.Duration
	5,  // 2: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.basic:type_name -> ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.BasicRateLimit
	6,  // 3: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.advanced:type_name -> ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.AdvancedRateLimit
	22, // 4: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.config_refs:type_name -> common.mesh.gloo.solo.io.ObjectRefList
	9,  // 5: ratelimit.networking.mesh.gloo.solo.io.Action.source_cluster:type_name -> ratelimit.networking.mesh.gloo.solo.io.Action.SourceCluster
	10, // 6: ratelimit.networking.mesh.gloo.solo.io.Action.destination_cluster:type_name -> ratelimit.networking.mesh.gloo.solo.io.Action.DestinationCluster
	11, // 7: ratelimit.networking.mesh.gloo.solo.io.Action.request_headers:type_name -> ratelimit.networking.mesh.gloo.solo.io.Action.RequestHeaders
	12, // 8: ratelimit.networking.mesh.gloo.solo.io.Action.remote_address:type_name -> ratelimit.networking.mesh.gloo.solo.io.Action.RemoteAddress
	13, // 9: ratelimit.networking.mesh.gloo.solo.io.Action.generic_key:type_name -> ratelimit.networking.mesh.gloo.solo.io.Action.GenericKey
	14, // 10: ratelimit.networking.mesh.gloo.solo.io.Action.header_value_match:type_name -> ratelimit.networking.mesh.gloo.solo.io.Action.HeaderValueMatch
	15, // 11: ratelimit.networking.mesh.gloo.solo.io.Action.metadata:type_name -> ratelimit.networking.mesh.gloo.solo.io.Action.Metadata
	7,  // 12: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.BasicRateLimit.authorized_limits:type_name -> ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.BasicRateLimit.RateLimitRatio
	7,  // 13: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.BasicRateLimit.anonymous_limits:type_name -> ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.BasicRateLimit.RateLimitRatio
	8,  // 14: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.AdvancedRateLimit.actions:type_name -> ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.AdvancedRateLimit.RateLimitActions
	0,  // 15: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.BasicRateLimit.RateLimitRatio.unit:type_name -> ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.BasicRateLimit.RateLimitRatio.Unit
	4,  // 16: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.AdvancedRateLimit.RateLimitActions.actions:type_name -> ratelimit.networking.mesh.gloo.solo.io.Action
	4,  // 17: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit.AdvancedRateLimit.RateLimitActions.set_actions:type_name -> ratelimit.networking.mesh.gloo.solo.io.Action
	23, // 18: ratelimit.networking.mesh.gloo.solo.io.Action.HeaderValueMatch.expect_match:type_name -> google.protobuf.BoolValue
	16, // 19: ratelimit.networking.mesh.gloo.solo.io.Action.HeaderValueMatch.headers:type_name -> ratelimit.networking.mesh.gloo.solo.io.Action.HeaderValueMatch.HeaderMatcher
	18, // 20: ratelimit.networking.mesh.gloo.solo.io.Action.Metadata.metadata_key:type_name -> ratelimit.networking.mesh.gloo.solo.io.Action.Metadata.MetadataKey
	1,  // 21: ratelimit.networking.mesh.gloo.solo.io.Action.Metadata.source:type_name -> ratelimit.networking.mesh.gloo.solo.io.Action.Metadata.Source
	17, // 22: ratelimit.networking.mesh.gloo.solo.io.Action.HeaderValueMatch.HeaderMatcher.range_match:type_name -> ratelimit.networking.mesh.gloo.solo.io.Action.HeaderValueMatch.HeaderMatcher.Int64Range
	19, // 23: ratelimit.networking.mesh.gloo.solo.io.Action.Metadata.MetadataKey.path:type_name -> ratelimit.networking.mesh.gloo.solo.io.Action.Metadata.MetadataKey.PathSegment
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_init() }
func file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_init() {
	if File_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteRateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteRateLimit_BasicRateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteRateLimit_AdvancedRateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteRateLimit_BasicRateLimit_RateLimitRatio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteRateLimit_AdvancedRateLimit_RateLimitActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_SourceCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_DestinationCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_RequestHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_RemoteAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_GenericKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_HeaderValueMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_HeaderValueMatch_HeaderMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_HeaderValueMatch_HeaderMatcher_Int64Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_Metadata_MetadataKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_Metadata_MetadataKey_PathSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RouteRateLimit_Basic)(nil),
		(*RouteRateLimit_Advanced)(nil),
		(*RouteRateLimit_ConfigRefs)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Action_SourceCluster_)(nil),
		(*Action_DestinationCluster_)(nil),
		(*Action_RequestHeaders_)(nil),
		(*Action_RemoteAddress_)(nil),
		(*Action_GenericKey_)(nil),
		(*Action_HeaderValueMatch_)(nil),
		(*Action_Metadata_)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Action_HeaderValueMatch_HeaderMatcher_ExactMatch)(nil),
		(*Action_HeaderValueMatch_HeaderMatcher_RegexMatch)(nil),
		(*Action_HeaderValueMatch_HeaderMatcher_RangeMatch)(nil),
		(*Action_HeaderValueMatch_HeaderMatcher_PresentMatch)(nil),
		(*Action_HeaderValueMatch_HeaderMatcher_PrefixMatch)(nil),
		(*Action_HeaderValueMatch_HeaderMatcher_SuffixMatch)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Action_Metadata_MetadataKey_PathSegment_Key)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto = out.File
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_api_networking_v1_ratelimit_rate_limit_proto_depIdxs = nil
}
