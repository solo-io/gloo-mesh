// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo-mesh/api/networking/v1/traffic_policy.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	v1 "github.com/solo-io/gloo-mesh/pkg/api/common.mesh.gloo.solo.io/v1"
	csrf "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1/csrf"
	ratelimit "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1/ratelimit"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v11 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// TLS connection mode. Enums correspond to those
// [defined here](https://github.com/istio/api/blob/00636152b9d9254b614828a65723840282a177d3/networking/v1beta1/destination_rule.proto#L886)
type TrafficPolicySpec_Policy_MTLS_Istio_TLSmode int32

const (
	// Do not originate a TLS connection to the upstream endpoint.
	TrafficPolicySpec_Policy_MTLS_Istio_DISABLE TrafficPolicySpec_Policy_MTLS_Istio_TLSmode = 0
	// Originate a TLS connection to the upstream endpoint.
	TrafficPolicySpec_Policy_MTLS_Istio_SIMPLE TrafficPolicySpec_Policy_MTLS_Istio_TLSmode = 1
	// Secure connections to the upstream using mutual TLS by presenting
	// client certificates for authentication.
	// This mode uses certificates generated
	// automatically by Istio for mTLS authentication. When this mode is
	// used, all other fields in `ClientTLSSettings` should be empty.
	TrafficPolicySpec_Policy_MTLS_Istio_ISTIO_MUTUAL TrafficPolicySpec_Policy_MTLS_Istio_TLSmode = 2
)

// Enum value maps for TrafficPolicySpec_Policy_MTLS_Istio_TLSmode.
var (
	TrafficPolicySpec_Policy_MTLS_Istio_TLSmode_name = map[int32]string{
		0: "DISABLE",
		1: "SIMPLE",
		2: "ISTIO_MUTUAL",
	}
	TrafficPolicySpec_Policy_MTLS_Istio_TLSmode_value = map[string]int32{
		"DISABLE":      0,
		"SIMPLE":       1,
		"ISTIO_MUTUAL": 2,
	}
)

func (x TrafficPolicySpec_Policy_MTLS_Istio_TLSmode) Enum() *TrafficPolicySpec_Policy_MTLS_Istio_TLSmode {
	p := new(TrafficPolicySpec_Policy_MTLS_Istio_TLSmode)
	*p = x
	return p
}

func (x TrafficPolicySpec_Policy_MTLS_Istio_TLSmode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficPolicySpec_Policy_MTLS_Istio_TLSmode) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_enumTypes[0].Descriptor()
}

func (TrafficPolicySpec_Policy_MTLS_Istio_TLSmode) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_enumTypes[0]
}

func (x TrafficPolicySpec_Policy_MTLS_Istio_TLSmode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficPolicySpec_Policy_MTLS_Istio_TLSmode.Descriptor instead.
func (TrafficPolicySpec_Policy_MTLS_Istio_TLSmode) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP(), []int{0, 0, 6, 0, 0}
}

// Applies L7 routing and post-routing configuration on selected network edges.
type TrafficPolicySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the Workloads (traffic sources) this TrafficPolicy applies to.
	// Omit to apply to all Workloads.
	SourceSelector []*v1.WorkloadSelector `protobuf:"bytes,1,rep,name=source_selector,json=sourceSelector,proto3" json:"source_selector,omitempty"`
	// Specify the Destinations (destinations) this TrafficPolicy applies to.
	// Omit to apply to all Destinations.
	DestinationSelector []*v1.DestinationSelector `protobuf:"bytes,2,rep,name=destination_selector,json=destinationSelector,proto3" json:"destination_selector,omitempty"`
	// Specify criteria that HTTP requests must satisfy for the TrafficPolicy to apply.
	// Conditions defined within a single matcher are conjunctive, i.e. all conditions must be satisfied for a match to occur.
	// Conditions defined between different matchers are disjunctive, i.e. at least one matcher must be satisfied for the TrafficPolicy to apply.
	// Omit to apply to any HTTP request.
	HttpRequestMatchers []*HttpMatcher `protobuf:"bytes,3,rep,name=http_request_matchers,json=httpRequestMatchers,proto3" json:"http_request_matchers,omitempty"`
	// Specify L7 routing and post-routing configuration.
	Policy *TrafficPolicySpec_Policy `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *TrafficPolicySpec) Reset() {
	*x = TrafficPolicySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec) ProtoMessage() {}

func (x *TrafficPolicySpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP(), []int{0}
}

func (x *TrafficPolicySpec) GetSourceSelector() []*v1.WorkloadSelector {
	if x != nil {
		return x.SourceSelector
	}
	return nil
}

func (x *TrafficPolicySpec) GetDestinationSelector() []*v1.DestinationSelector {
	if x != nil {
		return x.DestinationSelector
	}
	return nil
}

func (x *TrafficPolicySpec) GetHttpRequestMatchers() []*HttpMatcher {
	if x != nil {
		return x.HttpRequestMatchers
	}
	return nil
}

func (x *TrafficPolicySpec) GetPolicy() *TrafficPolicySpec_Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type TrafficPolicyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The most recent generation observed in the the TrafficPolicy metadata.
	// If the `observedGeneration` does not match `metadata.generation`, Gloo Mesh has not processed the most
	// recent version of this resource.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// The state of the overall resource.
	// It will only show accepted if it has been successfully applied to all selected Destinations.
	State v1.ApprovalState `protobuf:"varint,2,opt,name=state,proto3,enum=common.mesh.gloo.solo.io.ApprovalState" json:"state,omitempty"`
	// The status of the TrafficPolicy for each selected Destination.
	// A TrafficPolicy may be Accepted for some Destinations and rejected for others.
	Destinations map[string]*ApprovalStatus `protobuf:"bytes,3,rep,name=destinations,proto3" json:"destinations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The list of selected Workloads for which this policy has been applied.
	Workloads []string `protobuf:"bytes,4,rep,name=workloads,proto3" json:"workloads,omitempty"`
	// Any errors found while processing this generation of the resource.
	Errors []string `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *TrafficPolicyStatus) Reset() {
	*x = TrafficPolicyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicyStatus) ProtoMessage() {}

func (x *TrafficPolicyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicyStatus.ProtoReflect.Descriptor instead.
func (*TrafficPolicyStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP(), []int{1}
}

func (x *TrafficPolicyStatus) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *TrafficPolicyStatus) GetState() v1.ApprovalState {
	if x != nil {
		return x.State
	}
	return v1.ApprovalState_PENDING
}

func (x *TrafficPolicyStatus) GetDestinations() map[string]*ApprovalStatus {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *TrafficPolicyStatus) GetWorkloads() []string {
	if x != nil {
		return x.Workloads
	}
	return nil
}

func (x *TrafficPolicyStatus) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Specify L7 routing and post-routing configuration.
type TrafficPolicySpec_Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shift traffic to a different destination.
	TrafficShift *TrafficPolicySpec_Policy_MultiDestination `protobuf:"bytes,4,opt,name=traffic_shift,json=trafficShift,proto3" json:"traffic_shift,omitempty"`
	// Inject faulty responses.
	FaultInjection *TrafficPolicySpec_Policy_FaultInjection `protobuf:"bytes,5,opt,name=fault_injection,json=faultInjection,proto3" json:"fault_injection,omitempty"`
	// Set a timeout on requests.
	RequestTimeout *duration.Duration `protobuf:"bytes,6,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	// Set a retry policy on requests.
	Retries *TrafficPolicySpec_Policy_RetryPolicy `protobuf:"bytes,7,opt,name=retries,proto3" json:"retries,omitempty"`
	// Set a Cross-Origin Resource Sharing policy (CORS) for requests. Refer to [this link](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)
	// for further details about cross origin resource sharing.
	CorsPolicy *TrafficPolicySpec_Policy_CorsPolicy `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// Mirror traffic to a another destination (traffic will be sent to its original destination in addition to the mirrored destinations).
	Mirror *TrafficPolicySpec_Policy_Mirror `protobuf:"bytes,9,opt,name=mirror,proto3" json:"mirror,omitempty"`
	// Manipulate request and response headers.
	HeaderManipulation *HeaderManipulation `protobuf:"bytes,10,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	// Configure [outlier detection](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/outlier) on the selected destinations.
	// Specifying this field requires an empty `source_selector` because it must apply to all traffic.
	OutlierDetection *TrafficPolicySpec_Policy_OutlierDetection `protobuf:"bytes,11,opt,name=outlier_detection,json=outlierDetection,proto3" json:"outlier_detection,omitempty"`
	// Configure mTLS settings. If specified will override global default defined in Settings.
	Mtls *TrafficPolicySpec_Policy_MTLS `protobuf:"bytes,12,opt,name=mtls,proto3" json:"mtls,omitempty"`
	// Configure the Envoy based CSRF filter
	Csrf *csrf.CsrfPolicy `protobuf:"bytes,13,opt,name=csrf,proto3" json:"csrf,omitempty"`
	// Config the Envoy based Ratelimit filter
	RateLimit *ratelimit.RouteRateLimit `protobuf:"bytes,14,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *TrafficPolicySpec_Policy) Reset() {
	*x = TrafficPolicySpec_Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_Policy) ProtoMessage() {}

func (x *TrafficPolicySpec_Policy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_Policy.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_Policy) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TrafficPolicySpec_Policy) GetTrafficShift() *TrafficPolicySpec_Policy_MultiDestination {
	if x != nil {
		return x.TrafficShift
	}
	return nil
}

func (x *TrafficPolicySpec_Policy) GetFaultInjection() *TrafficPolicySpec_Policy_FaultInjection {
	if x != nil {
		return x.FaultInjection
	}
	return nil
}

func (x *TrafficPolicySpec_Policy) GetRequestTimeout() *duration.Duration {
	if x != nil {
		return x.RequestTimeout
	}
	return nil
}

func (x *TrafficPolicySpec_Policy) GetRetries() *TrafficPolicySpec_Policy_RetryPolicy {
	if x != nil {
		return x.Retries
	}
	return nil
}

func (x *TrafficPolicySpec_Policy) GetCorsPolicy() *TrafficPolicySpec_Policy_CorsPolicy {
	if x != nil {
		return x.CorsPolicy
	}
	return nil
}

func (x *TrafficPolicySpec_Policy) GetMirror() *TrafficPolicySpec_Policy_Mirror {
	if x != nil {
		return x.Mirror
	}
	return nil
}

func (x *TrafficPolicySpec_Policy) GetHeaderManipulation() *HeaderManipulation {
	if x != nil {
		return x.HeaderManipulation
	}
	return nil
}

func (x *TrafficPolicySpec_Policy) GetOutlierDetection() *TrafficPolicySpec_Policy_OutlierDetection {
	if x != nil {
		return x.OutlierDetection
	}
	return nil
}

func (x *TrafficPolicySpec_Policy) GetMtls() *TrafficPolicySpec_Policy_MTLS {
	if x != nil {
		return x.Mtls
	}
	return nil
}

func (x *TrafficPolicySpec_Policy) GetCsrf() *csrf.CsrfPolicy {
	if x != nil {
		return x.Csrf
	}
	return nil
}

func (x *TrafficPolicySpec_Policy) GetRateLimit() *ratelimit.RouteRateLimit {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// Specify retries for failed requests.
type TrafficPolicySpec_Policy_RetryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of retries for a given request
	Attempts int32 `protobuf:"varint,1,opt,name=attempts,proto3" json:"attempts,omitempty"`
	// Timeout per retry attempt for a given request. Format: `1h`/`1m`/`1s`/`1ms`. *Must be >= 1ms*.
	PerTryTimeout *duration.Duration `protobuf:"bytes,2,opt,name=per_try_timeout,json=perTryTimeout,proto3" json:"per_try_timeout,omitempty"`
}

func (x *TrafficPolicySpec_Policy_RetryPolicy) Reset() {
	*x = TrafficPolicySpec_Policy_RetryPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_Policy_RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_Policy_RetryPolicy) ProtoMessage() {}

func (x *TrafficPolicySpec_Policy_RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_Policy_RetryPolicy.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_Policy_RetryPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *TrafficPolicySpec_Policy_RetryPolicy) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *TrafficPolicySpec_Policy_RetryPolicy) GetPerTryTimeout() *duration.Duration {
	if x != nil {
		return x.PerTryTimeout
	}
	return nil
}

// Specify a traffic shift destination.
type TrafficPolicySpec_Policy_MultiDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify weighted traffic shift destinations.
	Destinations []*WeightedDestination `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
}

func (x *TrafficPolicySpec_Policy_MultiDestination) Reset() {
	*x = TrafficPolicySpec_Policy_MultiDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_Policy_MultiDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_Policy_MultiDestination) ProtoMessage() {}

func (x *TrafficPolicySpec_Policy_MultiDestination) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_Policy_MultiDestination.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_Policy_MultiDestination) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *TrafficPolicySpec_Policy_MultiDestination) GetDestinations() []*WeightedDestination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

// Specify one or more faults to inject for the selected network edge.
type TrafficPolicySpec_Policy_FaultInjection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the type of fault to inject.
	//
	// Types that are assignable to FaultInjectionType:
	//	*TrafficPolicySpec_Policy_FaultInjection_FixedDelay
	//	*TrafficPolicySpec_Policy_FaultInjection_Abort_
	FaultInjectionType isTrafficPolicySpec_Policy_FaultInjection_FaultInjectionType `protobuf_oneof:"fault_injection_type"`
	// Percentage of requests to be faulted. Values range between 0 and 100. If omitted all requests will be faulted.
	Percentage float64 `protobuf:"fixed64,4,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *TrafficPolicySpec_Policy_FaultInjection) Reset() {
	*x = TrafficPolicySpec_Policy_FaultInjection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_Policy_FaultInjection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_Policy_FaultInjection) ProtoMessage() {}

func (x *TrafficPolicySpec_Policy_FaultInjection) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_Policy_FaultInjection.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_Policy_FaultInjection) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (m *TrafficPolicySpec_Policy_FaultInjection) GetFaultInjectionType() isTrafficPolicySpec_Policy_FaultInjection_FaultInjectionType {
	if m != nil {
		return m.FaultInjectionType
	}
	return nil
}

func (x *TrafficPolicySpec_Policy_FaultInjection) GetFixedDelay() *duration.Duration {
	if x, ok := x.GetFaultInjectionType().(*TrafficPolicySpec_Policy_FaultInjection_FixedDelay); ok {
		return x.FixedDelay
	}
	return nil
}

func (x *TrafficPolicySpec_Policy_FaultInjection) GetAbort() *TrafficPolicySpec_Policy_FaultInjection_Abort {
	if x, ok := x.GetFaultInjectionType().(*TrafficPolicySpec_Policy_FaultInjection_Abort_); ok {
		return x.Abort
	}
	return nil
}

func (x *TrafficPolicySpec_Policy_FaultInjection) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

type isTrafficPolicySpec_Policy_FaultInjection_FaultInjectionType interface {
	isTrafficPolicySpec_Policy_FaultInjection_FaultInjectionType()
}

type TrafficPolicySpec_Policy_FaultInjection_FixedDelay struct {
	// Add a delay of a fixed duration before sending the request. Format: `1h`/`1m`/`1s`/`1ms`. MUST be >=1ms.
	FixedDelay *duration.Duration `protobuf:"bytes,1,opt,name=fixed_delay,json=fixedDelay,proto3,oneof"`
}

type TrafficPolicySpec_Policy_FaultInjection_Abort_ struct {
	// Abort the request and return the specified error code back to traffic source.
	Abort *TrafficPolicySpec_Policy_FaultInjection_Abort `protobuf:"bytes,2,opt,name=abort,proto3,oneof"`
}

func (*TrafficPolicySpec_Policy_FaultInjection_FixedDelay) isTrafficPolicySpec_Policy_FaultInjection_FaultInjectionType() {
}

func (*TrafficPolicySpec_Policy_FaultInjection_Abort_) isTrafficPolicySpec_Policy_FaultInjection_FaultInjectionType() {
}

// Specify Cross-Origin Resource Sharing policy (CORS) for requests. Refer to [this link](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)
// for further details about cross origin resource sharing.
type TrafficPolicySpec_Policy_CorsPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String patterns that match allowed origins. An origin is allowed if any of the string matchers match.
	AllowOrigins []*v1.StringMatch `protobuf:"bytes,7,rep,name=allow_origins,json=allowOrigins,proto3" json:"allow_origins,omitempty"`
	// List of HTTP methods allowed to access the resource. The content will
	// be serialized to the `Access-Control-Allow-Methods` header.
	AllowMethods []string `protobuf:"bytes,2,rep,name=allow_methods,json=allowMethods,proto3" json:"allow_methods,omitempty"`
	// List of HTTP headers that can be used when requesting the
	// resource. Serialized to the `Access-Control-Allow-Headers` header.
	AllowHeaders []string `protobuf:"bytes,3,rep,name=allow_headers,json=allowHeaders,proto3" json:"allow_headers,omitempty"`
	// A list of HTTP headers that browsers are allowed to
	// access. Serialized to the `Access-Control-Expose-Headers` header.
	ExposeHeaders []string `protobuf:"bytes,4,rep,name=expose_headers,json=exposeHeaders,proto3" json:"expose_headers,omitempty"`
	// Specify how long the results of a preflight request can be
	// cached. Serialized to the `Access-Control-Max-Age` header.
	MaxAge *duration.Duration `protobuf:"bytes,5,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// Indicates whether the caller is allowed to send the actual request
	// (not the preflight) using credentials. Translates to the
	// `Access-Control-Allow-Credentials` header.
	AllowCredentials *wrappers.BoolValue `protobuf:"bytes,6,opt,name=allow_credentials,json=allowCredentials,proto3" json:"allow_credentials,omitempty"`
}

func (x *TrafficPolicySpec_Policy_CorsPolicy) Reset() {
	*x = TrafficPolicySpec_Policy_CorsPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_Policy_CorsPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_Policy_CorsPolicy) ProtoMessage() {}

func (x *TrafficPolicySpec_Policy_CorsPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_Policy_CorsPolicy.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_Policy_CorsPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *TrafficPolicySpec_Policy_CorsPolicy) GetAllowOrigins() []*v1.StringMatch {
	if x != nil {
		return x.AllowOrigins
	}
	return nil
}

func (x *TrafficPolicySpec_Policy_CorsPolicy) GetAllowMethods() []string {
	if x != nil {
		return x.AllowMethods
	}
	return nil
}

func (x *TrafficPolicySpec_Policy_CorsPolicy) GetAllowHeaders() []string {
	if x != nil {
		return x.AllowHeaders
	}
	return nil
}

func (x *TrafficPolicySpec_Policy_CorsPolicy) GetExposeHeaders() []string {
	if x != nil {
		return x.ExposeHeaders
	}
	return nil
}

func (x *TrafficPolicySpec_Policy_CorsPolicy) GetMaxAge() *duration.Duration {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *TrafficPolicySpec_Policy_CorsPolicy) GetAllowCredentials() *wrappers.BoolValue {
	if x != nil {
		return x.AllowCredentials
	}
	return nil
}

// Mirror traffic to a another destination (traffic will be sent to its original destination in addition to the mirrored destinations).
type TrafficPolicySpec_Policy_Mirror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Platform specific mirror destinations.
	//
	// Types that are assignable to DestinationType:
	//	*TrafficPolicySpec_Policy_Mirror_KubeService
	DestinationType isTrafficPolicySpec_Policy_Mirror_DestinationType `protobuf_oneof:"destination_type"`
	// Percentage of traffic to mirror. If omitted all traffic will be mirrored. Values must be between 0 and 100.
	Percentage float64 `protobuf:"fixed64,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// Port on the destination to receive traffic. Required if the destination exposes multiple ports.
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *TrafficPolicySpec_Policy_Mirror) Reset() {
	*x = TrafficPolicySpec_Policy_Mirror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_Policy_Mirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_Policy_Mirror) ProtoMessage() {}

func (x *TrafficPolicySpec_Policy_Mirror) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_Policy_Mirror.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_Policy_Mirror) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (m *TrafficPolicySpec_Policy_Mirror) GetDestinationType() isTrafficPolicySpec_Policy_Mirror_DestinationType {
	if m != nil {
		return m.DestinationType
	}
	return nil
}

func (x *TrafficPolicySpec_Policy_Mirror) GetKubeService() *v11.ClusterObjectRef {
	if x, ok := x.GetDestinationType().(*TrafficPolicySpec_Policy_Mirror_KubeService); ok {
		return x.KubeService
	}
	return nil
}

func (x *TrafficPolicySpec_Policy_Mirror) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *TrafficPolicySpec_Policy_Mirror) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type isTrafficPolicySpec_Policy_Mirror_DestinationType interface {
	isTrafficPolicySpec_Policy_Mirror_DestinationType()
}

type TrafficPolicySpec_Policy_Mirror_KubeService struct {
	// Reference (name, namespace, Gloo Mesh cluster) to a Kubernetes service.
	KubeService *v11.ClusterObjectRef `protobuf:"bytes,1,opt,name=kube_service,json=kubeService,proto3,oneof"`
}

func (*TrafficPolicySpec_Policy_Mirror_KubeService) isTrafficPolicySpec_Policy_Mirror_DestinationType() {
}

// Configure [outlier detection](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/outlier) on the selected destinations.
// Specifying this field requires an empty `source_selector` because it must apply to all traffic.
type TrafficPolicySpec_Policy_OutlierDetection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of errors before a host is ejected from the connection pool. A default will be used if not set.
	ConsecutiveErrors uint32 `protobuf:"varint,1,opt,name=consecutive_errors,json=consecutiveErrors,proto3" json:"consecutive_errors,omitempty"`
	// The time interval between ejection sweep analysis. Format: `1h`/`1m`/`1s`/`1ms`. Must be >= `1ms`. A default will be used if not set.
	Interval *duration.Duration `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// The minimum ejection duration. Format: `1h`/`1m`/`1s`/`1ms`. Must be >= `1ms`. A default will be used if not set.
	BaseEjectionTime *duration.Duration `protobuf:"bytes,3,opt,name=base_ejection_time,json=baseEjectionTime,proto3" json:"base_ejection_time,omitempty"`
	// The maximum percentage of hosts that can be ejected from the load balancing pool.
	// At least one host will be ejected regardless of the value. Must be between 0 and 100. A default will be used if not set.
	MaxEjectionPercent uint32 `protobuf:"varint,4,opt,name=max_ejection_percent,json=maxEjectionPercent,proto3" json:"max_ejection_percent,omitempty"`
}

func (x *TrafficPolicySpec_Policy_OutlierDetection) Reset() {
	*x = TrafficPolicySpec_Policy_OutlierDetection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_Policy_OutlierDetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_Policy_OutlierDetection) ProtoMessage() {}

func (x *TrafficPolicySpec_Policy_OutlierDetection) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_Policy_OutlierDetection.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_Policy_OutlierDetection) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP(), []int{0, 0, 5}
}

func (x *TrafficPolicySpec_Policy_OutlierDetection) GetConsecutiveErrors() uint32 {
	if x != nil {
		return x.ConsecutiveErrors
	}
	return 0
}

func (x *TrafficPolicySpec_Policy_OutlierDetection) GetInterval() *duration.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *TrafficPolicySpec_Policy_OutlierDetection) GetBaseEjectionTime() *duration.Duration {
	if x != nil {
		return x.BaseEjectionTime
	}
	return nil
}

func (x *TrafficPolicySpec_Policy_OutlierDetection) GetMaxEjectionPercent() uint32 {
	if x != nil {
		return x.MaxEjectionPercent
	}
	return 0
}

// Configure mTLS settings on destinations. If specified this overrides the global default defined in Settings.
type TrafficPolicySpec_Policy_MTLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Istio TLS settings.
	Istio *TrafficPolicySpec_Policy_MTLS_Istio `protobuf:"bytes,1,opt,name=istio,proto3" json:"istio,omitempty"`
}

func (x *TrafficPolicySpec_Policy_MTLS) Reset() {
	*x = TrafficPolicySpec_Policy_MTLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_Policy_MTLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_Policy_MTLS) ProtoMessage() {}

func (x *TrafficPolicySpec_Policy_MTLS) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_Policy_MTLS.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_Policy_MTLS) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP(), []int{0, 0, 6}
}

func (x *TrafficPolicySpec_Policy_MTLS) GetIstio() *TrafficPolicySpec_Policy_MTLS_Istio {
	if x != nil {
		return x.Istio
	}
	return nil
}

// Transform filter config.
type TrafficPolicySpec_Policy_Transform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: implement
	Todo string `protobuf:"bytes,1,opt,name=todo,proto3" json:"todo,omitempty"`
}

func (x *TrafficPolicySpec_Policy_Transform) Reset() {
	*x = TrafficPolicySpec_Policy_Transform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_Policy_Transform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_Policy_Transform) ProtoMessage() {}

func (x *TrafficPolicySpec_Policy_Transform) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_Policy_Transform.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_Policy_Transform) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP(), []int{0, 0, 7}
}

func (x *TrafficPolicySpec_Policy_Transform) GetTodo() string {
	if x != nil {
		return x.Todo
	}
	return ""
}

// DLP filter config.
type TrafficPolicySpec_Policy_DLPPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: implement
	Todo string `protobuf:"bytes,1,opt,name=todo,proto3" json:"todo,omitempty"`
}

func (x *TrafficPolicySpec_Policy_DLPPolicy) Reset() {
	*x = TrafficPolicySpec_Policy_DLPPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_Policy_DLPPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_Policy_DLPPolicy) ProtoMessage() {}

func (x *TrafficPolicySpec_Policy_DLPPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_Policy_DLPPolicy.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_Policy_DLPPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP(), []int{0, 0, 8}
}

func (x *TrafficPolicySpec_Policy_DLPPolicy) GetTodo() string {
	if x != nil {
		return x.Todo
	}
	return ""
}

// ExtAuth filter config.
type TrafficPolicySpec_Policy_ExtAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: implement
	Todo string `protobuf:"bytes,1,opt,name=todo,proto3" json:"todo,omitempty"`
}

func (x *TrafficPolicySpec_Policy_ExtAuth) Reset() {
	*x = TrafficPolicySpec_Policy_ExtAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_Policy_ExtAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_Policy_ExtAuth) ProtoMessage() {}

func (x *TrafficPolicySpec_Policy_ExtAuth) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_Policy_ExtAuth.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_Policy_ExtAuth) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP(), []int{0, 0, 9}
}

func (x *TrafficPolicySpec_Policy_ExtAuth) GetTodo() string {
	if x != nil {
		return x.Todo
	}
	return ""
}

// Abort the request and return the specified error code back to traffic source.
type TrafficPolicySpec_Policy_FaultInjection_Abort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. HTTP status code to use to abort the request.
	HttpStatus int32 `protobuf:"varint,1,opt,name=http_status,json=httpStatus,proto3" json:"http_status,omitempty"`
}

func (x *TrafficPolicySpec_Policy_FaultInjection_Abort) Reset() {
	*x = TrafficPolicySpec_Policy_FaultInjection_Abort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_Policy_FaultInjection_Abort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_Policy_FaultInjection_Abort) ProtoMessage() {}

func (x *TrafficPolicySpec_Policy_FaultInjection_Abort) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_Policy_FaultInjection_Abort.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_Policy_FaultInjection_Abort) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *TrafficPolicySpec_Policy_FaultInjection_Abort) GetHttpStatus() int32 {
	if x != nil {
		return x.HttpStatus
	}
	return 0
}

// Istio TLS settings.
type TrafficPolicySpec_Policy_MTLS_Istio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TLS connection mode
	TlsMode TrafficPolicySpec_Policy_MTLS_Istio_TLSmode `protobuf:"varint,1,opt,name=tls_mode,json=tlsMode,proto3,enum=networking.mesh.gloo.solo.io.TrafficPolicySpec_Policy_MTLS_Istio_TLSmode" json:"tls_mode,omitempty"`
}

func (x *TrafficPolicySpec_Policy_MTLS_Istio) Reset() {
	*x = TrafficPolicySpec_Policy_MTLS_Istio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_Policy_MTLS_Istio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_Policy_MTLS_Istio) ProtoMessage() {}

func (x *TrafficPolicySpec_Policy_MTLS_Istio) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_Policy_MTLS_Istio.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_Policy_MTLS_Istio) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP(), []int{0, 0, 6, 0}
}

func (x *TrafficPolicySpec_Policy_MTLS_Istio) GetTlsMode() TrafficPolicySpec_Policy_MTLS_Istio_TLSmode {
	if x != nil {
		return x.TlsMode
	}
	return TrafficPolicySpec_Policy_MTLS_Istio_DISABLE
}

var File_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDesc = []byte{
	0x0a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6b, 0x76, 0x32, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65,
	0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f,
	0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d,
	0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67,
	0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f,
	0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f,
	0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x73, 0x72, 0x66,
	0x2f, 0x63, 0x73, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb9, 0x17, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x53, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x60, 0x0a, 0x14, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5d, 0x0a, 0x15,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x13, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0xbd, 0x14, 0x0a, 0x06,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x6c, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x12, 0x6e, 0x0a, 0x0f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5c, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x73, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x72, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a,
	0x63, 0x6f, 0x72, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x55, 0x0a, 0x06, 0x6d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x61, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x69,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x04, 0x6d, 0x74,
	0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x52, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x04, 0x63,
	0x73, 0x72, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x73, 0x72, 0x66,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x73,
	0x72, 0x66, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x04, 0x63, 0x73, 0x72, 0x66, 0x12, 0x55,
	0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x6c, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x12, 0x41, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x54, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x1a, 0x69, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x95,
	0x02, 0x0a, 0x0e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x63, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61,
	0x62, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x1a, 0x28, 0x0a, 0x05, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x16,
	0x0a, 0x14, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xc6, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x73, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x1a,
	0x9a, 0x01, 0x0a, 0x06, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x0c, 0x6b, 0x75,
	0x62, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xf3, 0x01, 0x0a,
	0x10, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x12, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x62, 0x61, 0x73, 0x65, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x1a, 0x85, 0x02, 0x0a, 0x04, 0x4d, 0x54, 0x4c, 0x53, 0x12, 0x57, 0x0a, 0x05, 0x69,
	0x73, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x05, 0x69,
	0x73, 0x74, 0x69, 0x6f, 0x1a, 0xa3, 0x01, 0x0a, 0x05, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x12, 0x64,
	0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x49, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x2e, 0x49, 0x73,
	0x74, 0x69, 0x6f, 0x2e, 0x54, 0x4c, 0x53, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x74, 0x6c, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x07, 0x54, 0x4c, 0x53, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x53, 0x54, 0x49,
	0x4f, 0x5f, 0x4d, 0x55, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x1f, 0x0a, 0x09, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x64, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x64, 0x6f, 0x1a, 0x1f, 0x0a, 0x09, 0x44,
	0x4c, 0x50, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x64, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x64, 0x6f, 0x1a, 0x1d, 0x0a, 0x07,
	0x45, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x64, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x64, 0x6f, 0x22, 0x93, 0x03, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x67, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x1a, 0x6d, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x4a, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73,
	0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0xc0, 0xf5, 0x04, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescData = file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_goTypes = []interface{}{
	(TrafficPolicySpec_Policy_MTLS_Istio_TLSmode)(0),      // 0: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.MTLS.Istio.TLSmode
	(*TrafficPolicySpec)(nil),                             // 1: networking.mesh.gloo.solo.io.TrafficPolicySpec
	(*TrafficPolicyStatus)(nil),                           // 2: networking.mesh.gloo.solo.io.TrafficPolicyStatus
	(*TrafficPolicySpec_Policy)(nil),                      // 3: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy
	(*TrafficPolicySpec_Policy_RetryPolicy)(nil),          // 4: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.RetryPolicy
	(*TrafficPolicySpec_Policy_MultiDestination)(nil),     // 5: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.MultiDestination
	(*TrafficPolicySpec_Policy_FaultInjection)(nil),       // 6: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.FaultInjection
	(*TrafficPolicySpec_Policy_CorsPolicy)(nil),           // 7: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.CorsPolicy
	(*TrafficPolicySpec_Policy_Mirror)(nil),               // 8: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.Mirror
	(*TrafficPolicySpec_Policy_OutlierDetection)(nil),     // 9: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.OutlierDetection
	(*TrafficPolicySpec_Policy_MTLS)(nil),                 // 10: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.MTLS
	(*TrafficPolicySpec_Policy_Transform)(nil),            // 11: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.Transform
	(*TrafficPolicySpec_Policy_DLPPolicy)(nil),            // 12: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.DLPPolicy
	(*TrafficPolicySpec_Policy_ExtAuth)(nil),              // 13: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.ExtAuth
	(*TrafficPolicySpec_Policy_FaultInjection_Abort)(nil), // 14: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.FaultInjection.Abort
	(*TrafficPolicySpec_Policy_MTLS_Istio)(nil),           // 15: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.MTLS.Istio
	nil,                              // 16: networking.mesh.gloo.solo.io.TrafficPolicyStatus.DestinationsEntry
	(*v1.WorkloadSelector)(nil),      // 17: common.mesh.gloo.solo.io.WorkloadSelector
	(*v1.DestinationSelector)(nil),   // 18: common.mesh.gloo.solo.io.DestinationSelector
	(*HttpMatcher)(nil),              // 19: networking.mesh.gloo.solo.io.HttpMatcher
	(v1.ApprovalState)(0),            // 20: common.mesh.gloo.solo.io.ApprovalState
	(*duration.Duration)(nil),        // 21: google.protobuf.Duration
	(*HeaderManipulation)(nil),       // 22: networking.mesh.gloo.solo.io.HeaderManipulation
	(*csrf.CsrfPolicy)(nil),          // 23: csrf.networking.mesh.gloo.solo.io.CsrfPolicy
	(*ratelimit.RouteRateLimit)(nil), // 24: ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit
	(*WeightedDestination)(nil),      // 25: networking.mesh.gloo.solo.io.WeightedDestination
	(*v1.StringMatch)(nil),           // 26: common.mesh.gloo.solo.io.StringMatch
	(*wrappers.BoolValue)(nil),       // 27: google.protobuf.BoolValue
	(*v11.ClusterObjectRef)(nil),     // 28: core.skv2.solo.io.ClusterObjectRef
	(*ApprovalStatus)(nil),           // 29: networking.mesh.gloo.solo.io.ApprovalStatus
}
var file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_depIdxs = []int32{
	17, // 0: networking.mesh.gloo.solo.io.TrafficPolicySpec.source_selector:type_name -> common.mesh.gloo.solo.io.WorkloadSelector
	18, // 1: networking.mesh.gloo.solo.io.TrafficPolicySpec.destination_selector:type_name -> common.mesh.gloo.solo.io.DestinationSelector
	19, // 2: networking.mesh.gloo.solo.io.TrafficPolicySpec.http_request_matchers:type_name -> networking.mesh.gloo.solo.io.HttpMatcher
	3,  // 3: networking.mesh.gloo.solo.io.TrafficPolicySpec.policy:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy
	20, // 4: networking.mesh.gloo.solo.io.TrafficPolicyStatus.state:type_name -> common.mesh.gloo.solo.io.ApprovalState
	16, // 5: networking.mesh.gloo.solo.io.TrafficPolicyStatus.destinations:type_name -> networking.mesh.gloo.solo.io.TrafficPolicyStatus.DestinationsEntry
	5,  // 6: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.traffic_shift:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.MultiDestination
	6,  // 7: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.fault_injection:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.FaultInjection
	21, // 8: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.request_timeout:type_name -> google.protobuf.Duration
	4,  // 9: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.retries:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.RetryPolicy
	7,  // 10: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.cors_policy:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.CorsPolicy
	8,  // 11: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.mirror:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.Mirror
	22, // 12: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.header_manipulation:type_name -> networking.mesh.gloo.solo.io.HeaderManipulation
	9,  // 13: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.outlier_detection:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.OutlierDetection
	10, // 14: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.mtls:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.MTLS
	23, // 15: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.csrf:type_name -> csrf.networking.mesh.gloo.solo.io.CsrfPolicy
	24, // 16: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.rate_limit:type_name -> ratelimit.networking.mesh.gloo.solo.io.RouteRateLimit
	21, // 17: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.RetryPolicy.per_try_timeout:type_name -> google.protobuf.Duration
	25, // 18: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.MultiDestination.destinations:type_name -> networking.mesh.gloo.solo.io.WeightedDestination
	21, // 19: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.FaultInjection.fixed_delay:type_name -> google.protobuf.Duration
	14, // 20: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.FaultInjection.abort:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.FaultInjection.Abort
	26, // 21: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.CorsPolicy.allow_origins:type_name -> common.mesh.gloo.solo.io.StringMatch
	21, // 22: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.CorsPolicy.max_age:type_name -> google.protobuf.Duration
	27, // 23: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.CorsPolicy.allow_credentials:type_name -> google.protobuf.BoolValue
	28, // 24: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.Mirror.kube_service:type_name -> core.skv2.solo.io.ClusterObjectRef
	21, // 25: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.OutlierDetection.interval:type_name -> google.protobuf.Duration
	21, // 26: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.OutlierDetection.base_ejection_time:type_name -> google.protobuf.Duration
	15, // 27: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.MTLS.istio:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.MTLS.Istio
	0,  // 28: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.MTLS.Istio.tls_mode:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.MTLS.Istio.TLSmode
	29, // 29: networking.mesh.gloo.solo.io.TrafficPolicyStatus.DestinationsEntry.value:type_name -> networking.mesh.gloo.solo.io.ApprovalStatus
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_init() }
func file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_init() {
	if File_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1_request_matchers_proto_init()
	file_github_com_solo_io_gloo_mesh_api_networking_v1_status_proto_init()
	file_github_com_solo_io_gloo_mesh_api_networking_v1_weighed_destination_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_Policy_RetryPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_Policy_MultiDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_Policy_FaultInjection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_Policy_CorsPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_Policy_Mirror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_Policy_OutlierDetection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_Policy_MTLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_Policy_Transform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_Policy_DLPPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_Policy_ExtAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_Policy_FaultInjection_Abort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_Policy_MTLS_Istio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*TrafficPolicySpec_Policy_FaultInjection_FixedDelay)(nil),
		(*TrafficPolicySpec_Policy_FaultInjection_Abort_)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*TrafficPolicySpec_Policy_Mirror_KubeService)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto = out.File
	file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_api_networking_v1_traffic_policy_proto_depIdxs = nil
}
