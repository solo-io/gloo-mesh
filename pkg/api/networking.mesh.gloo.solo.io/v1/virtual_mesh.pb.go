// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo-mesh/api/networking/v1/virtual_mesh.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	v11 "github.com/solo-io/gloo-mesh/pkg/api/common.mesh.gloo.solo.io/v1"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Specify a global access policy for all Workloads and Destinations associated with this VirtualMesh.
type VirtualMeshSpec_GlobalAccessPolicy int32

const (
	// Assume the default for the service mesh type. Istio defaults to `false`, App Mesh defaults to `true`.
	VirtualMeshSpec_MESH_DEFAULT VirtualMeshSpec_GlobalAccessPolicy = 0
	// Disallow traffic to all Destinations in the VirtualMesh unless explicitly allowed through [AccessPolicies]({{< versioned_link_path fromRoot="/reference/api/github.com.solo-io.gloo-mesh.api.networking.v1alpha2.access_policy/" >}}).
	VirtualMeshSpec_ENABLED VirtualMeshSpec_GlobalAccessPolicy = 1
	// Allow traffic to all Destinations in the VirtualMesh unless explicitly disallowed through [AccessPolicies]({{< versioned_link_path fromRoot="/reference/api/github.com.solo-io.gloo-mesh.api.networking.v1alpha2.access_policy/" >}}).
	VirtualMeshSpec_DISABLED VirtualMeshSpec_GlobalAccessPolicy = 2
)

// Enum value maps for VirtualMeshSpec_GlobalAccessPolicy.
var (
	VirtualMeshSpec_GlobalAccessPolicy_name = map[int32]string{
		0: "MESH_DEFAULT",
		1: "ENABLED",
		2: "DISABLED",
	}
	VirtualMeshSpec_GlobalAccessPolicy_value = map[string]int32{
		"MESH_DEFAULT": 0,
		"ENABLED":      1,
		"DISABLED":     2,
	}
)

func (x VirtualMeshSpec_GlobalAccessPolicy) Enum() *VirtualMeshSpec_GlobalAccessPolicy {
	p := new(VirtualMeshSpec_GlobalAccessPolicy)
	*p = x
	return p
}

func (x VirtualMeshSpec_GlobalAccessPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualMeshSpec_GlobalAccessPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_enumTypes[0].Descriptor()
}

func (VirtualMeshSpec_GlobalAccessPolicy) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_enumTypes[0]
}

func (x VirtualMeshSpec_GlobalAccessPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualMeshSpec_GlobalAccessPolicy.Descriptor instead.
func (VirtualMeshSpec_GlobalAccessPolicy) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDescGZIP(), []int{0, 0}
}

// Represents a logical grouping of Meshes for shared configuration and cross-mesh interoperability.
type VirtualMeshSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the Meshes configured by this VirtualMesh.
	Meshes []*v1.ObjectRef `protobuf:"bytes,1,rep,name=meshes,proto3" json:"meshes,omitempty"`
	// Specify mTLS options.
	MtlsConfig *VirtualMeshSpec_MTLSConfig `protobuf:"bytes,2,opt,name=mtls_config,json=mtlsConfig,proto3" json:"mtls_config,omitempty"`
	// Specify how to federate Destinations across service mesh boundaries.
	Federation *VirtualMeshSpec_Federation `protobuf:"bytes,3,opt,name=federation,proto3" json:"federation,omitempty"`
	// Specify a global access policy for all Workloads and Destinations associated with this VirtualMesh.
	GlobalAccessPolicy VirtualMeshSpec_GlobalAccessPolicy `protobuf:"varint,4,opt,name=global_access_policy,json=globalAccessPolicy,proto3,enum=networking.mesh.gloo.solo.io.VirtualMeshSpec_GlobalAccessPolicy" json:"global_access_policy,omitempty"`
}

func (x *VirtualMeshSpec) Reset() {
	*x = VirtualMeshSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMeshSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMeshSpec) ProtoMessage() {}

func (x *VirtualMeshSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMeshSpec.ProtoReflect.Descriptor instead.
func (*VirtualMeshSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDescGZIP(), []int{0}
}

func (x *VirtualMeshSpec) GetMeshes() []*v1.ObjectRef {
	if x != nil {
		return x.Meshes
	}
	return nil
}

func (x *VirtualMeshSpec) GetMtlsConfig() *VirtualMeshSpec_MTLSConfig {
	if x != nil {
		return x.MtlsConfig
	}
	return nil
}

func (x *VirtualMeshSpec) GetFederation() *VirtualMeshSpec_Federation {
	if x != nil {
		return x.Federation
	}
	return nil
}

func (x *VirtualMeshSpec) GetGlobalAccessPolicy() VirtualMeshSpec_GlobalAccessPolicy {
	if x != nil {
		return x.GlobalAccessPolicy
	}
	return VirtualMeshSpec_MESH_DEFAULT
}

type VirtualMeshStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The most recent generation observed in the the VirtualMesh metadata.
	// If the `observedGeneration` does not match `metadata.generation`, Gloo Mesh has not processed the most
	// recent version of this resource.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// The state of the overall resource. It will only show accepted if it has been successfully
	// applied to all selected Meshes.
	State v11.ApprovalState `protobuf:"varint,2,opt,name=state,proto3,enum=common.mesh.gloo.solo.io.ApprovalState" json:"state,omitempty"`
	// Any errors found while processing this generation of the resource.
	Errors []string `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	// The status of the VirtualMesh for each Mesh to which it has been applied.
	// A VirtualMesh may be Accepted for some Meshes and rejected for others.
	Meshes map[string]*ApprovalStatus `protobuf:"bytes,4,rep,name=meshes,proto3" json:"meshes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VirtualMeshStatus) Reset() {
	*x = VirtualMeshStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMeshStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMeshStatus) ProtoMessage() {}

func (x *VirtualMeshStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMeshStatus.ProtoReflect.Descriptor instead.
func (*VirtualMeshStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDescGZIP(), []int{1}
}

func (x *VirtualMeshStatus) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *VirtualMeshStatus) GetState() v11.ApprovalState {
	if x != nil {
		return x.State
	}
	return v11.ApprovalState_PENDING
}

func (x *VirtualMeshStatus) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *VirtualMeshStatus) GetMeshes() map[string]*ApprovalStatus {
	if x != nil {
		return x.Meshes
	}
	return nil
}

// Specify mTLS options.
// This includes options for configuring Mutual TLS within an individual mesh, as
// well as enabling mTLS across Meshes by establishing cross-mesh trust.
type VirtualMeshSpec_MTLSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the model for establishing mTLS trust between Meshes.
	//
	// Types that are assignable to TrustModel:
	//	*VirtualMeshSpec_MTLSConfig_Shared
	//	*VirtualMeshSpec_MTLSConfig_Limited
	TrustModel isVirtualMeshSpec_MTLSConfig_TrustModel `protobuf_oneof:"trust_model"`
	// Specify whether to allow Gloo Mesh to restart Kubernetes Pods when certificates are rotated when establishing shared trust.
	// If this option is not explicitly enabled,
	// users must restart Pods manually for the new certificates to be picked up.
	// `meshctl` provides the command `meshctl mesh restart` to simplify this process, see [here]({{< versioned_link_path fromRoot="reference/cli/meshctl_mesh_restart/" >}}) for more info.
	AutoRestartPods bool `protobuf:"varint,3,opt,name=auto_restart_pods,json=autoRestartPods,proto3" json:"auto_restart_pods,omitempty"`
}

func (x *VirtualMeshSpec_MTLSConfig) Reset() {
	*x = VirtualMeshSpec_MTLSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMeshSpec_MTLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMeshSpec_MTLSConfig) ProtoMessage() {}

func (x *VirtualMeshSpec_MTLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMeshSpec_MTLSConfig.ProtoReflect.Descriptor instead.
func (*VirtualMeshSpec_MTLSConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDescGZIP(), []int{0, 0}
}

func (m *VirtualMeshSpec_MTLSConfig) GetTrustModel() isVirtualMeshSpec_MTLSConfig_TrustModel {
	if m != nil {
		return m.TrustModel
	}
	return nil
}

func (x *VirtualMeshSpec_MTLSConfig) GetShared() *VirtualMeshSpec_MTLSConfig_SharedTrust {
	if x, ok := x.GetTrustModel().(*VirtualMeshSpec_MTLSConfig_Shared); ok {
		return x.Shared
	}
	return nil
}

func (x *VirtualMeshSpec_MTLSConfig) GetLimited() *VirtualMeshSpec_MTLSConfig_LimitedTrust {
	if x, ok := x.GetTrustModel().(*VirtualMeshSpec_MTLSConfig_Limited); ok {
		return x.Limited
	}
	return nil
}

func (x *VirtualMeshSpec_MTLSConfig) GetAutoRestartPods() bool {
	if x != nil {
		return x.AutoRestartPods
	}
	return false
}

type isVirtualMeshSpec_MTLSConfig_TrustModel interface {
	isVirtualMeshSpec_MTLSConfig_TrustModel()
}

type VirtualMeshSpec_MTLSConfig_Shared struct {
	// Shared trust (allow communication between any pair of Workloads and Destinations in the grouped Meshes).
	Shared *VirtualMeshSpec_MTLSConfig_SharedTrust `protobuf:"bytes,1,opt,name=shared,proto3,oneof"`
}

type VirtualMeshSpec_MTLSConfig_Limited struct {
	// Limited trust (selectively allow communication between Workloads and Destinations in the grouped Meshes). *Currently not available.*
	Limited *VirtualMeshSpec_MTLSConfig_LimitedTrust `protobuf:"bytes,2,opt,name=limited,proto3,oneof"`
}

func (*VirtualMeshSpec_MTLSConfig_Shared) isVirtualMeshSpec_MTLSConfig_TrustModel() {}

func (*VirtualMeshSpec_MTLSConfig_Limited) isVirtualMeshSpec_MTLSConfig_TrustModel() {}

// Specify parameters for configuring the root certificate authority for a VirtualMesh.
type VirtualMeshSpec_RootCertificateAuthority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the source of the Root CA data which Gloo Mesh will use for the VirtualMesh.
	//
	// Types that are assignable to CaSource:
	//	*VirtualMeshSpec_RootCertificateAuthority_Generated
	//	*VirtualMeshSpec_RootCertificateAuthority_Secret
	CaSource isVirtualMeshSpec_RootCertificateAuthority_CaSource `protobuf_oneof:"ca_source"`
}

func (x *VirtualMeshSpec_RootCertificateAuthority) Reset() {
	*x = VirtualMeshSpec_RootCertificateAuthority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMeshSpec_RootCertificateAuthority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMeshSpec_RootCertificateAuthority) ProtoMessage() {}

func (x *VirtualMeshSpec_RootCertificateAuthority) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMeshSpec_RootCertificateAuthority.ProtoReflect.Descriptor instead.
func (*VirtualMeshSpec_RootCertificateAuthority) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDescGZIP(), []int{0, 1}
}

func (m *VirtualMeshSpec_RootCertificateAuthority) GetCaSource() isVirtualMeshSpec_RootCertificateAuthority_CaSource {
	if m != nil {
		return m.CaSource
	}
	return nil
}

func (x *VirtualMeshSpec_RootCertificateAuthority) GetGenerated() *VirtualMeshSpec_RootCertificateAuthority_SelfSignedCert {
	if x, ok := x.GetCaSource().(*VirtualMeshSpec_RootCertificateAuthority_Generated); ok {
		return x.Generated
	}
	return nil
}

func (x *VirtualMeshSpec_RootCertificateAuthority) GetSecret() *v1.ObjectRef {
	if x, ok := x.GetCaSource().(*VirtualMeshSpec_RootCertificateAuthority_Secret); ok {
		return x.Secret
	}
	return nil
}

type isVirtualMeshSpec_RootCertificateAuthority_CaSource interface {
	isVirtualMeshSpec_RootCertificateAuthority_CaSource()
}

type VirtualMeshSpec_RootCertificateAuthority_Generated struct {
	// Generate a self-signed root certificate with the given options.
	Generated *VirtualMeshSpec_RootCertificateAuthority_SelfSignedCert `protobuf:"bytes,1,opt,name=generated,proto3,oneof"`
}

type VirtualMeshSpec_RootCertificateAuthority_Secret struct {
	// Reference to a Kubernetes Secret containing the root certificate authority.
	// Provided secrets must conform to a specified format, [documented here]({{% versioned_link_path fromRoot="/guides/federate_identity/" %}}).
	Secret *v1.ObjectRef `protobuf:"bytes,2,opt,name=secret,proto3,oneof"`
}

func (*VirtualMeshSpec_RootCertificateAuthority_Generated) isVirtualMeshSpec_RootCertificateAuthority_CaSource() {
}

func (*VirtualMeshSpec_RootCertificateAuthority_Secret) isVirtualMeshSpec_RootCertificateAuthority_CaSource() {
}

// "Federation" refers to the ability to expose Destinations across service mesh boundaries, i.e. to traffic
// originating from Workloads external to the Destination's Mesh.
type VirtualMeshSpec_Federation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The "mode" in which to federate Destinations within this VirtualMesh.
	//
	// Types that are assignable to Mode:
	//	*VirtualMeshSpec_Federation_Permissive
	Mode isVirtualMeshSpec_Federation_Mode `protobuf_oneof:"mode"`
	// If true, all multicluster traffic will be routed directly to the Kubernetes service endpoints of the Destinations,
	// rather than through an ingress gateway. This mode requires a flat network environment.
	FlatNetwork bool `protobuf:"varint,2,opt,name=flat_network,json=flatNetwork,proto3" json:"flat_network,omitempty"`
	// Configure the suffix for hostnames of Destinations federated within this VirtualMesh.
	// Currently this is only supported for Istio with [smart DNS proxying enabled](https://istio.io/latest/blog/2020/dns-proxy/),
	// otherwise setting this field results in an error.
	// If omitted, the hostname suffix defaults to "global".
	HostnameSuffix string `protobuf:"bytes,3,opt,name=hostname_suffix,json=hostnameSuffix,proto3" json:"hostname_suffix,omitempty"`
}

func (x *VirtualMeshSpec_Federation) Reset() {
	*x = VirtualMeshSpec_Federation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMeshSpec_Federation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMeshSpec_Federation) ProtoMessage() {}

func (x *VirtualMeshSpec_Federation) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMeshSpec_Federation.ProtoReflect.Descriptor instead.
func (*VirtualMeshSpec_Federation) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDescGZIP(), []int{0, 2}
}

func (m *VirtualMeshSpec_Federation) GetMode() isVirtualMeshSpec_Federation_Mode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (x *VirtualMeshSpec_Federation) GetPermissive() *empty.Empty {
	if x, ok := x.GetMode().(*VirtualMeshSpec_Federation_Permissive); ok {
		return x.Permissive
	}
	return nil
}

func (x *VirtualMeshSpec_Federation) GetFlatNetwork() bool {
	if x != nil {
		return x.FlatNetwork
	}
	return false
}

func (x *VirtualMeshSpec_Federation) GetHostnameSuffix() string {
	if x != nil {
		return x.HostnameSuffix
	}
	return ""
}

type isVirtualMeshSpec_Federation_Mode interface {
	isVirtualMeshSpec_Federation_Mode()
}

type VirtualMeshSpec_Federation_Permissive struct {
	// Expose all Destinations to all Workloads in this VirtualMesh.
	Permissive *empty.Empty `protobuf:"bytes,1,opt,name=permissive,proto3,oneof"`
}

func (*VirtualMeshSpec_Federation_Permissive) isVirtualMeshSpec_Federation_Mode() {}

// Shared trust is a trust model requiring a common root certificate shared between trusting Meshes, as well as shared identity
// between all Workloads and Destinations which wish to communicate within the VirtualMesh.
type VirtualMeshSpec_MTLSConfig_SharedTrust struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configure a Root Certificate Authority which will be shared by all Meshes associated with this VirtualMesh.
	// If this is not provided, a self-signed certificate will be generated by Gloo Mesh.
	RootCertificateAuthority *VirtualMeshSpec_RootCertificateAuthority `protobuf:"bytes,1,opt,name=root_certificate_authority,json=rootCertificateAuthority,proto3" json:"root_certificate_authority,omitempty"`
}

func (x *VirtualMeshSpec_MTLSConfig_SharedTrust) Reset() {
	*x = VirtualMeshSpec_MTLSConfig_SharedTrust{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMeshSpec_MTLSConfig_SharedTrust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMeshSpec_MTLSConfig_SharedTrust) ProtoMessage() {}

func (x *VirtualMeshSpec_MTLSConfig_SharedTrust) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMeshSpec_MTLSConfig_SharedTrust.ProtoReflect.Descriptor instead.
func (*VirtualMeshSpec_MTLSConfig_SharedTrust) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *VirtualMeshSpec_MTLSConfig_SharedTrust) GetRootCertificateAuthority() *VirtualMeshSpec_RootCertificateAuthority {
	if x != nil {
		return x.RootCertificateAuthority
	}
	return nil
}

// Limited trust is a trust model which does not require trusting Meshes to share the same root certificate
// or identity. Instead, trust is established between different Meshes
// by connecting their ingress/egress gateways with a common certificate/identity. In this model all requests
// between different have the following request path when communicating between clusters
// ```
//                cluster 1 MTLS               shared MTLS                  cluster 2 MTLS
// client/workload <-----------> egress gateway <----------> ingress gateway <--------------> server
// ```
// This approach has the downside of not maintaining identity from client to server, but allows for ad-hoc
// addition of additional Meshes into a VirtualMesh.
type VirtualMeshSpec_MTLSConfig_LimitedTrust struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtualMeshSpec_MTLSConfig_LimitedTrust) Reset() {
	*x = VirtualMeshSpec_MTLSConfig_LimitedTrust{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMeshSpec_MTLSConfig_LimitedTrust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMeshSpec_MTLSConfig_LimitedTrust) ProtoMessage() {}

func (x *VirtualMeshSpec_MTLSConfig_LimitedTrust) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMeshSpec_MTLSConfig_LimitedTrust.ProtoReflect.Descriptor instead.
func (*VirtualMeshSpec_MTLSConfig_LimitedTrust) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDescGZIP(), []int{0, 0, 1}
}

// Configuration for generating a self-signed root certificate.
// Uses the X.509 format, RFC5280.
type VirtualMeshSpec_RootCertificateAuthority_SelfSignedCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of days before root cert expires. Defaults to 365.
	TtlDays uint32 `protobuf:"varint,1,opt,name=ttl_days,json=ttlDays,proto3" json:"ttl_days,omitempty"`
	// Size in bytes of the root cert's private key. Defaults to 4096.
	RsaKeySizeBytes uint32 `protobuf:"varint,2,opt,name=rsa_key_size_bytes,json=rsaKeySizeBytes,proto3" json:"rsa_key_size_bytes,omitempty"`
	// Root cert organization name. Defaults to "gloo-mesh".
	OrgName string `protobuf:"bytes,3,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
}

func (x *VirtualMeshSpec_RootCertificateAuthority_SelfSignedCert) Reset() {
	*x = VirtualMeshSpec_RootCertificateAuthority_SelfSignedCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMeshSpec_RootCertificateAuthority_SelfSignedCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMeshSpec_RootCertificateAuthority_SelfSignedCert) ProtoMessage() {}

func (x *VirtualMeshSpec_RootCertificateAuthority_SelfSignedCert) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMeshSpec_RootCertificateAuthority_SelfSignedCert.ProtoReflect.Descriptor instead.
func (*VirtualMeshSpec_RootCertificateAuthority_SelfSignedCert) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *VirtualMeshSpec_RootCertificateAuthority_SelfSignedCert) GetTtlDays() uint32 {
	if x != nil {
		return x.TtlDays
	}
	return 0
}

func (x *VirtualMeshSpec_RootCertificateAuthority_SelfSignedCert) GetRsaKeySizeBytes() uint32 {
	if x != nil {
		return x.RsaKeySizeBytes
	}
	return 0
}

func (x *VirtualMeshSpec_RootCertificateAuthority_SelfSignedCert) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

var File_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDesc = []byte{
	0x0a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f,
	0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6b, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f,
	0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d,
	0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd2, 0x0a, 0x0a, 0x0f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b,
	0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x66, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0b,
	0x6d, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6d, 0x74, 0x6c,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x0a, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x72, 0x0a, 0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x40, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0xb1, 0x03, 0x0a, 0x0a, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x5e, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x68, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72, 0x75, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x68,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54, 0x72, 0x75, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x64, 0x73, 0x1a, 0x94, 0x01, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x1a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x65, 0x73, 0x68, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x18, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x0e, 0x0a, 0x0c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x54, 0x72, 0x75, 0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0xcb, 0x02, 0x0a, 0x18, 0x52, 0x6f,
	0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x75, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x65, 0x73, 0x68, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x73, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x74, 0x6c, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x74, 0x6c, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x72, 0x73, 0x61, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x9a, 0x01, 0x0a, 0x0a, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x42, 0x06, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x22, 0x41, 0x0a, 0x12, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45,
	0x53, 0x48, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x22, 0xd9, 0x02, 0x0a, 0x11, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a,
	0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x73, 0x1a, 0x67, 0x0a, 0x0b, 0x4d, 0x65,
	0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x4a, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0xc0, 0xf5, 0x04, 0x01, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDescData = file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_goTypes = []interface{}{
	(VirtualMeshSpec_GlobalAccessPolicy)(0),                         // 0: networking.mesh.gloo.solo.io.VirtualMeshSpec.GlobalAccessPolicy
	(*VirtualMeshSpec)(nil),                                         // 1: networking.mesh.gloo.solo.io.VirtualMeshSpec
	(*VirtualMeshStatus)(nil),                                       // 2: networking.mesh.gloo.solo.io.VirtualMeshStatus
	(*VirtualMeshSpec_MTLSConfig)(nil),                              // 3: networking.mesh.gloo.solo.io.VirtualMeshSpec.MTLSConfig
	(*VirtualMeshSpec_RootCertificateAuthority)(nil),                // 4: networking.mesh.gloo.solo.io.VirtualMeshSpec.RootCertificateAuthority
	(*VirtualMeshSpec_Federation)(nil),                              // 5: networking.mesh.gloo.solo.io.VirtualMeshSpec.Federation
	(*VirtualMeshSpec_MTLSConfig_SharedTrust)(nil),                  // 6: networking.mesh.gloo.solo.io.VirtualMeshSpec.MTLSConfig.SharedTrust
	(*VirtualMeshSpec_MTLSConfig_LimitedTrust)(nil),                 // 7: networking.mesh.gloo.solo.io.VirtualMeshSpec.MTLSConfig.LimitedTrust
	(*VirtualMeshSpec_RootCertificateAuthority_SelfSignedCert)(nil), // 8: networking.mesh.gloo.solo.io.VirtualMeshSpec.RootCertificateAuthority.SelfSignedCert
	nil,                    // 9: networking.mesh.gloo.solo.io.VirtualMeshStatus.MeshesEntry
	(*v1.ObjectRef)(nil),   // 10: core.skv2.solo.io.ObjectRef
	(v11.ApprovalState)(0), // 11: common.mesh.gloo.solo.io.ApprovalState
	(*empty.Empty)(nil),    // 12: google.protobuf.Empty
	(*ApprovalStatus)(nil), // 13: networking.mesh.gloo.solo.io.ApprovalStatus
}
var file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_depIdxs = []int32{
	10, // 0: networking.mesh.gloo.solo.io.VirtualMeshSpec.meshes:type_name -> core.skv2.solo.io.ObjectRef
	3,  // 1: networking.mesh.gloo.solo.io.VirtualMeshSpec.mtls_config:type_name -> networking.mesh.gloo.solo.io.VirtualMeshSpec.MTLSConfig
	5,  // 2: networking.mesh.gloo.solo.io.VirtualMeshSpec.federation:type_name -> networking.mesh.gloo.solo.io.VirtualMeshSpec.Federation
	0,  // 3: networking.mesh.gloo.solo.io.VirtualMeshSpec.global_access_policy:type_name -> networking.mesh.gloo.solo.io.VirtualMeshSpec.GlobalAccessPolicy
	11, // 4: networking.mesh.gloo.solo.io.VirtualMeshStatus.state:type_name -> common.mesh.gloo.solo.io.ApprovalState
	9,  // 5: networking.mesh.gloo.solo.io.VirtualMeshStatus.meshes:type_name -> networking.mesh.gloo.solo.io.VirtualMeshStatus.MeshesEntry
	6,  // 6: networking.mesh.gloo.solo.io.VirtualMeshSpec.MTLSConfig.shared:type_name -> networking.mesh.gloo.solo.io.VirtualMeshSpec.MTLSConfig.SharedTrust
	7,  // 7: networking.mesh.gloo.solo.io.VirtualMeshSpec.MTLSConfig.limited:type_name -> networking.mesh.gloo.solo.io.VirtualMeshSpec.MTLSConfig.LimitedTrust
	8,  // 8: networking.mesh.gloo.solo.io.VirtualMeshSpec.RootCertificateAuthority.generated:type_name -> networking.mesh.gloo.solo.io.VirtualMeshSpec.RootCertificateAuthority.SelfSignedCert
	10, // 9: networking.mesh.gloo.solo.io.VirtualMeshSpec.RootCertificateAuthority.secret:type_name -> core.skv2.solo.io.ObjectRef
	12, // 10: networking.mesh.gloo.solo.io.VirtualMeshSpec.Federation.permissive:type_name -> google.protobuf.Empty
	4,  // 11: networking.mesh.gloo.solo.io.VirtualMeshSpec.MTLSConfig.SharedTrust.root_certificate_authority:type_name -> networking.mesh.gloo.solo.io.VirtualMeshSpec.RootCertificateAuthority
	13, // 12: networking.mesh.gloo.solo.io.VirtualMeshStatus.MeshesEntry.value:type_name -> networking.mesh.gloo.solo.io.ApprovalStatus
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_init() }
func file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_init() {
	if File_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1_status_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMeshSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMeshStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMeshSpec_MTLSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMeshSpec_RootCertificateAuthority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMeshSpec_Federation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMeshSpec_MTLSConfig_SharedTrust); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMeshSpec_MTLSConfig_LimitedTrust); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMeshSpec_RootCertificateAuthority_SelfSignedCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*VirtualMeshSpec_MTLSConfig_Shared)(nil),
		(*VirtualMeshSpec_MTLSConfig_Limited)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*VirtualMeshSpec_RootCertificateAuthority_Generated)(nil),
		(*VirtualMeshSpec_RootCertificateAuthority_Secret)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*VirtualMeshSpec_Federation_Permissive)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto = out.File
	file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_api_networking_v1_virtual_mesh_proto_depIdxs = nil
}
