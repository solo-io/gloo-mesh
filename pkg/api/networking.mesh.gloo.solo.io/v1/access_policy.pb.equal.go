// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo-mesh/api/networking/v1/access_policy.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *AccessPolicySpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AccessPolicySpec)
	if !ok {
		that2, ok := that.(AccessPolicySpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetSourceSelector()) != len(target.GetSourceSelector()) {
		return false
	}
	for idx, v := range m.GetSourceSelector() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSourceSelector()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSourceSelector()[idx]) {
				return false
			}
		}

	}

	if len(m.GetDestinationSelector()) != len(target.GetDestinationSelector()) {
		return false
	}
	for idx, v := range m.GetDestinationSelector() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetDestinationSelector()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetDestinationSelector()[idx]) {
				return false
			}
		}

	}

	if len(m.GetAllowedPaths()) != len(target.GetAllowedPaths()) {
		return false
	}
	for idx, v := range m.GetAllowedPaths() {

		if strings.Compare(v, target.GetAllowedPaths()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetAllowedMethods()) != len(target.GetAllowedMethods()) {
		return false
	}
	for idx, v := range m.GetAllowedMethods() {

		if strings.Compare(v, target.GetAllowedMethods()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetAllowedPorts()) != len(target.GetAllowedPorts()) {
		return false
	}
	for idx, v := range m.GetAllowedPorts() {

		if v != target.GetAllowedPorts()[idx] {
			return false
		}

	}

	return true
}

// Equal function
func (m *AccessPolicyStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AccessPolicyStatus)
	if !ok {
		that2, ok := that.(AccessPolicyStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetObservedGeneration() != target.GetObservedGeneration() {
		return false
	}

	if m.GetState() != target.GetState() {
		return false
	}

	if len(m.GetDestinations()) != len(target.GetDestinations()) {
		return false
	}
	for k, v := range m.GetDestinations() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetDestinations()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetDestinations()[k]) {
				return false
			}
		}

	}

	if len(m.GetWorkloads()) != len(target.GetWorkloads()) {
		return false
	}
	for idx, v := range m.GetWorkloads() {

		if strings.Compare(v, target.GetWorkloads()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetErrors()) != len(target.GetErrors()) {
		return false
	}
	for idx, v := range m.GetErrors() {

		if strings.Compare(v, target.GetErrors()[idx]) != 0 {
			return false
		}

	}

	return true
}
