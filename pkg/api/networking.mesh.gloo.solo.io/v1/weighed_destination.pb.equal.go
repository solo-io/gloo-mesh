// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo-mesh/api/networking/v1/weighed_destination.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *WeightedDestination) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*WeightedDestination)
	if !ok {
		that2, ok := that.(WeightedDestination)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetWeight() != target.GetWeight() {
		return false
	}

	if h, ok := interface{}(m.GetOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetOptions(), target.GetOptions()) {
			return false
		}
	}

	switch m.DestinationType.(type) {

	case *WeightedDestination_KubeService:
		if _, ok := target.DestinationType.(*WeightedDestination_KubeService); !ok {
			return false
		}

		if h, ok := interface{}(m.GetKubeService()).(equality.Equalizer); ok {
			if !h.Equal(target.GetKubeService()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetKubeService(), target.GetKubeService()) {
				return false
			}
		}

	case *WeightedDestination_VirtualDestination_:
		if _, ok := target.DestinationType.(*WeightedDestination_VirtualDestination_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetVirtualDestination()).(equality.Equalizer); ok {
			if !h.Equal(target.GetVirtualDestination()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetVirtualDestination(), target.GetVirtualDestination()) {
				return false
			}
		}

	case *WeightedDestination_StaticDestination:
		if _, ok := target.DestinationType.(*WeightedDestination_StaticDestination); !ok {
			return false
		}

		if h, ok := interface{}(m.GetStaticDestination()).(equality.Equalizer); ok {
			if !h.Equal(target.GetStaticDestination()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetStaticDestination(), target.GetStaticDestination()) {
				return false
			}
		}

	case *WeightedDestination_ClusterHeader:
		if _, ok := target.DestinationType.(*WeightedDestination_ClusterHeader); !ok {
			return false
		}

		if strings.Compare(m.GetClusterHeader(), target.GetClusterHeader()) != 0 {
			return false
		}

	default:
		// m is nil but target is not nil
		if m.DestinationType != target.DestinationType {
			return false
		}
	}

	return true
}

// Equal function
func (m *HeaderManipulation) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HeaderManipulation)
	if !ok {
		that2, ok := that.(HeaderManipulation)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetRemoveResponseHeaders()) != len(target.GetRemoveResponseHeaders()) {
		return false
	}
	for idx, v := range m.GetRemoveResponseHeaders() {

		if strings.Compare(v, target.GetRemoveResponseHeaders()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetAppendResponseHeaders()) != len(target.GetAppendResponseHeaders()) {
		return false
	}
	for k, v := range m.GetAppendResponseHeaders() {

		if strings.Compare(v, target.GetAppendResponseHeaders()[k]) != 0 {
			return false
		}

	}

	if len(m.GetRemoveRequestHeaders()) != len(target.GetRemoveRequestHeaders()) {
		return false
	}
	for idx, v := range m.GetRemoveRequestHeaders() {

		if strings.Compare(v, target.GetRemoveRequestHeaders()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetAppendRequestHeaders()) != len(target.GetAppendRequestHeaders()) {
		return false
	}
	for k, v := range m.GetAppendRequestHeaders() {

		if strings.Compare(v, target.GetAppendRequestHeaders()[k]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *WeightedDestination_KubeDestination) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*WeightedDestination_KubeDestination)
	if !ok {
		that2, ok := that.(WeightedDestination_KubeDestination)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	if strings.Compare(m.GetClusterName(), target.GetClusterName()) != 0 {
		return false
	}

	if len(m.GetSubset()) != len(target.GetSubset()) {
		return false
	}
	for k, v := range m.GetSubset() {

		if strings.Compare(v, target.GetSubset()[k]) != 0 {
			return false
		}

	}

	if m.GetPort() != target.GetPort() {
		return false
	}

	return true
}

// Equal function
func (m *WeightedDestination_VirtualDestination) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*WeightedDestination_VirtualDestination)
	if !ok {
		that2, ok := that.(WeightedDestination_VirtualDestination)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	if len(m.GetSubset()) != len(target.GetSubset()) {
		return false
	}
	for k, v := range m.GetSubset() {

		if strings.Compare(v, target.GetSubset()[k]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *WeightedDestination_DestinationOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*WeightedDestination_DestinationOptions)
	if !ok {
		that2, ok := that.(WeightedDestination_DestinationOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetHeaderManipulation()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHeaderManipulation()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHeaderManipulation(), target.GetHeaderManipulation()) {
			return false
		}
	}

	return true
}
