// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo-mesh/api/networking/v1alpha2/traffic_policy.proto

package v1alpha2

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/common.mesh.gloo.solo.io/v1alpha1"
	types "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1alpha2/types"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// TLS connection mode
type TrafficPolicySpec_MTLS_Istio_TLSmode int32

const (
	// Do not setup a TLS connection to the upstream endpoint.
	TrafficPolicySpec_MTLS_Istio_DISABLE TrafficPolicySpec_MTLS_Istio_TLSmode = 0
	// Originate a TLS connection to the upstream endpoint.
	TrafficPolicySpec_MTLS_Istio_SIMPLE TrafficPolicySpec_MTLS_Istio_TLSmode = 1
	// Secure connections to the upstream using mutual TLS by presenting
	// client certificates for authentication.
	// This mode uses certificates generated
	// automatically by Istio for mTLS authentication. When this mode is
	// used, all other fields in `ClientTLSSettings` should be empty.
	TrafficPolicySpec_MTLS_Istio_ISTIO_MUTUAL TrafficPolicySpec_MTLS_Istio_TLSmode = 2
)

// Enum value maps for TrafficPolicySpec_MTLS_Istio_TLSmode.
var (
	TrafficPolicySpec_MTLS_Istio_TLSmode_name = map[int32]string{
		0: "DISABLE",
		1: "SIMPLE",
		2: "ISTIO_MUTUAL",
	}
	TrafficPolicySpec_MTLS_Istio_TLSmode_value = map[string]int32{
		"DISABLE":      0,
		"SIMPLE":       1,
		"ISTIO_MUTUAL": 2,
	}
)

func (x TrafficPolicySpec_MTLS_Istio_TLSmode) Enum() *TrafficPolicySpec_MTLS_Istio_TLSmode {
	p := new(TrafficPolicySpec_MTLS_Istio_TLSmode)
	*p = x
	return p
}

func (x TrafficPolicySpec_MTLS_Istio_TLSmode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficPolicySpec_MTLS_Istio_TLSmode) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_enumTypes[0].Descriptor()
}

func (TrafficPolicySpec_MTLS_Istio_TLSmode) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_enumTypes[0]
}

func (x TrafficPolicySpec_MTLS_Istio_TLSmode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficPolicySpec_MTLS_Istio_TLSmode.Descriptor instead.
func (TrafficPolicySpec_MTLS_Istio_TLSmode) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 11, 0, 0}
}

//
//A Traffic Policy applies some L7 routing features to an existing mesh.
//Traffic Policies specify the following for all requests:
//- originating from from **source workload**
//- sent to **destination targets**
//- matching one or more **request matcher**
type TrafficPolicySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//Requests originating from these workloads will have the rule applied.
	//Leave empty to have all workloads in the mesh apply these rules.
	//
	//Note: Source Selectors are ignored when TrafficPolicies are
	//applied to pods in a Linkerd mesh. TrafficPolicies will apply to
	//all selected destinations in Linkerd, regardless of the source.
	//
	//Note: If using the TrafficTargetSelector.Matcher, specifying clusters is currently not supported in Istio.
	SourceSelector []*WorkloadSelector `protobuf:"bytes,1,rep,name=source_selector,json=sourceSelector,proto3" json:"source_selector,omitempty"`
	//
	//Requests destined for these k8s services will have the rule applied.
	//Leave empty to apply to all destination k8s services in the mesh.
	DestinationSelector []*TrafficTargetSelector `protobuf:"bytes,2,rep,name=destination_selector,json=destinationSelector,proto3" json:"destination_selector,omitempty"`
	//
	//If specified, this rule will only apply to http requests matching these conditions.
	//Within a single matcher, all conditions must be satisfied for a match to occur.
	//Between matchers, at least one matcher must be satisfied for the TrafficPolicy to apply.
	//NB: Linkerd only supports matching on Request Path and Method.
	HttpRequestMatchers []*TrafficPolicySpec_HttpMatcher `protobuf:"bytes,3,rep,name=http_request_matchers,json=httpRequestMatchers,proto3" json:"http_request_matchers,omitempty"`
	//
	//Enables traffic shifting, i.e. to reroute requests to a different service,
	//to a subset of pods based on their label, and/or split traffic between multiple services.
	TrafficShift *TrafficPolicySpec_MultiDestination `protobuf:"bytes,4,opt,name=traffic_shift,json=trafficShift,proto3" json:"traffic_shift,omitempty"`
	// Enable fault injection on requests.
	FaultInjection *TrafficPolicySpec_FaultInjection `protobuf:"bytes,5,opt,name=fault_injection,json=faultInjection,proto3" json:"fault_injection,omitempty"`
	// Set a timeout on requests.
	RequestTimeout *duration.Duration `protobuf:"bytes,6,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	// Set a retry policy on requests.
	Retries *TrafficPolicySpec_RetryPolicy `protobuf:"bytes,7,opt,name=retries,proto3" json:"retries,omitempty"`
	//
	//Set a Cross-Origin Resource Sharing policy (CORS) for requests. Refer to
	//https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
	//for further details about cross origin resource sharing.
	CorsPolicy *TrafficPolicySpec_CorsPolicy `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// Mirror HTTP traffic to a another destination. Traffic will still be sent to its original destination as normal.
	Mirror *TrafficPolicySpec_Mirror `protobuf:"bytes,9,opt,name=mirror,proto3" json:"mirror,omitempty"`
	// Manipulate request and response headers.
	HeaderManipulation *TrafficPolicySpec_HeaderManipulation `protobuf:"bytes,10,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	//
	//Configure outlier detection on the targeted services.
	//Setting this field requires an empty source_selector because it must apply to all traffic.
	OutlierDetection *TrafficPolicySpec_OutlierDetection `protobuf:"bytes,11,opt,name=outlier_detection,json=outlierDetection,proto3" json:"outlier_detection,omitempty"`
	// Configure mTLS settings. If specified will override global default defined in Settings.
	Mtls *TrafficPolicySpec_MTLS `protobuf:"bytes,12,opt,name=mtls,proto3" json:"mtls,omitempty"`
}

func (x *TrafficPolicySpec) Reset() {
	*x = TrafficPolicySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec) ProtoMessage() {}

func (x *TrafficPolicySpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0}
}

func (x *TrafficPolicySpec) GetSourceSelector() []*WorkloadSelector {
	if x != nil {
		return x.SourceSelector
	}
	return nil
}

func (x *TrafficPolicySpec) GetDestinationSelector() []*TrafficTargetSelector {
	if x != nil {
		return x.DestinationSelector
	}
	return nil
}

func (x *TrafficPolicySpec) GetHttpRequestMatchers() []*TrafficPolicySpec_HttpMatcher {
	if x != nil {
		return x.HttpRequestMatchers
	}
	return nil
}

func (x *TrafficPolicySpec) GetTrafficShift() *TrafficPolicySpec_MultiDestination {
	if x != nil {
		return x.TrafficShift
	}
	return nil
}

func (x *TrafficPolicySpec) GetFaultInjection() *TrafficPolicySpec_FaultInjection {
	if x != nil {
		return x.FaultInjection
	}
	return nil
}

func (x *TrafficPolicySpec) GetRequestTimeout() *duration.Duration {
	if x != nil {
		return x.RequestTimeout
	}
	return nil
}

func (x *TrafficPolicySpec) GetRetries() *TrafficPolicySpec_RetryPolicy {
	if x != nil {
		return x.Retries
	}
	return nil
}

func (x *TrafficPolicySpec) GetCorsPolicy() *TrafficPolicySpec_CorsPolicy {
	if x != nil {
		return x.CorsPolicy
	}
	return nil
}

func (x *TrafficPolicySpec) GetMirror() *TrafficPolicySpec_Mirror {
	if x != nil {
		return x.Mirror
	}
	return nil
}

func (x *TrafficPolicySpec) GetHeaderManipulation() *TrafficPolicySpec_HeaderManipulation {
	if x != nil {
		return x.HeaderManipulation
	}
	return nil
}

func (x *TrafficPolicySpec) GetOutlierDetection() *TrafficPolicySpec_OutlierDetection {
	if x != nil {
		return x.OutlierDetection
	}
	return nil
}

func (x *TrafficPolicySpec) GetMtls() *TrafficPolicySpec_MTLS {
	if x != nil {
		return x.Mtls
	}
	return nil
}

type TrafficPolicyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The most recent generation observed in the the TrafficPolicy metadata.
	// if the observedGeneration does not match generation, the controller has not received the most
	// recent version of this resource.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// The state of the overall resource.
	// It will only show accepted if it has been successfully
	// applied to all target meshes.
	State ApprovalState `protobuf:"varint,2,opt,name=state,proto3,enum=networking.mesh.gloo.solo.io.ApprovalState" json:"state,omitempty"`
	// The status of the TrafficPolicy for each TrafficTarget to which it has been applied.
	// A TrafficPolicy may be Accepted for some TrafficTargets and rejected for others.
	TrafficTargets map[string]*ApprovalStatus `protobuf:"bytes,3,rep,name=traffic_targets,json=trafficTargets,proto3" json:"traffic_targets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The list of Workloads to which this policy has been applied.
	Workloads []string `protobuf:"bytes,4,rep,name=workloads,proto3" json:"workloads,omitempty"`
	// Any errors found while processing this generation of the resource.
	Errors []string `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *TrafficPolicyStatus) Reset() {
	*x = TrafficPolicyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicyStatus) ProtoMessage() {}

func (x *TrafficPolicyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicyStatus.ProtoReflect.Descriptor instead.
func (*TrafficPolicyStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{1}
}

func (x *TrafficPolicyStatus) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *TrafficPolicyStatus) GetState() ApprovalState {
	if x != nil {
		return x.State
	}
	return ApprovalState_PENDING
}

func (x *TrafficPolicyStatus) GetTrafficTargets() map[string]*ApprovalStatus {
	if x != nil {
		return x.TrafficTargets
	}
	return nil
}

func (x *TrafficPolicyStatus) GetWorkloads() []string {
	if x != nil {
		return x.Workloads
	}
	return nil
}

func (x *TrafficPolicyStatus) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

//
//RetryPolicy contains mesh-specific retry configuration.
//Different meshes support different Retry features.
//Gloo Mesh's RetryPolicy exposes config for multiple meshes simultaneously,
//allowing the same TrafficPolicy to apply retries to different mesh types.
//The configuration applied to the target mesh will use the corresponding
//config for each type, while other config types will be ignored.
type TrafficPolicySpec_RetryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of retries for a given request
	Attempts int32 `protobuf:"varint,1,opt,name=attempts,proto3" json:"attempts,omitempty"`
	// Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE >=1ms.
	PerTryTimeout *duration.Duration `protobuf:"bytes,2,opt,name=per_try_timeout,json=perTryTimeout,proto3" json:"per_try_timeout,omitempty"`
}

func (x *TrafficPolicySpec_RetryPolicy) Reset() {
	*x = TrafficPolicySpec_RetryPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_RetryPolicy) ProtoMessage() {}

func (x *TrafficPolicySpec_RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_RetryPolicy.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_RetryPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TrafficPolicySpec_RetryPolicy) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *TrafficPolicySpec_RetryPolicy) GetPerTryTimeout() *duration.Duration {
	if x != nil {
		return x.PerTryTimeout
	}
	return nil
}

type TrafficPolicySpec_MultiDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A traffic shift destination.
	Destinations []*TrafficPolicySpec_MultiDestination_WeightedDestination `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
}

func (x *TrafficPolicySpec_MultiDestination) Reset() {
	*x = TrafficPolicySpec_MultiDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_MultiDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_MultiDestination) ProtoMessage() {}

func (x *TrafficPolicySpec_MultiDestination) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_MultiDestination.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_MultiDestination) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TrafficPolicySpec_MultiDestination) GetDestinations() []*TrafficPolicySpec_MultiDestination_WeightedDestination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

//
//FaultInjection can be used to specify one or more faults to inject
//while forwarding http requests to the destination specified in a route.
//Faults include aborting the Http request from downstream service, and/or delaying
//proxying of requests. A fault rule MUST HAVE delay or abort.
type TrafficPolicySpec_FaultInjection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The _fixedDelay_ field is used to indicate the amount of delay in seconds.
	//The optional _percentage_ field can be used to only delay a certain
	//percentage of requests. If left unspecified, all request will be delayed.
	//
	// Types that are assignable to FaultInjectionType:
	//	*TrafficPolicySpec_FaultInjection_FixedDelay
	//	*TrafficPolicySpec_FaultInjection_ExponentialDelay
	//	*TrafficPolicySpec_FaultInjection_Abort_
	FaultInjectionType isTrafficPolicySpec_FaultInjection_FaultInjectionType `protobuf_oneof:"fault_injection_type"`
	// Percentage of requests to be faulted with the error code provided. Values range between 0 and 100
	Percentage float64 `protobuf:"fixed64,5,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *TrafficPolicySpec_FaultInjection) Reset() {
	*x = TrafficPolicySpec_FaultInjection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_FaultInjection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_FaultInjection) ProtoMessage() {}

func (x *TrafficPolicySpec_FaultInjection) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_FaultInjection.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_FaultInjection) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 2}
}

func (m *TrafficPolicySpec_FaultInjection) GetFaultInjectionType() isTrafficPolicySpec_FaultInjection_FaultInjectionType {
	if m != nil {
		return m.FaultInjectionType
	}
	return nil
}

func (x *TrafficPolicySpec_FaultInjection) GetFixedDelay() *duration.Duration {
	if x, ok := x.GetFaultInjectionType().(*TrafficPolicySpec_FaultInjection_FixedDelay); ok {
		return x.FixedDelay
	}
	return nil
}

func (x *TrafficPolicySpec_FaultInjection) GetExponentialDelay() *duration.Duration {
	if x, ok := x.GetFaultInjectionType().(*TrafficPolicySpec_FaultInjection_ExponentialDelay); ok {
		return x.ExponentialDelay
	}
	return nil
}

func (x *TrafficPolicySpec_FaultInjection) GetAbort() *TrafficPolicySpec_FaultInjection_Abort {
	if x, ok := x.GetFaultInjectionType().(*TrafficPolicySpec_FaultInjection_Abort_); ok {
		return x.Abort
	}
	return nil
}

func (x *TrafficPolicySpec_FaultInjection) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

type isTrafficPolicySpec_FaultInjection_FaultInjectionType interface {
	isTrafficPolicySpec_FaultInjection_FaultInjectionType()
}

type TrafficPolicySpec_FaultInjection_FixedDelay struct {
	//
	//Add a fixed delay before forwarding the request. Format:
	//1h/1m/1s/1ms. MUST be >=1ms.
	FixedDelay *duration.Duration `protobuf:"bytes,1,opt,name=fixed_delay,json=fixedDelay,proto3,oneof"`
}

type TrafficPolicySpec_FaultInjection_ExponentialDelay struct {
	// $hide_from_docs
	ExponentialDelay *duration.Duration `protobuf:"bytes,2,opt,name=exponential_delay,json=exponentialDelay,proto3,oneof"`
}

type TrafficPolicySpec_FaultInjection_Abort_ struct {
	//
	//Abort Http request attempts and return error codes back to downstream
	//service, giving the impression that the upstream service is faulty.
	Abort *TrafficPolicySpec_FaultInjection_Abort `protobuf:"bytes,3,opt,name=abort,proto3,oneof"`
}

func (*TrafficPolicySpec_FaultInjection_FixedDelay) isTrafficPolicySpec_FaultInjection_FaultInjectionType() {
}

func (*TrafficPolicySpec_FaultInjection_ExponentialDelay) isTrafficPolicySpec_FaultInjection_FaultInjectionType() {
}

func (*TrafficPolicySpec_FaultInjection_Abort_) isTrafficPolicySpec_FaultInjection_FaultInjectionType() {
}

// Manipulate request and response headers.
type TrafficPolicySpec_HeaderManipulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HTTP headers to remove before returning a response to the caller.
	RemoveResponseHeaders []string `protobuf:"bytes,12,rep,name=remove_response_headers,json=removeResponseHeaders,proto3" json:"remove_response_headers,omitempty"`
	// Additional HTTP headers to add before returning a response to the caller.
	AppendResponseHeaders map[string]string `protobuf:"bytes,13,rep,name=append_response_headers,json=appendResponseHeaders,proto3" json:"append_response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// HTTP headers to remove before forwarding a request to the destination service.
	RemoveRequestHeaders []string `protobuf:"bytes,14,rep,name=remove_request_headers,json=removeRequestHeaders,proto3" json:"remove_request_headers,omitempty"`
	// Additional HTTP headers to add before forwarding a request to the destination service.
	AppendRequestHeaders map[string]string `protobuf:"bytes,15,rep,name=append_request_headers,json=appendRequestHeaders,proto3" json:"append_request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TrafficPolicySpec_HeaderManipulation) Reset() {
	*x = TrafficPolicySpec_HeaderManipulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_HeaderManipulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_HeaderManipulation) ProtoMessage() {}

func (x *TrafficPolicySpec_HeaderManipulation) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_HeaderManipulation.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_HeaderManipulation) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 3}
}

func (x *TrafficPolicySpec_HeaderManipulation) GetRemoveResponseHeaders() []string {
	if x != nil {
		return x.RemoveResponseHeaders
	}
	return nil
}

func (x *TrafficPolicySpec_HeaderManipulation) GetAppendResponseHeaders() map[string]string {
	if x != nil {
		return x.AppendResponseHeaders
	}
	return nil
}

func (x *TrafficPolicySpec_HeaderManipulation) GetRemoveRequestHeaders() []string {
	if x != nil {
		return x.RemoveRequestHeaders
	}
	return nil
}

func (x *TrafficPolicySpec_HeaderManipulation) GetAppendRequestHeaders() map[string]string {
	if x != nil {
		return x.AppendRequestHeaders
	}
	return nil
}

type TrafficPolicySpec_CorsPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//String patterns that match allowed origins.
	//An origin is allowed if any of the string matchers match.
	//If a match is found, then the outgoing Access-Control-Allow-Origin would be set to the origin as provided by the client.
	AllowOrigins []*TrafficPolicySpec_StringMatch `protobuf:"bytes,7,rep,name=allow_origins,json=allowOrigins,proto3" json:"allow_origins,omitempty"`
	//
	//List of HTTP methods allowed to access the resource. The content will
	//be serialized into the Access-Control-Allow-Methods header.
	AllowMethods []string `protobuf:"bytes,2,rep,name=allow_methods,json=allowMethods,proto3" json:"allow_methods,omitempty"`
	//
	//List of HTTP headers that can be used when requesting the
	//resource. Serialized to Access-Control-Allow-Headers header.
	AllowHeaders []string `protobuf:"bytes,3,rep,name=allow_headers,json=allowHeaders,proto3" json:"allow_headers,omitempty"`
	//
	//A white list of HTTP headers that the browsers are allowed to
	//access. Serialized into Access-Control-Expose-Headers header.
	ExposeHeaders []string `protobuf:"bytes,4,rep,name=expose_headers,json=exposeHeaders,proto3" json:"expose_headers,omitempty"`
	//
	//Specifies how long the results of a preflight request can be
	//cached. Translates to the `Access-Control-Max-Age` header.
	MaxAge *duration.Duration `protobuf:"bytes,5,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	//
	//Indicates whether the caller is allowed to send the actual request
	//(not the preflight) using credentials. Translates to
	//`Access-Control-Allow-Credentials` header.
	AllowCredentials *wrappers.BoolValue `protobuf:"bytes,6,opt,name=allow_credentials,json=allowCredentials,proto3" json:"allow_credentials,omitempty"`
}

func (x *TrafficPolicySpec_CorsPolicy) Reset() {
	*x = TrafficPolicySpec_CorsPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_CorsPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_CorsPolicy) ProtoMessage() {}

func (x *TrafficPolicySpec_CorsPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_CorsPolicy.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_CorsPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 4}
}

func (x *TrafficPolicySpec_CorsPolicy) GetAllowOrigins() []*TrafficPolicySpec_StringMatch {
	if x != nil {
		return x.AllowOrigins
	}
	return nil
}

func (x *TrafficPolicySpec_CorsPolicy) GetAllowMethods() []string {
	if x != nil {
		return x.AllowMethods
	}
	return nil
}

func (x *TrafficPolicySpec_CorsPolicy) GetAllowHeaders() []string {
	if x != nil {
		return x.AllowHeaders
	}
	return nil
}

func (x *TrafficPolicySpec_CorsPolicy) GetExposeHeaders() []string {
	if x != nil {
		return x.ExposeHeaders
	}
	return nil
}

func (x *TrafficPolicySpec_CorsPolicy) GetMaxAge() *duration.Duration {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *TrafficPolicySpec_CorsPolicy) GetAllowCredentials() *wrappers.BoolValue {
	if x != nil {
		return x.AllowCredentials
	}
	return nil
}

// Parameters for matching routes. All specified conditions must be satisfied for a match to occur.
type TrafficPolicySpec_HttpMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PathSpecifier:
	//	*TrafficPolicySpec_HttpMatcher_Prefix
	//	*TrafficPolicySpec_HttpMatcher_Exact
	//	*TrafficPolicySpec_HttpMatcher_Regex
	PathSpecifier isTrafficPolicySpec_HttpMatcher_PathSpecifier `protobuf_oneof:"path_specifier"`
	// Specifies a set of headers which requests must match in entirety (all headers must match).
	Headers []*v1alpha1.HeaderMatcher `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty"`
	//
	//Specifies a set of URL query parameters which requests must match in entirety (all query params must match).
	//The router will check the query string from the *path* header against all the specified query parameters
	QueryParameters []*TrafficPolicySpec_QueryParameterMatcher `protobuf:"bytes,7,rep,name=query_parameters,json=queryParameters,proto3" json:"query_parameters,omitempty"`
	// HTTP Method/Verb to match on. If none specified, the matcher will ignore the HTTP Method
	Method *TrafficPolicySpec_HttpMethod `protobuf:"bytes,8,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *TrafficPolicySpec_HttpMatcher) Reset() {
	*x = TrafficPolicySpec_HttpMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_HttpMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_HttpMatcher) ProtoMessage() {}

func (x *TrafficPolicySpec_HttpMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_HttpMatcher.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_HttpMatcher) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 5}
}

func (m *TrafficPolicySpec_HttpMatcher) GetPathSpecifier() isTrafficPolicySpec_HttpMatcher_PathSpecifier {
	if m != nil {
		return m.PathSpecifier
	}
	return nil
}

func (x *TrafficPolicySpec_HttpMatcher) GetPrefix() string {
	if x, ok := x.GetPathSpecifier().(*TrafficPolicySpec_HttpMatcher_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (x *TrafficPolicySpec_HttpMatcher) GetExact() string {
	if x, ok := x.GetPathSpecifier().(*TrafficPolicySpec_HttpMatcher_Exact); ok {
		return x.Exact
	}
	return ""
}

func (x *TrafficPolicySpec_HttpMatcher) GetRegex() string {
	if x, ok := x.GetPathSpecifier().(*TrafficPolicySpec_HttpMatcher_Regex); ok {
		return x.Regex
	}
	return ""
}

func (x *TrafficPolicySpec_HttpMatcher) GetHeaders() []*v1alpha1.HeaderMatcher {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TrafficPolicySpec_HttpMatcher) GetQueryParameters() []*TrafficPolicySpec_QueryParameterMatcher {
	if x != nil {
		return x.QueryParameters
	}
	return nil
}

func (x *TrafficPolicySpec_HttpMatcher) GetMethod() *TrafficPolicySpec_HttpMethod {
	if x != nil {
		return x.Method
	}
	return nil
}

type isTrafficPolicySpec_HttpMatcher_PathSpecifier interface {
	isTrafficPolicySpec_HttpMatcher_PathSpecifier()
}

type TrafficPolicySpec_HttpMatcher_Prefix struct {
	//
	//If specified, the route is a prefix rule meaning that the prefix must
	//match the beginning of the *:path* header.
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3,oneof"`
}

type TrafficPolicySpec_HttpMatcher_Exact struct {
	//
	//If specified, the route is an exact path rule meaning that the path must
	//exactly match the *:path* header once the query string is removed.
	Exact string `protobuf:"bytes,2,opt,name=exact,proto3,oneof"`
}

type TrafficPolicySpec_HttpMatcher_Regex struct {
	//
	//If specified, the route is a regular expression rule meaning that the
	//regex must match the *:path* header once the query string is removed. The entire path
	//(without the query string) must match the regex. The rule will not match if only a
	//sub-sequence of the *:path* header matches the regex. The regex grammar is defined `here
	//<http://en.cppreference.com/w/cpp/regex/ecmascript>`_.
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof"`
}

func (*TrafficPolicySpec_HttpMatcher_Prefix) isTrafficPolicySpec_HttpMatcher_PathSpecifier() {}

func (*TrafficPolicySpec_HttpMatcher_Exact) isTrafficPolicySpec_HttpMatcher_PathSpecifier() {}

func (*TrafficPolicySpec_HttpMatcher_Regex) isTrafficPolicySpec_HttpMatcher_PathSpecifier() {}

//
//Describes how to match a given string in HTTP headers. Match is
//case-sensitive.
type TrafficPolicySpec_StringMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MatchType:
	//	*TrafficPolicySpec_StringMatch_Exact
	//	*TrafficPolicySpec_StringMatch_Prefix
	//	*TrafficPolicySpec_StringMatch_Regex
	MatchType isTrafficPolicySpec_StringMatch_MatchType `protobuf_oneof:"match_type"`
}

func (x *TrafficPolicySpec_StringMatch) Reset() {
	*x = TrafficPolicySpec_StringMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_StringMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_StringMatch) ProtoMessage() {}

func (x *TrafficPolicySpec_StringMatch) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_StringMatch.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_StringMatch) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 6}
}

func (m *TrafficPolicySpec_StringMatch) GetMatchType() isTrafficPolicySpec_StringMatch_MatchType {
	if m != nil {
		return m.MatchType
	}
	return nil
}

func (x *TrafficPolicySpec_StringMatch) GetExact() string {
	if x, ok := x.GetMatchType().(*TrafficPolicySpec_StringMatch_Exact); ok {
		return x.Exact
	}
	return ""
}

func (x *TrafficPolicySpec_StringMatch) GetPrefix() string {
	if x, ok := x.GetMatchType().(*TrafficPolicySpec_StringMatch_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (x *TrafficPolicySpec_StringMatch) GetRegex() string {
	if x, ok := x.GetMatchType().(*TrafficPolicySpec_StringMatch_Regex); ok {
		return x.Regex
	}
	return ""
}

type isTrafficPolicySpec_StringMatch_MatchType interface {
	isTrafficPolicySpec_StringMatch_MatchType()
}

type TrafficPolicySpec_StringMatch_Exact struct {
	// Exact string match.
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3,oneof"`
}

type TrafficPolicySpec_StringMatch_Prefix struct {
	// Prefix-based match.
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3,oneof"`
}

type TrafficPolicySpec_StringMatch_Regex struct {
	// ECMAscript style regex-based match.
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof"`
}

func (*TrafficPolicySpec_StringMatch_Exact) isTrafficPolicySpec_StringMatch_MatchType() {}

func (*TrafficPolicySpec_StringMatch_Prefix) isTrafficPolicySpec_StringMatch_MatchType() {}

func (*TrafficPolicySpec_StringMatch_Regex) isTrafficPolicySpec_StringMatch_MatchType() {}

//
//Query parameter matching treats the query string of a request's :path header
//as an ampersand-separated list of keys and/or key=value elements.
type TrafficPolicySpec_QueryParameterMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//Specifies the name of a key that must be present in the requested
	//path*'s query string.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//
	//Specifies the value of the key. If the value is absent, a request
	//that contains the key in its query string will match, whether the
	//key appears with a value (e.g., "?debug=true") or not (e.g., "?debug")
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	//
	//Specifies whether the query parameter value is a regular expression.
	//Defaults to false. The entire query parameter value (i.e., the part to
	//the right of the equals sign in "key=value") must match the regex.
	//E.g., the regex "\d+$" will match "123" but not "a123" or "123a".
	Regex bool `protobuf:"varint,3,opt,name=regex,proto3" json:"regex,omitempty"`
}

func (x *TrafficPolicySpec_QueryParameterMatcher) Reset() {
	*x = TrafficPolicySpec_QueryParameterMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_QueryParameterMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_QueryParameterMatcher) ProtoMessage() {}

func (x *TrafficPolicySpec_QueryParameterMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_QueryParameterMatcher.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_QueryParameterMatcher) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 7}
}

func (x *TrafficPolicySpec_QueryParameterMatcher) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrafficPolicySpec_QueryParameterMatcher) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TrafficPolicySpec_QueryParameterMatcher) GetRegex() bool {
	if x != nil {
		return x.Regex
	}
	return false
}

type TrafficPolicySpec_Mirror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Different destination types can be selected mirroring traffic.
	//
	// Types that are assignable to DestinationType:
	//	*TrafficPolicySpec_Mirror_KubeService
	DestinationType isTrafficPolicySpec_Mirror_DestinationType `protobuf_oneof:"destination_type"`
	//
	//Percentage of traffic to mirror. If absent, 100% will be mirrored.
	//Values range between 0 and 100
	Percentage float64 `protobuf:"fixed64,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// Port on the destination k8s service to receive traffic. If multiple are found, and none are specified,
	// then the configuration will be considered invalid.
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *TrafficPolicySpec_Mirror) Reset() {
	*x = TrafficPolicySpec_Mirror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_Mirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_Mirror) ProtoMessage() {}

func (x *TrafficPolicySpec_Mirror) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_Mirror.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_Mirror) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 8}
}

func (m *TrafficPolicySpec_Mirror) GetDestinationType() isTrafficPolicySpec_Mirror_DestinationType {
	if m != nil {
		return m.DestinationType
	}
	return nil
}

func (x *TrafficPolicySpec_Mirror) GetKubeService() *v1.ClusterObjectRef {
	if x, ok := x.GetDestinationType().(*TrafficPolicySpec_Mirror_KubeService); ok {
		return x.KubeService
	}
	return nil
}

func (x *TrafficPolicySpec_Mirror) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *TrafficPolicySpec_Mirror) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type isTrafficPolicySpec_Mirror_DestinationType interface {
	isTrafficPolicySpec_Mirror_DestinationType()
}

type TrafficPolicySpec_Mirror_KubeService struct {
	// Name/namespace/cluster of a kubernetes service.
	KubeService *v1.ClusterObjectRef `protobuf:"bytes,1,opt,name=kube_service,json=kubeService,proto3,oneof"`
}

func (*TrafficPolicySpec_Mirror_KubeService) isTrafficPolicySpec_Mirror_DestinationType() {}

// Express an optional HttpMethod by wrapping it in a nillable message.
type TrafficPolicySpec_HttpMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method types.HttpMethodValue `protobuf:"varint,1,opt,name=method,proto3,enum=networking.mesh.gloo.solo.io.HttpMethodValue" json:"method,omitempty"`
}

func (x *TrafficPolicySpec_HttpMethod) Reset() {
	*x = TrafficPolicySpec_HttpMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_HttpMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_HttpMethod) ProtoMessage() {}

func (x *TrafficPolicySpec_HttpMethod) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_HttpMethod.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_HttpMethod) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 9}
}

func (x *TrafficPolicySpec_HttpMethod) GetMethod() types.HttpMethodValue {
	if x != nil {
		return x.Method
	}
	return types.HttpMethodValue_GET
}

//
//Configure outlier detection settings on targeted services. If set, source selectors must be empty.
//Outlier detection settings apply to all incoming traffic.
type TrafficPolicySpec_OutlierDetection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of errors before a host is ejected from the connection pool. Defaults to 5.
	ConsecutiveErrors uint32 `protobuf:"varint,1,opt,name=consecutive_errors,json=consecutiveErrors,proto3" json:"consecutive_errors,omitempty"`
	// Time interval between ejection sweep analysis. Format: 1h/1m/1s/1ms. MUST BE >=1ms. Defaults to 10s.
	Interval *duration.Duration `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// Minimum ejection duration. Format: 1h/1m/1s/1ms. MUST BE >=1ms. Defaults to 30s.
	BaseEjectionTime *duration.Duration `protobuf:"bytes,3,opt,name=base_ejection_time,json=baseEjectionTime,proto3" json:"base_ejection_time,omitempty"`
	// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected,
	// but will eject at least one host regardless of the value. MUST BE >= 0 and <= 100.
	// Defaults to 100%, allowing all hosts to be ejected from the pool.
	MaxEjectionPercent uint32 `protobuf:"varint,4,opt,name=max_ejection_percent,json=maxEjectionPercent,proto3" json:"max_ejection_percent,omitempty"`
}

func (x *TrafficPolicySpec_OutlierDetection) Reset() {
	*x = TrafficPolicySpec_OutlierDetection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_OutlierDetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_OutlierDetection) ProtoMessage() {}

func (x *TrafficPolicySpec_OutlierDetection) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_OutlierDetection.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_OutlierDetection) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 10}
}

func (x *TrafficPolicySpec_OutlierDetection) GetConsecutiveErrors() uint32 {
	if x != nil {
		return x.ConsecutiveErrors
	}
	return 0
}

func (x *TrafficPolicySpec_OutlierDetection) GetInterval() *duration.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *TrafficPolicySpec_OutlierDetection) GetBaseEjectionTime() *duration.Duration {
	if x != nil {
		return x.BaseEjectionTime
	}
	return nil
}

func (x *TrafficPolicySpec_OutlierDetection) GetMaxEjectionPercent() uint32 {
	if x != nil {
		return x.MaxEjectionPercent
	}
	return 0
}

//
//Configure mTLS settings on traffic targets. If specified this overrides the global default defined in Settings.
type TrafficPolicySpec_MTLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Istio TLS settings
	Istio *TrafficPolicySpec_MTLS_Istio `protobuf:"bytes,1,opt,name=istio,proto3" json:"istio,omitempty"`
}

func (x *TrafficPolicySpec_MTLS) Reset() {
	*x = TrafficPolicySpec_MTLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_MTLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_MTLS) ProtoMessage() {}

func (x *TrafficPolicySpec_MTLS) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_MTLS.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_MTLS) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 11}
}

func (x *TrafficPolicySpec_MTLS) GetIstio() *TrafficPolicySpec_MTLS_Istio {
	if x != nil {
		return x.Istio
	}
	return nil
}

type TrafficPolicySpec_MultiDestination_WeightedDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The different destination types can be selected for a traffic shift.
	//
	// Types that are assignable to DestinationType:
	//	*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeService
	//	*TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverService
	//	*TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestination
	DestinationType isTrafficPolicySpec_MultiDestination_WeightedDestination_DestinationType `protobuf_oneof:"destination_type"`
	// Weights across all of the destinations must sum to 100. Each is interpreted as a percent from 0-100.
	Weight uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination) Reset() {
	*x = TrafficPolicySpec_MultiDestination_WeightedDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_MultiDestination_WeightedDestination) ProtoMessage() {}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_MultiDestination_WeightedDestination.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_MultiDestination_WeightedDestination) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *TrafficPolicySpec_MultiDestination_WeightedDestination) GetDestinationType() isTrafficPolicySpec_MultiDestination_WeightedDestination_DestinationType {
	if m != nil {
		return m.DestinationType
	}
	return nil
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination) GetKubeService() *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination {
	if x, ok := x.GetDestinationType().(*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeService); ok {
		return x.KubeService
	}
	return nil
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination) GetFailoverService() *TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceDestination {
	if x, ok := x.GetDestinationType().(*TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverService); ok {
		return x.FailoverService
	}
	return nil
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination) GetVirtualDestination() *TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestinationReference {
	if x, ok := x.GetDestinationType().(*TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestination); ok {
		return x.VirtualDestination
	}
	return nil
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type isTrafficPolicySpec_MultiDestination_WeightedDestination_DestinationType interface {
	isTrafficPolicySpec_MultiDestination_WeightedDestination_DestinationType()
}

type TrafficPolicySpec_MultiDestination_WeightedDestination_KubeService struct {
	// The use kubeService to shift traffic a Kubernetes Service/subset.
	KubeService *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination `protobuf:"bytes,1,opt,name=kube_service,json=kubeService,proto3,oneof"`
}

type TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverService struct {
	// A traffic shift destination targeting a FailoverService.
	FailoverService *TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceDestination `protobuf:"bytes,3,opt,name=failover_service,json=failoverService,proto3,oneof"`
}

type TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestination struct {
	// A traffic shift destination targeting a VirtualDestination.
	VirtualDestination *TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestinationReference `protobuf:"bytes,4,opt,name=virtual_destination,json=virtualDestination,proto3,oneof"`
}

func (*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeService) isTrafficPolicySpec_MultiDestination_WeightedDestination_DestinationType() {
}

func (*TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverService) isTrafficPolicySpec_MultiDestination_WeightedDestination_DestinationType() {
}

func (*TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestination) isTrafficPolicySpec_MultiDestination_WeightedDestination_DestinationType() {
}

// A traffic shift destination which lives in kubernetes.
type TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the destination service.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The namespace of the destination service.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The cluster of the destination k8s service (as it is registered with Gloo Mesh).
	ClusterName string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// Subset routing is currently only supported on Istio.
	Subset map[string]string `protobuf:"bytes,4,rep,name=subset,proto3" json:"subset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Port on the destination k8s service to receive traffic. Required if the service exposes more than one port.
	Port uint32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) Reset() {
	*x = TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) ProtoMessage() {}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) GetSubset() map[string]string {
	if x != nil {
		return x.Subset
	}
	return nil
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// A traffic shift destination that references a FailoverService.
type TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the FailoverService.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The namespace of the FailoverService.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Subset routing is currently only supported for Istio backing services.
	Subset map[string]string `protobuf:"bytes,3,rep,name=subset,proto3" json:"subset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceDestination) Reset() {
	*x = TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceDestination) ProtoMessage() {
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceDestination) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceDestination.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceDestination) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceDestination) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceDestination) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceDestination) GetSubset() map[string]string {
	if x != nil {
		return x.Subset
	}
	return nil
}

// A traffic shift destination that references a VirtualDestination.
type TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestinationReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the VirtualDestination.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The namespace of the VirtualDestination.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Subset routing is currently only supported for Istio backing services.
	Subset map[string]string `protobuf:"bytes,3,rep,name=subset,proto3" json:"subset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestinationReference) Reset() {
	*x = TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestinationReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestinationReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestinationReference) ProtoMessage() {
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestinationReference) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestinationReference.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestinationReference) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestinationReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestinationReference) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestinationReference) GetSubset() map[string]string {
	if x != nil {
		return x.Subset
	}
	return nil
}

//
//The _httpStatus_ field is used to indicate the HTTP status code to
//return to the caller. The optional _percentage_ field can be used to only
//abort a certain percentage of requests. If not specified, all requests are
//aborted.
type TrafficPolicySpec_FaultInjection_Abort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. HTTP status code to use to abort the Http request.
	HttpStatus int32 `protobuf:"varint,4,opt,name=http_status,json=httpStatus,proto3" json:"http_status,omitempty"`
}

func (x *TrafficPolicySpec_FaultInjection_Abort) Reset() {
	*x = TrafficPolicySpec_FaultInjection_Abort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_FaultInjection_Abort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_FaultInjection_Abort) ProtoMessage() {}

func (x *TrafficPolicySpec_FaultInjection_Abort) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_FaultInjection_Abort.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_FaultInjection_Abort) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *TrafficPolicySpec_FaultInjection_Abort) GetHttpStatus() int32 {
	if x != nil {
		return x.HttpStatus
	}
	return 0
}

// Istio TLS settings
// Map onto the enums defined here https://github.com/istio/api/blob/00636152b9d9254b614828a65723840282a177d3/networking/v1beta1/destination_rule.proto#L886
type TrafficPolicySpec_MTLS_Istio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TLS connection mode
	TlsMode TrafficPolicySpec_MTLS_Istio_TLSmode `protobuf:"varint,1,opt,name=tls_mode,json=tlsMode,proto3,enum=networking.mesh.gloo.solo.io.TrafficPolicySpec_MTLS_Istio_TLSmode" json:"tls_mode,omitempty"`
}

func (x *TrafficPolicySpec_MTLS_Istio) Reset() {
	*x = TrafficPolicySpec_MTLS_Istio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicySpec_MTLS_Istio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicySpec_MTLS_Istio) ProtoMessage() {}

func (x *TrafficPolicySpec_MTLS_Istio) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicySpec_MTLS_Istio.ProtoReflect.Descriptor instead.
func (*TrafficPolicySpec_MTLS_Istio) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP(), []int{0, 11, 0}
}

func (x *TrafficPolicySpec_MTLS_Istio) GetTlsMode() TrafficPolicySpec_MTLS_Istio_TLSmode {
	if x != nil {
		return x.TlsMode
	}
	return TrafficPolicySpec_MTLS_Istio_DISABLE
}

var File_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDesc = []byte{
	0x0a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73,
	0x6b, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x47, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67,
	0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73,
	0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65,
	0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67,
	0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x2a, 0x0a, 0x11,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x57, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x66, 0x0a, 0x14, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x6f, 0x0a, 0x15, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x13,
	0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x67, 0x0a, 0x0f, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x55, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x5b,
	0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x72, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0a, 0x63, 0x6f, 0x72, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4e, 0x0a, 0x06, 0x6d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x73, 0x0a, 0x13, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6d, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4f, 0x75, 0x74,
	0x6c, 0x69, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d,
	0x54, 0x4c, 0x53, 0x52, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x1a, 0x6c, 0x0a, 0x0b, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x54, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0xaa, 0x0c, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x0c,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x9b, 0x0b, 0x0a, 0x13, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x89,
	0x01, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6b,
	0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x10, 0x66,
	0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x13, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x12, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0xc0, 0x02, 0x0a, 0x0f, 0x4b, 0x75, 0x62, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x88, 0x01, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a,
	0x39, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x9f, 0x02, 0x0a, 0x1a, 0x46,
	0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x06,
	0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x75, 0x62, 0x73, 0x65,
	0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa1, 0x02, 0x0a,
	0x1b, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x94,
	0x01, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x7c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73,
	0x75, 0x62, 0x73, 0x65, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x12, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0xd8, 0x02, 0x0a, 0x0e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x65,
	0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x5c, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x28, 0x0a,
	0x05, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x74, 0x74,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a,
	0xc2, 0x04, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x95,
	0x01, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x15, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x92, 0x01, 0x0a,
	0x16, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x1a, 0x48, 0x0a, 0x1a, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x41,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xdc, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x73, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x60, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x1a, 0xf2, 0x02, 0x0a, 0x0b, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a,
	0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x41, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x70, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x52, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x65, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12,
	0x18, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x05, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a,
	0x57, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x1a, 0x9a, 0x01, 0x0a, 0x06, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00,
	0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x12, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x53, 0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x45, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0xf3, 0x01, 0x0a, 0x10, 0x4f,
	0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x35,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x12, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x62, 0x61,
	0x73, 0x65, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61,
	0x78, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x1a, 0xf7, 0x01, 0x0a, 0x04, 0x4d, 0x54, 0x4c, 0x53, 0x12, 0x50, 0x0a, 0x05, 0x69, 0x73, 0x74,
	0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x2e, 0x49,
	0x73, 0x74, 0x69, 0x6f, 0x52, 0x05, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x1a, 0x9c, 0x01, 0x0a, 0x05,
	0x49, 0x73, 0x74, 0x69, 0x6f, 0x12, 0x5d, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x2e, 0x49, 0x73,
	0x74, 0x69, 0x6f, 0x2e, 0x54, 0x4c, 0x53, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x74, 0x6c, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x07, 0x54, 0x4c, 0x53, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x53, 0x54, 0x49,
	0x4f, 0x5f, 0x4d, 0x55, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x22, 0xa0, 0x03, 0x0a, 0x13, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6e, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x6f, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x50, 0x5a,
	0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f,
	0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0xc0, 0xf5, 0x04, 0x01, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescData = file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_goTypes = []interface{}{
	(TrafficPolicySpec_MTLS_Istio_TLSmode)(0),                                                  // 0: networking.mesh.gloo.solo.io.TrafficPolicySpec.MTLS.Istio.TLSmode
	(*TrafficPolicySpec)(nil),                                                                  // 1: networking.mesh.gloo.solo.io.TrafficPolicySpec
	(*TrafficPolicyStatus)(nil),                                                                // 2: networking.mesh.gloo.solo.io.TrafficPolicyStatus
	(*TrafficPolicySpec_RetryPolicy)(nil),                                                      // 3: networking.mesh.gloo.solo.io.TrafficPolicySpec.RetryPolicy
	(*TrafficPolicySpec_MultiDestination)(nil),                                                 // 4: networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination
	(*TrafficPolicySpec_FaultInjection)(nil),                                                   // 5: networking.mesh.gloo.solo.io.TrafficPolicySpec.FaultInjection
	(*TrafficPolicySpec_HeaderManipulation)(nil),                                               // 6: networking.mesh.gloo.solo.io.TrafficPolicySpec.HeaderManipulation
	(*TrafficPolicySpec_CorsPolicy)(nil),                                                       // 7: networking.mesh.gloo.solo.io.TrafficPolicySpec.CorsPolicy
	(*TrafficPolicySpec_HttpMatcher)(nil),                                                      // 8: networking.mesh.gloo.solo.io.TrafficPolicySpec.HttpMatcher
	(*TrafficPolicySpec_StringMatch)(nil),                                                      // 9: networking.mesh.gloo.solo.io.TrafficPolicySpec.StringMatch
	(*TrafficPolicySpec_QueryParameterMatcher)(nil),                                            // 10: networking.mesh.gloo.solo.io.TrafficPolicySpec.QueryParameterMatcher
	(*TrafficPolicySpec_Mirror)(nil),                                                           // 11: networking.mesh.gloo.solo.io.TrafficPolicySpec.Mirror
	(*TrafficPolicySpec_HttpMethod)(nil),                                                       // 12: networking.mesh.gloo.solo.io.TrafficPolicySpec.HttpMethod
	(*TrafficPolicySpec_OutlierDetection)(nil),                                                 // 13: networking.mesh.gloo.solo.io.TrafficPolicySpec.OutlierDetection
	(*TrafficPolicySpec_MTLS)(nil),                                                             // 14: networking.mesh.gloo.solo.io.TrafficPolicySpec.MTLS
	(*TrafficPolicySpec_MultiDestination_WeightedDestination)(nil),                             // 15: networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination
	(*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination)(nil),             // 16: networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.KubeDestination
	(*TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceDestination)(nil),  // 17: networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.FailoverServiceDestination
	(*TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestinationReference)(nil), // 18: networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.VirtualDestinationReference
	nil, // 19: networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.KubeDestination.SubsetEntry
	nil, // 20: networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.FailoverServiceDestination.SubsetEntry
	nil, // 21: networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.VirtualDestinationReference.SubsetEntry
	(*TrafficPolicySpec_FaultInjection_Abort)(nil), // 22: networking.mesh.gloo.solo.io.TrafficPolicySpec.FaultInjection.Abort
	nil,                                  // 23: networking.mesh.gloo.solo.io.TrafficPolicySpec.HeaderManipulation.AppendResponseHeadersEntry
	nil,                                  // 24: networking.mesh.gloo.solo.io.TrafficPolicySpec.HeaderManipulation.AppendRequestHeadersEntry
	(*TrafficPolicySpec_MTLS_Istio)(nil), // 25: networking.mesh.gloo.solo.io.TrafficPolicySpec.MTLS.Istio
	nil,                                  // 26: networking.mesh.gloo.solo.io.TrafficPolicyStatus.TrafficTargetsEntry
	(*WorkloadSelector)(nil),             // 27: networking.mesh.gloo.solo.io.WorkloadSelector
	(*TrafficTargetSelector)(nil),        // 28: networking.mesh.gloo.solo.io.TrafficTargetSelector
	(*duration.Duration)(nil),            // 29: google.protobuf.Duration
	(ApprovalState)(0),                   // 30: networking.mesh.gloo.solo.io.ApprovalState
	(*wrappers.BoolValue)(nil),           // 31: google.protobuf.BoolValue
	(*v1alpha1.HeaderMatcher)(nil),       // 32: common.mesh.gloo.solo.io.HeaderMatcher
	(*v1.ClusterObjectRef)(nil),          // 33: core.skv2.solo.io.ClusterObjectRef
	(types.HttpMethodValue)(0),           // 34: networking.mesh.gloo.solo.io.HttpMethodValue
	(*ApprovalStatus)(nil),               // 35: networking.mesh.gloo.solo.io.ApprovalStatus
}
var file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_depIdxs = []int32{
	27, // 0: networking.mesh.gloo.solo.io.TrafficPolicySpec.source_selector:type_name -> networking.mesh.gloo.solo.io.WorkloadSelector
	28, // 1: networking.mesh.gloo.solo.io.TrafficPolicySpec.destination_selector:type_name -> networking.mesh.gloo.solo.io.TrafficTargetSelector
	8,  // 2: networking.mesh.gloo.solo.io.TrafficPolicySpec.http_request_matchers:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.HttpMatcher
	4,  // 3: networking.mesh.gloo.solo.io.TrafficPolicySpec.traffic_shift:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination
	5,  // 4: networking.mesh.gloo.solo.io.TrafficPolicySpec.fault_injection:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.FaultInjection
	29, // 5: networking.mesh.gloo.solo.io.TrafficPolicySpec.request_timeout:type_name -> google.protobuf.Duration
	3,  // 6: networking.mesh.gloo.solo.io.TrafficPolicySpec.retries:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.RetryPolicy
	7,  // 7: networking.mesh.gloo.solo.io.TrafficPolicySpec.cors_policy:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.CorsPolicy
	11, // 8: networking.mesh.gloo.solo.io.TrafficPolicySpec.mirror:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.Mirror
	6,  // 9: networking.mesh.gloo.solo.io.TrafficPolicySpec.header_manipulation:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.HeaderManipulation
	13, // 10: networking.mesh.gloo.solo.io.TrafficPolicySpec.outlier_detection:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.OutlierDetection
	14, // 11: networking.mesh.gloo.solo.io.TrafficPolicySpec.mtls:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.MTLS
	30, // 12: networking.mesh.gloo.solo.io.TrafficPolicyStatus.state:type_name -> networking.mesh.gloo.solo.io.ApprovalState
	26, // 13: networking.mesh.gloo.solo.io.TrafficPolicyStatus.traffic_targets:type_name -> networking.mesh.gloo.solo.io.TrafficPolicyStatus.TrafficTargetsEntry
	29, // 14: networking.mesh.gloo.solo.io.TrafficPolicySpec.RetryPolicy.per_try_timeout:type_name -> google.protobuf.Duration
	15, // 15: networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.destinations:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination
	29, // 16: networking.mesh.gloo.solo.io.TrafficPolicySpec.FaultInjection.fixed_delay:type_name -> google.protobuf.Duration
	29, // 17: networking.mesh.gloo.solo.io.TrafficPolicySpec.FaultInjection.exponential_delay:type_name -> google.protobuf.Duration
	22, // 18: networking.mesh.gloo.solo.io.TrafficPolicySpec.FaultInjection.abort:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.FaultInjection.Abort
	23, // 19: networking.mesh.gloo.solo.io.TrafficPolicySpec.HeaderManipulation.append_response_headers:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.HeaderManipulation.AppendResponseHeadersEntry
	24, // 20: networking.mesh.gloo.solo.io.TrafficPolicySpec.HeaderManipulation.append_request_headers:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.HeaderManipulation.AppendRequestHeadersEntry
	9,  // 21: networking.mesh.gloo.solo.io.TrafficPolicySpec.CorsPolicy.allow_origins:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.StringMatch
	29, // 22: networking.mesh.gloo.solo.io.TrafficPolicySpec.CorsPolicy.max_age:type_name -> google.protobuf.Duration
	31, // 23: networking.mesh.gloo.solo.io.TrafficPolicySpec.CorsPolicy.allow_credentials:type_name -> google.protobuf.BoolValue
	32, // 24: networking.mesh.gloo.solo.io.TrafficPolicySpec.HttpMatcher.headers:type_name -> common.mesh.gloo.solo.io.HeaderMatcher
	10, // 25: networking.mesh.gloo.solo.io.TrafficPolicySpec.HttpMatcher.query_parameters:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.QueryParameterMatcher
	12, // 26: networking.mesh.gloo.solo.io.TrafficPolicySpec.HttpMatcher.method:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.HttpMethod
	33, // 27: networking.mesh.gloo.solo.io.TrafficPolicySpec.Mirror.kube_service:type_name -> core.skv2.solo.io.ClusterObjectRef
	34, // 28: networking.mesh.gloo.solo.io.TrafficPolicySpec.HttpMethod.method:type_name -> networking.mesh.gloo.solo.io.HttpMethodValue
	29, // 29: networking.mesh.gloo.solo.io.TrafficPolicySpec.OutlierDetection.interval:type_name -> google.protobuf.Duration
	29, // 30: networking.mesh.gloo.solo.io.TrafficPolicySpec.OutlierDetection.base_ejection_time:type_name -> google.protobuf.Duration
	25, // 31: networking.mesh.gloo.solo.io.TrafficPolicySpec.MTLS.istio:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.MTLS.Istio
	16, // 32: networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.kube_service:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.KubeDestination
	17, // 33: networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.failover_service:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.FailoverServiceDestination
	18, // 34: networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.virtual_destination:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.VirtualDestinationReference
	19, // 35: networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.KubeDestination.subset:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.KubeDestination.SubsetEntry
	20, // 36: networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.FailoverServiceDestination.subset:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.FailoverServiceDestination.SubsetEntry
	21, // 37: networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.VirtualDestinationReference.subset:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.VirtualDestinationReference.SubsetEntry
	0,  // 38: networking.mesh.gloo.solo.io.TrafficPolicySpec.MTLS.Istio.tls_mode:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.MTLS.Istio.TLSmode
	35, // 39: networking.mesh.gloo.solo.io.TrafficPolicyStatus.TrafficTargetsEntry.value:type_name -> networking.mesh.gloo.solo.io.ApprovalStatus
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_init() }
func file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_init() {
	if File_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_selectors_proto_init()
	file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_validation_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_RetryPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_MultiDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_FaultInjection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_HeaderManipulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_CorsPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_HttpMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_StringMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_QueryParameterMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_Mirror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_HttpMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_OutlierDetection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_MTLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_MultiDestination_WeightedDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestinationReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_FaultInjection_Abort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicySpec_MTLS_Istio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*TrafficPolicySpec_FaultInjection_FixedDelay)(nil),
		(*TrafficPolicySpec_FaultInjection_ExponentialDelay)(nil),
		(*TrafficPolicySpec_FaultInjection_Abort_)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*TrafficPolicySpec_HttpMatcher_Prefix)(nil),
		(*TrafficPolicySpec_HttpMatcher_Exact)(nil),
		(*TrafficPolicySpec_HttpMatcher_Regex)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*TrafficPolicySpec_StringMatch_Exact)(nil),
		(*TrafficPolicySpec_StringMatch_Prefix)(nil),
		(*TrafficPolicySpec_StringMatch_Regex)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*TrafficPolicySpec_Mirror_KubeService)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeService)(nil),
		(*TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverService)(nil),
		(*TrafficPolicySpec_MultiDestination_WeightedDestination_VirtualDestination)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto = out.File
	file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_api_networking_v1alpha2_traffic_policy_proto_depIdxs = nil
}
