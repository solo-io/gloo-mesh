// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/solo-io/gloo-mesh/api/networking/v1alpha2/failover_service.proto

package v1alpha2

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//
//A FailoverService creates a new hostname to which services can send requests.
//Requests will be routed based on a list of backing traffic targets ordered by
//decreasing priority. When outlier detection detects that a traffic target in the list is
//in an unhealthy state, requests sent to the FailoverService will be routed
//to the next healthy traffic target in the list. For each traffic target referenced in the
//FailoverService's BackingServices list, outlier detection must be configured using a TrafficPolicy.
//
//Currently this feature only supports Services backed by Istio.
type FailoverServiceSpec struct {
	//
	//The DNS name of the FailoverService. Must be unique within the service mesh instance
	//since it is used as the hostname with which clients communicate.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The port on which the FailoverService listens.
	Port *FailoverServiceSpec_Port `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	// The meshes that this FailoverService will be visible to.
	Meshes []*v1.ObjectRef `protobuf:"bytes,3,rep,name=meshes,proto3" json:"meshes,omitempty"`
	//
	//The list of services backing the FailoverService, ordered by decreasing priority.
	//All services must be backed by either the same service mesh instance or
	//backed by service meshes that are grouped under a common VirtualMesh.
	BackingServices      []*FailoverServiceSpec_BackingService `protobuf:"bytes,4,rep,name=backing_services,json=backingServices,proto3" json:"backing_services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *FailoverServiceSpec) Reset()         { *m = FailoverServiceSpec{} }
func (m *FailoverServiceSpec) String() string { return proto.CompactTextString(m) }
func (*FailoverServiceSpec) ProtoMessage()    {}
func (*FailoverServiceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c46d2070f801ea8, []int{0}
}

func (m *FailoverServiceSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FailoverServiceSpec.Unmarshal(m, b)
}
func (m *FailoverServiceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FailoverServiceSpec.Marshal(b, m, deterministic)
}
func (m *FailoverServiceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailoverServiceSpec.Merge(m, src)
}
func (m *FailoverServiceSpec) XXX_Size() int {
	return xxx_messageInfo_FailoverServiceSpec.Size(m)
}
func (m *FailoverServiceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FailoverServiceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FailoverServiceSpec proto.InternalMessageInfo

func (m *FailoverServiceSpec) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *FailoverServiceSpec) GetPort() *FailoverServiceSpec_Port {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *FailoverServiceSpec) GetMeshes() []*v1.ObjectRef {
	if m != nil {
		return m.Meshes
	}
	return nil
}

func (m *FailoverServiceSpec) GetBackingServices() []*FailoverServiceSpec_BackingService {
	if m != nil {
		return m.BackingServices
	}
	return nil
}

// The port on which the FailoverService listens.
type FailoverServiceSpec_Port struct {
	// Port number.
	Number uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// Protocol of the requests sent to the FailoverService, must be one of HTTP, HTTPS, GRPC, HTTP2, MONGO, TCP, TLS.
	Protocol             string   `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FailoverServiceSpec_Port) Reset()         { *m = FailoverServiceSpec_Port{} }
func (m *FailoverServiceSpec_Port) String() string { return proto.CompactTextString(m) }
func (*FailoverServiceSpec_Port) ProtoMessage()    {}
func (*FailoverServiceSpec_Port) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c46d2070f801ea8, []int{0, 0}
}

func (m *FailoverServiceSpec_Port) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FailoverServiceSpec_Port.Unmarshal(m, b)
}
func (m *FailoverServiceSpec_Port) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FailoverServiceSpec_Port.Marshal(b, m, deterministic)
}
func (m *FailoverServiceSpec_Port) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailoverServiceSpec_Port.Merge(m, src)
}
func (m *FailoverServiceSpec_Port) XXX_Size() int {
	return xxx_messageInfo_FailoverServiceSpec_Port.Size(m)
}
func (m *FailoverServiceSpec_Port) XXX_DiscardUnknown() {
	xxx_messageInfo_FailoverServiceSpec_Port.DiscardUnknown(m)
}

var xxx_messageInfo_FailoverServiceSpec_Port proto.InternalMessageInfo

func (m *FailoverServiceSpec_Port) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *FailoverServiceSpec_Port) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

// The traffic targets that comprise the FailoverService.
type FailoverServiceSpec_BackingService struct {
	// Different traffic target types can be selected as backing services.
	//
	// Types that are valid to be assigned to BackingServiceType:
	//	*FailoverServiceSpec_BackingService_KubeService
	BackingServiceType   isFailoverServiceSpec_BackingService_BackingServiceType `protobuf_oneof:"backing_service_type"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *FailoverServiceSpec_BackingService) Reset()         { *m = FailoverServiceSpec_BackingService{} }
func (m *FailoverServiceSpec_BackingService) String() string { return proto.CompactTextString(m) }
func (*FailoverServiceSpec_BackingService) ProtoMessage()    {}
func (*FailoverServiceSpec_BackingService) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c46d2070f801ea8, []int{0, 1}
}

func (m *FailoverServiceSpec_BackingService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FailoverServiceSpec_BackingService.Unmarshal(m, b)
}
func (m *FailoverServiceSpec_BackingService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FailoverServiceSpec_BackingService.Marshal(b, m, deterministic)
}
func (m *FailoverServiceSpec_BackingService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailoverServiceSpec_BackingService.Merge(m, src)
}
func (m *FailoverServiceSpec_BackingService) XXX_Size() int {
	return xxx_messageInfo_FailoverServiceSpec_BackingService.Size(m)
}
func (m *FailoverServiceSpec_BackingService) XXX_DiscardUnknown() {
	xxx_messageInfo_FailoverServiceSpec_BackingService.DiscardUnknown(m)
}

var xxx_messageInfo_FailoverServiceSpec_BackingService proto.InternalMessageInfo

type isFailoverServiceSpec_BackingService_BackingServiceType interface {
	isFailoverServiceSpec_BackingService_BackingServiceType()
}

type FailoverServiceSpec_BackingService_KubeService struct {
	KubeService *v1.ClusterObjectRef `protobuf:"bytes,1,opt,name=kube_service,json=kubeService,proto3,oneof"`
}

func (*FailoverServiceSpec_BackingService_KubeService) isFailoverServiceSpec_BackingService_BackingServiceType() {
}

func (m *FailoverServiceSpec_BackingService) GetBackingServiceType() isFailoverServiceSpec_BackingService_BackingServiceType {
	if m != nil {
		return m.BackingServiceType
	}
	return nil
}

func (m *FailoverServiceSpec_BackingService) GetKubeService() *v1.ClusterObjectRef {
	if x, ok := m.GetBackingServiceType().(*FailoverServiceSpec_BackingService_KubeService); ok {
		return x.KubeService
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FailoverServiceSpec_BackingService) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FailoverServiceSpec_BackingService_KubeService)(nil),
	}
}

type FailoverServiceStatus struct {
	//
	//The most recent generation observed in the the FailoverService metadata.
	//If the observedGeneration does not match generation, the controller has not received the most
	//recent version of this resource.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	//
	//The state of the overall resource, will only show accepted if it has been successfully
	//applied to all target meshes.
	State ApprovalState `protobuf:"varint,2,opt,name=state,proto3,enum=networking.mesh.gloo.solo.io.ApprovalState" json:"state,omitempty"`
	// The status of the FailoverService for each Mesh to which it has been applied.
	Meshes map[string]*ApprovalStatus `protobuf:"bytes,3,rep,name=meshes,proto3" json:"meshes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Any errors found while processing this generation of the resource.
	Errors               []string `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FailoverServiceStatus) Reset()         { *m = FailoverServiceStatus{} }
func (m *FailoverServiceStatus) String() string { return proto.CompactTextString(m) }
func (*FailoverServiceStatus) ProtoMessage()    {}
func (*FailoverServiceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c46d2070f801ea8, []int{1}
}

func (m *FailoverServiceStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FailoverServiceStatus.Unmarshal(m, b)
}
func (m *FailoverServiceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FailoverServiceStatus.Marshal(b, m, deterministic)
}
func (m *FailoverServiceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailoverServiceStatus.Merge(m, src)
}
func (m *FailoverServiceStatus) XXX_Size() int {
	return xxx_messageInfo_FailoverServiceStatus.Size(m)
}
func (m *FailoverServiceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_FailoverServiceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_FailoverServiceStatus proto.InternalMessageInfo

func (m *FailoverServiceStatus) GetObservedGeneration() int64 {
	if m != nil {
		return m.ObservedGeneration
	}
	return 0
}

func (m *FailoverServiceStatus) GetState() ApprovalState {
	if m != nil {
		return m.State
	}
	return ApprovalState_PENDING
}

func (m *FailoverServiceStatus) GetMeshes() map[string]*ApprovalStatus {
	if m != nil {
		return m.Meshes
	}
	return nil
}

func (m *FailoverServiceStatus) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterType((*FailoverServiceSpec)(nil), "networking.mesh.gloo.solo.io.FailoverServiceSpec")
	proto.RegisterType((*FailoverServiceSpec_Port)(nil), "networking.mesh.gloo.solo.io.FailoverServiceSpec.Port")
	proto.RegisterType((*FailoverServiceSpec_BackingService)(nil), "networking.mesh.gloo.solo.io.FailoverServiceSpec.BackingService")
	proto.RegisterType((*FailoverServiceStatus)(nil), "networking.mesh.gloo.solo.io.FailoverServiceStatus")
	proto.RegisterMapType((map[string]*ApprovalStatus)(nil), "networking.mesh.gloo.solo.io.FailoverServiceStatus.MeshesEntry")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo-mesh/api/networking/v1alpha2/failover_service.proto", fileDescriptor_7c46d2070f801ea8)
}

var fileDescriptor_7c46d2070f801ea8 = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x26, 0x3f, 0x8d, 0xc8, 0x1a, 0x4a, 0xb5, 0x85, 0x28, 0xb2, 0x7a, 0x88, 0xca, 0x25, 0x12,
	0x74, 0xad, 0x1a, 0x84, 0x50, 0x2f, 0xd0, 0x20, 0xa0, 0x2a, 0x42, 0x54, 0xdb, 0x03, 0x12, 0x97,
	0x68, 0xed, 0x4e, 0x1d, 0x63, 0xc7, 0x63, 0xed, 0xae, 0x4d, 0xf3, 0x76, 0x3c, 0x02, 0x2f, 0xc1,
	0x23, 0x70, 0x47, 0xbb, 0x76, 0x0c, 0x0d, 0x51, 0x44, 0x7b, 0xb2, 0x67, 0x77, 0xe6, 0x9b, 0xf9,
	0xbe, 0xfd, 0x86, 0x7c, 0x88, 0x62, 0x3d, 0x2b, 0x02, 0x16, 0xe2, 0xdc, 0x53, 0x98, 0xe2, 0x41,
	0x8c, 0x5e, 0x94, 0x22, 0x1e, 0xcc, 0x41, 0xcd, 0x3c, 0x91, 0xc7, 0x5e, 0x06, 0xfa, 0x1b, 0xca,
	0x24, 0xce, 0x22, 0xaf, 0x3c, 0x14, 0x69, 0x3e, 0x13, 0xbe, 0x77, 0x29, 0xe2, 0x14, 0x4b, 0x90,
	0x53, 0x05, 0xb2, 0x8c, 0x43, 0x60, 0xb9, 0x44, 0x8d, 0x74, 0xef, 0x4f, 0x2e, 0x33, 0xf5, 0xcc,
	0x20, 0x31, 0x03, 0xcb, 0x62, 0x74, 0xd9, 0x9a, 0x56, 0x2a, 0x29, 0x7d, 0xdb, 0x25, 0x44, 0x09,
	0x5e, 0x79, 0x68, 0xbf, 0x15, 0x9a, 0x7b, 0xbb, 0xd1, 0x4a, 0x91, 0xc6, 0x17, 0x42, 0xc7, 0x98,
	0x4d, 0x95, 0x16, 0x7a, 0x09, 0x46, 0xe1, 0x4a, 0xdb, 0x3f, 0x0f, 0xae, 0x74, 0x75, 0xb6, 0xff,
	0xa3, 0x43, 0x76, 0xdf, 0xd5, 0x4c, 0xce, 0x2b, 0x22, 0xe7, 0x39, 0x84, 0xd4, 0x25, 0x77, 0x67,
	0xa8, 0x74, 0x26, 0xe6, 0x30, 0x6c, 0x8d, 0x5a, 0xe3, 0x3e, 0x6f, 0x62, 0x7a, 0x4a, 0xba, 0x39,
	0x4a, 0x3d, 0x6c, 0x8f, 0x5a, 0x63, 0xc7, 0x7f, 0xc1, 0x36, 0x31, 0x66, 0x6b, 0xc0, 0xd9, 0x19,
	0x4a, 0xcd, 0x2d, 0x06, 0x7d, 0x4e, 0x7a, 0xa6, 0x06, 0xd4, 0xb0, 0x33, 0xea, 0x8c, 0x1d, 0x7f,
	0x8f, 0x59, 0xf6, 0x46, 0x93, 0x06, 0xe2, 0x53, 0xf0, 0x15, 0x42, 0xcd, 0xe1, 0x92, 0xd7, 0xb9,
	0x34, 0x21, 0x3b, 0x81, 0x08, 0x4d, 0xc7, 0xa5, 0xfa, 0x6a, 0xd8, 0xb5, 0xf5, 0xaf, 0x6f, 0x3e,
	0xcd, 0xa4, 0x42, 0xaa, 0x8f, 0xf8, 0x83, 0xe0, 0x5a, 0xac, 0xdc, 0x23, 0xd2, 0x35, 0x03, 0xd3,
	0x01, 0xe9, 0x65, 0xc5, 0x3c, 0x00, 0x69, 0x05, 0xb9, 0xcf, 0xeb, 0xc8, 0x48, 0x65, 0xb5, 0x0c,
	0x31, 0xb5, 0x92, 0xf4, 0x79, 0x13, 0xbb, 0x92, 0x6c, 0x5f, 0x87, 0xa7, 0x27, 0xe4, 0x5e, 0x52,
	0x04, 0xb0, 0x9c, 0xdb, 0x62, 0x39, 0xfe, 0xe3, 0x35, 0xb4, 0xdf, 0xa4, 0x85, 0xd2, 0x20, 0x1b,
	0xf6, 0x27, 0x77, 0xb8, 0x63, 0x4a, 0x6b, 0xa4, 0xc9, 0x80, 0x3c, 0x5c, 0x11, 0x61, 0xaa, 0x17,
	0x39, 0xec, 0xff, 0x6c, 0x93, 0x47, 0xab, 0x3c, 0xb5, 0xd0, 0x85, 0xa2, 0x1e, 0xd9, 0xc5, 0xc0,
	0xe4, 0xc2, 0xc5, 0x34, 0x82, 0x0c, 0xa4, 0xf5, 0x88, 0x1d, 0xa1, 0xc3, 0xe9, 0xf2, 0xea, 0x7d,
	0x73, 0x43, 0x8f, 0xc9, 0x96, 0x35, 0x90, 0xe5, 0xb5, 0xed, 0x3f, 0xd9, 0x2c, 0xee, 0x71, 0x9e,
	0x4b, 0x2c, 0x45, 0x6a, 0xba, 0x01, 0xaf, 0x2a, 0xe9, 0xe7, 0x95, 0x07, 0x7e, 0x75, 0xb3, 0x07,
	0xb2, 0x83, 0xb3, 0x8f, 0x16, 0xe1, 0x6d, 0xa6, 0xe5, 0xa2, 0xf1, 0xc0, 0x80, 0xf4, 0x40, 0x4a,
	0x94, 0xd5, 0xcb, 0xf7, 0x79, 0x1d, 0xb9, 0x11, 0x71, 0xfe, 0x4a, 0xa7, 0x3b, 0xa4, 0x93, 0xc0,
	0xa2, 0xf6, 0xb0, 0xf9, 0xa5, 0x13, 0xb2, 0x55, 0x8a, 0xb4, 0x80, 0xda, 0xbf, 0x4f, 0xff, 0x9f,
	0x54, 0xa1, 0x78, 0x55, 0x7a, 0xd4, 0x7e, 0xd9, 0x9a, 0x9c, 0x7d, 0xff, 0xd5, 0x6d, 0x7d, 0x39,
	0xdd, 0xb8, 0xa1, 0x79, 0x12, 0xad, 0x6c, 0xe9, 0xbf, 0x2d, 0x9a, 0xbd, 0x0d, 0x7a, 0xd6, 0x37,
	0xcf, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xd0, 0x4f, 0x88, 0x91, 0x04, 0x00, 0x00,
}
