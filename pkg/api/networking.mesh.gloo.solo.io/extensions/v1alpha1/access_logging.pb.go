// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo-mesh/api/networking/extensions/v1alpha1/access_logging.proto

package v1alpha1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	v3 "github.com/envoyproxy/go-control-plane/envoy/data/accesslog/v3"
	proto "github.com/golang/protobuf/proto"
	v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1alpha2"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WatchAccessLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Select the workloads whose access logs should be streamed.
	// Leave empty to stream access logs for all workloads.
	WorkloadSelectors []*v1alpha2.WorkloadSelector `protobuf:"bytes,1,rep,name=workload_selectors,json=workloadSelectors,proto3" json:"workload_selectors,omitempty"`
}

func (x *WatchAccessLogsRequest) Reset() {
	*x = WatchAccessLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchAccessLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchAccessLogsRequest) ProtoMessage() {}

func (x *WatchAccessLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchAccessLogsRequest.ProtoReflect.Descriptor instead.
func (*WatchAccessLogsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_rawDescGZIP(), []int{0}
}

func (x *WatchAccessLogsRequest) GetWorkloadSelectors() []*v1alpha2.WorkloadSelector {
	if x != nil {
		return x.WorkloadSelectors
	}
	return nil
}

type AccessLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the workload that emitted this access log.
	WorkloadRef *v1.ClusterObjectRef `protobuf:"bytes,1,opt,name=workloadRef,proto3" json:"workloadRef,omitempty"`
	// An Envoy access log.
	HttpAccessLog *v3.HTTPAccessLogEntry `protobuf:"bytes,2,opt,name=http_access_log,json=httpAccessLog,proto3" json:"http_access_log,omitempty"`
}

func (x *AccessLog) Reset() {
	*x = AccessLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog) ProtoMessage() {}

func (x *AccessLog) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog.ProtoReflect.Descriptor instead.
func (*AccessLog) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_rawDescGZIP(), []int{1}
}

func (x *AccessLog) GetWorkloadRef() *v1.ClusterObjectRef {
	if x != nil {
		return x.WorkloadRef
	}
	return nil
}

func (x *AccessLog) GetHttpAccessLog() *v3.HTTPAccessLogEntry {
	if x != nil {
		return x.HttpAccessLog
	}
	return nil
}

var File_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_rawDesc = []byte{
	0x0a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f,
	0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6b, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f,
	0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x33, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x77,
	0x0a, 0x16, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x66, 0x12, 0x53, 0x0a, 0x0f,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x33, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x32, 0x96, 0x01, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x8a, 0x01,
	0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x3f, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x22, 0x00, 0x30, 0x01, 0x42, 0x57, 0x5a, 0x55, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_rawDescData = file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_goTypes = []interface{}{
	(*WatchAccessLogsRequest)(nil),    // 0: extensions.networking.mesh.gloo.solo.io.WatchAccessLogsRequest
	(*AccessLog)(nil),                 // 1: extensions.networking.mesh.gloo.solo.io.AccessLog
	(*v1alpha2.WorkloadSelector)(nil), // 2: networking.mesh.gloo.solo.io.WorkloadSelector
	(*v1.ClusterObjectRef)(nil),       // 3: core.skv2.solo.io.ClusterObjectRef
	(*v3.HTTPAccessLogEntry)(nil),     // 4: envoy.data.accesslog.v3.HTTPAccessLogEntry
}
var file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_depIdxs = []int32{
	2, // 0: extensions.networking.mesh.gloo.solo.io.WatchAccessLogsRequest.workload_selectors:type_name -> networking.mesh.gloo.solo.io.WorkloadSelector
	3, // 1: extensions.networking.mesh.gloo.solo.io.AccessLog.workloadRef:type_name -> core.skv2.solo.io.ClusterObjectRef
	4, // 2: extensions.networking.mesh.gloo.solo.io.AccessLog.http_access_log:type_name -> envoy.data.accesslog.v3.HTTPAccessLogEntry
	0, // 3: extensions.networking.mesh.gloo.solo.io.Logging.WatchAccessLogs:input_type -> extensions.networking.mesh.gloo.solo.io.WatchAccessLogsRequest
	1, // 4: extensions.networking.mesh.gloo.solo.io.Logging.WatchAccessLogs:output_type -> extensions.networking.mesh.gloo.solo.io.AccessLog
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_init()
}
func file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_init() {
	if File_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAccessLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto = out.File
	file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_api_networking_extensions_v1alpha1_access_logging_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LoggingClient is the client API for Logging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggingClient interface {
	// Stream Envoy access logs as they are captured.
	WatchAccessLogs(ctx context.Context, in *WatchAccessLogsRequest, opts ...grpc.CallOption) (Logging_WatchAccessLogsClient, error)
}

type loggingClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggingClient(cc grpc.ClientConnInterface) LoggingClient {
	return &loggingClient{cc}
}

func (c *loggingClient) WatchAccessLogs(ctx context.Context, in *WatchAccessLogsRequest, opts ...grpc.CallOption) (Logging_WatchAccessLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Logging_serviceDesc.Streams[0], "/extensions.networking.mesh.gloo.solo.io.Logging/WatchAccessLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggingWatchAccessLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Logging_WatchAccessLogsClient interface {
	Recv() (*AccessLog, error)
	grpc.ClientStream
}

type loggingWatchAccessLogsClient struct {
	grpc.ClientStream
}

func (x *loggingWatchAccessLogsClient) Recv() (*AccessLog, error) {
	m := new(AccessLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoggingServer is the server API for Logging service.
type LoggingServer interface {
	// Stream Envoy access logs as they are captured.
	WatchAccessLogs(*WatchAccessLogsRequest, Logging_WatchAccessLogsServer) error
}

// UnimplementedLoggingServer can be embedded to have forward compatible implementations.
type UnimplementedLoggingServer struct {
}

func (*UnimplementedLoggingServer) WatchAccessLogs(*WatchAccessLogsRequest, Logging_WatchAccessLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchAccessLogs not implemented")
}

func RegisterLoggingServer(s *grpc.Server, srv LoggingServer) {
	s.RegisterService(&_Logging_serviceDesc, srv)
}

func _Logging_WatchAccessLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchAccessLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoggingServer).WatchAccessLogs(m, &loggingWatchAccessLogsServer{stream})
}

type Logging_WatchAccessLogsServer interface {
	Send(*AccessLog) error
	grpc.ServerStream
}

type loggingWatchAccessLogsServer struct {
	grpc.ServerStream
}

func (x *loggingWatchAccessLogsServer) Send(m *AccessLog) error {
	return x.ServerStream.SendMsg(m)
}

var _Logging_serviceDesc = grpc.ServiceDesc{
	ServiceName: "extensions.networking.mesh.gloo.solo.io.Logging",
	HandlerType: (*LoggingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchAccessLogs",
			Handler:       _Logging_WatchAccessLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/solo-io/gloo-mesh/api/networking/extensions/v1alpha1/access_logging.proto",
}
