// Code generated by MockGen. DO NOT EDIT.
// Source: ./snapshot.go

// Package mock_istio is a generated GoMock package.
package mock_istio

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha3sets "github.com/solo-io/external-apis/pkg/api/istio/networking.istio.io/v1alpha3/sets"
	v1beta1sets "github.com/solo-io/external-apis/pkg/api/istio/security.istio.io/v1beta1/sets"
	v1 "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1"
	v1sets "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1/sets"
	istio "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/output/istio"
	v1beta1 "github.com/solo-io/gloo-mesh/pkg/api/xds.agent.enterprise.mesh.gloo.solo.io/v1beta1"
	v1beta1sets0 "github.com/solo-io/gloo-mesh/pkg/api/xds.agent.enterprise.mesh.gloo.solo.io/v1beta1/sets"
	output "github.com/solo-io/skv2/contrib/pkg/output"
	multicluster "github.com/solo-io/skv2/pkg/multicluster"
	resource "github.com/solo-io/skv2/pkg/resource"
	v1alpha3 "istio.io/client-go/pkg/apis/networking/v1alpha3"
	v1beta10 "istio.io/client-go/pkg/apis/security/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockSnapshot is a mock of Snapshot interface
type MockSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMockRecorder
}

// MockSnapshotMockRecorder is the mock recorder for MockSnapshot
type MockSnapshotMockRecorder struct {
	mock *MockSnapshot
}

// NewMockSnapshot creates a new mock instance
func NewMockSnapshot(ctrl *gomock.Controller) *MockSnapshot {
	mock := &MockSnapshot{ctrl: ctrl}
	mock.recorder = &MockSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshot) EXPECT() *MockSnapshotMockRecorder {
	return m.recorder
}

// IssuedCertificates mocks base method
func (m *MockSnapshot) IssuedCertificates() []istio.LabeledIssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuedCertificates")
	ret0, _ := ret[0].([]istio.LabeledIssuedCertificateSet)
	return ret0
}

// IssuedCertificates indicates an expected call of IssuedCertificates
func (mr *MockSnapshotMockRecorder) IssuedCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuedCertificates", reflect.TypeOf((*MockSnapshot)(nil).IssuedCertificates))
}

// PodBounceDirectives mocks base method
func (m *MockSnapshot) PodBounceDirectives() []istio.LabeledPodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodBounceDirectives")
	ret0, _ := ret[0].([]istio.LabeledPodBounceDirectiveSet)
	return ret0
}

// PodBounceDirectives indicates an expected call of PodBounceDirectives
func (mr *MockSnapshotMockRecorder) PodBounceDirectives() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodBounceDirectives", reflect.TypeOf((*MockSnapshot)(nil).PodBounceDirectives))
}

// XdsConfigs mocks base method
func (m *MockSnapshot) XdsConfigs() []istio.LabeledXdsConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XdsConfigs")
	ret0, _ := ret[0].([]istio.LabeledXdsConfigSet)
	return ret0
}

// XdsConfigs indicates an expected call of XdsConfigs
func (mr *MockSnapshotMockRecorder) XdsConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XdsConfigs", reflect.TypeOf((*MockSnapshot)(nil).XdsConfigs))
}

// DestinationRules mocks base method
func (m *MockSnapshot) DestinationRules() []istio.LabeledDestinationRuleSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestinationRules")
	ret0, _ := ret[0].([]istio.LabeledDestinationRuleSet)
	return ret0
}

// DestinationRules indicates an expected call of DestinationRules
func (mr *MockSnapshotMockRecorder) DestinationRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestinationRules", reflect.TypeOf((*MockSnapshot)(nil).DestinationRules))
}

// EnvoyFilters mocks base method
func (m *MockSnapshot) EnvoyFilters() []istio.LabeledEnvoyFilterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvoyFilters")
	ret0, _ := ret[0].([]istio.LabeledEnvoyFilterSet)
	return ret0
}

// EnvoyFilters indicates an expected call of EnvoyFilters
func (mr *MockSnapshotMockRecorder) EnvoyFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvoyFilters", reflect.TypeOf((*MockSnapshot)(nil).EnvoyFilters))
}

// Gateways mocks base method
func (m *MockSnapshot) Gateways() []istio.LabeledGatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gateways")
	ret0, _ := ret[0].([]istio.LabeledGatewaySet)
	return ret0
}

// Gateways indicates an expected call of Gateways
func (mr *MockSnapshotMockRecorder) Gateways() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gateways", reflect.TypeOf((*MockSnapshot)(nil).Gateways))
}

// ServiceEntries mocks base method
func (m *MockSnapshot) ServiceEntries() []istio.LabeledServiceEntrySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceEntries")
	ret0, _ := ret[0].([]istio.LabeledServiceEntrySet)
	return ret0
}

// ServiceEntries indicates an expected call of ServiceEntries
func (mr *MockSnapshotMockRecorder) ServiceEntries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceEntries", reflect.TypeOf((*MockSnapshot)(nil).ServiceEntries))
}

// VirtualServices mocks base method
func (m *MockSnapshot) VirtualServices() []istio.LabeledVirtualServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualServices")
	ret0, _ := ret[0].([]istio.LabeledVirtualServiceSet)
	return ret0
}

// VirtualServices indicates an expected call of VirtualServices
func (mr *MockSnapshotMockRecorder) VirtualServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualServices", reflect.TypeOf((*MockSnapshot)(nil).VirtualServices))
}

// AuthorizationPolicies mocks base method
func (m *MockSnapshot) AuthorizationPolicies() []istio.LabeledAuthorizationPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizationPolicies")
	ret0, _ := ret[0].([]istio.LabeledAuthorizationPolicySet)
	return ret0
}

// AuthorizationPolicies indicates an expected call of AuthorizationPolicies
func (mr *MockSnapshotMockRecorder) AuthorizationPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizationPolicies", reflect.TypeOf((*MockSnapshot)(nil).AuthorizationPolicies))
}

// ApplyLocalCluster mocks base method
func (m *MockSnapshot) ApplyLocalCluster(ctx context.Context, clusterClient client.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyLocalCluster", ctx, clusterClient, errHandler)
}

// ApplyLocalCluster indicates an expected call of ApplyLocalCluster
func (mr *MockSnapshotMockRecorder) ApplyLocalCluster(ctx, clusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyLocalCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyLocalCluster), ctx, clusterClient, errHandler)
}

// ApplyMultiCluster mocks base method
func (m *MockSnapshot) ApplyMultiCluster(ctx context.Context, multiClusterClient multicluster.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyMultiCluster", ctx, multiClusterClient, errHandler)
}

// ApplyMultiCluster indicates an expected call of ApplyMultiCluster
func (mr *MockSnapshotMockRecorder) ApplyMultiCluster(ctx, multiClusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyMultiCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyMultiCluster), ctx, multiClusterClient, errHandler)
}

// MarshalJSON mocks base method
func (m *MockSnapshot) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockSnapshotMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockSnapshot)(nil).MarshalJSON))
}

// MockLabeledIssuedCertificateSet is a mock of LabeledIssuedCertificateSet interface
type MockLabeledIssuedCertificateSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledIssuedCertificateSetMockRecorder
}

// MockLabeledIssuedCertificateSetMockRecorder is the mock recorder for MockLabeledIssuedCertificateSet
type MockLabeledIssuedCertificateSetMockRecorder struct {
	mock *MockLabeledIssuedCertificateSet
}

// NewMockLabeledIssuedCertificateSet creates a new mock instance
func NewMockLabeledIssuedCertificateSet(ctrl *gomock.Controller) *MockLabeledIssuedCertificateSet {
	mock := &MockLabeledIssuedCertificateSet{ctrl: ctrl}
	mock.recorder = &MockLabeledIssuedCertificateSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledIssuedCertificateSet) EXPECT() *MockLabeledIssuedCertificateSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledIssuedCertificateSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledIssuedCertificateSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledIssuedCertificateSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledIssuedCertificateSet) Set() v1sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1sets.IssuedCertificateSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledIssuedCertificateSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledIssuedCertificateSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledIssuedCertificateSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledIssuedCertificateSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledIssuedCertificateSet)(nil).Generic))
}

// MockLabeledPodBounceDirectiveSet is a mock of LabeledPodBounceDirectiveSet interface
type MockLabeledPodBounceDirectiveSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledPodBounceDirectiveSetMockRecorder
}

// MockLabeledPodBounceDirectiveSetMockRecorder is the mock recorder for MockLabeledPodBounceDirectiveSet
type MockLabeledPodBounceDirectiveSetMockRecorder struct {
	mock *MockLabeledPodBounceDirectiveSet
}

// NewMockLabeledPodBounceDirectiveSet creates a new mock instance
func NewMockLabeledPodBounceDirectiveSet(ctrl *gomock.Controller) *MockLabeledPodBounceDirectiveSet {
	mock := &MockLabeledPodBounceDirectiveSet{ctrl: ctrl}
	mock.recorder = &MockLabeledPodBounceDirectiveSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledPodBounceDirectiveSet) EXPECT() *MockLabeledPodBounceDirectiveSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledPodBounceDirectiveSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledPodBounceDirectiveSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledPodBounceDirectiveSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledPodBounceDirectiveSet) Set() v1sets.PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1sets.PodBounceDirectiveSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledPodBounceDirectiveSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledPodBounceDirectiveSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledPodBounceDirectiveSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledPodBounceDirectiveSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledPodBounceDirectiveSet)(nil).Generic))
}

// MockLabeledXdsConfigSet is a mock of LabeledXdsConfigSet interface
type MockLabeledXdsConfigSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledXdsConfigSetMockRecorder
}

// MockLabeledXdsConfigSetMockRecorder is the mock recorder for MockLabeledXdsConfigSet
type MockLabeledXdsConfigSetMockRecorder struct {
	mock *MockLabeledXdsConfigSet
}

// NewMockLabeledXdsConfigSet creates a new mock instance
func NewMockLabeledXdsConfigSet(ctrl *gomock.Controller) *MockLabeledXdsConfigSet {
	mock := &MockLabeledXdsConfigSet{ctrl: ctrl}
	mock.recorder = &MockLabeledXdsConfigSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledXdsConfigSet) EXPECT() *MockLabeledXdsConfigSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledXdsConfigSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledXdsConfigSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledXdsConfigSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledXdsConfigSet) Set() v1beta1sets0.XdsConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1beta1sets0.XdsConfigSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledXdsConfigSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledXdsConfigSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledXdsConfigSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledXdsConfigSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledXdsConfigSet)(nil).Generic))
}

// MockLabeledDestinationRuleSet is a mock of LabeledDestinationRuleSet interface
type MockLabeledDestinationRuleSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledDestinationRuleSetMockRecorder
}

// MockLabeledDestinationRuleSetMockRecorder is the mock recorder for MockLabeledDestinationRuleSet
type MockLabeledDestinationRuleSetMockRecorder struct {
	mock *MockLabeledDestinationRuleSet
}

// NewMockLabeledDestinationRuleSet creates a new mock instance
func NewMockLabeledDestinationRuleSet(ctrl *gomock.Controller) *MockLabeledDestinationRuleSet {
	mock := &MockLabeledDestinationRuleSet{ctrl: ctrl}
	mock.recorder = &MockLabeledDestinationRuleSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledDestinationRuleSet) EXPECT() *MockLabeledDestinationRuleSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledDestinationRuleSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledDestinationRuleSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledDestinationRuleSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledDestinationRuleSet) Set() v1alpha3sets.DestinationRuleSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.DestinationRuleSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledDestinationRuleSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledDestinationRuleSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledDestinationRuleSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledDestinationRuleSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledDestinationRuleSet)(nil).Generic))
}

// MockLabeledEnvoyFilterSet is a mock of LabeledEnvoyFilterSet interface
type MockLabeledEnvoyFilterSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledEnvoyFilterSetMockRecorder
}

// MockLabeledEnvoyFilterSetMockRecorder is the mock recorder for MockLabeledEnvoyFilterSet
type MockLabeledEnvoyFilterSetMockRecorder struct {
	mock *MockLabeledEnvoyFilterSet
}

// NewMockLabeledEnvoyFilterSet creates a new mock instance
func NewMockLabeledEnvoyFilterSet(ctrl *gomock.Controller) *MockLabeledEnvoyFilterSet {
	mock := &MockLabeledEnvoyFilterSet{ctrl: ctrl}
	mock.recorder = &MockLabeledEnvoyFilterSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledEnvoyFilterSet) EXPECT() *MockLabeledEnvoyFilterSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledEnvoyFilterSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledEnvoyFilterSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledEnvoyFilterSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledEnvoyFilterSet) Set() v1alpha3sets.EnvoyFilterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.EnvoyFilterSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledEnvoyFilterSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledEnvoyFilterSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledEnvoyFilterSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledEnvoyFilterSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledEnvoyFilterSet)(nil).Generic))
}

// MockLabeledGatewaySet is a mock of LabeledGatewaySet interface
type MockLabeledGatewaySet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledGatewaySetMockRecorder
}

// MockLabeledGatewaySetMockRecorder is the mock recorder for MockLabeledGatewaySet
type MockLabeledGatewaySetMockRecorder struct {
	mock *MockLabeledGatewaySet
}

// NewMockLabeledGatewaySet creates a new mock instance
func NewMockLabeledGatewaySet(ctrl *gomock.Controller) *MockLabeledGatewaySet {
	mock := &MockLabeledGatewaySet{ctrl: ctrl}
	mock.recorder = &MockLabeledGatewaySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledGatewaySet) EXPECT() *MockLabeledGatewaySetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledGatewaySet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledGatewaySetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledGatewaySet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledGatewaySet) Set() v1alpha3sets.GatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.GatewaySet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledGatewaySetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledGatewaySet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledGatewaySet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledGatewaySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledGatewaySet)(nil).Generic))
}

// MockLabeledServiceEntrySet is a mock of LabeledServiceEntrySet interface
type MockLabeledServiceEntrySet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledServiceEntrySetMockRecorder
}

// MockLabeledServiceEntrySetMockRecorder is the mock recorder for MockLabeledServiceEntrySet
type MockLabeledServiceEntrySetMockRecorder struct {
	mock *MockLabeledServiceEntrySet
}

// NewMockLabeledServiceEntrySet creates a new mock instance
func NewMockLabeledServiceEntrySet(ctrl *gomock.Controller) *MockLabeledServiceEntrySet {
	mock := &MockLabeledServiceEntrySet{ctrl: ctrl}
	mock.recorder = &MockLabeledServiceEntrySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledServiceEntrySet) EXPECT() *MockLabeledServiceEntrySetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledServiceEntrySet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledServiceEntrySetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledServiceEntrySet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledServiceEntrySet) Set() v1alpha3sets.ServiceEntrySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.ServiceEntrySet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledServiceEntrySetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledServiceEntrySet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledServiceEntrySet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledServiceEntrySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledServiceEntrySet)(nil).Generic))
}

// MockLabeledVirtualServiceSet is a mock of LabeledVirtualServiceSet interface
type MockLabeledVirtualServiceSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledVirtualServiceSetMockRecorder
}

// MockLabeledVirtualServiceSetMockRecorder is the mock recorder for MockLabeledVirtualServiceSet
type MockLabeledVirtualServiceSetMockRecorder struct {
	mock *MockLabeledVirtualServiceSet
}

// NewMockLabeledVirtualServiceSet creates a new mock instance
func NewMockLabeledVirtualServiceSet(ctrl *gomock.Controller) *MockLabeledVirtualServiceSet {
	mock := &MockLabeledVirtualServiceSet{ctrl: ctrl}
	mock.recorder = &MockLabeledVirtualServiceSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledVirtualServiceSet) EXPECT() *MockLabeledVirtualServiceSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledVirtualServiceSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledVirtualServiceSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledVirtualServiceSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledVirtualServiceSet) Set() v1alpha3sets.VirtualServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.VirtualServiceSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledVirtualServiceSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledVirtualServiceSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledVirtualServiceSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledVirtualServiceSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledVirtualServiceSet)(nil).Generic))
}

// MockLabeledAuthorizationPolicySet is a mock of LabeledAuthorizationPolicySet interface
type MockLabeledAuthorizationPolicySet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledAuthorizationPolicySetMockRecorder
}

// MockLabeledAuthorizationPolicySetMockRecorder is the mock recorder for MockLabeledAuthorizationPolicySet
type MockLabeledAuthorizationPolicySetMockRecorder struct {
	mock *MockLabeledAuthorizationPolicySet
}

// NewMockLabeledAuthorizationPolicySet creates a new mock instance
func NewMockLabeledAuthorizationPolicySet(ctrl *gomock.Controller) *MockLabeledAuthorizationPolicySet {
	mock := &MockLabeledAuthorizationPolicySet{ctrl: ctrl}
	mock.recorder = &MockLabeledAuthorizationPolicySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledAuthorizationPolicySet) EXPECT() *MockLabeledAuthorizationPolicySetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledAuthorizationPolicySet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledAuthorizationPolicySetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledAuthorizationPolicySet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledAuthorizationPolicySet) Set() v1beta1sets.AuthorizationPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1beta1sets.AuthorizationPolicySet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledAuthorizationPolicySetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledAuthorizationPolicySet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledAuthorizationPolicySet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledAuthorizationPolicySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledAuthorizationPolicySet)(nil).Generic))
}

// MockBuilder is a mock of Builder interface
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// AddIssuedCertificates mocks base method
func (m *MockBuilder) AddIssuedCertificates(issuedCertificates ...*v1.IssuedCertificate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range issuedCertificates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddIssuedCertificates", varargs...)
}

// AddIssuedCertificates indicates an expected call of AddIssuedCertificates
func (mr *MockBuilderMockRecorder) AddIssuedCertificates(issuedCertificates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIssuedCertificates", reflect.TypeOf((*MockBuilder)(nil).AddIssuedCertificates), issuedCertificates...)
}

// GetIssuedCertificates mocks base method
func (m *MockBuilder) GetIssuedCertificates() v1sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuedCertificates")
	ret0, _ := ret[0].(v1sets.IssuedCertificateSet)
	return ret0
}

// GetIssuedCertificates indicates an expected call of GetIssuedCertificates
func (mr *MockBuilderMockRecorder) GetIssuedCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuedCertificates", reflect.TypeOf((*MockBuilder)(nil).GetIssuedCertificates))
}

// AddPodBounceDirectives mocks base method
func (m *MockBuilder) AddPodBounceDirectives(podBounceDirectives ...*v1.PodBounceDirective) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range podBounceDirectives {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddPodBounceDirectives", varargs...)
}

// AddPodBounceDirectives indicates an expected call of AddPodBounceDirectives
func (mr *MockBuilderMockRecorder) AddPodBounceDirectives(podBounceDirectives ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPodBounceDirectives", reflect.TypeOf((*MockBuilder)(nil).AddPodBounceDirectives), podBounceDirectives...)
}

// GetPodBounceDirectives mocks base method
func (m *MockBuilder) GetPodBounceDirectives() v1sets.PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodBounceDirectives")
	ret0, _ := ret[0].(v1sets.PodBounceDirectiveSet)
	return ret0
}

// GetPodBounceDirectives indicates an expected call of GetPodBounceDirectives
func (mr *MockBuilderMockRecorder) GetPodBounceDirectives() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodBounceDirectives", reflect.TypeOf((*MockBuilder)(nil).GetPodBounceDirectives))
}

// AddXdsConfigs mocks base method
func (m *MockBuilder) AddXdsConfigs(xdsConfigs ...*v1beta1.XdsConfig) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range xdsConfigs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddXdsConfigs", varargs...)
}

// AddXdsConfigs indicates an expected call of AddXdsConfigs
func (mr *MockBuilderMockRecorder) AddXdsConfigs(xdsConfigs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddXdsConfigs", reflect.TypeOf((*MockBuilder)(nil).AddXdsConfigs), xdsConfigs...)
}

// GetXdsConfigs mocks base method
func (m *MockBuilder) GetXdsConfigs() v1beta1sets0.XdsConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetXdsConfigs")
	ret0, _ := ret[0].(v1beta1sets0.XdsConfigSet)
	return ret0
}

// GetXdsConfigs indicates an expected call of GetXdsConfigs
func (mr *MockBuilderMockRecorder) GetXdsConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXdsConfigs", reflect.TypeOf((*MockBuilder)(nil).GetXdsConfigs))
}

// AddDestinationRules mocks base method
func (m *MockBuilder) AddDestinationRules(destinationRules ...*v1alpha3.DestinationRule) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range destinationRules {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddDestinationRules", varargs...)
}

// AddDestinationRules indicates an expected call of AddDestinationRules
func (mr *MockBuilderMockRecorder) AddDestinationRules(destinationRules ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDestinationRules", reflect.TypeOf((*MockBuilder)(nil).AddDestinationRules), destinationRules...)
}

// GetDestinationRules mocks base method
func (m *MockBuilder) GetDestinationRules() v1alpha3sets.DestinationRuleSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestinationRules")
	ret0, _ := ret[0].(v1alpha3sets.DestinationRuleSet)
	return ret0
}

// GetDestinationRules indicates an expected call of GetDestinationRules
func (mr *MockBuilderMockRecorder) GetDestinationRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationRules", reflect.TypeOf((*MockBuilder)(nil).GetDestinationRules))
}

// AddEnvoyFilters mocks base method
func (m *MockBuilder) AddEnvoyFilters(envoyFilters ...*v1alpha3.EnvoyFilter) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range envoyFilters {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddEnvoyFilters", varargs...)
}

// AddEnvoyFilters indicates an expected call of AddEnvoyFilters
func (mr *MockBuilderMockRecorder) AddEnvoyFilters(envoyFilters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEnvoyFilters", reflect.TypeOf((*MockBuilder)(nil).AddEnvoyFilters), envoyFilters...)
}

// GetEnvoyFilters mocks base method
func (m *MockBuilder) GetEnvoyFilters() v1alpha3sets.EnvoyFilterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvoyFilters")
	ret0, _ := ret[0].(v1alpha3sets.EnvoyFilterSet)
	return ret0
}

// GetEnvoyFilters indicates an expected call of GetEnvoyFilters
func (mr *MockBuilderMockRecorder) GetEnvoyFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvoyFilters", reflect.TypeOf((*MockBuilder)(nil).GetEnvoyFilters))
}

// AddGateways mocks base method
func (m *MockBuilder) AddGateways(gateways ...*v1alpha3.Gateway) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range gateways {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddGateways", varargs...)
}

// AddGateways indicates an expected call of AddGateways
func (mr *MockBuilderMockRecorder) AddGateways(gateways ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGateways", reflect.TypeOf((*MockBuilder)(nil).AddGateways), gateways...)
}

// GetGateways mocks base method
func (m *MockBuilder) GetGateways() v1alpha3sets.GatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGateways")
	ret0, _ := ret[0].(v1alpha3sets.GatewaySet)
	return ret0
}

// GetGateways indicates an expected call of GetGateways
func (mr *MockBuilderMockRecorder) GetGateways() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGateways", reflect.TypeOf((*MockBuilder)(nil).GetGateways))
}

// AddServiceEntries mocks base method
func (m *MockBuilder) AddServiceEntries(serviceEntries ...*v1alpha3.ServiceEntry) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range serviceEntries {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddServiceEntries", varargs...)
}

// AddServiceEntries indicates an expected call of AddServiceEntries
func (mr *MockBuilderMockRecorder) AddServiceEntries(serviceEntries ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceEntries", reflect.TypeOf((*MockBuilder)(nil).AddServiceEntries), serviceEntries...)
}

// GetServiceEntries mocks base method
func (m *MockBuilder) GetServiceEntries() v1alpha3sets.ServiceEntrySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceEntries")
	ret0, _ := ret[0].(v1alpha3sets.ServiceEntrySet)
	return ret0
}

// GetServiceEntries indicates an expected call of GetServiceEntries
func (mr *MockBuilderMockRecorder) GetServiceEntries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceEntries", reflect.TypeOf((*MockBuilder)(nil).GetServiceEntries))
}

// AddVirtualServices mocks base method
func (m *MockBuilder) AddVirtualServices(virtualServices ...*v1alpha3.VirtualService) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range virtualServices {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddVirtualServices", varargs...)
}

// AddVirtualServices indicates an expected call of AddVirtualServices
func (mr *MockBuilderMockRecorder) AddVirtualServices(virtualServices ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVirtualServices", reflect.TypeOf((*MockBuilder)(nil).AddVirtualServices), virtualServices...)
}

// GetVirtualServices mocks base method
func (m *MockBuilder) GetVirtualServices() v1alpha3sets.VirtualServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualServices")
	ret0, _ := ret[0].(v1alpha3sets.VirtualServiceSet)
	return ret0
}

// GetVirtualServices indicates an expected call of GetVirtualServices
func (mr *MockBuilderMockRecorder) GetVirtualServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualServices", reflect.TypeOf((*MockBuilder)(nil).GetVirtualServices))
}

// AddAuthorizationPolicies mocks base method
func (m *MockBuilder) AddAuthorizationPolicies(authorizationPolicies ...*v1beta10.AuthorizationPolicy) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range authorizationPolicies {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddAuthorizationPolicies", varargs...)
}

// AddAuthorizationPolicies indicates an expected call of AddAuthorizationPolicies
func (mr *MockBuilderMockRecorder) AddAuthorizationPolicies(authorizationPolicies ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthorizationPolicies", reflect.TypeOf((*MockBuilder)(nil).AddAuthorizationPolicies), authorizationPolicies...)
}

// GetAuthorizationPolicies mocks base method
func (m *MockBuilder) GetAuthorizationPolicies() v1beta1sets.AuthorizationPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationPolicies")
	ret0, _ := ret[0].(v1beta1sets.AuthorizationPolicySet)
	return ret0
}

// GetAuthorizationPolicies indicates an expected call of GetAuthorizationPolicies
func (mr *MockBuilderMockRecorder) GetAuthorizationPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationPolicies", reflect.TypeOf((*MockBuilder)(nil).GetAuthorizationPolicies))
}

// BuildLabelPartitionedSnapshot mocks base method
func (m *MockBuilder) BuildLabelPartitionedSnapshot(labelKey string) (istio.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildLabelPartitionedSnapshot", labelKey)
	ret0, _ := ret[0].(istio.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildLabelPartitionedSnapshot indicates an expected call of BuildLabelPartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildLabelPartitionedSnapshot(labelKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildLabelPartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildLabelPartitionedSnapshot), labelKey)
}

// BuildSinglePartitionedSnapshot mocks base method
func (m *MockBuilder) BuildSinglePartitionedSnapshot(snapshotLabels map[string]string) (istio.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSinglePartitionedSnapshot", snapshotLabels)
	ret0, _ := ret[0].(istio.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSinglePartitionedSnapshot indicates an expected call of BuildSinglePartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildSinglePartitionedSnapshot(snapshotLabels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSinglePartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildSinglePartitionedSnapshot), snapshotLabels)
}

// AddCluster mocks base method
func (m *MockBuilder) AddCluster(cluster string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCluster", cluster)
}

// AddCluster indicates an expected call of AddCluster
func (mr *MockBuilderMockRecorder) AddCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCluster", reflect.TypeOf((*MockBuilder)(nil).AddCluster), cluster)
}

// Clusters mocks base method
func (m *MockBuilder) Clusters() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clusters")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Clusters indicates an expected call of Clusters
func (mr *MockBuilderMockRecorder) Clusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clusters", reflect.TypeOf((*MockBuilder)(nil).Clusters))
}

// Merge mocks base method
func (m *MockBuilder) Merge(other istio.Builder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Merge", other)
}

// Merge indicates an expected call of Merge
func (mr *MockBuilderMockRecorder) Merge(other interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockBuilder)(nil).Merge), other)
}

// Clone mocks base method
func (m *MockBuilder) Clone() istio.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(istio.Builder)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockBuilderMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockBuilder)(nil).Clone))
}

// Delta mocks base method
func (m *MockBuilder) Delta(newSnap istio.Builder) output.SnapshotDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSnap)
	ret0, _ := ret[0].(output.SnapshotDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockBuilderMockRecorder) Delta(newSnap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockBuilder)(nil).Delta), newSnap)
}

// Generic mocks base method
func (m *MockBuilder) Generic() resource.ClusterSnapshot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(resource.ClusterSnapshot)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockBuilderMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockBuilder)(nil).Generic))
}
