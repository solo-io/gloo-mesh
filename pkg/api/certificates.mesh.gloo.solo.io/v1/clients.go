// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the certificates.mesh.gloo.solo.io/v1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the certificates.mesh.gloo.solo.io/v1 APIs
type Clientset interface {
	// clienset for the certificates.mesh.gloo.solo.io/v1/v1 APIs
	IssuedCertificates() IssuedCertificateClient
	// clienset for the certificates.mesh.gloo.solo.io/v1/v1 APIs
	CertificateRequests() CertificateRequestClient
	// clienset for the certificates.mesh.gloo.solo.io/v1/v1 APIs
	PodBounceDirectives() PodBounceDirectiveClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the certificates.mesh.gloo.solo.io/v1/v1 APIs
func (c *clientSet) IssuedCertificates() IssuedCertificateClient {
	return NewIssuedCertificateClient(c.client)
}

// clienset for the certificates.mesh.gloo.solo.io/v1/v1 APIs
func (c *clientSet) CertificateRequests() CertificateRequestClient {
	return NewCertificateRequestClient(c.client)
}

// clienset for the certificates.mesh.gloo.solo.io/v1/v1 APIs
func (c *clientSet) PodBounceDirectives() PodBounceDirectiveClient {
	return NewPodBounceDirectiveClient(c.client)
}

// Reader knows how to read and list IssuedCertificates.
type IssuedCertificateReader interface {
	// Get retrieves a IssuedCertificate for the given object key
	GetIssuedCertificate(ctx context.Context, key client.ObjectKey) (*IssuedCertificate, error)

	// List retrieves list of IssuedCertificates for a given namespace and list options.
	ListIssuedCertificate(ctx context.Context, opts ...client.ListOption) (*IssuedCertificateList, error)
}

// IssuedCertificateTransitionFunction instructs the IssuedCertificateWriter how to transition between an existing
// IssuedCertificate object and a desired on an Upsert
type IssuedCertificateTransitionFunction func(existing, desired *IssuedCertificate) error

// Writer knows how to create, delete, and update IssuedCertificates.
type IssuedCertificateWriter interface {
	// Create saves the IssuedCertificate object.
	CreateIssuedCertificate(ctx context.Context, obj *IssuedCertificate, opts ...client.CreateOption) error

	// Delete deletes the IssuedCertificate object.
	DeleteIssuedCertificate(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given IssuedCertificate object.
	UpdateIssuedCertificate(ctx context.Context, obj *IssuedCertificate, opts ...client.UpdateOption) error

	// Patch patches the given IssuedCertificate object.
	PatchIssuedCertificate(ctx context.Context, obj *IssuedCertificate, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all IssuedCertificate objects matching the given options.
	DeleteAllOfIssuedCertificate(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the IssuedCertificate object.
	UpsertIssuedCertificate(ctx context.Context, obj *IssuedCertificate, transitionFuncs ...IssuedCertificateTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a IssuedCertificate object.
type IssuedCertificateStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given IssuedCertificate object.
	UpdateIssuedCertificateStatus(ctx context.Context, obj *IssuedCertificate, opts ...client.UpdateOption) error

	// Patch patches the given IssuedCertificate object's subresource.
	PatchIssuedCertificateStatus(ctx context.Context, obj *IssuedCertificate, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on IssuedCertificates.
type IssuedCertificateClient interface {
	IssuedCertificateReader
	IssuedCertificateWriter
	IssuedCertificateStatusWriter
}

type issuedCertificateClient struct {
	client client.Client
}

func NewIssuedCertificateClient(client client.Client) *issuedCertificateClient {
	return &issuedCertificateClient{client: client}
}

func (c *issuedCertificateClient) GetIssuedCertificate(ctx context.Context, key client.ObjectKey) (*IssuedCertificate, error) {
	obj := &IssuedCertificate{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *issuedCertificateClient) ListIssuedCertificate(ctx context.Context, opts ...client.ListOption) (*IssuedCertificateList, error) {
	list := &IssuedCertificateList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *issuedCertificateClient) CreateIssuedCertificate(ctx context.Context, obj *IssuedCertificate, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *issuedCertificateClient) DeleteIssuedCertificate(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &IssuedCertificate{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *issuedCertificateClient) UpdateIssuedCertificate(ctx context.Context, obj *IssuedCertificate, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *issuedCertificateClient) PatchIssuedCertificate(ctx context.Context, obj *IssuedCertificate, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *issuedCertificateClient) DeleteAllOfIssuedCertificate(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &IssuedCertificate{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *issuedCertificateClient) UpsertIssuedCertificate(ctx context.Context, obj *IssuedCertificate, transitionFuncs ...IssuedCertificateTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*IssuedCertificate), desired.(*IssuedCertificate)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *issuedCertificateClient) UpdateIssuedCertificateStatus(ctx context.Context, obj *IssuedCertificate, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *issuedCertificateClient) PatchIssuedCertificateStatus(ctx context.Context, obj *IssuedCertificate, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides IssuedCertificateClients for multiple clusters.
type MulticlusterIssuedCertificateClient interface {
	// Cluster returns a IssuedCertificateClient for the given cluster
	Cluster(cluster string) (IssuedCertificateClient, error)
}

type multiclusterIssuedCertificateClient struct {
	client multicluster.Client
}

func NewMulticlusterIssuedCertificateClient(client multicluster.Client) MulticlusterIssuedCertificateClient {
	return &multiclusterIssuedCertificateClient{client: client}
}

func (m *multiclusterIssuedCertificateClient) Cluster(cluster string) (IssuedCertificateClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewIssuedCertificateClient(client), nil
}

// Reader knows how to read and list CertificateRequests.
type CertificateRequestReader interface {
	// Get retrieves a CertificateRequest for the given object key
	GetCertificateRequest(ctx context.Context, key client.ObjectKey) (*CertificateRequest, error)

	// List retrieves list of CertificateRequests for a given namespace and list options.
	ListCertificateRequest(ctx context.Context, opts ...client.ListOption) (*CertificateRequestList, error)
}

// CertificateRequestTransitionFunction instructs the CertificateRequestWriter how to transition between an existing
// CertificateRequest object and a desired on an Upsert
type CertificateRequestTransitionFunction func(existing, desired *CertificateRequest) error

// Writer knows how to create, delete, and update CertificateRequests.
type CertificateRequestWriter interface {
	// Create saves the CertificateRequest object.
	CreateCertificateRequest(ctx context.Context, obj *CertificateRequest, opts ...client.CreateOption) error

	// Delete deletes the CertificateRequest object.
	DeleteCertificateRequest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given CertificateRequest object.
	UpdateCertificateRequest(ctx context.Context, obj *CertificateRequest, opts ...client.UpdateOption) error

	// Patch patches the given CertificateRequest object.
	PatchCertificateRequest(ctx context.Context, obj *CertificateRequest, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all CertificateRequest objects matching the given options.
	DeleteAllOfCertificateRequest(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the CertificateRequest object.
	UpsertCertificateRequest(ctx context.Context, obj *CertificateRequest, transitionFuncs ...CertificateRequestTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a CertificateRequest object.
type CertificateRequestStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given CertificateRequest object.
	UpdateCertificateRequestStatus(ctx context.Context, obj *CertificateRequest, opts ...client.UpdateOption) error

	// Patch patches the given CertificateRequest object's subresource.
	PatchCertificateRequestStatus(ctx context.Context, obj *CertificateRequest, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on CertificateRequests.
type CertificateRequestClient interface {
	CertificateRequestReader
	CertificateRequestWriter
	CertificateRequestStatusWriter
}

type certificateRequestClient struct {
	client client.Client
}

func NewCertificateRequestClient(client client.Client) *certificateRequestClient {
	return &certificateRequestClient{client: client}
}

func (c *certificateRequestClient) GetCertificateRequest(ctx context.Context, key client.ObjectKey) (*CertificateRequest, error) {
	obj := &CertificateRequest{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *certificateRequestClient) ListCertificateRequest(ctx context.Context, opts ...client.ListOption) (*CertificateRequestList, error) {
	list := &CertificateRequestList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *certificateRequestClient) CreateCertificateRequest(ctx context.Context, obj *CertificateRequest, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *certificateRequestClient) DeleteCertificateRequest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &CertificateRequest{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *certificateRequestClient) UpdateCertificateRequest(ctx context.Context, obj *CertificateRequest, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *certificateRequestClient) PatchCertificateRequest(ctx context.Context, obj *CertificateRequest, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *certificateRequestClient) DeleteAllOfCertificateRequest(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &CertificateRequest{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *certificateRequestClient) UpsertCertificateRequest(ctx context.Context, obj *CertificateRequest, transitionFuncs ...CertificateRequestTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*CertificateRequest), desired.(*CertificateRequest)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *certificateRequestClient) UpdateCertificateRequestStatus(ctx context.Context, obj *CertificateRequest, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *certificateRequestClient) PatchCertificateRequestStatus(ctx context.Context, obj *CertificateRequest, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides CertificateRequestClients for multiple clusters.
type MulticlusterCertificateRequestClient interface {
	// Cluster returns a CertificateRequestClient for the given cluster
	Cluster(cluster string) (CertificateRequestClient, error)
}

type multiclusterCertificateRequestClient struct {
	client multicluster.Client
}

func NewMulticlusterCertificateRequestClient(client multicluster.Client) MulticlusterCertificateRequestClient {
	return &multiclusterCertificateRequestClient{client: client}
}

func (m *multiclusterCertificateRequestClient) Cluster(cluster string) (CertificateRequestClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewCertificateRequestClient(client), nil
}

// Reader knows how to read and list PodBounceDirectives.
type PodBounceDirectiveReader interface {
	// Get retrieves a PodBounceDirective for the given object key
	GetPodBounceDirective(ctx context.Context, key client.ObjectKey) (*PodBounceDirective, error)

	// List retrieves list of PodBounceDirectives for a given namespace and list options.
	ListPodBounceDirective(ctx context.Context, opts ...client.ListOption) (*PodBounceDirectiveList, error)
}

// PodBounceDirectiveTransitionFunction instructs the PodBounceDirectiveWriter how to transition between an existing
// PodBounceDirective object and a desired on an Upsert
type PodBounceDirectiveTransitionFunction func(existing, desired *PodBounceDirective) error

// Writer knows how to create, delete, and update PodBounceDirectives.
type PodBounceDirectiveWriter interface {
	// Create saves the PodBounceDirective object.
	CreatePodBounceDirective(ctx context.Context, obj *PodBounceDirective, opts ...client.CreateOption) error

	// Delete deletes the PodBounceDirective object.
	DeletePodBounceDirective(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given PodBounceDirective object.
	UpdatePodBounceDirective(ctx context.Context, obj *PodBounceDirective, opts ...client.UpdateOption) error

	// Patch patches the given PodBounceDirective object.
	PatchPodBounceDirective(ctx context.Context, obj *PodBounceDirective, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all PodBounceDirective objects matching the given options.
	DeleteAllOfPodBounceDirective(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the PodBounceDirective object.
	UpsertPodBounceDirective(ctx context.Context, obj *PodBounceDirective, transitionFuncs ...PodBounceDirectiveTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a PodBounceDirective object.
type PodBounceDirectiveStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given PodBounceDirective object.
	UpdatePodBounceDirectiveStatus(ctx context.Context, obj *PodBounceDirective, opts ...client.UpdateOption) error

	// Patch patches the given PodBounceDirective object's subresource.
	PatchPodBounceDirectiveStatus(ctx context.Context, obj *PodBounceDirective, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on PodBounceDirectives.
type PodBounceDirectiveClient interface {
	PodBounceDirectiveReader
	PodBounceDirectiveWriter
	PodBounceDirectiveStatusWriter
}

type podBounceDirectiveClient struct {
	client client.Client
}

func NewPodBounceDirectiveClient(client client.Client) *podBounceDirectiveClient {
	return &podBounceDirectiveClient{client: client}
}

func (c *podBounceDirectiveClient) GetPodBounceDirective(ctx context.Context, key client.ObjectKey) (*PodBounceDirective, error) {
	obj := &PodBounceDirective{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *podBounceDirectiveClient) ListPodBounceDirective(ctx context.Context, opts ...client.ListOption) (*PodBounceDirectiveList, error) {
	list := &PodBounceDirectiveList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *podBounceDirectiveClient) CreatePodBounceDirective(ctx context.Context, obj *PodBounceDirective, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *podBounceDirectiveClient) DeletePodBounceDirective(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &PodBounceDirective{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *podBounceDirectiveClient) UpdatePodBounceDirective(ctx context.Context, obj *PodBounceDirective, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *podBounceDirectiveClient) PatchPodBounceDirective(ctx context.Context, obj *PodBounceDirective, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *podBounceDirectiveClient) DeleteAllOfPodBounceDirective(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &PodBounceDirective{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *podBounceDirectiveClient) UpsertPodBounceDirective(ctx context.Context, obj *PodBounceDirective, transitionFuncs ...PodBounceDirectiveTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*PodBounceDirective), desired.(*PodBounceDirective)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *podBounceDirectiveClient) UpdatePodBounceDirectiveStatus(ctx context.Context, obj *PodBounceDirective, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *podBounceDirectiveClient) PatchPodBounceDirectiveStatus(ctx context.Context, obj *PodBounceDirective, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides PodBounceDirectiveClients for multiple clusters.
type MulticlusterPodBounceDirectiveClient interface {
	// Cluster returns a PodBounceDirectiveClient for the given cluster
	Cluster(cluster string) (PodBounceDirectiveClient, error)
}

type multiclusterPodBounceDirectiveClient struct {
	client multicluster.Client
}

func NewMulticlusterPodBounceDirectiveClient(client multicluster.Client) MulticlusterPodBounceDirectiveClient {
	return &multiclusterPodBounceDirectiveClient{client: client}
}

func (m *multiclusterPodBounceDirectiveClient) Cluster(cluster string) (PodBounceDirectiveClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewPodBounceDirectiveClient(client), nil
}
