// Code generated by MockGen. DO NOT EDIT.
// Source: ./sets.go

// Package mock_v1sets is a generated GoMock package.
package mock_v1sets

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1"
	v1sets "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1/sets"
	sets "github.com/solo-io/skv2/contrib/pkg/sets"
	ezkube "github.com/solo-io/skv2/pkg/ezkube"
	sets0 "k8s.io/apimachinery/pkg/util/sets"
)

// MockIssuedCertificateSet is a mock of IssuedCertificateSet interface
type MockIssuedCertificateSet struct {
	ctrl     *gomock.Controller
	recorder *MockIssuedCertificateSetMockRecorder
}

// MockIssuedCertificateSetMockRecorder is the mock recorder for MockIssuedCertificateSet
type MockIssuedCertificateSetMockRecorder struct {
	mock *MockIssuedCertificateSet
}

// NewMockIssuedCertificateSet creates a new mock instance
func NewMockIssuedCertificateSet(ctrl *gomock.Controller) *MockIssuedCertificateSet {
	mock := &MockIssuedCertificateSet{ctrl: ctrl}
	mock.recorder = &MockIssuedCertificateSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIssuedCertificateSet) EXPECT() *MockIssuedCertificateSetMockRecorder {
	return m.recorder
}

// Keys mocks base method
func (m *MockIssuedCertificateSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys
func (mr *MockIssuedCertificateSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Keys))
}

// List mocks base method
func (m *MockIssuedCertificateSet) List(filterResource ...func(*v1.IssuedCertificate) bool) []*v1.IssuedCertificate {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1.IssuedCertificate)
	return ret0
}

// List indicates an expected call of List
func (mr *MockIssuedCertificateSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIssuedCertificateSet)(nil).List), filterResource...)
}

// Map mocks base method
func (m *MockIssuedCertificateSet) Map() map[string]*v1.IssuedCertificate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1.IssuedCertificate)
	return ret0
}

// Map indicates an expected call of Map
func (mr *MockIssuedCertificateSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Map))
}

// Insert mocks base method
func (m *MockIssuedCertificateSet) Insert(issuedCertificate ...*v1.IssuedCertificate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range issuedCertificate {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert
func (mr *MockIssuedCertificateSetMockRecorder) Insert(issuedCertificate ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Insert), issuedCertificate...)
}

// Equal mocks base method
func (m *MockIssuedCertificateSet) Equal(issuedCertificateSet v1sets.IssuedCertificateSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", issuedCertificateSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockIssuedCertificateSetMockRecorder) Equal(issuedCertificateSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Equal), issuedCertificateSet)
}

// Has mocks base method
func (m *MockIssuedCertificateSet) Has(issuedCertificate ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", issuedCertificate)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockIssuedCertificateSetMockRecorder) Has(issuedCertificate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Has), issuedCertificate)
}

// Delete mocks base method
func (m *MockIssuedCertificateSet) Delete(issuedCertificate ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", issuedCertificate)
}

// Delete indicates an expected call of Delete
func (mr *MockIssuedCertificateSetMockRecorder) Delete(issuedCertificate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Delete), issuedCertificate)
}

// Union mocks base method
func (m *MockIssuedCertificateSet) Union(set v1sets.IssuedCertificateSet) v1sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1sets.IssuedCertificateSet)
	return ret0
}

// Union indicates an expected call of Union
func (mr *MockIssuedCertificateSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Union), set)
}

// Difference mocks base method
func (m *MockIssuedCertificateSet) Difference(set v1sets.IssuedCertificateSet) v1sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1sets.IssuedCertificateSet)
	return ret0
}

// Difference indicates an expected call of Difference
func (mr *MockIssuedCertificateSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Difference), set)
}

// Intersection mocks base method
func (m *MockIssuedCertificateSet) Intersection(set v1sets.IssuedCertificateSet) v1sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1sets.IssuedCertificateSet)
	return ret0
}

// Intersection indicates an expected call of Intersection
func (mr *MockIssuedCertificateSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Intersection), set)
}

// Find mocks base method
func (m *MockIssuedCertificateSet) Find(id ezkube.ResourceId) (*v1.IssuedCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1.IssuedCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockIssuedCertificateSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Find), id)
}

// Length mocks base method
func (m *MockIssuedCertificateSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockIssuedCertificateSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Length))
}

// Generic mocks base method
func (m *MockIssuedCertificateSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockIssuedCertificateSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Generic))
}

// Delta mocks base method
func (m *MockIssuedCertificateSet) Delta(newSet v1sets.IssuedCertificateSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockIssuedCertificateSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockIssuedCertificateSet)(nil).Delta), newSet)
}

// MockCertificateRequestSet is a mock of CertificateRequestSet interface
type MockCertificateRequestSet struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestSetMockRecorder
}

// MockCertificateRequestSetMockRecorder is the mock recorder for MockCertificateRequestSet
type MockCertificateRequestSetMockRecorder struct {
	mock *MockCertificateRequestSet
}

// NewMockCertificateRequestSet creates a new mock instance
func NewMockCertificateRequestSet(ctrl *gomock.Controller) *MockCertificateRequestSet {
	mock := &MockCertificateRequestSet{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertificateRequestSet) EXPECT() *MockCertificateRequestSetMockRecorder {
	return m.recorder
}

// Keys mocks base method
func (m *MockCertificateRequestSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys
func (mr *MockCertificateRequestSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockCertificateRequestSet)(nil).Keys))
}

// List mocks base method
func (m *MockCertificateRequestSet) List(filterResource ...func(*v1.CertificateRequest) bool) []*v1.CertificateRequest {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1.CertificateRequest)
	return ret0
}

// List indicates an expected call of List
func (mr *MockCertificateRequestSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCertificateRequestSet)(nil).List), filterResource...)
}

// Map mocks base method
func (m *MockCertificateRequestSet) Map() map[string]*v1.CertificateRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1.CertificateRequest)
	return ret0
}

// Map indicates an expected call of Map
func (mr *MockCertificateRequestSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockCertificateRequestSet)(nil).Map))
}

// Insert mocks base method
func (m *MockCertificateRequestSet) Insert(certificateRequest ...*v1.CertificateRequest) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range certificateRequest {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert
func (mr *MockCertificateRequestSetMockRecorder) Insert(certificateRequest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCertificateRequestSet)(nil).Insert), certificateRequest...)
}

// Equal mocks base method
func (m *MockCertificateRequestSet) Equal(certificateRequestSet v1sets.CertificateRequestSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", certificateRequestSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockCertificateRequestSetMockRecorder) Equal(certificateRequestSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockCertificateRequestSet)(nil).Equal), certificateRequestSet)
}

// Has mocks base method
func (m *MockCertificateRequestSet) Has(certificateRequest ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", certificateRequest)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockCertificateRequestSetMockRecorder) Has(certificateRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockCertificateRequestSet)(nil).Has), certificateRequest)
}

// Delete mocks base method
func (m *MockCertificateRequestSet) Delete(certificateRequest ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", certificateRequest)
}

// Delete indicates an expected call of Delete
func (mr *MockCertificateRequestSetMockRecorder) Delete(certificateRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCertificateRequestSet)(nil).Delete), certificateRequest)
}

// Union mocks base method
func (m *MockCertificateRequestSet) Union(set v1sets.CertificateRequestSet) v1sets.CertificateRequestSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1sets.CertificateRequestSet)
	return ret0
}

// Union indicates an expected call of Union
func (mr *MockCertificateRequestSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockCertificateRequestSet)(nil).Union), set)
}

// Difference mocks base method
func (m *MockCertificateRequestSet) Difference(set v1sets.CertificateRequestSet) v1sets.CertificateRequestSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1sets.CertificateRequestSet)
	return ret0
}

// Difference indicates an expected call of Difference
func (mr *MockCertificateRequestSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockCertificateRequestSet)(nil).Difference), set)
}

// Intersection mocks base method
func (m *MockCertificateRequestSet) Intersection(set v1sets.CertificateRequestSet) v1sets.CertificateRequestSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1sets.CertificateRequestSet)
	return ret0
}

// Intersection indicates an expected call of Intersection
func (mr *MockCertificateRequestSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockCertificateRequestSet)(nil).Intersection), set)
}

// Find mocks base method
func (m *MockCertificateRequestSet) Find(id ezkube.ResourceId) (*v1.CertificateRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1.CertificateRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockCertificateRequestSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCertificateRequestSet)(nil).Find), id)
}

// Length mocks base method
func (m *MockCertificateRequestSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockCertificateRequestSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockCertificateRequestSet)(nil).Length))
}

// Generic mocks base method
func (m *MockCertificateRequestSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockCertificateRequestSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockCertificateRequestSet)(nil).Generic))
}

// Delta mocks base method
func (m *MockCertificateRequestSet) Delta(newSet v1sets.CertificateRequestSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockCertificateRequestSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockCertificateRequestSet)(nil).Delta), newSet)
}

// MockPodBounceDirectiveSet is a mock of PodBounceDirectiveSet interface
type MockPodBounceDirectiveSet struct {
	ctrl     *gomock.Controller
	recorder *MockPodBounceDirectiveSetMockRecorder
}

// MockPodBounceDirectiveSetMockRecorder is the mock recorder for MockPodBounceDirectiveSet
type MockPodBounceDirectiveSetMockRecorder struct {
	mock *MockPodBounceDirectiveSet
}

// NewMockPodBounceDirectiveSet creates a new mock instance
func NewMockPodBounceDirectiveSet(ctrl *gomock.Controller) *MockPodBounceDirectiveSet {
	mock := &MockPodBounceDirectiveSet{ctrl: ctrl}
	mock.recorder = &MockPodBounceDirectiveSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPodBounceDirectiveSet) EXPECT() *MockPodBounceDirectiveSetMockRecorder {
	return m.recorder
}

// Keys mocks base method
func (m *MockPodBounceDirectiveSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys
func (mr *MockPodBounceDirectiveSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Keys))
}

// List mocks base method
func (m *MockPodBounceDirectiveSet) List(filterResource ...func(*v1.PodBounceDirective) bool) []*v1.PodBounceDirective {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1.PodBounceDirective)
	return ret0
}

// List indicates an expected call of List
func (mr *MockPodBounceDirectiveSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).List), filterResource...)
}

// Map mocks base method
func (m *MockPodBounceDirectiveSet) Map() map[string]*v1.PodBounceDirective {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1.PodBounceDirective)
	return ret0
}

// Map indicates an expected call of Map
func (mr *MockPodBounceDirectiveSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Map))
}

// Insert mocks base method
func (m *MockPodBounceDirectiveSet) Insert(podBounceDirective ...*v1.PodBounceDirective) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range podBounceDirective {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert
func (mr *MockPodBounceDirectiveSetMockRecorder) Insert(podBounceDirective ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Insert), podBounceDirective...)
}

// Equal mocks base method
func (m *MockPodBounceDirectiveSet) Equal(podBounceDirectiveSet v1sets.PodBounceDirectiveSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", podBounceDirectiveSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockPodBounceDirectiveSetMockRecorder) Equal(podBounceDirectiveSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Equal), podBounceDirectiveSet)
}

// Has mocks base method
func (m *MockPodBounceDirectiveSet) Has(podBounceDirective ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", podBounceDirective)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockPodBounceDirectiveSetMockRecorder) Has(podBounceDirective interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Has), podBounceDirective)
}

// Delete mocks base method
func (m *MockPodBounceDirectiveSet) Delete(podBounceDirective ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", podBounceDirective)
}

// Delete indicates an expected call of Delete
func (mr *MockPodBounceDirectiveSetMockRecorder) Delete(podBounceDirective interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Delete), podBounceDirective)
}

// Union mocks base method
func (m *MockPodBounceDirectiveSet) Union(set v1sets.PodBounceDirectiveSet) v1sets.PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1sets.PodBounceDirectiveSet)
	return ret0
}

// Union indicates an expected call of Union
func (mr *MockPodBounceDirectiveSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Union), set)
}

// Difference mocks base method
func (m *MockPodBounceDirectiveSet) Difference(set v1sets.PodBounceDirectiveSet) v1sets.PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1sets.PodBounceDirectiveSet)
	return ret0
}

// Difference indicates an expected call of Difference
func (mr *MockPodBounceDirectiveSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Difference), set)
}

// Intersection mocks base method
func (m *MockPodBounceDirectiveSet) Intersection(set v1sets.PodBounceDirectiveSet) v1sets.PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1sets.PodBounceDirectiveSet)
	return ret0
}

// Intersection indicates an expected call of Intersection
func (mr *MockPodBounceDirectiveSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Intersection), set)
}

// Find mocks base method
func (m *MockPodBounceDirectiveSet) Find(id ezkube.ResourceId) (*v1.PodBounceDirective, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1.PodBounceDirective)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockPodBounceDirectiveSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Find), id)
}

// Length mocks base method
func (m *MockPodBounceDirectiveSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockPodBounceDirectiveSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Length))
}

// Generic mocks base method
func (m *MockPodBounceDirectiveSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockPodBounceDirectiveSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Generic))
}

// Delta mocks base method
func (m *MockPodBounceDirectiveSet) Delta(newSet v1sets.PodBounceDirectiveSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockPodBounceDirectiveSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockPodBounceDirectiveSet)(nil).Delta), newSet)
}
