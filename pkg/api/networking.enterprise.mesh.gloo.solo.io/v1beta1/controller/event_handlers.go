// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	networking_enterprise_mesh_gloo_solo_io_v1beta1 "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the WasmDeployment Resource
// DEPRECATED: Prefer reconciler pattern.
type WasmDeploymentEventHandler interface {
	CreateWasmDeployment(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment) error
	UpdateWasmDeployment(old, new *networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment) error
	DeleteWasmDeployment(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment) error
	GenericWasmDeployment(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment) error
}

type WasmDeploymentEventHandlerFuncs struct {
	OnCreate  func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment) error
	OnUpdate  func(old, new *networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment) error
	OnDelete  func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment) error
	OnGeneric func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment) error
}

func (f *WasmDeploymentEventHandlerFuncs) CreateWasmDeployment(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *WasmDeploymentEventHandlerFuncs) DeleteWasmDeployment(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *WasmDeploymentEventHandlerFuncs) UpdateWasmDeployment(objOld, objNew *networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *WasmDeploymentEventHandlerFuncs) GenericWasmDeployment(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type WasmDeploymentEventWatcher interface {
	AddEventHandler(ctx context.Context, h WasmDeploymentEventHandler, predicates ...predicate.Predicate) error
}

type wasmDeploymentEventWatcher struct {
	watcher events.EventWatcher
}

func NewWasmDeploymentEventWatcher(name string, mgr manager.Manager) WasmDeploymentEventWatcher {
	return &wasmDeploymentEventWatcher{
		watcher: events.NewWatcher(name, mgr, &networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment{}),
	}
}

func (c *wasmDeploymentEventWatcher) AddEventHandler(ctx context.Context, h WasmDeploymentEventHandler, predicates ...predicate.Predicate) error {
	handler := genericWasmDeploymentHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericWasmDeploymentHandler implements a generic events.EventHandler
type genericWasmDeploymentHandler struct {
	handler WasmDeploymentEventHandler
}

func (h genericWasmDeploymentHandler) Create(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment)
	if !ok {
		return errors.Errorf("internal error: WasmDeployment handler received event for %T", object)
	}
	return h.handler.CreateWasmDeployment(obj)
}

func (h genericWasmDeploymentHandler) Delete(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment)
	if !ok {
		return errors.Errorf("internal error: WasmDeployment handler received event for %T", object)
	}
	return h.handler.DeleteWasmDeployment(obj)
}

func (h genericWasmDeploymentHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment)
	if !ok {
		return errors.Errorf("internal error: WasmDeployment handler received event for %T", old)
	}
	objNew, ok := new.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment)
	if !ok {
		return errors.Errorf("internal error: WasmDeployment handler received event for %T", new)
	}
	return h.handler.UpdateWasmDeployment(objOld, objNew)
}

func (h genericWasmDeploymentHandler) Generic(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment)
	if !ok {
		return errors.Errorf("internal error: WasmDeployment handler received event for %T", object)
	}
	return h.handler.GenericWasmDeployment(obj)
}

// Handle events for the RateLimiterServerConfig Resource
// DEPRECATED: Prefer reconciler pattern.
type RateLimiterServerConfigEventHandler interface {
	CreateRateLimiterServerConfig(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig) error
	UpdateRateLimiterServerConfig(old, new *networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig) error
	DeleteRateLimiterServerConfig(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig) error
	GenericRateLimiterServerConfig(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig) error
}

type RateLimiterServerConfigEventHandlerFuncs struct {
	OnCreate  func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig) error
	OnUpdate  func(old, new *networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig) error
	OnDelete  func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig) error
	OnGeneric func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig) error
}

func (f *RateLimiterServerConfigEventHandlerFuncs) CreateRateLimiterServerConfig(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *RateLimiterServerConfigEventHandlerFuncs) DeleteRateLimiterServerConfig(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *RateLimiterServerConfigEventHandlerFuncs) UpdateRateLimiterServerConfig(objOld, objNew *networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *RateLimiterServerConfigEventHandlerFuncs) GenericRateLimiterServerConfig(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type RateLimiterServerConfigEventWatcher interface {
	AddEventHandler(ctx context.Context, h RateLimiterServerConfigEventHandler, predicates ...predicate.Predicate) error
}

type rateLimiterServerConfigEventWatcher struct {
	watcher events.EventWatcher
}

func NewRateLimiterServerConfigEventWatcher(name string, mgr manager.Manager) RateLimiterServerConfigEventWatcher {
	return &rateLimiterServerConfigEventWatcher{
		watcher: events.NewWatcher(name, mgr, &networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig{}),
	}
}

func (c *rateLimiterServerConfigEventWatcher) AddEventHandler(ctx context.Context, h RateLimiterServerConfigEventHandler, predicates ...predicate.Predicate) error {
	handler := genericRateLimiterServerConfigHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericRateLimiterServerConfigHandler implements a generic events.EventHandler
type genericRateLimiterServerConfigHandler struct {
	handler RateLimiterServerConfigEventHandler
}

func (h genericRateLimiterServerConfigHandler) Create(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig)
	if !ok {
		return errors.Errorf("internal error: RateLimiterServerConfig handler received event for %T", object)
	}
	return h.handler.CreateRateLimiterServerConfig(obj)
}

func (h genericRateLimiterServerConfigHandler) Delete(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig)
	if !ok {
		return errors.Errorf("internal error: RateLimiterServerConfig handler received event for %T", object)
	}
	return h.handler.DeleteRateLimiterServerConfig(obj)
}

func (h genericRateLimiterServerConfigHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig)
	if !ok {
		return errors.Errorf("internal error: RateLimiterServerConfig handler received event for %T", old)
	}
	objNew, ok := new.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig)
	if !ok {
		return errors.Errorf("internal error: RateLimiterServerConfig handler received event for %T", new)
	}
	return h.handler.UpdateRateLimiterServerConfig(objOld, objNew)
}

func (h genericRateLimiterServerConfigHandler) Generic(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.RateLimiterServerConfig)
	if !ok {
		return errors.Errorf("internal error: RateLimiterServerConfig handler received event for %T", object)
	}
	return h.handler.GenericRateLimiterServerConfig(obj)
}

// Handle events for the VirtualDestination Resource
// DEPRECATED: Prefer reconciler pattern.
type VirtualDestinationEventHandler interface {
	CreateVirtualDestination(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination) error
	UpdateVirtualDestination(old, new *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination) error
	DeleteVirtualDestination(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination) error
	GenericVirtualDestination(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination) error
}

type VirtualDestinationEventHandlerFuncs struct {
	OnCreate  func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination) error
	OnUpdate  func(old, new *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination) error
	OnDelete  func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination) error
	OnGeneric func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination) error
}

func (f *VirtualDestinationEventHandlerFuncs) CreateVirtualDestination(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *VirtualDestinationEventHandlerFuncs) DeleteVirtualDestination(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *VirtualDestinationEventHandlerFuncs) UpdateVirtualDestination(objOld, objNew *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *VirtualDestinationEventHandlerFuncs) GenericVirtualDestination(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type VirtualDestinationEventWatcher interface {
	AddEventHandler(ctx context.Context, h VirtualDestinationEventHandler, predicates ...predicate.Predicate) error
}

type virtualDestinationEventWatcher struct {
	watcher events.EventWatcher
}

func NewVirtualDestinationEventWatcher(name string, mgr manager.Manager) VirtualDestinationEventWatcher {
	return &virtualDestinationEventWatcher{
		watcher: events.NewWatcher(name, mgr, &networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination{}),
	}
}

func (c *virtualDestinationEventWatcher) AddEventHandler(ctx context.Context, h VirtualDestinationEventHandler, predicates ...predicate.Predicate) error {
	handler := genericVirtualDestinationHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericVirtualDestinationHandler implements a generic events.EventHandler
type genericVirtualDestinationHandler struct {
	handler VirtualDestinationEventHandler
}

func (h genericVirtualDestinationHandler) Create(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination)
	if !ok {
		return errors.Errorf("internal error: VirtualDestination handler received event for %T", object)
	}
	return h.handler.CreateVirtualDestination(obj)
}

func (h genericVirtualDestinationHandler) Delete(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination)
	if !ok {
		return errors.Errorf("internal error: VirtualDestination handler received event for %T", object)
	}
	return h.handler.DeleteVirtualDestination(obj)
}

func (h genericVirtualDestinationHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination)
	if !ok {
		return errors.Errorf("internal error: VirtualDestination handler received event for %T", old)
	}
	objNew, ok := new.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination)
	if !ok {
		return errors.Errorf("internal error: VirtualDestination handler received event for %T", new)
	}
	return h.handler.UpdateVirtualDestination(objOld, objNew)
}

func (h genericVirtualDestinationHandler) Generic(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination)
	if !ok {
		return errors.Errorf("internal error: VirtualDestination handler received event for %T", object)
	}
	return h.handler.GenericVirtualDestination(obj)
}

// Handle events for the VirtualGateway Resource
// DEPRECATED: Prefer reconciler pattern.
type VirtualGatewayEventHandler interface {
	CreateVirtualGateway(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway) error
	UpdateVirtualGateway(old, new *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway) error
	DeleteVirtualGateway(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway) error
	GenericVirtualGateway(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway) error
}

type VirtualGatewayEventHandlerFuncs struct {
	OnCreate  func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway) error
	OnUpdate  func(old, new *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway) error
	OnDelete  func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway) error
	OnGeneric func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway) error
}

func (f *VirtualGatewayEventHandlerFuncs) CreateVirtualGateway(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *VirtualGatewayEventHandlerFuncs) DeleteVirtualGateway(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *VirtualGatewayEventHandlerFuncs) UpdateVirtualGateway(objOld, objNew *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *VirtualGatewayEventHandlerFuncs) GenericVirtualGateway(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type VirtualGatewayEventWatcher interface {
	AddEventHandler(ctx context.Context, h VirtualGatewayEventHandler, predicates ...predicate.Predicate) error
}

type virtualGatewayEventWatcher struct {
	watcher events.EventWatcher
}

func NewVirtualGatewayEventWatcher(name string, mgr manager.Manager) VirtualGatewayEventWatcher {
	return &virtualGatewayEventWatcher{
		watcher: events.NewWatcher(name, mgr, &networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway{}),
	}
}

func (c *virtualGatewayEventWatcher) AddEventHandler(ctx context.Context, h VirtualGatewayEventHandler, predicates ...predicate.Predicate) error {
	handler := genericVirtualGatewayHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericVirtualGatewayHandler implements a generic events.EventHandler
type genericVirtualGatewayHandler struct {
	handler VirtualGatewayEventHandler
}

func (h genericVirtualGatewayHandler) Create(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway)
	if !ok {
		return errors.Errorf("internal error: VirtualGateway handler received event for %T", object)
	}
	return h.handler.CreateVirtualGateway(obj)
}

func (h genericVirtualGatewayHandler) Delete(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway)
	if !ok {
		return errors.Errorf("internal error: VirtualGateway handler received event for %T", object)
	}
	return h.handler.DeleteVirtualGateway(obj)
}

func (h genericVirtualGatewayHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway)
	if !ok {
		return errors.Errorf("internal error: VirtualGateway handler received event for %T", old)
	}
	objNew, ok := new.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway)
	if !ok {
		return errors.Errorf("internal error: VirtualGateway handler received event for %T", new)
	}
	return h.handler.UpdateVirtualGateway(objOld, objNew)
}

func (h genericVirtualGatewayHandler) Generic(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualGateway)
	if !ok {
		return errors.Errorf("internal error: VirtualGateway handler received event for %T", object)
	}
	return h.handler.GenericVirtualGateway(obj)
}

// Handle events for the VirtualHost Resource
// DEPRECATED: Prefer reconciler pattern.
type VirtualHostEventHandler interface {
	CreateVirtualHost(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost) error
	UpdateVirtualHost(old, new *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost) error
	DeleteVirtualHost(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost) error
	GenericVirtualHost(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost) error
}

type VirtualHostEventHandlerFuncs struct {
	OnCreate  func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost) error
	OnUpdate  func(old, new *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost) error
	OnDelete  func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost) error
	OnGeneric func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost) error
}

func (f *VirtualHostEventHandlerFuncs) CreateVirtualHost(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *VirtualHostEventHandlerFuncs) DeleteVirtualHost(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *VirtualHostEventHandlerFuncs) UpdateVirtualHost(objOld, objNew *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *VirtualHostEventHandlerFuncs) GenericVirtualHost(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type VirtualHostEventWatcher interface {
	AddEventHandler(ctx context.Context, h VirtualHostEventHandler, predicates ...predicate.Predicate) error
}

type virtualHostEventWatcher struct {
	watcher events.EventWatcher
}

func NewVirtualHostEventWatcher(name string, mgr manager.Manager) VirtualHostEventWatcher {
	return &virtualHostEventWatcher{
		watcher: events.NewWatcher(name, mgr, &networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost{}),
	}
}

func (c *virtualHostEventWatcher) AddEventHandler(ctx context.Context, h VirtualHostEventHandler, predicates ...predicate.Predicate) error {
	handler := genericVirtualHostHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericVirtualHostHandler implements a generic events.EventHandler
type genericVirtualHostHandler struct {
	handler VirtualHostEventHandler
}

func (h genericVirtualHostHandler) Create(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost)
	if !ok {
		return errors.Errorf("internal error: VirtualHost handler received event for %T", object)
	}
	return h.handler.CreateVirtualHost(obj)
}

func (h genericVirtualHostHandler) Delete(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost)
	if !ok {
		return errors.Errorf("internal error: VirtualHost handler received event for %T", object)
	}
	return h.handler.DeleteVirtualHost(obj)
}

func (h genericVirtualHostHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost)
	if !ok {
		return errors.Errorf("internal error: VirtualHost handler received event for %T", old)
	}
	objNew, ok := new.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost)
	if !ok {
		return errors.Errorf("internal error: VirtualHost handler received event for %T", new)
	}
	return h.handler.UpdateVirtualHost(objOld, objNew)
}

func (h genericVirtualHostHandler) Generic(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualHost)
	if !ok {
		return errors.Errorf("internal error: VirtualHost handler received event for %T", object)
	}
	return h.handler.GenericVirtualHost(obj)
}

// Handle events for the RouteTable Resource
// DEPRECATED: Prefer reconciler pattern.
type RouteTableEventHandler interface {
	CreateRouteTable(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable) error
	UpdateRouteTable(old, new *networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable) error
	DeleteRouteTable(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable) error
	GenericRouteTable(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable) error
}

type RouteTableEventHandlerFuncs struct {
	OnCreate  func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable) error
	OnUpdate  func(old, new *networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable) error
	OnDelete  func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable) error
	OnGeneric func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable) error
}

func (f *RouteTableEventHandlerFuncs) CreateRouteTable(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *RouteTableEventHandlerFuncs) DeleteRouteTable(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *RouteTableEventHandlerFuncs) UpdateRouteTable(objOld, objNew *networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *RouteTableEventHandlerFuncs) GenericRouteTable(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type RouteTableEventWatcher interface {
	AddEventHandler(ctx context.Context, h RouteTableEventHandler, predicates ...predicate.Predicate) error
}

type routeTableEventWatcher struct {
	watcher events.EventWatcher
}

func NewRouteTableEventWatcher(name string, mgr manager.Manager) RouteTableEventWatcher {
	return &routeTableEventWatcher{
		watcher: events.NewWatcher(name, mgr, &networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable{}),
	}
}

func (c *routeTableEventWatcher) AddEventHandler(ctx context.Context, h RouteTableEventHandler, predicates ...predicate.Predicate) error {
	handler := genericRouteTableHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericRouteTableHandler implements a generic events.EventHandler
type genericRouteTableHandler struct {
	handler RouteTableEventHandler
}

func (h genericRouteTableHandler) Create(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable)
	if !ok {
		return errors.Errorf("internal error: RouteTable handler received event for %T", object)
	}
	return h.handler.CreateRouteTable(obj)
}

func (h genericRouteTableHandler) Delete(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable)
	if !ok {
		return errors.Errorf("internal error: RouteTable handler received event for %T", object)
	}
	return h.handler.DeleteRouteTable(obj)
}

func (h genericRouteTableHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable)
	if !ok {
		return errors.Errorf("internal error: RouteTable handler received event for %T", old)
	}
	objNew, ok := new.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable)
	if !ok {
		return errors.Errorf("internal error: RouteTable handler received event for %T", new)
	}
	return h.handler.UpdateRouteTable(objOld, objNew)
}

func (h genericRouteTableHandler) Generic(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable)
	if !ok {
		return errors.Errorf("internal error: RouteTable handler received event for %T", object)
	}
	return h.handler.GenericRouteTable(obj)
}

// Handle events for the ServiceDependency Resource
// DEPRECATED: Prefer reconciler pattern.
type ServiceDependencyEventHandler interface {
	CreateServiceDependency(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency) error
	UpdateServiceDependency(old, new *networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency) error
	DeleteServiceDependency(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency) error
	GenericServiceDependency(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency) error
}

type ServiceDependencyEventHandlerFuncs struct {
	OnCreate  func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency) error
	OnUpdate  func(old, new *networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency) error
	OnDelete  func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency) error
	OnGeneric func(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency) error
}

func (f *ServiceDependencyEventHandlerFuncs) CreateServiceDependency(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *ServiceDependencyEventHandlerFuncs) DeleteServiceDependency(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *ServiceDependencyEventHandlerFuncs) UpdateServiceDependency(objOld, objNew *networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *ServiceDependencyEventHandlerFuncs) GenericServiceDependency(obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type ServiceDependencyEventWatcher interface {
	AddEventHandler(ctx context.Context, h ServiceDependencyEventHandler, predicates ...predicate.Predicate) error
}

type serviceDependencyEventWatcher struct {
	watcher events.EventWatcher
}

func NewServiceDependencyEventWatcher(name string, mgr manager.Manager) ServiceDependencyEventWatcher {
	return &serviceDependencyEventWatcher{
		watcher: events.NewWatcher(name, mgr, &networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency{}),
	}
}

func (c *serviceDependencyEventWatcher) AddEventHandler(ctx context.Context, h ServiceDependencyEventHandler, predicates ...predicate.Predicate) error {
	handler := genericServiceDependencyHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericServiceDependencyHandler implements a generic events.EventHandler
type genericServiceDependencyHandler struct {
	handler ServiceDependencyEventHandler
}

func (h genericServiceDependencyHandler) Create(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency)
	if !ok {
		return errors.Errorf("internal error: ServiceDependency handler received event for %T", object)
	}
	return h.handler.CreateServiceDependency(obj)
}

func (h genericServiceDependencyHandler) Delete(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency)
	if !ok {
		return errors.Errorf("internal error: ServiceDependency handler received event for %T", object)
	}
	return h.handler.DeleteServiceDependency(obj)
}

func (h genericServiceDependencyHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency)
	if !ok {
		return errors.Errorf("internal error: ServiceDependency handler received event for %T", old)
	}
	objNew, ok := new.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency)
	if !ok {
		return errors.Errorf("internal error: ServiceDependency handler received event for %T", new)
	}
	return h.handler.UpdateServiceDependency(objOld, objNew)
}

func (h genericServiceDependencyHandler) Generic(object client.Object) error {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.ServiceDependency)
	if !ok {
		return errors.Errorf("internal error: ServiceDependency handler received event for %T", object)
	}
	return h.handler.GenericServiceDependency(obj)
}
