// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1"
	controller "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterWasmDeploymentReconciler is a mock of MulticlusterWasmDeploymentReconciler interface
type MockMulticlusterWasmDeploymentReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWasmDeploymentReconcilerMockRecorder
}

// MockMulticlusterWasmDeploymentReconcilerMockRecorder is the mock recorder for MockMulticlusterWasmDeploymentReconciler
type MockMulticlusterWasmDeploymentReconcilerMockRecorder struct {
	mock *MockMulticlusterWasmDeploymentReconciler
}

// NewMockMulticlusterWasmDeploymentReconciler creates a new mock instance
func NewMockMulticlusterWasmDeploymentReconciler(ctrl *gomock.Controller) *MockMulticlusterWasmDeploymentReconciler {
	mock := &MockMulticlusterWasmDeploymentReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWasmDeploymentReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterWasmDeploymentReconciler) EXPECT() *MockMulticlusterWasmDeploymentReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWasmDeployment mocks base method
func (m *MockMulticlusterWasmDeploymentReconciler) ReconcileWasmDeployment(clusterName string, obj *v1beta1.WasmDeployment) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWasmDeployment", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWasmDeployment indicates an expected call of ReconcileWasmDeployment
func (mr *MockMulticlusterWasmDeploymentReconcilerMockRecorder) ReconcileWasmDeployment(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWasmDeployment", reflect.TypeOf((*MockMulticlusterWasmDeploymentReconciler)(nil).ReconcileWasmDeployment), clusterName, obj)
}

// MockMulticlusterWasmDeploymentDeletionReconciler is a mock of MulticlusterWasmDeploymentDeletionReconciler interface
type MockMulticlusterWasmDeploymentDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder
}

// MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterWasmDeploymentDeletionReconciler
type MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterWasmDeploymentDeletionReconciler
}

// NewMockMulticlusterWasmDeploymentDeletionReconciler creates a new mock instance
func NewMockMulticlusterWasmDeploymentDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterWasmDeploymentDeletionReconciler {
	mock := &MockMulticlusterWasmDeploymentDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterWasmDeploymentDeletionReconciler) EXPECT() *MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWasmDeploymentDeletion mocks base method
func (m *MockMulticlusterWasmDeploymentDeletionReconciler) ReconcileWasmDeploymentDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWasmDeploymentDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileWasmDeploymentDeletion indicates an expected call of ReconcileWasmDeploymentDeletion
func (mr *MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder) ReconcileWasmDeploymentDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWasmDeploymentDeletion", reflect.TypeOf((*MockMulticlusterWasmDeploymentDeletionReconciler)(nil).ReconcileWasmDeploymentDeletion), clusterName, req)
}

// MockMulticlusterWasmDeploymentReconcileLoop is a mock of MulticlusterWasmDeploymentReconcileLoop interface
type MockMulticlusterWasmDeploymentReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWasmDeploymentReconcileLoopMockRecorder
}

// MockMulticlusterWasmDeploymentReconcileLoopMockRecorder is the mock recorder for MockMulticlusterWasmDeploymentReconcileLoop
type MockMulticlusterWasmDeploymentReconcileLoopMockRecorder struct {
	mock *MockMulticlusterWasmDeploymentReconcileLoop
}

// NewMockMulticlusterWasmDeploymentReconcileLoop creates a new mock instance
func NewMockMulticlusterWasmDeploymentReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterWasmDeploymentReconcileLoop {
	mock := &MockMulticlusterWasmDeploymentReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWasmDeploymentReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterWasmDeploymentReconcileLoop) EXPECT() *MockMulticlusterWasmDeploymentReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterWasmDeploymentReconciler mocks base method
func (m *MockMulticlusterWasmDeploymentReconcileLoop) AddMulticlusterWasmDeploymentReconciler(ctx context.Context, rec controller.MulticlusterWasmDeploymentReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterWasmDeploymentReconciler", varargs...)
}

// AddMulticlusterWasmDeploymentReconciler indicates an expected call of AddMulticlusterWasmDeploymentReconciler
func (mr *MockMulticlusterWasmDeploymentReconcileLoopMockRecorder) AddMulticlusterWasmDeploymentReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterWasmDeploymentReconciler", reflect.TypeOf((*MockMulticlusterWasmDeploymentReconcileLoop)(nil).AddMulticlusterWasmDeploymentReconciler), varargs...)
}

// MockMulticlusterVirtualDestinationReconciler is a mock of MulticlusterVirtualDestinationReconciler interface
type MockMulticlusterVirtualDestinationReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualDestinationReconcilerMockRecorder
}

// MockMulticlusterVirtualDestinationReconcilerMockRecorder is the mock recorder for MockMulticlusterVirtualDestinationReconciler
type MockMulticlusterVirtualDestinationReconcilerMockRecorder struct {
	mock *MockMulticlusterVirtualDestinationReconciler
}

// NewMockMulticlusterVirtualDestinationReconciler creates a new mock instance
func NewMockMulticlusterVirtualDestinationReconciler(ctrl *gomock.Controller) *MockMulticlusterVirtualDestinationReconciler {
	mock := &MockMulticlusterVirtualDestinationReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualDestinationReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterVirtualDestinationReconciler) EXPECT() *MockMulticlusterVirtualDestinationReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualDestination mocks base method
func (m *MockMulticlusterVirtualDestinationReconciler) ReconcileVirtualDestination(clusterName string, obj *v1beta1.VirtualDestination) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualDestination", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualDestination indicates an expected call of ReconcileVirtualDestination
func (mr *MockMulticlusterVirtualDestinationReconcilerMockRecorder) ReconcileVirtualDestination(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualDestination", reflect.TypeOf((*MockMulticlusterVirtualDestinationReconciler)(nil).ReconcileVirtualDestination), clusterName, obj)
}

// MockMulticlusterVirtualDestinationDeletionReconciler is a mock of MulticlusterVirtualDestinationDeletionReconciler interface
type MockMulticlusterVirtualDestinationDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder
}

// MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterVirtualDestinationDeletionReconciler
type MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterVirtualDestinationDeletionReconciler
}

// NewMockMulticlusterVirtualDestinationDeletionReconciler creates a new mock instance
func NewMockMulticlusterVirtualDestinationDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterVirtualDestinationDeletionReconciler {
	mock := &MockMulticlusterVirtualDestinationDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterVirtualDestinationDeletionReconciler) EXPECT() *MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualDestinationDeletion mocks base method
func (m *MockMulticlusterVirtualDestinationDeletionReconciler) ReconcileVirtualDestinationDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualDestinationDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVirtualDestinationDeletion indicates an expected call of ReconcileVirtualDestinationDeletion
func (mr *MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder) ReconcileVirtualDestinationDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualDestinationDeletion", reflect.TypeOf((*MockMulticlusterVirtualDestinationDeletionReconciler)(nil).ReconcileVirtualDestinationDeletion), clusterName, req)
}

// MockMulticlusterVirtualDestinationReconcileLoop is a mock of MulticlusterVirtualDestinationReconcileLoop interface
type MockMulticlusterVirtualDestinationReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualDestinationReconcileLoopMockRecorder
}

// MockMulticlusterVirtualDestinationReconcileLoopMockRecorder is the mock recorder for MockMulticlusterVirtualDestinationReconcileLoop
type MockMulticlusterVirtualDestinationReconcileLoopMockRecorder struct {
	mock *MockMulticlusterVirtualDestinationReconcileLoop
}

// NewMockMulticlusterVirtualDestinationReconcileLoop creates a new mock instance
func NewMockMulticlusterVirtualDestinationReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterVirtualDestinationReconcileLoop {
	mock := &MockMulticlusterVirtualDestinationReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualDestinationReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterVirtualDestinationReconcileLoop) EXPECT() *MockMulticlusterVirtualDestinationReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterVirtualDestinationReconciler mocks base method
func (m *MockMulticlusterVirtualDestinationReconcileLoop) AddMulticlusterVirtualDestinationReconciler(ctx context.Context, rec controller.MulticlusterVirtualDestinationReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterVirtualDestinationReconciler", varargs...)
}

// AddMulticlusterVirtualDestinationReconciler indicates an expected call of AddMulticlusterVirtualDestinationReconciler
func (mr *MockMulticlusterVirtualDestinationReconcileLoopMockRecorder) AddMulticlusterVirtualDestinationReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterVirtualDestinationReconciler", reflect.TypeOf((*MockMulticlusterVirtualDestinationReconcileLoop)(nil).AddMulticlusterVirtualDestinationReconciler), varargs...)
}
