// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1"
	controller "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockWasmDeploymentReconciler is a mock of WasmDeploymentReconciler interface
type MockWasmDeploymentReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentReconcilerMockRecorder
}

// MockWasmDeploymentReconcilerMockRecorder is the mock recorder for MockWasmDeploymentReconciler
type MockWasmDeploymentReconcilerMockRecorder struct {
	mock *MockWasmDeploymentReconciler
}

// NewMockWasmDeploymentReconciler creates a new mock instance
func NewMockWasmDeploymentReconciler(ctrl *gomock.Controller) *MockWasmDeploymentReconciler {
	mock := &MockWasmDeploymentReconciler{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentReconciler) EXPECT() *MockWasmDeploymentReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWasmDeployment mocks base method
func (m *MockWasmDeploymentReconciler) ReconcileWasmDeployment(obj *v1beta1.WasmDeployment) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWasmDeployment", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWasmDeployment indicates an expected call of ReconcileWasmDeployment
func (mr *MockWasmDeploymentReconcilerMockRecorder) ReconcileWasmDeployment(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWasmDeployment", reflect.TypeOf((*MockWasmDeploymentReconciler)(nil).ReconcileWasmDeployment), obj)
}

// MockWasmDeploymentDeletionReconciler is a mock of WasmDeploymentDeletionReconciler interface
type MockWasmDeploymentDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentDeletionReconcilerMockRecorder
}

// MockWasmDeploymentDeletionReconcilerMockRecorder is the mock recorder for MockWasmDeploymentDeletionReconciler
type MockWasmDeploymentDeletionReconcilerMockRecorder struct {
	mock *MockWasmDeploymentDeletionReconciler
}

// NewMockWasmDeploymentDeletionReconciler creates a new mock instance
func NewMockWasmDeploymentDeletionReconciler(ctrl *gomock.Controller) *MockWasmDeploymentDeletionReconciler {
	mock := &MockWasmDeploymentDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentDeletionReconciler) EXPECT() *MockWasmDeploymentDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWasmDeploymentDeletion mocks base method
func (m *MockWasmDeploymentDeletionReconciler) ReconcileWasmDeploymentDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWasmDeploymentDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileWasmDeploymentDeletion indicates an expected call of ReconcileWasmDeploymentDeletion
func (mr *MockWasmDeploymentDeletionReconcilerMockRecorder) ReconcileWasmDeploymentDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWasmDeploymentDeletion", reflect.TypeOf((*MockWasmDeploymentDeletionReconciler)(nil).ReconcileWasmDeploymentDeletion), req)
}

// MockWasmDeploymentFinalizer is a mock of WasmDeploymentFinalizer interface
type MockWasmDeploymentFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentFinalizerMockRecorder
}

// MockWasmDeploymentFinalizerMockRecorder is the mock recorder for MockWasmDeploymentFinalizer
type MockWasmDeploymentFinalizerMockRecorder struct {
	mock *MockWasmDeploymentFinalizer
}

// NewMockWasmDeploymentFinalizer creates a new mock instance
func NewMockWasmDeploymentFinalizer(ctrl *gomock.Controller) *MockWasmDeploymentFinalizer {
	mock := &MockWasmDeploymentFinalizer{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentFinalizer) EXPECT() *MockWasmDeploymentFinalizerMockRecorder {
	return m.recorder
}

// ReconcileWasmDeployment mocks base method
func (m *MockWasmDeploymentFinalizer) ReconcileWasmDeployment(obj *v1beta1.WasmDeployment) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWasmDeployment", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWasmDeployment indicates an expected call of ReconcileWasmDeployment
func (mr *MockWasmDeploymentFinalizerMockRecorder) ReconcileWasmDeployment(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWasmDeployment", reflect.TypeOf((*MockWasmDeploymentFinalizer)(nil).ReconcileWasmDeployment), obj)
}

// WasmDeploymentFinalizerName mocks base method
func (m *MockWasmDeploymentFinalizer) WasmDeploymentFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WasmDeploymentFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// WasmDeploymentFinalizerName indicates an expected call of WasmDeploymentFinalizerName
func (mr *MockWasmDeploymentFinalizerMockRecorder) WasmDeploymentFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WasmDeploymentFinalizerName", reflect.TypeOf((*MockWasmDeploymentFinalizer)(nil).WasmDeploymentFinalizerName))
}

// FinalizeWasmDeployment mocks base method
func (m *MockWasmDeploymentFinalizer) FinalizeWasmDeployment(obj *v1beta1.WasmDeployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeWasmDeployment", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeWasmDeployment indicates an expected call of FinalizeWasmDeployment
func (mr *MockWasmDeploymentFinalizerMockRecorder) FinalizeWasmDeployment(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeWasmDeployment", reflect.TypeOf((*MockWasmDeploymentFinalizer)(nil).FinalizeWasmDeployment), obj)
}

// MockWasmDeploymentReconcileLoop is a mock of WasmDeploymentReconcileLoop interface
type MockWasmDeploymentReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentReconcileLoopMockRecorder
}

// MockWasmDeploymentReconcileLoopMockRecorder is the mock recorder for MockWasmDeploymentReconcileLoop
type MockWasmDeploymentReconcileLoopMockRecorder struct {
	mock *MockWasmDeploymentReconcileLoop
}

// NewMockWasmDeploymentReconcileLoop creates a new mock instance
func NewMockWasmDeploymentReconcileLoop(ctrl *gomock.Controller) *MockWasmDeploymentReconcileLoop {
	mock := &MockWasmDeploymentReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentReconcileLoop) EXPECT() *MockWasmDeploymentReconcileLoopMockRecorder {
	return m.recorder
}

// RunWasmDeploymentReconciler mocks base method
func (m *MockWasmDeploymentReconcileLoop) RunWasmDeploymentReconciler(ctx context.Context, rec controller.WasmDeploymentReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunWasmDeploymentReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWasmDeploymentReconciler indicates an expected call of RunWasmDeploymentReconciler
func (mr *MockWasmDeploymentReconcileLoopMockRecorder) RunWasmDeploymentReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWasmDeploymentReconciler", reflect.TypeOf((*MockWasmDeploymentReconcileLoop)(nil).RunWasmDeploymentReconciler), varargs...)
}

// MockVirtualDestinationReconciler is a mock of VirtualDestinationReconciler interface
type MockVirtualDestinationReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualDestinationReconcilerMockRecorder
}

// MockVirtualDestinationReconcilerMockRecorder is the mock recorder for MockVirtualDestinationReconciler
type MockVirtualDestinationReconcilerMockRecorder struct {
	mock *MockVirtualDestinationReconciler
}

// NewMockVirtualDestinationReconciler creates a new mock instance
func NewMockVirtualDestinationReconciler(ctrl *gomock.Controller) *MockVirtualDestinationReconciler {
	mock := &MockVirtualDestinationReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualDestinationReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualDestinationReconciler) EXPECT() *MockVirtualDestinationReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualDestination mocks base method
func (m *MockVirtualDestinationReconciler) ReconcileVirtualDestination(obj *v1beta1.VirtualDestination) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualDestination", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualDestination indicates an expected call of ReconcileVirtualDestination
func (mr *MockVirtualDestinationReconcilerMockRecorder) ReconcileVirtualDestination(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualDestination", reflect.TypeOf((*MockVirtualDestinationReconciler)(nil).ReconcileVirtualDestination), obj)
}

// MockVirtualDestinationDeletionReconciler is a mock of VirtualDestinationDeletionReconciler interface
type MockVirtualDestinationDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualDestinationDeletionReconcilerMockRecorder
}

// MockVirtualDestinationDeletionReconcilerMockRecorder is the mock recorder for MockVirtualDestinationDeletionReconciler
type MockVirtualDestinationDeletionReconcilerMockRecorder struct {
	mock *MockVirtualDestinationDeletionReconciler
}

// NewMockVirtualDestinationDeletionReconciler creates a new mock instance
func NewMockVirtualDestinationDeletionReconciler(ctrl *gomock.Controller) *MockVirtualDestinationDeletionReconciler {
	mock := &MockVirtualDestinationDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualDestinationDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualDestinationDeletionReconciler) EXPECT() *MockVirtualDestinationDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualDestinationDeletion mocks base method
func (m *MockVirtualDestinationDeletionReconciler) ReconcileVirtualDestinationDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualDestinationDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVirtualDestinationDeletion indicates an expected call of ReconcileVirtualDestinationDeletion
func (mr *MockVirtualDestinationDeletionReconcilerMockRecorder) ReconcileVirtualDestinationDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualDestinationDeletion", reflect.TypeOf((*MockVirtualDestinationDeletionReconciler)(nil).ReconcileVirtualDestinationDeletion), req)
}

// MockVirtualDestinationFinalizer is a mock of VirtualDestinationFinalizer interface
type MockVirtualDestinationFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualDestinationFinalizerMockRecorder
}

// MockVirtualDestinationFinalizerMockRecorder is the mock recorder for MockVirtualDestinationFinalizer
type MockVirtualDestinationFinalizerMockRecorder struct {
	mock *MockVirtualDestinationFinalizer
}

// NewMockVirtualDestinationFinalizer creates a new mock instance
func NewMockVirtualDestinationFinalizer(ctrl *gomock.Controller) *MockVirtualDestinationFinalizer {
	mock := &MockVirtualDestinationFinalizer{ctrl: ctrl}
	mock.recorder = &MockVirtualDestinationFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualDestinationFinalizer) EXPECT() *MockVirtualDestinationFinalizerMockRecorder {
	return m.recorder
}

// ReconcileVirtualDestination mocks base method
func (m *MockVirtualDestinationFinalizer) ReconcileVirtualDestination(obj *v1beta1.VirtualDestination) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualDestination", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualDestination indicates an expected call of ReconcileVirtualDestination
func (mr *MockVirtualDestinationFinalizerMockRecorder) ReconcileVirtualDestination(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualDestination", reflect.TypeOf((*MockVirtualDestinationFinalizer)(nil).ReconcileVirtualDestination), obj)
}

// VirtualDestinationFinalizerName mocks base method
func (m *MockVirtualDestinationFinalizer) VirtualDestinationFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualDestinationFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// VirtualDestinationFinalizerName indicates an expected call of VirtualDestinationFinalizerName
func (mr *MockVirtualDestinationFinalizerMockRecorder) VirtualDestinationFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualDestinationFinalizerName", reflect.TypeOf((*MockVirtualDestinationFinalizer)(nil).VirtualDestinationFinalizerName))
}

// FinalizeVirtualDestination mocks base method
func (m *MockVirtualDestinationFinalizer) FinalizeVirtualDestination(obj *v1beta1.VirtualDestination) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeVirtualDestination", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeVirtualDestination indicates an expected call of FinalizeVirtualDestination
func (mr *MockVirtualDestinationFinalizerMockRecorder) FinalizeVirtualDestination(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeVirtualDestination", reflect.TypeOf((*MockVirtualDestinationFinalizer)(nil).FinalizeVirtualDestination), obj)
}

// MockVirtualDestinationReconcileLoop is a mock of VirtualDestinationReconcileLoop interface
type MockVirtualDestinationReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualDestinationReconcileLoopMockRecorder
}

// MockVirtualDestinationReconcileLoopMockRecorder is the mock recorder for MockVirtualDestinationReconcileLoop
type MockVirtualDestinationReconcileLoopMockRecorder struct {
	mock *MockVirtualDestinationReconcileLoop
}

// NewMockVirtualDestinationReconcileLoop creates a new mock instance
func NewMockVirtualDestinationReconcileLoop(ctrl *gomock.Controller) *MockVirtualDestinationReconcileLoop {
	mock := &MockVirtualDestinationReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockVirtualDestinationReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualDestinationReconcileLoop) EXPECT() *MockVirtualDestinationReconcileLoopMockRecorder {
	return m.recorder
}

// RunVirtualDestinationReconciler mocks base method
func (m *MockVirtualDestinationReconcileLoop) RunVirtualDestinationReconciler(ctx context.Context, rec controller.VirtualDestinationReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunVirtualDestinationReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunVirtualDestinationReconciler indicates an expected call of RunVirtualDestinationReconciler
func (mr *MockVirtualDestinationReconcileLoopMockRecorder) RunVirtualDestinationReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunVirtualDestinationReconciler", reflect.TypeOf((*MockVirtualDestinationReconcileLoop)(nil).RunVirtualDestinationReconciler), varargs...)
}
