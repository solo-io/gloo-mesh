// Code generated by MockGen. DO NOT EDIT.
// Source: ./sets.go

// Package mock_v1beta1sets is a generated GoMock package.
package mock_v1beta1sets

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1"
	v1beta1sets "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1/sets"
	sets "github.com/solo-io/skv2/contrib/pkg/sets"
	ezkube "github.com/solo-io/skv2/pkg/ezkube"
	sets0 "k8s.io/apimachinery/pkg/util/sets"
)

// MockWasmDeploymentSet is a mock of WasmDeploymentSet interface.
type MockWasmDeploymentSet struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentSetMockRecorder
}

// MockWasmDeploymentSetMockRecorder is the mock recorder for MockWasmDeploymentSet.
type MockWasmDeploymentSetMockRecorder struct {
	mock *MockWasmDeploymentSet
}

// NewMockWasmDeploymentSet creates a new mock instance.
func NewMockWasmDeploymentSet(ctrl *gomock.Controller) *MockWasmDeploymentSet {
	mock := &MockWasmDeploymentSet{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmDeploymentSet) EXPECT() *MockWasmDeploymentSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockWasmDeploymentSet) Clone() v1beta1sets.WasmDeploymentSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v1beta1sets.WasmDeploymentSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockWasmDeploymentSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockWasmDeploymentSet) Delete(wasmDeployment ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", wasmDeployment)
}

// Delete indicates an expected call of Delete.
func (mr *MockWasmDeploymentSetMockRecorder) Delete(wasmDeployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Delete), wasmDeployment)
}

// Delta mocks base method.
func (m *MockWasmDeploymentSet) Delta(newSet v1beta1sets.WasmDeploymentSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockWasmDeploymentSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockWasmDeploymentSet) Difference(set v1beta1sets.WasmDeploymentSet) v1beta1sets.WasmDeploymentSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1beta1sets.WasmDeploymentSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockWasmDeploymentSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockWasmDeploymentSet) Equal(wasmDeploymentSet v1beta1sets.WasmDeploymentSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", wasmDeploymentSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockWasmDeploymentSetMockRecorder) Equal(wasmDeploymentSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Equal), wasmDeploymentSet)
}

// Find mocks base method.
func (m *MockWasmDeploymentSet) Find(id ezkube.ResourceId) (*v1beta1.WasmDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1beta1.WasmDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockWasmDeploymentSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockWasmDeploymentSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockWasmDeploymentSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockWasmDeploymentSet) Has(wasmDeployment ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", wasmDeployment)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockWasmDeploymentSetMockRecorder) Has(wasmDeployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Has), wasmDeployment)
}

// Insert mocks base method.
func (m *MockWasmDeploymentSet) Insert(wasmDeployment ...*v1beta1.WasmDeployment) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range wasmDeployment {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockWasmDeploymentSetMockRecorder) Insert(wasmDeployment ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Insert), wasmDeployment...)
}

// Intersection mocks base method.
func (m *MockWasmDeploymentSet) Intersection(set v1beta1sets.WasmDeploymentSet) v1beta1sets.WasmDeploymentSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1beta1sets.WasmDeploymentSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockWasmDeploymentSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockWasmDeploymentSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockWasmDeploymentSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockWasmDeploymentSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockWasmDeploymentSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Length))
}

// List mocks base method.
func (m *MockWasmDeploymentSet) List(filterResource ...func(*v1beta1.WasmDeployment) bool) []*v1beta1.WasmDeployment {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1beta1.WasmDeployment)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockWasmDeploymentSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWasmDeploymentSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockWasmDeploymentSet) Map() map[string]*v1beta1.WasmDeployment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1beta1.WasmDeployment)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockWasmDeploymentSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Map))
}

// Union mocks base method.
func (m *MockWasmDeploymentSet) Union(set v1beta1sets.WasmDeploymentSet) v1beta1sets.WasmDeploymentSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1beta1sets.WasmDeploymentSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockWasmDeploymentSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockWasmDeploymentSet) UnsortedList(filterResource ...func(*v1beta1.WasmDeployment) bool) []*v1beta1.WasmDeployment {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v1beta1.WasmDeployment)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockWasmDeploymentSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockWasmDeploymentSet)(nil).UnsortedList), filterResource...)
}

// MockRateLimitClientConfigSet is a mock of RateLimitClientConfigSet interface.
type MockRateLimitClientConfigSet struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitClientConfigSetMockRecorder
}

// MockRateLimitClientConfigSetMockRecorder is the mock recorder for MockRateLimitClientConfigSet.
type MockRateLimitClientConfigSetMockRecorder struct {
	mock *MockRateLimitClientConfigSet
}

// NewMockRateLimitClientConfigSet creates a new mock instance.
func NewMockRateLimitClientConfigSet(ctrl *gomock.Controller) *MockRateLimitClientConfigSet {
	mock := &MockRateLimitClientConfigSet{ctrl: ctrl}
	mock.recorder = &MockRateLimitClientConfigSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitClientConfigSet) EXPECT() *MockRateLimitClientConfigSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockRateLimitClientConfigSet) Clone() v1beta1sets.RateLimitClientConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v1beta1sets.RateLimitClientConfigSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockRateLimitClientConfigSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockRateLimitClientConfigSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockRateLimitClientConfigSet) Delete(rateLimitClientConfig ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", rateLimitClientConfig)
}

// Delete indicates an expected call of Delete.
func (mr *MockRateLimitClientConfigSetMockRecorder) Delete(rateLimitClientConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRateLimitClientConfigSet)(nil).Delete), rateLimitClientConfig)
}

// Delta mocks base method.
func (m *MockRateLimitClientConfigSet) Delta(newSet v1beta1sets.RateLimitClientConfigSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockRateLimitClientConfigSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockRateLimitClientConfigSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockRateLimitClientConfigSet) Difference(set v1beta1sets.RateLimitClientConfigSet) v1beta1sets.RateLimitClientConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1beta1sets.RateLimitClientConfigSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockRateLimitClientConfigSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockRateLimitClientConfigSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockRateLimitClientConfigSet) Equal(rateLimitClientConfigSet v1beta1sets.RateLimitClientConfigSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", rateLimitClientConfigSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockRateLimitClientConfigSetMockRecorder) Equal(rateLimitClientConfigSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockRateLimitClientConfigSet)(nil).Equal), rateLimitClientConfigSet)
}

// Find mocks base method.
func (m *MockRateLimitClientConfigSet) Find(id ezkube.ResourceId) (*v1beta1.RateLimitClientConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1beta1.RateLimitClientConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRateLimitClientConfigSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRateLimitClientConfigSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockRateLimitClientConfigSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockRateLimitClientConfigSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockRateLimitClientConfigSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockRateLimitClientConfigSet) Has(rateLimitClientConfig ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", rateLimitClientConfig)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockRateLimitClientConfigSetMockRecorder) Has(rateLimitClientConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockRateLimitClientConfigSet)(nil).Has), rateLimitClientConfig)
}

// Insert mocks base method.
func (m *MockRateLimitClientConfigSet) Insert(rateLimitClientConfig ...*v1beta1.RateLimitClientConfig) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range rateLimitClientConfig {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockRateLimitClientConfigSetMockRecorder) Insert(rateLimitClientConfig ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRateLimitClientConfigSet)(nil).Insert), rateLimitClientConfig...)
}

// Intersection mocks base method.
func (m *MockRateLimitClientConfigSet) Intersection(set v1beta1sets.RateLimitClientConfigSet) v1beta1sets.RateLimitClientConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1beta1sets.RateLimitClientConfigSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockRateLimitClientConfigSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockRateLimitClientConfigSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockRateLimitClientConfigSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockRateLimitClientConfigSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockRateLimitClientConfigSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockRateLimitClientConfigSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockRateLimitClientConfigSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockRateLimitClientConfigSet)(nil).Length))
}

// List mocks base method.
func (m *MockRateLimitClientConfigSet) List(filterResource ...func(*v1beta1.RateLimitClientConfig) bool) []*v1beta1.RateLimitClientConfig {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1beta1.RateLimitClientConfig)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockRateLimitClientConfigSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRateLimitClientConfigSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockRateLimitClientConfigSet) Map() map[string]*v1beta1.RateLimitClientConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1beta1.RateLimitClientConfig)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockRateLimitClientConfigSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockRateLimitClientConfigSet)(nil).Map))
}

// Union mocks base method.
func (m *MockRateLimitClientConfigSet) Union(set v1beta1sets.RateLimitClientConfigSet) v1beta1sets.RateLimitClientConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1beta1sets.RateLimitClientConfigSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockRateLimitClientConfigSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockRateLimitClientConfigSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockRateLimitClientConfigSet) UnsortedList(filterResource ...func(*v1beta1.RateLimitClientConfig) bool) []*v1beta1.RateLimitClientConfig {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v1beta1.RateLimitClientConfig)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockRateLimitClientConfigSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockRateLimitClientConfigSet)(nil).UnsortedList), filterResource...)
}

// MockVirtualDestinationSet is a mock of VirtualDestinationSet interface.
type MockVirtualDestinationSet struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualDestinationSetMockRecorder
}

// MockVirtualDestinationSetMockRecorder is the mock recorder for MockVirtualDestinationSet.
type MockVirtualDestinationSetMockRecorder struct {
	mock *MockVirtualDestinationSet
}

// NewMockVirtualDestinationSet creates a new mock instance.
func NewMockVirtualDestinationSet(ctrl *gomock.Controller) *MockVirtualDestinationSet {
	mock := &MockVirtualDestinationSet{ctrl: ctrl}
	mock.recorder = &MockVirtualDestinationSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualDestinationSet) EXPECT() *MockVirtualDestinationSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockVirtualDestinationSet) Clone() v1beta1sets.VirtualDestinationSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v1beta1sets.VirtualDestinationSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockVirtualDestinationSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockVirtualDestinationSet) Delete(virtualDestination ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", virtualDestination)
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualDestinationSetMockRecorder) Delete(virtualDestination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Delete), virtualDestination)
}

// Delta mocks base method.
func (m *MockVirtualDestinationSet) Delta(newSet v1beta1sets.VirtualDestinationSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockVirtualDestinationSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockVirtualDestinationSet) Difference(set v1beta1sets.VirtualDestinationSet) v1beta1sets.VirtualDestinationSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1beta1sets.VirtualDestinationSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockVirtualDestinationSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockVirtualDestinationSet) Equal(virtualDestinationSet v1beta1sets.VirtualDestinationSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", virtualDestinationSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockVirtualDestinationSetMockRecorder) Equal(virtualDestinationSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Equal), virtualDestinationSet)
}

// Find mocks base method.
func (m *MockVirtualDestinationSet) Find(id ezkube.ResourceId) (*v1beta1.VirtualDestination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1beta1.VirtualDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockVirtualDestinationSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockVirtualDestinationSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockVirtualDestinationSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockVirtualDestinationSet) Has(virtualDestination ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", virtualDestination)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockVirtualDestinationSetMockRecorder) Has(virtualDestination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Has), virtualDestination)
}

// Insert mocks base method.
func (m *MockVirtualDestinationSet) Insert(virtualDestination ...*v1beta1.VirtualDestination) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range virtualDestination {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockVirtualDestinationSetMockRecorder) Insert(virtualDestination ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Insert), virtualDestination...)
}

// Intersection mocks base method.
func (m *MockVirtualDestinationSet) Intersection(set v1beta1sets.VirtualDestinationSet) v1beta1sets.VirtualDestinationSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1beta1sets.VirtualDestinationSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockVirtualDestinationSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockVirtualDestinationSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockVirtualDestinationSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockVirtualDestinationSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockVirtualDestinationSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Length))
}

// List mocks base method.
func (m *MockVirtualDestinationSet) List(filterResource ...func(*v1beta1.VirtualDestination) bool) []*v1beta1.VirtualDestination {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1beta1.VirtualDestination)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockVirtualDestinationSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualDestinationSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockVirtualDestinationSet) Map() map[string]*v1beta1.VirtualDestination {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1beta1.VirtualDestination)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockVirtualDestinationSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Map))
}

// Union mocks base method.
func (m *MockVirtualDestinationSet) Union(set v1beta1sets.VirtualDestinationSet) v1beta1sets.VirtualDestinationSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1beta1sets.VirtualDestinationSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockVirtualDestinationSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockVirtualDestinationSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockVirtualDestinationSet) UnsortedList(filterResource ...func(*v1beta1.VirtualDestination) bool) []*v1beta1.VirtualDestination {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v1beta1.VirtualDestination)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockVirtualDestinationSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockVirtualDestinationSet)(nil).UnsortedList), filterResource...)
}

// MockVirtualGatewaySet is a mock of VirtualGatewaySet interface.
type MockVirtualGatewaySet struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualGatewaySetMockRecorder
}

// MockVirtualGatewaySetMockRecorder is the mock recorder for MockVirtualGatewaySet.
type MockVirtualGatewaySetMockRecorder struct {
	mock *MockVirtualGatewaySet
}

// NewMockVirtualGatewaySet creates a new mock instance.
func NewMockVirtualGatewaySet(ctrl *gomock.Controller) *MockVirtualGatewaySet {
	mock := &MockVirtualGatewaySet{ctrl: ctrl}
	mock.recorder = &MockVirtualGatewaySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualGatewaySet) EXPECT() *MockVirtualGatewaySetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockVirtualGatewaySet) Clone() v1beta1sets.VirtualGatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v1beta1sets.VirtualGatewaySet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockVirtualGatewaySetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockVirtualGatewaySet) Delete(virtualGateway ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", virtualGateway)
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualGatewaySetMockRecorder) Delete(virtualGateway interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Delete), virtualGateway)
}

// Delta mocks base method.
func (m *MockVirtualGatewaySet) Delta(newSet v1beta1sets.VirtualGatewaySet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockVirtualGatewaySetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockVirtualGatewaySet) Difference(set v1beta1sets.VirtualGatewaySet) v1beta1sets.VirtualGatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1beta1sets.VirtualGatewaySet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockVirtualGatewaySetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockVirtualGatewaySet) Equal(virtualGatewaySet v1beta1sets.VirtualGatewaySet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", virtualGatewaySet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockVirtualGatewaySetMockRecorder) Equal(virtualGatewaySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Equal), virtualGatewaySet)
}

// Find mocks base method.
func (m *MockVirtualGatewaySet) Find(id ezkube.ResourceId) (*v1beta1.VirtualGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1beta1.VirtualGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockVirtualGatewaySetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockVirtualGatewaySet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockVirtualGatewaySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Generic))
}

// Has mocks base method.
func (m *MockVirtualGatewaySet) Has(virtualGateway ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", virtualGateway)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockVirtualGatewaySetMockRecorder) Has(virtualGateway interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Has), virtualGateway)
}

// Insert mocks base method.
func (m *MockVirtualGatewaySet) Insert(virtualGateway ...*v1beta1.VirtualGateway) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range virtualGateway {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockVirtualGatewaySetMockRecorder) Insert(virtualGateway ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Insert), virtualGateway...)
}

// Intersection mocks base method.
func (m *MockVirtualGatewaySet) Intersection(set v1beta1sets.VirtualGatewaySet) v1beta1sets.VirtualGatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1beta1sets.VirtualGatewaySet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockVirtualGatewaySetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockVirtualGatewaySet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockVirtualGatewaySetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Keys))
}

// Length mocks base method.
func (m *MockVirtualGatewaySet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockVirtualGatewaySetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Length))
}

// List mocks base method.
func (m *MockVirtualGatewaySet) List(filterResource ...func(*v1beta1.VirtualGateway) bool) []*v1beta1.VirtualGateway {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1beta1.VirtualGateway)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockVirtualGatewaySetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualGatewaySet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockVirtualGatewaySet) Map() map[string]*v1beta1.VirtualGateway {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1beta1.VirtualGateway)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockVirtualGatewaySetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Map))
}

// Union mocks base method.
func (m *MockVirtualGatewaySet) Union(set v1beta1sets.VirtualGatewaySet) v1beta1sets.VirtualGatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1beta1sets.VirtualGatewaySet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockVirtualGatewaySetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockVirtualGatewaySet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockVirtualGatewaySet) UnsortedList(filterResource ...func(*v1beta1.VirtualGateway) bool) []*v1beta1.VirtualGateway {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v1beta1.VirtualGateway)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockVirtualGatewaySetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockVirtualGatewaySet)(nil).UnsortedList), filterResource...)
}

// MockVirtualHostSet is a mock of VirtualHostSet interface.
type MockVirtualHostSet struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualHostSetMockRecorder
}

// MockVirtualHostSetMockRecorder is the mock recorder for MockVirtualHostSet.
type MockVirtualHostSetMockRecorder struct {
	mock *MockVirtualHostSet
}

// NewMockVirtualHostSet creates a new mock instance.
func NewMockVirtualHostSet(ctrl *gomock.Controller) *MockVirtualHostSet {
	mock := &MockVirtualHostSet{ctrl: ctrl}
	mock.recorder = &MockVirtualHostSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualHostSet) EXPECT() *MockVirtualHostSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockVirtualHostSet) Clone() v1beta1sets.VirtualHostSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v1beta1sets.VirtualHostSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockVirtualHostSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockVirtualHostSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockVirtualHostSet) Delete(virtualHost ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", virtualHost)
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualHostSetMockRecorder) Delete(virtualHost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualHostSet)(nil).Delete), virtualHost)
}

// Delta mocks base method.
func (m *MockVirtualHostSet) Delta(newSet v1beta1sets.VirtualHostSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockVirtualHostSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockVirtualHostSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockVirtualHostSet) Difference(set v1beta1sets.VirtualHostSet) v1beta1sets.VirtualHostSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1beta1sets.VirtualHostSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockVirtualHostSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockVirtualHostSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockVirtualHostSet) Equal(virtualHostSet v1beta1sets.VirtualHostSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", virtualHostSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockVirtualHostSetMockRecorder) Equal(virtualHostSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockVirtualHostSet)(nil).Equal), virtualHostSet)
}

// Find mocks base method.
func (m *MockVirtualHostSet) Find(id ezkube.ResourceId) (*v1beta1.VirtualHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1beta1.VirtualHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockVirtualHostSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockVirtualHostSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockVirtualHostSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockVirtualHostSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockVirtualHostSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockVirtualHostSet) Has(virtualHost ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", virtualHost)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockVirtualHostSetMockRecorder) Has(virtualHost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockVirtualHostSet)(nil).Has), virtualHost)
}

// Insert mocks base method.
func (m *MockVirtualHostSet) Insert(virtualHost ...*v1beta1.VirtualHost) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range virtualHost {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockVirtualHostSetMockRecorder) Insert(virtualHost ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockVirtualHostSet)(nil).Insert), virtualHost...)
}

// Intersection mocks base method.
func (m *MockVirtualHostSet) Intersection(set v1beta1sets.VirtualHostSet) v1beta1sets.VirtualHostSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1beta1sets.VirtualHostSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockVirtualHostSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockVirtualHostSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockVirtualHostSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockVirtualHostSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockVirtualHostSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockVirtualHostSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockVirtualHostSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockVirtualHostSet)(nil).Length))
}

// List mocks base method.
func (m *MockVirtualHostSet) List(filterResource ...func(*v1beta1.VirtualHost) bool) []*v1beta1.VirtualHost {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1beta1.VirtualHost)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockVirtualHostSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualHostSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockVirtualHostSet) Map() map[string]*v1beta1.VirtualHost {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1beta1.VirtualHost)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockVirtualHostSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockVirtualHostSet)(nil).Map))
}

// Union mocks base method.
func (m *MockVirtualHostSet) Union(set v1beta1sets.VirtualHostSet) v1beta1sets.VirtualHostSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1beta1sets.VirtualHostSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockVirtualHostSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockVirtualHostSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockVirtualHostSet) UnsortedList(filterResource ...func(*v1beta1.VirtualHost) bool) []*v1beta1.VirtualHost {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v1beta1.VirtualHost)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockVirtualHostSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockVirtualHostSet)(nil).UnsortedList), filterResource...)
}

// MockRouteTableSet is a mock of RouteTableSet interface.
type MockRouteTableSet struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableSetMockRecorder
}

// MockRouteTableSetMockRecorder is the mock recorder for MockRouteTableSet.
type MockRouteTableSetMockRecorder struct {
	mock *MockRouteTableSet
}

// NewMockRouteTableSet creates a new mock instance.
func NewMockRouteTableSet(ctrl *gomock.Controller) *MockRouteTableSet {
	mock := &MockRouteTableSet{ctrl: ctrl}
	mock.recorder = &MockRouteTableSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteTableSet) EXPECT() *MockRouteTableSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockRouteTableSet) Clone() v1beta1sets.RouteTableSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v1beta1sets.RouteTableSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockRouteTableSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockRouteTableSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockRouteTableSet) Delete(routeTable ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", routeTable)
}

// Delete indicates an expected call of Delete.
func (mr *MockRouteTableSetMockRecorder) Delete(routeTable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteTableSet)(nil).Delete), routeTable)
}

// Delta mocks base method.
func (m *MockRouteTableSet) Delta(newSet v1beta1sets.RouteTableSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockRouteTableSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockRouteTableSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockRouteTableSet) Difference(set v1beta1sets.RouteTableSet) v1beta1sets.RouteTableSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1beta1sets.RouteTableSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockRouteTableSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockRouteTableSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockRouteTableSet) Equal(routeTableSet v1beta1sets.RouteTableSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", routeTableSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockRouteTableSetMockRecorder) Equal(routeTableSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockRouteTableSet)(nil).Equal), routeTableSet)
}

// Find mocks base method.
func (m *MockRouteTableSet) Find(id ezkube.ResourceId) (*v1beta1.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1beta1.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRouteTableSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRouteTableSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockRouteTableSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockRouteTableSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockRouteTableSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockRouteTableSet) Has(routeTable ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", routeTable)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockRouteTableSetMockRecorder) Has(routeTable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockRouteTableSet)(nil).Has), routeTable)
}

// Insert mocks base method.
func (m *MockRouteTableSet) Insert(routeTable ...*v1beta1.RouteTable) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range routeTable {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockRouteTableSetMockRecorder) Insert(routeTable ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRouteTableSet)(nil).Insert), routeTable...)
}

// Intersection mocks base method.
func (m *MockRouteTableSet) Intersection(set v1beta1sets.RouteTableSet) v1beta1sets.RouteTableSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1beta1sets.RouteTableSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockRouteTableSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockRouteTableSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockRouteTableSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockRouteTableSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockRouteTableSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockRouteTableSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockRouteTableSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockRouteTableSet)(nil).Length))
}

// List mocks base method.
func (m *MockRouteTableSet) List(filterResource ...func(*v1beta1.RouteTable) bool) []*v1beta1.RouteTable {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1beta1.RouteTable)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockRouteTableSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRouteTableSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockRouteTableSet) Map() map[string]*v1beta1.RouteTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1beta1.RouteTable)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockRouteTableSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockRouteTableSet)(nil).Map))
}

// Union mocks base method.
func (m *MockRouteTableSet) Union(set v1beta1sets.RouteTableSet) v1beta1sets.RouteTableSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1beta1sets.RouteTableSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockRouteTableSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockRouteTableSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockRouteTableSet) UnsortedList(filterResource ...func(*v1beta1.RouteTable) bool) []*v1beta1.RouteTable {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v1beta1.RouteTable)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockRouteTableSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockRouteTableSet)(nil).UnsortedList), filterResource...)
}

// MockServiceDependencySet is a mock of ServiceDependencySet interface.
type MockServiceDependencySet struct {
	ctrl     *gomock.Controller
	recorder *MockServiceDependencySetMockRecorder
}

// MockServiceDependencySetMockRecorder is the mock recorder for MockServiceDependencySet.
type MockServiceDependencySetMockRecorder struct {
	mock *MockServiceDependencySet
}

// NewMockServiceDependencySet creates a new mock instance.
func NewMockServiceDependencySet(ctrl *gomock.Controller) *MockServiceDependencySet {
	mock := &MockServiceDependencySet{ctrl: ctrl}
	mock.recorder = &MockServiceDependencySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceDependencySet) EXPECT() *MockServiceDependencySetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockServiceDependencySet) Clone() v1beta1sets.ServiceDependencySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v1beta1sets.ServiceDependencySet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockServiceDependencySetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockServiceDependencySet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockServiceDependencySet) Delete(serviceDependency ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", serviceDependency)
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceDependencySetMockRecorder) Delete(serviceDependency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceDependencySet)(nil).Delete), serviceDependency)
}

// Delta mocks base method.
func (m *MockServiceDependencySet) Delta(newSet v1beta1sets.ServiceDependencySet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockServiceDependencySetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockServiceDependencySet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockServiceDependencySet) Difference(set v1beta1sets.ServiceDependencySet) v1beta1sets.ServiceDependencySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1beta1sets.ServiceDependencySet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockServiceDependencySetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockServiceDependencySet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockServiceDependencySet) Equal(serviceDependencySet v1beta1sets.ServiceDependencySet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", serviceDependencySet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockServiceDependencySetMockRecorder) Equal(serviceDependencySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockServiceDependencySet)(nil).Equal), serviceDependencySet)
}

// Find mocks base method.
func (m *MockServiceDependencySet) Find(id ezkube.ResourceId) (*v1beta1.ServiceDependency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1beta1.ServiceDependency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockServiceDependencySetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockServiceDependencySet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockServiceDependencySet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockServiceDependencySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockServiceDependencySet)(nil).Generic))
}

// Has mocks base method.
func (m *MockServiceDependencySet) Has(serviceDependency ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", serviceDependency)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockServiceDependencySetMockRecorder) Has(serviceDependency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockServiceDependencySet)(nil).Has), serviceDependency)
}

// Insert mocks base method.
func (m *MockServiceDependencySet) Insert(serviceDependency ...*v1beta1.ServiceDependency) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range serviceDependency {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockServiceDependencySetMockRecorder) Insert(serviceDependency ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockServiceDependencySet)(nil).Insert), serviceDependency...)
}

// Intersection mocks base method.
func (m *MockServiceDependencySet) Intersection(set v1beta1sets.ServiceDependencySet) v1beta1sets.ServiceDependencySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1beta1sets.ServiceDependencySet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockServiceDependencySetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockServiceDependencySet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockServiceDependencySet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockServiceDependencySetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockServiceDependencySet)(nil).Keys))
}

// Length mocks base method.
func (m *MockServiceDependencySet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockServiceDependencySetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockServiceDependencySet)(nil).Length))
}

// List mocks base method.
func (m *MockServiceDependencySet) List(filterResource ...func(*v1beta1.ServiceDependency) bool) []*v1beta1.ServiceDependency {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1beta1.ServiceDependency)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockServiceDependencySetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceDependencySet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockServiceDependencySet) Map() map[string]*v1beta1.ServiceDependency {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1beta1.ServiceDependency)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockServiceDependencySetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockServiceDependencySet)(nil).Map))
}

// Union mocks base method.
func (m *MockServiceDependencySet) Union(set v1beta1sets.ServiceDependencySet) v1beta1sets.ServiceDependencySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1beta1sets.ServiceDependencySet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockServiceDependencySetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockServiceDependencySet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockServiceDependencySet) UnsortedList(filterResource ...func(*v1beta1.ServiceDependency) bool) []*v1beta1.ServiceDependency {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v1beta1.ServiceDependency)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockServiceDependencySetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockServiceDependencySet)(nil).UnsortedList), filterResource...)
}
