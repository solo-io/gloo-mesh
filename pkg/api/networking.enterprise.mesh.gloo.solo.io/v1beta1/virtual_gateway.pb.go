// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo-mesh/api/enterprise/networking/v1beta1/virtual_gateway.proto

package v1beta1

import (
	reflect "reflect"
	sync "sync"

	_ "cuelang.org/go/encoding/protobuf/cue"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	v1 "github.com/solo-io/gloo-mesh/pkg/api/common.mesh.gloo.solo.io/v1"
	v12 "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1"
	ratelimit "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1/ratelimit"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v11 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion int32

const (
	// Envoy will choose the optimal TLS version.
	VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_TLS_AUTO VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion = 0
	// TLS 1.0
	VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_TLSv1_0 VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion = 1
	// TLS 1.1
	VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_TLSv1_1 VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion = 2
	// TLS 1.2
	VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_TLSv1_2 VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion = 3
	// TLS 1.3
	VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_TLSv1_3 VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion = 4
)

// Enum value maps for VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion.
var (
	VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion_name = map[int32]string{
		0: "TLS_AUTO",
		1: "TLSv1_0",
		2: "TLSv1_1",
		3: "TLSv1_2",
		4: "TLSv1_3",
	}
	VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion_value = map[string]int32{
		"TLS_AUTO": 0,
		"TLSv1_0":  1,
		"TLSv1_1":  2,
		"TLSv1_2":  3,
		"TLSv1_3":  4,
	}
)

func (x VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion) Enum() *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion {
	p := new(VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion)
	*p = x
	return p
}

func (x VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_enumTypes[0].Descriptor()
}

func (VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_enumTypes[0]
}

func (x VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion.Descriptor instead.
func (VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1, 3, 0, 0, 1, 0}
}

//
//VirtualGateway is the top-level object for configuring ingress into a Mesh or VirtualMesh.
//A single VirtualGateway can apply to multiple deployed ingress pods and sidecars across meshes and clusters contained within a VirtualMesh.
//VirtualGateways can route traffic to destination services which live in a specific cluster or mesh.
//This allows VirtualGateways to route traffic from an ingress or sidecar in one mesh to a service in another. In order to
//perform cross-mesh routing, the Gateway Mesh and Destination mesh must be contained in a single VirtualMesh, with federation enabled.
type VirtualGatewaySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// deploy this VirtualGateway to one or more Ingress Gateway workloads
	// {{/* TODO: evaluate supporting multiple ingress gateway deployments per VG */}}
	DeployToIngressGateways *VirtualGatewaySpec_DeployToIngressGateway `protobuf:"bytes,1,opt,name=deploy_to_ingress_gateways,json=deployToIngressGateways,proto3" json:"deploy_to_ingress_gateways,omitempty"`
	// deploy this VirtualGateway to one or more workload sidecars
	// {{/* NOTE: unimplemented */}}
	DeployToSidecars []*v1.WorkloadSelector `protobuf:"bytes,2,rep,name=deploy_to_sidecars,json=deployToSidecars,proto3" json:"deploy_to_sidecars,omitempty"`
	// Each Gateway must implement one or more ConnectionHandlers.
	// A ConnectionHandler instructs the gateway how to handle clients
	// which have connected to the specified bind address.
	// Typically `connectionHandlers` will consist of a single `http` handler
	// which serves HTTP Routes defined in a set of VirtualHosts.
	// Multiple `connectionHandlers` can be specified to provide different behavior
	// on the same Gateway, e.g. one for TCP and one for HTTP traffic.
	ConnectionHandlers []*VirtualGatewaySpec_ConnectionHandler `protobuf:"bytes,3,rep,name=connection_handlers,json=connectionHandlers,proto3" json:"connection_handlers,omitempty"`
	// Options applied to all clients who connect to this gateway
	Options *VirtualGatewaySpec_GatewayOptions `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *VirtualGatewaySpec) Reset() {
	*x = VirtualGatewaySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec) ProtoMessage() {}

func (x *VirtualGatewaySpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *VirtualGatewaySpec) GetDeployToIngressGateways() *VirtualGatewaySpec_DeployToIngressGateway {
	if x != nil {
		return x.DeployToIngressGateways
	}
	return nil
}

func (x *VirtualGatewaySpec) GetDeployToSidecars() []*v1.WorkloadSelector {
	if x != nil {
		return x.DeployToSidecars
	}
	return nil
}

func (x *VirtualGatewaySpec) GetConnectionHandlers() []*VirtualGatewaySpec_ConnectionHandler {
	if x != nil {
		return x.ConnectionHandlers
	}
	return nil
}

func (x *VirtualGatewaySpec) GetOptions() *VirtualGatewaySpec_GatewayOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type VirtualGatewayStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The most recent generation observed in the the VirtualGateway metadata.
	// If the `observedGeneration` does not match `metadata.generation`,
	// Gloo Mesh has not processed the most recent version of this resource.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// Any errors found while processing this generation of the resource.
	Errors []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// Any warnings found while processing this generation of the resource.
	Warnings             []string                   `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
	SelectedGateways     []*SelectedGatewayWorkload `protobuf:"bytes,4,rep,name=selected_gateways,json=selectedGateways,proto3" json:"selected_gateways,omitempty"`
	SelectedVirtualHosts []*v11.ObjectRef           `protobuf:"bytes,5,rep,name=selected_virtual_hosts,json=selectedVirtualHosts,proto3" json:"selected_virtual_hosts,omitempty"`
	// List of Delegated Route tables that this Route table delegates to
	SelectedRouteTables []*v11.ObjectRef `protobuf:"bytes,6,rep,name=selected_route_tables,json=selectedRouteTables,proto3" json:"selected_route_tables,omitempty"`
	// List of Istio Gateway CRs created by this VirtualGateway in each cluster
	CreatedIstioGateways map[string]*v1.ObjectRefList `protobuf:"bytes,7,rep,name=created_istio_gateways,json=createdIstioGateways,proto3" json:"created_istio_gateways,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VirtualGatewayStatus) Reset() {
	*x = VirtualGatewayStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewayStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewayStatus) ProtoMessage() {}

func (x *VirtualGatewayStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewayStatus.ProtoReflect.Descriptor instead.
func (*VirtualGatewayStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *VirtualGatewayStatus) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *VirtualGatewayStatus) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *VirtualGatewayStatus) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *VirtualGatewayStatus) GetSelectedGateways() []*SelectedGatewayWorkload {
	if x != nil {
		return x.SelectedGateways
	}
	return nil
}

func (x *VirtualGatewayStatus) GetSelectedVirtualHosts() []*v11.ObjectRef {
	if x != nil {
		return x.SelectedVirtualHosts
	}
	return nil
}

func (x *VirtualGatewayStatus) GetSelectedRouteTables() []*v11.ObjectRef {
	if x != nil {
		return x.SelectedRouteTables
	}
	return nil
}

func (x *VirtualGatewayStatus) GetCreatedIstioGateways() map[string]*v1.ObjectRefList {
	if x != nil {
		return x.CreatedIstioGateways
	}
	return nil
}

// a gateway workload (e.g. Deployment) where a virtual gateway will be served
type SelectedGatewayWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the gateway workload
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the namespace where the gateway workload is running
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the cluster where the gateway workload is running
	ClusterName string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// the labels used to identify the gateway workload
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the external URL by which the gateway can be accessed on the given workload, if it exists
	ExternalUrl string `protobuf:"bytes,4,opt,name=external_url,json=externalUrl,proto3" json:"external_url,omitempty"`
}

func (x *SelectedGatewayWorkload) Reset() {
	*x = SelectedGatewayWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectedGatewayWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectedGatewayWorkload) ProtoMessage() {}

func (x *SelectedGatewayWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectedGatewayWorkload.ProtoReflect.Descriptor instead.
func (*SelectedGatewayWorkload) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *SelectedGatewayWorkload) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SelectedGatewayWorkload) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SelectedGatewayWorkload) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *SelectedGatewayWorkload) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SelectedGatewayWorkload) GetExternalUrl() string {
	if x != nil {
		return x.ExternalUrl
	}
	return ""
}

// Note: This message needs to be at this level (rather than nested) due to cue restrictions.
type SDSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target uri for the sds channel. currently only a unix domain socket is supported.
	TargetUri string `protobuf:"bytes,1,opt,name=target_uri,json=targetUri,proto3" json:"target_uri,omitempty"`
	// Types that are assignable to SdsBuilder:
	//	*SDSConfig_CallCredentials_
	//	*SDSConfig_ClusterName
	SdsBuilder isSDSConfig_SdsBuilder `protobuf_oneof:"sds_builder"`
	// The name of the secret containing the certificate
	CertificatesSecretName string `protobuf:"bytes,3,opt,name=certificates_secret_name,json=certificatesSecretName,proto3" json:"certificates_secret_name,omitempty"`
	// The name of secret containing the validation context (i.e. root ca)
	ValidationContextName string `protobuf:"bytes,4,opt,name=validation_context_name,json=validationContextName,proto3" json:"validation_context_name,omitempty"`
}

func (x *SDSConfig) Reset() {
	*x = SDSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDSConfig) ProtoMessage() {}

func (x *SDSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDSConfig.ProtoReflect.Descriptor instead.
func (*SDSConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *SDSConfig) GetTargetUri() string {
	if x != nil {
		return x.TargetUri
	}
	return ""
}

func (m *SDSConfig) GetSdsBuilder() isSDSConfig_SdsBuilder {
	if m != nil {
		return m.SdsBuilder
	}
	return nil
}

func (x *SDSConfig) GetCallCredentials() *SDSConfig_CallCredentials {
	if x, ok := x.GetSdsBuilder().(*SDSConfig_CallCredentials_); ok {
		return x.CallCredentials
	}
	return nil
}

func (x *SDSConfig) GetClusterName() string {
	if x, ok := x.GetSdsBuilder().(*SDSConfig_ClusterName); ok {
		return x.ClusterName
	}
	return ""
}

func (x *SDSConfig) GetCertificatesSecretName() string {
	if x != nil {
		return x.CertificatesSecretName
	}
	return ""
}

func (x *SDSConfig) GetValidationContextName() string {
	if x != nil {
		return x.ValidationContextName
	}
	return ""
}

type isSDSConfig_SdsBuilder interface {
	isSDSConfig_SdsBuilder()
}

type SDSConfig_CallCredentials_ struct {
	// Call credentials.
	CallCredentials *SDSConfig_CallCredentials `protobuf:"bytes,2,opt,name=call_credentials,json=callCredentials,proto3,oneof"`
}

type SDSConfig_ClusterName struct {
	// The name of the sds cluster in envoy
	ClusterName string `protobuf:"bytes,5,opt,name=cluster_name,json=clusterName,proto3,oneof"`
}

func (*SDSConfig_CallCredentials_) isSDSConfig_SdsBuilder() {}

func (*SDSConfig_ClusterName) isSDSConfig_SdsBuilder() {}

// Options for deploying the VirtualGateway to an Istio Ingress Gateway
type VirtualGatewaySpec_DeployToIngressGateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bind address the gateway should serve traffic on
	// This maps to the Envoy Listener address.
	// Defaults to "::" or "0.0.0.0".
	BindAddress string `protobuf:"bytes,1,opt,name=bind_address,json=bindAddress,proto3" json:"bind_address,omitempty"`
	// The bind port where the gateway workload will listen for connections.
	// This maps to the Envoy Listener port.
	BindPort uint32 `protobuf:"varint,2,opt,name=bind_port,json=bindPort,proto3" json:"bind_port,omitempty"`
	// Select which gateway workloads (Envoy pods / Istio ingress-gateways) this config applies to.
	// Ingress pods selected must be in the same Mesh (or Federated VirtualMesh) as the Destination services
	// being routed to.
	GatewayWorkloads []*v1.WorkloadSelector `protobuf:"bytes,3,rep,name=gateway_workloads,json=gatewayWorkloads,proto3" json:"gateway_workloads,omitempty"`
}

func (x *VirtualGatewaySpec_DeployToIngressGateway) Reset() {
	*x = VirtualGatewaySpec_DeployToIngressGateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_DeployToIngressGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_DeployToIngressGateway) ProtoMessage() {}

func (x *VirtualGatewaySpec_DeployToIngressGateway) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_DeployToIngressGateway.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_DeployToIngressGateway) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 0}
}

func (x *VirtualGatewaySpec_DeployToIngressGateway) GetBindAddress() string {
	if x != nil {
		return x.BindAddress
	}
	return ""
}

func (x *VirtualGatewaySpec_DeployToIngressGateway) GetBindPort() uint32 {
	if x != nil {
		return x.BindPort
	}
	return 0
}

func (x *VirtualGatewaySpec_DeployToIngressGateway) GetGatewayWorkloads() []*v1.WorkloadSelector {
	if x != nil {
		return x.GatewayWorkloads
	}
	return nil
}

// Each ConnnectionHandler specifies a `connectionMatch` (required if using multiple ConnectionHandlers) and
// a set of (HTTP or TCP) routes to serve matched connections.
type VirtualGatewaySpec_ConnectionHandler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Additional options for matching a connection to a specific gateway.
	// This is required when more than one `connectionHandler` is specified for a single gateway.
	// Typically this is used to serve different
	ConnectionMatch *VirtualGatewaySpec_ConnectionHandler_ConnectionMatch `protobuf:"bytes,1,opt,name=connection_match,json=connectionMatch,proto3" json:"connection_match,omitempty"`
	// The type of routes this handler will serve.
	// HttpRoutes creates a listener with an http_connection_manager.
	// TcpRoutes creates a listener with a tcp proxy filter.
	//
	// Types that are assignable to HandlerType:
	//	*VirtualGatewaySpec_ConnectionHandler_Http
	//	*VirtualGatewaySpec_ConnectionHandler_Tcp
	HandlerType isVirtualGatewaySpec_ConnectionHandler_HandlerType `protobuf_oneof:"handler_type"`
	// Top level optional configuration for all routes on the ConnectionHandler.
	ConnectionOptions *VirtualGatewaySpec_ConnectionHandler_ConnectionOptions `protobuf:"bytes,4,opt,name=connection_options,json=connectionOptions,proto3" json:"connection_options,omitempty"`
}

func (x *VirtualGatewaySpec_ConnectionHandler) Reset() {
	*x = VirtualGatewaySpec_ConnectionHandler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_ConnectionHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_ConnectionHandler) ProtoMessage() {}

func (x *VirtualGatewaySpec_ConnectionHandler) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_ConnectionHandler) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1}
}

func (x *VirtualGatewaySpec_ConnectionHandler) GetConnectionMatch() *VirtualGatewaySpec_ConnectionHandler_ConnectionMatch {
	if x != nil {
		return x.ConnectionMatch
	}
	return nil
}

func (m *VirtualGatewaySpec_ConnectionHandler) GetHandlerType() isVirtualGatewaySpec_ConnectionHandler_HandlerType {
	if m != nil {
		return m.HandlerType
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler) GetHttp() *VirtualGatewaySpec_ConnectionHandler_HttpRoutes {
	if x, ok := x.GetHandlerType().(*VirtualGatewaySpec_ConnectionHandler_Http); ok {
		return x.Http
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler) GetTcp() *VirtualGatewaySpec_ConnectionHandler_TcpRoutes {
	if x, ok := x.GetHandlerType().(*VirtualGatewaySpec_ConnectionHandler_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler) GetConnectionOptions() *VirtualGatewaySpec_ConnectionHandler_ConnectionOptions {
	if x != nil {
		return x.ConnectionOptions
	}
	return nil
}

type isVirtualGatewaySpec_ConnectionHandler_HandlerType interface {
	isVirtualGatewaySpec_ConnectionHandler_HandlerType()
}

type VirtualGatewaySpec_ConnectionHandler_Http struct {
	Http *VirtualGatewaySpec_ConnectionHandler_HttpRoutes `protobuf:"bytes,2,opt,name=http,proto3,oneof"`
}

type VirtualGatewaySpec_ConnectionHandler_Tcp struct {
	Tcp *VirtualGatewaySpec_ConnectionHandler_TcpRoutes `protobuf:"bytes,3,opt,name=tcp,proto3,oneof"`
}

func (*VirtualGatewaySpec_ConnectionHandler_Http) isVirtualGatewaySpec_ConnectionHandler_HandlerType() {
}

func (*VirtualGatewaySpec_ConnectionHandler_Tcp) isVirtualGatewaySpec_ConnectionHandler_HandlerType() {
}

// TODO: Fill in more options
type VirtualGatewaySpec_GatewayOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Soft limit on size of the listener's new connection read and write buffers. If unspecified, defaults to 1MiB
	// For more info, check out the [Envoy docs](https://www.envoyproxy.io/docs/envoy/v1.17.1/api-v3/config/listener/v3/listener.proto)
	PerConnectionBufferLimitBytes *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=per_connection_buffer_limit_bytes,json=perConnectionBufferLimitBytes,proto3" json:"per_connection_buffer_limit_bytes,omitempty"`
}

func (x *VirtualGatewaySpec_GatewayOptions) Reset() {
	*x = VirtualGatewaySpec_GatewayOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_GatewayOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_GatewayOptions) ProtoMessage() {}

func (x *VirtualGatewaySpec_GatewayOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_GatewayOptions.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_GatewayOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 2}
}

func (x *VirtualGatewaySpec_GatewayOptions) GetPerConnectionBufferLimitBytes() *wrappers.UInt32Value {
	if x != nil {
		return x.PerConnectionBufferLimitBytes
	}
	return nil
}

type VirtualGatewaySpec_ConnectionHandler_ConnectionMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protocol
	TransportProtocol string `protobuf:"bytes,1,opt,name=transport_protocol,json=transportProtocol,proto3" json:"transport_protocol,omitempty"`
	// If non-empty, a list of server names (e.g. SNI for TLS protocol) to consider when determining
	// a `connectionMatch`. Those values will be compared against the server names of a new
	// connection, when detected by one of the listener filters.
	//
	// The server name will be matched against all wildcard domains, i.e. `www.example.com`
	// will be first matched against `www.example.com`, then `*.example.com`, then ``*.com`.
	//
	// Note that partial wildcards are not supported, and values like `*w.example.com` are invalid.
	ServerNames []string `protobuf:"bytes,2,rep,name=server_names,json=serverNames,proto3" json:"server_names,omitempty"`
}

func (x *VirtualGatewaySpec_ConnectionHandler_ConnectionMatch) Reset() {
	*x = VirtualGatewaySpec_ConnectionHandler_ConnectionMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_ConnectionHandler_ConnectionMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_ConnectionHandler_ConnectionMatch) ProtoMessage() {}

func (x *VirtualGatewaySpec_ConnectionHandler_ConnectionMatch) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler_ConnectionMatch.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_ConnectionHandler_ConnectionMatch) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *VirtualGatewaySpec_ConnectionHandler_ConnectionMatch) GetTransportProtocol() string {
	if x != nil {
		return x.TransportProtocol
	}
	return ""
}

func (x *VirtualGatewaySpec_ConnectionHandler_ConnectionMatch) GetServerNames() []string {
	if x != nil {
		return x.ServerNames
	}
	return nil
}

// TODO: Fill ConnectionOptions
type VirtualGatewaySpec_ConnectionHandler_ConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO
	TlsContext *VirtualGatewaySpec_ConnectionHandler_ConnectionOptions_TlsTerminationOptions `protobuf:"bytes,1,opt,name=tls_context,json=tlsContext,proto3" json:"tls_context,omitempty"`
	// Restricts filter from being added to the corresponding Envoy Listener unless they are explicitly configured
	// in the connection handler options
	StrictFilterManagement bool `protobuf:"varint,8,opt,name=strict_filter_management,json=strictFilterManagement,proto3" json:"strict_filter_management,omitempty"`
	// enable PROXY protocol for this connection handler.
	EnableProxyProtocol bool `protobuf:"varint,4,opt,name=enable_proxy_protocol,json=enableProxyProtocol,proto3" json:"enable_proxy_protocol,omitempty"`
}

func (x *VirtualGatewaySpec_ConnectionHandler_ConnectionOptions) Reset() {
	*x = VirtualGatewaySpec_ConnectionHandler_ConnectionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_ConnectionHandler_ConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_ConnectionHandler_ConnectionOptions) ProtoMessage() {}

func (x *VirtualGatewaySpec_ConnectionHandler_ConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler_ConnectionOptions.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_ConnectionHandler_ConnectionOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *VirtualGatewaySpec_ConnectionHandler_ConnectionOptions) GetTlsContext() *VirtualGatewaySpec_ConnectionHandler_ConnectionOptions_TlsTerminationOptions {
	if x != nil {
		return x.TlsContext
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_ConnectionOptions) GetStrictFilterManagement() bool {
	if x != nil {
		return x.StrictFilterManagement
	}
	return false
}

func (x *VirtualGatewaySpec_ConnectionHandler_ConnectionOptions) GetEnableProxyProtocol() bool {
	if x != nil {
		return x.EnableProxyProtocol
	}
	return false
}

type VirtualGatewaySpec_ConnectionHandler_HttpRoutes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteConfig []*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier `protobuf:"bytes,1,rep,name=route_config,json=routeConfig,proto3" json:"route_config,omitempty"`
	// HTTP Listener Options // Root level RouteTable + VirtualHost + routes level
	RouteOptions *VirtualGatewaySpec_ConnectionHandler_HttpRoutes_HttpOptions `protobuf:"bytes,8,opt,name=route_options,json=routeOptions,proto3" json:"route_options,omitempty"`
}

func (x *VirtualGatewaySpec_ConnectionHandler_HttpRoutes) Reset() {
	*x = VirtualGatewaySpec_ConnectionHandler_HttpRoutes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_ConnectionHandler_HttpRoutes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_ConnectionHandler_HttpRoutes) ProtoMessage() {}

func (x *VirtualGatewaySpec_ConnectionHandler_HttpRoutes) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler_HttpRoutes.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_ConnectionHandler_HttpRoutes) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *VirtualGatewaySpec_ConnectionHandler_HttpRoutes) GetRouteConfig() []*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier {
	if x != nil {
		return x.RouteConfig
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_HttpRoutes) GetRouteOptions() *VirtualGatewaySpec_ConnectionHandler_HttpRoutes_HttpOptions {
	if x != nil {
		return x.RouteOptions
	}
	return nil
}

type VirtualGatewaySpec_ConnectionHandler_TcpRoutes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TCP hosts that the gateway can route to
	TcpHosts []*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost `protobuf:"bytes,1,rep,name=tcp_hosts,json=tcpHosts,proto3" json:"tcp_hosts,omitempty"`
	// TCP Gateway configuration
	Options *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes) Reset() {
	*x = VirtualGatewaySpec_ConnectionHandler_TcpRoutes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes) ProtoMessage() {}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler_TcpRoutes.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes) GetTcpHosts() []*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost {
	if x != nil {
		return x.TcpHosts
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes) GetOptions() *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type VirtualGatewaySpec_ConnectionHandler_ConnectionOptions_TlsTerminationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If specified, the route will match against whether or not a certificate is presented.
	// If not specified, certificate presentation status (true or false) will not be considered when route matching.
	Presented *wrappers.BoolValue `protobuf:"bytes,1,opt,name=presented,proto3" json:"presented,omitempty"`
	// If specified, the route will match against whether or not a certificate is validated.
	// If not specified, certificate validation status (true or false) will not be considered when route matching.
	Validated *wrappers.BoolValue `protobuf:"bytes,2,opt,name=validated,proto3" json:"validated,omitempty"`
}

func (x *VirtualGatewaySpec_ConnectionHandler_ConnectionOptions_TlsTerminationOptions) Reset() {
	*x = VirtualGatewaySpec_ConnectionHandler_ConnectionOptions_TlsTerminationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_ConnectionHandler_ConnectionOptions_TlsTerminationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_ConnectionHandler_ConnectionOptions_TlsTerminationOptions) ProtoMessage() {}

func (x *VirtualGatewaySpec_ConnectionHandler_ConnectionOptions_TlsTerminationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler_ConnectionOptions_TlsTerminationOptions.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_ConnectionHandler_ConnectionOptions_TlsTerminationOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1, 1, 0}
}

func (x *VirtualGatewaySpec_ConnectionHandler_ConnectionOptions_TlsTerminationOptions) GetPresented() *wrappers.BoolValue {
	if x != nil {
		return x.Presented
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_ConnectionOptions_TlsTerminationOptions) GetValidated() *wrappers.BoolValue {
	if x != nil {
		return x.Validated
	}
	return nil
}

type VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RouteType:
	//	*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier_VirtualHostSelector
	//	*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier_VirtualHost
	RouteType isVirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier_RouteType `protobuf_oneof:"route_type"`
}

func (x *VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier) Reset() {
	*x = VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier) ProtoMessage() {}

func (x *VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1, 2, 0}
}

func (m *VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier) GetRouteType() isVirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier_RouteType {
	if m != nil {
		return m.RouteType
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier) GetVirtualHostSelector() *v1.ObjectSelector {
	if x, ok := x.GetRouteType().(*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier_VirtualHostSelector); ok {
		return x.VirtualHostSelector
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier) GetVirtualHost() *VirtualHostSpec {
	if x, ok := x.GetRouteType().(*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier_VirtualHost); ok {
		return x.VirtualHost
	}
	return nil
}

type isVirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier_RouteType interface {
	isVirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier_RouteType()
}

type VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier_VirtualHostSelector struct {
	// RouteSelector is used to specify which VirtualHosts should be attached to this gateway.
	VirtualHostSelector *v1.ObjectSelector `protobuf:"bytes,1,opt,name=virtual_host_selector,json=virtualHostSelector,proto3,oneof"`
}

type VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier_VirtualHost struct {
	// VirtualHost allows in-lining a route table directly in the Gateway Resource, for simple configs using fewer CRDs.
	// Note that Kubernetes admission validation of inline virtual hosts is disabled. For production, the use of `virtualHostSelector` is recommended.
	VirtualHost *VirtualHostSpec `protobuf:"bytes,2,opt,name=virtual_host,json=virtualHost,proto3,oneof"`
}

func (*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier_VirtualHostSelector) isVirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier_RouteType() {
}

func (*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier_VirtualHost) isVirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier_RouteType() {
}

type VirtualGatewaySpec_ConnectionHandler_HttpRoutes_HttpOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configure Global CSRF options for clients connected to this Gateway.
	Csrf *v12.CsrfPolicy `protobuf:"bytes,2,opt,name=csrf,proto3" json:"csrf,omitempty"`
	// Configure Global Rate limit options for clients connected to this Gateway.
	// Rate limits must be configured on specific routes in order to enable rate limiting for a Gateway.
	RateLimit *ratelimit.GatewayRateLimit `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *VirtualGatewaySpec_ConnectionHandler_HttpRoutes_HttpOptions) Reset() {
	*x = VirtualGatewaySpec_ConnectionHandler_HttpRoutes_HttpOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_ConnectionHandler_HttpRoutes_HttpOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_HttpOptions) ProtoMessage() {}

func (x *VirtualGatewaySpec_ConnectionHandler_HttpRoutes_HttpOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler_HttpRoutes_HttpOptions.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_HttpOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1, 2, 1}
}

func (x *VirtualGatewaySpec_ConnectionHandler_HttpRoutes_HttpOptions) GetCsrf() *v12.CsrfPolicy {
	if x != nil {
		return x.Csrf
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_HttpRoutes_HttpOptions) GetRateLimit() *ratelimit.GatewayRateLimit {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

type VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the logical name of the tcp host. names must be unique for each tcp host within a listener
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If provided, the Gateway will serve TLS/SSL traffic for this set of routes
	SslConfig   *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig `protobuf:"bytes,2,opt,name=ssl_config,json=sslConfig,proto3" json:"ssl_config,omitempty"`
	Destination *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost) Reset() {
	*x = VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost) ProtoMessage() {}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1, 3, 0}
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost) GetSslConfig() *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig {
	if x != nil {
		return x.SslConfig
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost) GetDestination() *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction {
	if x != nil {
		return x.Destination
	}
	return nil
}

type VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TcpProxySettings *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings `protobuf:"bytes,1,opt,name=tcp_proxy_settings,json=tcpProxySettings,proto3" json:"tcp_proxy_settings,omitempty"`
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions) Reset() {
	*x = VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions) ProtoMessage() {}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1, 3, 1}
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions) GetTcpProxySettings() *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings {
	if x != nil {
		return x.TcpProxySettings
	}
	return nil
}

// SslConfig contains the options necessary to configure a virtual host or listener to use TLS
type VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SslSecrets:
	//	*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SecretRef
	//	*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslFiles
	//	*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_Sds
	SslSecrets isVirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslSecrets `protobuf_oneof:"ssl_secrets"`
	// optional. the SNI domains that should be considered for TLS connections
	SniDomains []string `protobuf:"bytes,3,rep,name=sni_domains,json=sniDomains,proto3" json:"sni_domains,omitempty"`
	// Verify that the Subject Alternative Name in the peer certificate is one of the specified values.
	// note that a root_ca must be provided if this option is used.
	VerifySubjectAltName []string                                                                        `protobuf:"bytes,5,rep,name=verify_subject_alt_name,json=verifySubjectAltName,proto3" json:"verify_subject_alt_name,omitempty"`
	Parameters           *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters `protobuf:"bytes,6,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// Set Application Level Protocol Negotiation
	// If empty, defaults to ["h2", "http/1.1"].
	AlpnProtocols []string `protobuf:"bytes,7,rep,name=alpn_protocols,json=alpnProtocols,proto3" json:"alpn_protocols,omitempty"`
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig) Reset() {
	*x = VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig) ProtoMessage() {}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1, 3, 0, 0}
}

func (m *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig) GetSslSecrets() isVirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslSecrets {
	if m != nil {
		return m.SslSecrets
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig) GetSecretRef() *v11.ObjectRef {
	if x, ok := x.GetSslSecrets().(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SecretRef); ok {
		return x.SecretRef
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig) GetSslFiles() *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SSLFiles {
	if x, ok := x.GetSslSecrets().(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslFiles); ok {
		return x.SslFiles
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig) GetSds() *SDSConfig {
	if x, ok := x.GetSslSecrets().(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_Sds); ok {
		return x.Sds
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig) GetSniDomains() []string {
	if x != nil {
		return x.SniDomains
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig) GetVerifySubjectAltName() []string {
	if x != nil {
		return x.VerifySubjectAltName
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig) GetParameters() *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig) GetAlpnProtocols() []string {
	if x != nil {
		return x.AlpnProtocols
	}
	return nil
}

type isVirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslSecrets interface {
	isVirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslSecrets()
}

type VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SecretRef struct {
	// SecretRef contains the secret ref to a gloo tls secret or a kubernetes tls secret.
	// gloo tls secret can contain a root ca as well if verification is needed.
	SecretRef *v11.ObjectRef `protobuf:"bytes,1,opt,name=secret_ref,json=secretRef,proto3,oneof"`
}

type VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslFiles struct {
	// SSLFiles reference paths to certificates which are local to the proxy
	SslFiles *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SSLFiles `protobuf:"bytes,2,opt,name=ssl_files,json=sslFiles,proto3,oneof"`
}

type VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_Sds struct {
	// Use secret discovery service.
	Sds *SDSConfig `protobuf:"bytes,4,opt,name=sds,proto3,oneof"`
}

func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SecretRef) isVirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslSecrets() {
}

func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslFiles) isVirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslSecrets() {
}

func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_Sds) isVirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslSecrets() {
}

// Name of the destinations the gateway can route to.
// Note: the destination spec and subsets are not supported in this context and will be ignored.
type VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Destination:
	//	*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Static
	//	*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Virtual
	//	*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Kube
	//	*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_ForwardSniClusterName
	Destination isVirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Destination `protobuf_oneof:"destination"`
	// Relative weight of this destination to others in the same route.
	// If omitted, all destinations in the route will be load balanced between evenly.
	Weight uint32 `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction) Reset() {
	*x = VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction) ProtoMessage() {}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1, 3, 0, 1}
}

func (m *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction) GetDestination() isVirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction) GetStatic() *v11.ObjectRef {
	if x, ok := x.GetDestination().(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Static); ok {
		return x.Static
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction) GetVirtual() *v11.ObjectRef {
	if x, ok := x.GetDestination().(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Virtual); ok {
		return x.Virtual
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction) GetKube() *v11.ClusterObjectRef {
	if x, ok := x.GetDestination().(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Kube); ok {
		return x.Kube
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction) GetForwardSniClusterName() *empty.Empty {
	if x, ok := x.GetDestination().(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_ForwardSniClusterName); ok {
		return x.ForwardSniClusterName
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type isVirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Destination interface {
	isVirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Destination()
}

type VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Static struct {
	// Reference to a gloo mesh Static Destination
	Static *v11.ObjectRef `protobuf:"bytes,1,opt,name=static,proto3,oneof"`
}

type VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Virtual struct {
	// Reference to a gloo mesh VirtualDestination
	Virtual *v11.ObjectRef `protobuf:"bytes,2,opt,name=virtual,proto3,oneof"`
}

type VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Kube struct {
	// Reference to a Kubernetes Service. Note that the service must exist in the same mesh or virtual mesh (with federation enabled) as
	// each gateway workload which routes to this destination.
	Kube *v11.ClusterObjectRef `protobuf:"bytes,3,opt,name=kube,proto3,oneof"`
}

type VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_ForwardSniClusterName struct {
	// Forwards the request to a cluster name matching the TLS SNI name
	// https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/network/sni_cluster/empty/sni_cluster
	// Note: This filter will only work properly with TLS connections in which the upstream SNI domain is specified
	ForwardSniClusterName *empty.Empty `protobuf:"bytes,4,opt,name=forward_sni_cluster_name,json=forwardSniClusterName,proto3,oneof"`
}

func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Static) isVirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Destination() {
}

func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Virtual) isVirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Destination() {
}

func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Kube) isVirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Destination() {
}

func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_ForwardSniClusterName) isVirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Destination() {
}

type VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SSLFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TlsCert string `protobuf:"bytes,1,opt,name=tls_cert,json=tlsCert,proto3" json:"tls_cert,omitempty"`
	TlsKey  string `protobuf:"bytes,2,opt,name=tls_key,json=tlsKey,proto3" json:"tls_key,omitempty"`
	// for client cert validation. optional
	RootCa string `protobuf:"bytes,3,opt,name=root_ca,json=rootCa,proto3" json:"root_ca,omitempty"`
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SSLFiles) Reset() {
	*x = VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SSLFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SSLFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SSLFiles) ProtoMessage() {}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SSLFiles) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SSLFiles.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SSLFiles) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1, 3, 0, 0, 0}
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SSLFiles) GetTlsCert() string {
	if x != nil {
		return x.TlsCert
	}
	return ""
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SSLFiles) GetTlsKey() string {
	if x != nil {
		return x.TlsKey
	}
	return ""
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SSLFiles) GetRootCa() string {
	if x != nil {
		return x.RootCa
	}
	return ""
}

// General TLS parameters. See the [envoy docs](https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/auth/cert.proto#envoy-api-enum-auth-tlsparameters-tlsprotocol)
// for more information on the meaning of these values.
type VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinimumProtocolVersion VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion `protobuf:"varint,1,opt,name=minimum_protocol_version,json=minimumProtocolVersion,proto3,enum=networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion" json:"minimum_protocol_version,omitempty"`
	MaximumProtocolVersion VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion `protobuf:"varint,2,opt,name=maximum_protocol_version,json=maximumProtocolVersion,proto3,enum=networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion" json:"maximum_protocol_version,omitempty"`
	CipherSuites           []string                                                                                       `protobuf:"bytes,3,rep,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
	EcdhCurves             []string                                                                                       `protobuf:"bytes,4,rep,name=ecdh_curves,json=ecdhCurves,proto3" json:"ecdh_curves,omitempty"`
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters) Reset() {
	*x = VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters) ProtoMessage() {
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1, 3, 0, 0, 1}
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters) GetMinimumProtocolVersion() VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion {
	if x != nil {
		return x.MinimumProtocolVersion
	}
	return VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_TLS_AUTO
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters) GetMaximumProtocolVersion() VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion {
	if x != nil {
		return x.MaximumProtocolVersion
	}
	return VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_TLS_AUTO
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters) GetCipherSuites() []string {
	if x != nil {
		return x.CipherSuites
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters) GetEcdhCurves() []string {
	if x != nil {
		return x.EcdhCurves
	}
	return nil
}

type VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains various settings for Envoy's tcp proxy filter.
	// See here for more information: https://www.envoyproxy.io/docs/envoy/v1.10.0/api-v2/config/filter/network/tcp_proxy/v2/tcp_proxy.proto#envoy-api-msg-config-filter-network-tcp-proxy-v2-tcpproxy
	MaxConnectAttempts *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=max_connect_attempts,json=maxConnectAttempts,proto3" json:"max_connect_attempts,omitempty"`
	IdleTimeout        *duration.Duration    `protobuf:"bytes,2,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// If set, this configures tunneling, e.g. configuration options to tunnel multiple TCP
	// payloads over a shared HTTP tunnel. If this message is absent, the payload
	// will be proxied upstream as per usual.
	TunnelingConfig *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings_TunnelingConfig `protobuf:"bytes,12,opt,name=tunneling_config,json=tunnelingConfig,proto3" json:"tunneling_config,omitempty"`
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings) Reset() {
	*x = VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings) ProtoMessage() {}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1, 3, 1, 0}
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings) GetMaxConnectAttempts() *wrappers.UInt32Value {
	if x != nil {
		return x.MaxConnectAttempts
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings) GetIdleTimeout() *duration.Duration {
	if x != nil {
		return x.IdleTimeout
	}
	return nil
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings) GetTunnelingConfig() *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings_TunnelingConfig {
	if x != nil {
		return x.TunnelingConfig
	}
	return nil
}

// Configuration for tunneling TCP over other transports or application layers.
type VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings_TunnelingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hostname to send in the synthesized CONNECT headers to the upstream proxy.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings_TunnelingConfig) Reset() {
	*x = VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings_TunnelingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings_TunnelingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings_TunnelingConfig) ProtoMessage() {
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings_TunnelingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings_TunnelingConfig.ProtoReflect.Descriptor instead.
func (*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings_TunnelingConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{0, 1, 3, 1, 0, 0}
}

func (x *VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings_TunnelingConfig) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type SDSConfig_CallCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Call credentials are coming from a file,
	FileCredentialSource *SDSConfig_CallCredentials_FileCredentialSource `protobuf:"bytes,1,opt,name=file_credential_source,json=fileCredentialSource,proto3" json:"file_credential_source,omitempty"`
}

func (x *SDSConfig_CallCredentials) Reset() {
	*x = SDSConfig_CallCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDSConfig_CallCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDSConfig_CallCredentials) ProtoMessage() {}

func (x *SDSConfig_CallCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDSConfig_CallCredentials.ProtoReflect.Descriptor instead.
func (*SDSConfig_CallCredentials) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{3, 0}
}

func (x *SDSConfig_CallCredentials) GetFileCredentialSource() *SDSConfig_CallCredentials_FileCredentialSource {
	if x != nil {
		return x.FileCredentialSource
	}
	return nil
}

type SDSConfig_CallCredentials_FileCredentialSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File containing auth token.
	TokenFileName string `protobuf:"bytes,1,opt,name=token_file_name,json=tokenFileName,proto3" json:"token_file_name,omitempty"`
	// Header to carry the token.
	Header string `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *SDSConfig_CallCredentials_FileCredentialSource) Reset() {
	*x = SDSConfig_CallCredentials_FileCredentialSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDSConfig_CallCredentials_FileCredentialSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDSConfig_CallCredentials_FileCredentialSource) ProtoMessage() {}

func (x *SDSConfig_CallCredentials_FileCredentialSource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDSConfig_CallCredentials_FileCredentialSource.ProtoReflect.Descriptor instead.
func (*SDSConfig_CallCredentials_FileCredentialSource) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *SDSConfig_CallCredentials_FileCredentialSource) GetTokenFileName() string {
	if x != nil {
		return x.TokenFileName
	}
	return ""
}

func (x *SDSConfig_CallCredentials_FileCredentialSource) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

var File_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDesc = []byte{
	0x0a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f,
	0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6b, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f,
	0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x66, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x73, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x49, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69,
	0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61,
	0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f,
	0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x75, 0x65, 0x2f,
	0x63, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x29,
	0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x8f, 0x01, 0x0a, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f,
	0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x6f, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x17, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x6f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x6f, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73,
	0x12, 0x7e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73,
	0x12, 0x64, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xb1, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x54, 0x6f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x57, 0x0a, 0x11, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x1a, 0xf2, 0x22, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x12, 0x88, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x6e, 0x0a, 0x04, 0x68,
	0x74, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x6b, 0x0a, 0x03, 0x74,
	0x63, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x03, 0x74, 0x63, 0x70, 0x12, 0x8e, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x63, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2d, 0x0a, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0xa8,
	0x03, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x75, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6c, 0x73, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0a, 0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a,
	0x18, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x8b, 0x01, 0x0a, 0x15,
	0x54, 0x6c, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0xb3, 0x05, 0x0a, 0x0a, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x67, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0xe4, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x15, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x13, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x64, 0x0a, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x42, 0x05, 0xea, 0x42, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xa4, 0x01, 0x0a, 0x0b, 0x48, 0x74, 0x74,
	0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x73, 0x72, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x73, 0x72, 0x66, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x04, 0x63, 0x73, 0x72, 0x66, 0x12, 0x57, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x61, 0x74,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a,
	0x8d, 0x15, 0x0a, 0x09, 0x54, 0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x7c, 0x0a,
	0x09, 0x74, 0x63, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e,
	0x54, 0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x70, 0x48, 0x6f, 0x73,
	0x74, 0x52, 0x08, 0x74, 0x63, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x7c, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x63, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xcc, 0x0e, 0x0a, 0x07, 0x54, 0x63,
	0x70, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0a, 0x73, 0x73,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x63,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x2e,
	0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x8b, 0x01, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x63, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x2e, 0x54, 0x63, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xde, 0x09, 0x0a, 0x09, 0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x66, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66, 0x12,
	0x91, 0x01, 0x0a, 0x09, 0x73, 0x73, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x2e, 0x54, 0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x70,
	0x48, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x53, 0x4c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x73, 0x73, 0x6c, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x03, 0x73, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x44, 0x53, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x03, 0x73, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x6e, 0x69, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6e, 0x69, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x17,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61,
	0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x77, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x54, 0x63, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x6c, 0x70, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x70, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x1a, 0x57, 0x0a, 0x08, 0x53, 0x53, 0x4c, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x6c, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6c,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x61, 0x1a, 0xb4, 0x04,
	0x0a, 0x0d, 0x53, 0x73, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0xc2, 0x01, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x87, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x2e, 0x54, 0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x70,
	0x48, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x73, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0xc2, 0x01, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x87, 0x01, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x54, 0x63, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x73, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x63, 0x64, 0x68, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x63, 0x64, 0x68, 0x43, 0x75, 0x72, 0x76, 0x65, 0x73, 0x22,
	0x53, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x4c, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x4c, 0x53, 0x76, 0x31, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x54, 0x4c, 0x53, 0x76, 0x31, 0x5f, 0x31, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x4c,
	0x53, 0x76, 0x31, 0x5f, 0x32, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x4c, 0x53, 0x76, 0x31,
	0x5f, 0x33, 0x10, 0x04, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x73, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x1a, 0xb2, 0x02, 0x0a, 0x09, 0x54, 0x63, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x07, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x04, 0x6b, 0x75, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x04, 0x6b, 0x75, 0x62, 0x65, 0x12, 0x51,
	0x0a, 0x18, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6e, 0x69, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x53, 0x6e, 0x69, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb4, 0x04, 0x0a, 0x0a, 0x54, 0x63, 0x70,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x2e, 0x54, 0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x54, 0x63,
	0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x74, 0x63, 0x70, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x81, 0x03, 0x0a, 0x10,
	0x54, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x4e, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x12, 0x3c, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0xaf,
	0x01, 0x0a, 0x10, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x83, 0x01, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x63, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54,
	0x63, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x2d, 0x0a, 0x0f, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a,
	0x78, 0x0a, 0x0e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x66, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x70, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x92, 0x05, 0x0a, 0x14, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6d, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x52, 0x0a, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b,
	0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x66, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x8d, 0x01, 0x0a,
	0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x73, 0x74, 0x69, 0x6f, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x1a, 0x70, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2,
	0x02, 0x0a, 0x17, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x64, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xbd, 0x04, 0x0a, 0x09, 0x53, 0x44, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x69,
	0x12, 0x6f, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x44, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xf9, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x6c,
	0x6c, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x8d, 0x01, 0x0a,
	0x16, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x44, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x56, 0x0a, 0x14,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x64, 0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x42, 0x5a, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xc0, 0xf5, 0x04, 0x01, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescData = file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_goTypes = []interface{}{
	(VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters_ProtocolVersion)(0), // 0: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.SslConfig.SslParameters.ProtocolVersion
	(*VirtualGatewaySpec)(nil),                                                                         // 1: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec
	(*VirtualGatewayStatus)(nil),                                                                       // 2: networking.enterprise.mesh.gloo.solo.io.VirtualGatewayStatus
	(*SelectedGatewayWorkload)(nil),                                                                    // 3: networking.enterprise.mesh.gloo.solo.io.SelectedGatewayWorkload
	(*SDSConfig)(nil),                                                                                  // 4: networking.enterprise.mesh.gloo.solo.io.SDSConfig
	(*VirtualGatewaySpec_DeployToIngressGateway)(nil),                                                  // 5: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.DeployToIngressGateway
	(*VirtualGatewaySpec_ConnectionHandler)(nil),                                                       // 6: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler
	(*VirtualGatewaySpec_GatewayOptions)(nil),                                                          // 7: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.GatewayOptions
	(*VirtualGatewaySpec_ConnectionHandler_ConnectionMatch)(nil),                                       // 8: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.ConnectionMatch
	(*VirtualGatewaySpec_ConnectionHandler_ConnectionOptions)(nil),                                     // 9: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.ConnectionOptions
	(*VirtualGatewaySpec_ConnectionHandler_HttpRoutes)(nil),                                            // 10: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.HttpRoutes
	(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes)(nil),                                             // 11: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes
	(*VirtualGatewaySpec_ConnectionHandler_ConnectionOptions_TlsTerminationOptions)(nil),               // 12: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.ConnectionOptions.TlsTerminationOptions
	(*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier)(nil),                             // 13: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.HttpRoutes.RouteSpecifier
	(*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_HttpOptions)(nil),                                // 14: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.HttpRoutes.HttpOptions
	(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost)(nil),                                     // 15: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost
	(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions)(nil),                                  // 16: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpOptions
	(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig)(nil),                           // 17: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.SslConfig
	(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction)(nil),                           // 18: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.TcpAction
	(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SSLFiles)(nil),                  // 19: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.SslConfig.SSLFiles
	(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters)(nil),             // 20: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.SslConfig.SslParameters
	(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings)(nil),                 // 21: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpOptions.TcpProxySettings
	(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings_TunnelingConfig)(nil), // 22: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpOptions.TcpProxySettings.TunnelingConfig
	nil,                               // 23: networking.enterprise.mesh.gloo.solo.io.VirtualGatewayStatus.CreatedIstioGatewaysEntry
	nil,                               // 24: networking.enterprise.mesh.gloo.solo.io.SelectedGatewayWorkload.LabelsEntry
	(*SDSConfig_CallCredentials)(nil), // 25: networking.enterprise.mesh.gloo.solo.io.SDSConfig.CallCredentials
	(*SDSConfig_CallCredentials_FileCredentialSource)(nil), // 26: networking.enterprise.mesh.gloo.solo.io.SDSConfig.CallCredentials.FileCredentialSource
	(*v1.WorkloadSelector)(nil),                            // 27: common.mesh.gloo.solo.io.WorkloadSelector
	(*v11.ObjectRef)(nil),                                  // 28: core.skv2.solo.io.ObjectRef
	(*wrappers.UInt32Value)(nil),                           // 29: google.protobuf.UInt32Value
	(*wrappers.BoolValue)(nil),                             // 30: google.protobuf.BoolValue
	(*v1.ObjectSelector)(nil),                              // 31: common.mesh.gloo.solo.io.ObjectSelector
	(*VirtualHostSpec)(nil),                                // 32: networking.enterprise.mesh.gloo.solo.io.VirtualHostSpec
	(*v12.CsrfPolicy)(nil),                                 // 33: networking.mesh.gloo.solo.io.CsrfPolicy
	(*ratelimit.GatewayRateLimit)(nil),                     // 34: ratelimit.networking.mesh.gloo.solo.io.GatewayRateLimit
	(*v11.ClusterObjectRef)(nil),                           // 35: core.skv2.solo.io.ClusterObjectRef
	(*empty.Empty)(nil),                                    // 36: google.protobuf.Empty
	(*duration.Duration)(nil),                              // 37: google.protobuf.Duration
	(*v1.ObjectRefList)(nil),                               // 38: common.mesh.gloo.solo.io.ObjectRefList
}
var file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_depIdxs = []int32{
	5,  // 0: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.deploy_to_ingress_gateways:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.DeployToIngressGateway
	27, // 1: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.deploy_to_sidecars:type_name -> common.mesh.gloo.solo.io.WorkloadSelector
	6,  // 2: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.connection_handlers:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler
	7,  // 3: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.options:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.GatewayOptions
	3,  // 4: networking.enterprise.mesh.gloo.solo.io.VirtualGatewayStatus.selected_gateways:type_name -> networking.enterprise.mesh.gloo.solo.io.SelectedGatewayWorkload
	28, // 5: networking.enterprise.mesh.gloo.solo.io.VirtualGatewayStatus.selected_virtual_hosts:type_name -> core.skv2.solo.io.ObjectRef
	28, // 6: networking.enterprise.mesh.gloo.solo.io.VirtualGatewayStatus.selected_route_tables:type_name -> core.skv2.solo.io.ObjectRef
	23, // 7: networking.enterprise.mesh.gloo.solo.io.VirtualGatewayStatus.created_istio_gateways:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewayStatus.CreatedIstioGatewaysEntry
	24, // 8: networking.enterprise.mesh.gloo.solo.io.SelectedGatewayWorkload.labels:type_name -> networking.enterprise.mesh.gloo.solo.io.SelectedGatewayWorkload.LabelsEntry
	25, // 9: networking.enterprise.mesh.gloo.solo.io.SDSConfig.call_credentials:type_name -> networking.enterprise.mesh.gloo.solo.io.SDSConfig.CallCredentials
	27, // 10: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.DeployToIngressGateway.gateway_workloads:type_name -> common.mesh.gloo.solo.io.WorkloadSelector
	8,  // 11: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.connection_match:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.ConnectionMatch
	10, // 12: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.http:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.HttpRoutes
	11, // 13: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.tcp:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes
	9,  // 14: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.connection_options:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.ConnectionOptions
	29, // 15: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.GatewayOptions.per_connection_buffer_limit_bytes:type_name -> google.protobuf.UInt32Value
	12, // 16: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.ConnectionOptions.tls_context:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.ConnectionOptions.TlsTerminationOptions
	13, // 17: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.HttpRoutes.route_config:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.HttpRoutes.RouteSpecifier
	14, // 18: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.HttpRoutes.route_options:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.HttpRoutes.HttpOptions
	15, // 19: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.tcp_hosts:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost
	16, // 20: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.options:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpOptions
	30, // 21: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.ConnectionOptions.TlsTerminationOptions.presented:type_name -> google.protobuf.BoolValue
	30, // 22: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.ConnectionOptions.TlsTerminationOptions.validated:type_name -> google.protobuf.BoolValue
	31, // 23: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.HttpRoutes.RouteSpecifier.virtual_host_selector:type_name -> common.mesh.gloo.solo.io.ObjectSelector
	32, // 24: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.HttpRoutes.RouteSpecifier.virtual_host:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualHostSpec
	33, // 25: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.HttpRoutes.HttpOptions.csrf:type_name -> networking.mesh.gloo.solo.io.CsrfPolicy
	34, // 26: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.HttpRoutes.HttpOptions.rate_limit:type_name -> ratelimit.networking.mesh.gloo.solo.io.GatewayRateLimit
	17, // 27: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.ssl_config:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.SslConfig
	18, // 28: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.destination:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.TcpAction
	21, // 29: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpOptions.tcp_proxy_settings:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpOptions.TcpProxySettings
	28, // 30: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.SslConfig.secret_ref:type_name -> core.skv2.solo.io.ObjectRef
	19, // 31: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.SslConfig.ssl_files:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.SslConfig.SSLFiles
	4,  // 32: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.SslConfig.sds:type_name -> networking.enterprise.mesh.gloo.solo.io.SDSConfig
	20, // 33: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.SslConfig.parameters:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.SslConfig.SslParameters
	28, // 34: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.TcpAction.static:type_name -> core.skv2.solo.io.ObjectRef
	28, // 35: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.TcpAction.virtual:type_name -> core.skv2.solo.io.ObjectRef
	35, // 36: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.TcpAction.kube:type_name -> core.skv2.solo.io.ClusterObjectRef
	36, // 37: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.TcpAction.forward_sni_cluster_name:type_name -> google.protobuf.Empty
	0,  // 38: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.SslConfig.SslParameters.minimum_protocol_version:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.SslConfig.SslParameters.ProtocolVersion
	0,  // 39: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.SslConfig.SslParameters.maximum_protocol_version:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpHost.SslConfig.SslParameters.ProtocolVersion
	29, // 40: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpOptions.TcpProxySettings.max_connect_attempts:type_name -> google.protobuf.UInt32Value
	37, // 41: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpOptions.TcpProxySettings.idle_timeout:type_name -> google.protobuf.Duration
	22, // 42: networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpOptions.TcpProxySettings.tunneling_config:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualGatewaySpec.ConnectionHandler.TcpRoutes.TcpOptions.TcpProxySettings.TunnelingConfig
	38, // 43: networking.enterprise.mesh.gloo.solo.io.VirtualGatewayStatus.CreatedIstioGatewaysEntry.value:type_name -> common.mesh.gloo.solo.io.ObjectRefList
	26, // 44: networking.enterprise.mesh.gloo.solo.io.SDSConfig.CallCredentials.file_credential_source:type_name -> networking.enterprise.mesh.gloo.solo.io.SDSConfig.CallCredentials.FileCredentialSource
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_init()
}
func file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_init() {
	if File_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_host_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewayStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectedGatewayWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_DeployToIngressGateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_ConnectionHandler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_GatewayOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_ConnectionHandler_ConnectionMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_ConnectionHandler_ConnectionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_ConnectionHandler_HttpRoutes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_ConnectionHandler_ConnectionOptions_TlsTerminationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_HttpOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SSLFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpOptions_TcpProxySettings_TunnelingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDSConfig_CallCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDSConfig_CallCredentials_FileCredentialSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SDSConfig_CallCredentials_)(nil),
		(*SDSConfig_ClusterName)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*VirtualGatewaySpec_ConnectionHandler_Http)(nil),
		(*VirtualGatewaySpec_ConnectionHandler_Tcp)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier_VirtualHostSelector)(nil),
		(*VirtualGatewaySpec_ConnectionHandler_HttpRoutes_RouteSpecifier_VirtualHost)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SecretRef)(nil),
		(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_SslFiles)(nil),
		(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_SslConfig_Sds)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Static)(nil),
		(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Virtual)(nil),
		(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_Kube)(nil),
		(*VirtualGatewaySpec_ConnectionHandler_TcpRoutes_TcpHost_TcpAction_ForwardSniClusterName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto = out.File
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1beta1_virtual_gateway_proto_depIdxs = nil
}
