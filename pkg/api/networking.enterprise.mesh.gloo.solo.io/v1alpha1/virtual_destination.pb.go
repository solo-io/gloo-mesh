// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo-mesh/api/enterprise/networking/v1alpha1/virtual_destination.proto

package v1alpha1

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1alpha2"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//
//A VirtualDestination creates a new hostname to which client workloads can send requests.
//Requests will be routed based on either a list of backing traffic targets ordered by
//explicit priority, or a list of locality directives. Each TrafficTarget backing the
//VirtualDestination must be configured with outlier detection through a TrafficPolicy.
//
//Currently this feature only supports TrafficTargets backed by Istio.
type VirtualDestinationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The DNS name of the VirtualDestination. Must be unique within the service mesh instance.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The port on which the VirtualDestination listens.
	Port *VirtualDestinationSpec_Port `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	// The VirtualDestination can be made visible to either a mesh, a VirtualMesh, or a subset of meshes within the same VirtualMesh.
	//
	// Types that are assignable to ExportTo:
	//	*VirtualDestinationSpec_VirtualMesh
	//	*VirtualDestinationSpec_MeshList_
	ExportTo isVirtualDestinationSpec_ExportTo `protobuf_oneof:"export_to"`
	// Configuration that determines failover behavior.
	//
	// Types that are assignable to FailoverConfig:
	//	*VirtualDestinationSpec_Static
	//	*VirtualDestinationSpec_Localized
	FailoverConfig isVirtualDestinationSpec_FailoverConfig `protobuf_oneof:"failover_config"`
}

func (x *VirtualDestinationSpec) Reset() {
	*x = VirtualDestinationSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualDestinationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualDestinationSpec) ProtoMessage() {}

func (x *VirtualDestinationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualDestinationSpec.ProtoReflect.Descriptor instead.
func (*VirtualDestinationSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescGZIP(), []int{0}
}

func (x *VirtualDestinationSpec) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *VirtualDestinationSpec) GetPort() *VirtualDestinationSpec_Port {
	if x != nil {
		return x.Port
	}
	return nil
}

func (m *VirtualDestinationSpec) GetExportTo() isVirtualDestinationSpec_ExportTo {
	if m != nil {
		return m.ExportTo
	}
	return nil
}

func (x *VirtualDestinationSpec) GetVirtualMesh() *v1.ObjectRef {
	if x, ok := x.GetExportTo().(*VirtualDestinationSpec_VirtualMesh); ok {
		return x.VirtualMesh
	}
	return nil
}

func (x *VirtualDestinationSpec) GetMeshList() *VirtualDestinationSpec_MeshList {
	if x, ok := x.GetExportTo().(*VirtualDestinationSpec_MeshList_); ok {
		return x.MeshList
	}
	return nil
}

func (m *VirtualDestinationSpec) GetFailoverConfig() isVirtualDestinationSpec_FailoverConfig {
	if m != nil {
		return m.FailoverConfig
	}
	return nil
}

func (x *VirtualDestinationSpec) GetStatic() *VirtualDestinationSpec_BackingServiceList {
	if x, ok := x.GetFailoverConfig().(*VirtualDestinationSpec_Static); ok {
		return x.Static
	}
	return nil
}

func (x *VirtualDestinationSpec) GetLocalized() *VirtualDestinationSpec_LocalityConfig {
	if x, ok := x.GetFailoverConfig().(*VirtualDestinationSpec_Localized); ok {
		return x.Localized
	}
	return nil
}

type isVirtualDestinationSpec_ExportTo interface {
	isVirtualDestinationSpec_ExportTo()
}

type VirtualDestinationSpec_VirtualMesh struct {
	// The VirtualMesh that this VirtualDestination will be visible to.
	VirtualMesh *v1.ObjectRef `protobuf:"bytes,3,opt,name=virtual_mesh,json=virtualMesh,proto3,oneof"`
}

type VirtualDestinationSpec_MeshList_ struct {
	// The meshes that this VirtualDestination will be visible to. If multiple meshes are specified, they must
	// all belong to the same VirtualMesh.
	MeshList *VirtualDestinationSpec_MeshList `protobuf:"bytes,4,opt,name=mesh_list,json=meshList,proto3,oneof"`
}

func (*VirtualDestinationSpec_VirtualMesh) isVirtualDestinationSpec_ExportTo() {}

func (*VirtualDestinationSpec_MeshList_) isVirtualDestinationSpec_ExportTo() {}

type isVirtualDestinationSpec_FailoverConfig interface {
	isVirtualDestinationSpec_FailoverConfig()
}

type VirtualDestinationSpec_Static struct {
	// Failover priority is determined by an explicitly provided static ordering of TrafficTargets.
	Static *VirtualDestinationSpec_BackingServiceList `protobuf:"bytes,5,opt,name=static,proto3,oneof"`
}

type VirtualDestinationSpec_Localized struct {
	// Failover priority is determined by the localities of the traffic source and destination.
	Localized *VirtualDestinationSpec_LocalityConfig `protobuf:"bytes,6,opt,name=localized,proto3,oneof"`
}

func (*VirtualDestinationSpec_Static) isVirtualDestinationSpec_FailoverConfig() {}

func (*VirtualDestinationSpec_Localized) isVirtualDestinationSpec_FailoverConfig() {}

// A service represented by a TrafficTarget
type BackingService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Different traffic target types can be selected as backing services.
	//
	// Types that are assignable to BackingServiceType:
	//	*BackingService_KubeService
	BackingServiceType isBackingService_BackingServiceType `protobuf_oneof:"backing_service_type"`
}

func (x *BackingService) Reset() {
	*x = BackingService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackingService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackingService) ProtoMessage() {}

func (x *BackingService) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackingService.ProtoReflect.Descriptor instead.
func (*BackingService) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescGZIP(), []int{1}
}

func (m *BackingService) GetBackingServiceType() isBackingService_BackingServiceType {
	if m != nil {
		return m.BackingServiceType
	}
	return nil
}

func (x *BackingService) GetKubeService() *v1.ClusterObjectRef {
	if x, ok := x.GetBackingServiceType().(*BackingService_KubeService); ok {
		return x.KubeService
	}
	return nil
}

type isBackingService_BackingServiceType interface {
	isBackingService_BackingServiceType()
}

type BackingService_KubeService struct {
	// Name/namespace/cluster of a kubernetes service.
	KubeService *v1.ClusterObjectRef `protobuf:"bytes,1,opt,name=kube_service,json=kubeService,proto3,oneof"`
}

func (*BackingService_KubeService) isBackingService_BackingServiceType() {}

type VirtualDestinationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The most recent generation observed in the the VirtualDestination metadata.
	// If the observedGeneration does not match generation, the controller has not received the most
	// recent version of this resource.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// The state of the overall resource, will only show accepted if it has been successfully
	// applied to all target meshes.
	State v1alpha2.ApprovalState `protobuf:"varint,2,opt,name=state,proto3,enum=networking.mesh.gloo.solo.io.ApprovalState" json:"state,omitempty"`
	// The status of the VirtualDestination for each Mesh to which it has been applied.
	Meshes map[string]*v1alpha2.ApprovalStatus `protobuf:"bytes,3,rep,name=meshes,proto3" json:"meshes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The traffic targets that comprise this Global Service.
	SelectedTrafficTargets []*VirtualDestinationStatus_SelectedTrafficTarget `protobuf:"bytes,4,rep,name=selected_traffic_targets,json=selectedTrafficTargets,proto3" json:"selected_traffic_targets,omitempty"`
	// Any errors found while processing this generation of the resource.
	Errors []string `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *VirtualDestinationStatus) Reset() {
	*x = VirtualDestinationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualDestinationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualDestinationStatus) ProtoMessage() {}

func (x *VirtualDestinationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualDestinationStatus.ProtoReflect.Descriptor instead.
func (*VirtualDestinationStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescGZIP(), []int{2}
}

func (x *VirtualDestinationStatus) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *VirtualDestinationStatus) GetState() v1alpha2.ApprovalState {
	if x != nil {
		return x.State
	}
	return v1alpha2.ApprovalState_PENDING
}

func (x *VirtualDestinationStatus) GetMeshes() map[string]*v1alpha2.ApprovalStatus {
	if x != nil {
		return x.Meshes
	}
	return nil
}

func (x *VirtualDestinationStatus) GetSelectedTrafficTargets() []*VirtualDestinationStatus_SelectedTrafficTarget {
	if x != nil {
		return x.SelectedTrafficTargets
	}
	return nil
}

func (x *VirtualDestinationStatus) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

// The port on which the VirtualDestination listens.
type VirtualDestinationSpec_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port number.
	Number uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// Protocol of the requests sent to the VirtualDestination. Must be one of HTTP, HTTPS, GRPC, HTTP2, MONGO, TCP, TLS.
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *VirtualDestinationSpec_Port) Reset() {
	*x = VirtualDestinationSpec_Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualDestinationSpec_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualDestinationSpec_Port) ProtoMessage() {}

func (x *VirtualDestinationSpec_Port) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualDestinationSpec_Port.ProtoReflect.Descriptor instead.
func (*VirtualDestinationSpec_Port) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescGZIP(), []int{0, 0}
}

func (x *VirtualDestinationSpec_Port) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *VirtualDestinationSpec_Port) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

// A list of mesh references.
type VirtualDestinationSpec_MeshList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meshes []*v1.ObjectRef `protobuf:"bytes,1,rep,name=meshes,proto3" json:"meshes,omitempty"`
}

func (x *VirtualDestinationSpec_MeshList) Reset() {
	*x = VirtualDestinationSpec_MeshList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualDestinationSpec_MeshList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualDestinationSpec_MeshList) ProtoMessage() {}

func (x *VirtualDestinationSpec_MeshList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualDestinationSpec_MeshList.ProtoReflect.Descriptor instead.
func (*VirtualDestinationSpec_MeshList) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescGZIP(), []int{0, 1}
}

func (x *VirtualDestinationSpec_MeshList) GetMeshes() []*v1.ObjectRef {
	if x != nil {
		return x.Meshes
	}
	return nil
}

// Configure failover based on a list of TrafficTargets. When a TrafficTarget in the list
// is in an unhealthy state (as determined by its outlier detection configuration), requests sent to the VirtualDestination will be routed to the next healthy TrafficTarget
// in the list.
type VirtualDestinationSpec_BackingServiceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of services backing the VirtualDestination, ordered by decreasing priority.
	// All services must be either in the same mesh or in meshes that are grouped under a common VirtualMesh.
	Services []*BackingService `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *VirtualDestinationSpec_BackingServiceList) Reset() {
	*x = VirtualDestinationSpec_BackingServiceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualDestinationSpec_BackingServiceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualDestinationSpec_BackingServiceList) ProtoMessage() {}

func (x *VirtualDestinationSpec_BackingServiceList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualDestinationSpec_BackingServiceList.ProtoReflect.Descriptor instead.
func (*VirtualDestinationSpec_BackingServiceList) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescGZIP(), []int{0, 2}
}

func (x *VirtualDestinationSpec_BackingServiceList) GetServices() []*BackingService {
	if x != nil {
		return x.Services
	}
	return nil
}

// Enables failover based on locality. When a client workload makes a request to the VirtualDestination, Gloo Mesh will
// first try to direct traffic to the service instance geographically closest to the client workload. If outlier
// detection detects that the closest traffic target is in an unhealthy state, requests will instead be routed
// to a service instance in one of the localities specified in the `to` field. Currently, each locality in the
// `to` field will be routed to with equal probability if the local instance is unhealthy.
type VirtualDestinationSpec_LocalityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selectors for the services backing the VirtualDestination.
	// All services must be either in the same mesh or in meshes that are grouped under a common VirtualMesh.
	// Currently only one service per cluster can be selected, more than one per cluster will be considered invalid.
	ServiceSelectors []*v1alpha2.TrafficTargetSelector `protobuf:"bytes,1,rep,name=service_selectors,json=serviceSelectors,proto3" json:"service_selectors,omitempty"`
	// Directives describing the locality failover behavior.
	FailoverDirectives []*VirtualDestinationSpec_LocalityConfig_LocalityFailoverDirective `protobuf:"bytes,2,rep,name=failover_directives,json=failoverDirectives,proto3" json:"failover_directives,omitempty"`
	// Outlier detection to determine the health of the selected services.
	OutlierDetection *v1alpha2.TrafficPolicySpec_OutlierDetection `protobuf:"bytes,3,opt,name=outlier_detection,json=outlierDetection,proto3" json:"outlier_detection,omitempty"`
}

func (x *VirtualDestinationSpec_LocalityConfig) Reset() {
	*x = VirtualDestinationSpec_LocalityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualDestinationSpec_LocalityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualDestinationSpec_LocalityConfig) ProtoMessage() {}

func (x *VirtualDestinationSpec_LocalityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualDestinationSpec_LocalityConfig.ProtoReflect.Descriptor instead.
func (*VirtualDestinationSpec_LocalityConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescGZIP(), []int{0, 3}
}

func (x *VirtualDestinationSpec_LocalityConfig) GetServiceSelectors() []*v1alpha2.TrafficTargetSelector {
	if x != nil {
		return x.ServiceSelectors
	}
	return nil
}

func (x *VirtualDestinationSpec_LocalityConfig) GetFailoverDirectives() []*VirtualDestinationSpec_LocalityConfig_LocalityFailoverDirective {
	if x != nil {
		return x.FailoverDirectives
	}
	return nil
}

func (x *VirtualDestinationSpec_LocalityConfig) GetOutlierDetection() *v1alpha2.TrafficPolicySpec_OutlierDetection {
	if x != nil {
		return x.OutlierDetection
	}
	return nil
}

type VirtualDestinationSpec_LocalityConfig_LocalityFailoverDirective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The locality of a client workload.
	From *VirtualDestinationSpec_LocalityConfig_Locality `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// The list of traffic target localities that can be routed to if the instance local to the client workload
	// is not available.
	To []*VirtualDestinationSpec_LocalityConfig_Locality `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty"`
}

func (x *VirtualDestinationSpec_LocalityConfig_LocalityFailoverDirective) Reset() {
	*x = VirtualDestinationSpec_LocalityConfig_LocalityFailoverDirective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualDestinationSpec_LocalityConfig_LocalityFailoverDirective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualDestinationSpec_LocalityConfig_LocalityFailoverDirective) ProtoMessage() {}

func (x *VirtualDestinationSpec_LocalityConfig_LocalityFailoverDirective) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualDestinationSpec_LocalityConfig_LocalityFailoverDirective.ProtoReflect.Descriptor instead.
func (*VirtualDestinationSpec_LocalityConfig_LocalityFailoverDirective) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *VirtualDestinationSpec_LocalityConfig_LocalityFailoverDirective) GetFrom() *VirtualDestinationSpec_LocalityConfig_Locality {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *VirtualDestinationSpec_LocalityConfig_LocalityFailoverDirective) GetTo() []*VirtualDestinationSpec_LocalityConfig_Locality {
	if x != nil {
		return x.To
	}
	return nil
}

// A geographic location defined by a region, zone, and sub-zone.
type VirtualDestinationSpec_LocalityConfig_Locality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The locality's region.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// The locality's zone. Currently this value is not used.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The locality's sub-zone. Currently this value is not used.
	SubZone string `protobuf:"bytes,3,opt,name=sub_zone,json=subZone,proto3" json:"sub_zone,omitempty"`
}

func (x *VirtualDestinationSpec_LocalityConfig_Locality) Reset() {
	*x = VirtualDestinationSpec_LocalityConfig_Locality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualDestinationSpec_LocalityConfig_Locality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualDestinationSpec_LocalityConfig_Locality) ProtoMessage() {}

func (x *VirtualDestinationSpec_LocalityConfig_Locality) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualDestinationSpec_LocalityConfig_Locality.ProtoReflect.Descriptor instead.
func (*VirtualDestinationSpec_LocalityConfig_Locality) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *VirtualDestinationSpec_LocalityConfig_Locality) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *VirtualDestinationSpec_LocalityConfig_Locality) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *VirtualDestinationSpec_LocalityConfig_Locality) GetSubZone() string {
	if x != nil {
		return x.SubZone
	}
	return ""
}

type VirtualDestinationStatus_SelectedTrafficTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the traffic target.
	Ref *v1.ClusterObjectRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// The service that the traffic target represents.
	Service *BackingService `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *VirtualDestinationStatus_SelectedTrafficTarget) Reset() {
	*x = VirtualDestinationStatus_SelectedTrafficTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualDestinationStatus_SelectedTrafficTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualDestinationStatus_SelectedTrafficTarget) ProtoMessage() {}

func (x *VirtualDestinationStatus_SelectedTrafficTarget) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualDestinationStatus_SelectedTrafficTarget.ProtoReflect.Descriptor instead.
func (*VirtualDestinationStatus_SelectedTrafficTarget) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescGZIP(), []int{2, 1}
}

func (x *VirtualDestinationStatus_SelectedTrafficTarget) GetRef() *v1.ClusterObjectRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *VirtualDestinationStatus_SelectedTrafficTarget) GetService() *BackingService {
	if x != nil {
		return x.Service
	}
	return nil
}

var File_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDesc = []byte{
	0x0a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6b, 0x76, 0x32, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65,
	0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67,
	0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f,
	0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x0b, 0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x0b, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x67, 0x0a, 0x09, 0x6d, 0x65,
	0x73, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d,
	0x65, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x12, 0x6e, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x1a, 0x3a, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x40, 0x0a,
	0x08, 0x4d, 0x65, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65, 0x73,
	0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x73, 0x1a,
	0x69, 0x0a, 0x12, 0x42, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0xc4, 0x05, 0x0a, 0x0e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x60, 0x0a,
	0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x99, 0x01, 0x0a, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x68, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65,
	0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x11, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xf1, 0x01, 0x0a, 0x19, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x6b, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x67, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x57, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x02, 0x74, 0x6f, 0x1a, 0x51,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x5a, 0x6f, 0x6e,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x42, 0x11,
	0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x72, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00,
	0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x16, 0x0a,
	0x14, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xae, 0x05, 0x0a, 0x18, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x73, 0x12, 0x91, 0x01,
	0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x57, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x67, 0x0a, 0x0b, 0x4d, 0x65, 0x73,
	0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0xa1, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x03,
	0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x03,
	0x72, 0x65, 0x66, 0x12, 0x51, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x5b, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f,
	0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xc0,
	0xf5, 0x04, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescData = file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_goTypes = []interface{}{
	(*VirtualDestinationSpec)(nil),                                          // 0: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec
	(*BackingService)(nil),                                                  // 1: networking.enterprise.mesh.gloo.solo.io.BackingService
	(*VirtualDestinationStatus)(nil),                                        // 2: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationStatus
	(*VirtualDestinationSpec_Port)(nil),                                     // 3: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.Port
	(*VirtualDestinationSpec_MeshList)(nil),                                 // 4: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.MeshList
	(*VirtualDestinationSpec_BackingServiceList)(nil),                       // 5: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.BackingServiceList
	(*VirtualDestinationSpec_LocalityConfig)(nil),                           // 6: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.LocalityConfig
	(*VirtualDestinationSpec_LocalityConfig_LocalityFailoverDirective)(nil), // 7: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.LocalityConfig.LocalityFailoverDirective
	(*VirtualDestinationSpec_LocalityConfig_Locality)(nil),                  // 8: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.LocalityConfig.Locality
	nil, // 9: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationStatus.MeshesEntry
	(*VirtualDestinationStatus_SelectedTrafficTarget)(nil), // 10: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationStatus.SelectedTrafficTarget
	(*v1.ObjectRef)(nil),                                // 11: core.skv2.solo.io.ObjectRef
	(*v1.ClusterObjectRef)(nil),                         // 12: core.skv2.solo.io.ClusterObjectRef
	(v1alpha2.ApprovalState)(0),                         // 13: networking.mesh.gloo.solo.io.ApprovalState
	(*v1alpha2.TrafficTargetSelector)(nil),              // 14: networking.mesh.gloo.solo.io.TrafficTargetSelector
	(*v1alpha2.TrafficPolicySpec_OutlierDetection)(nil), // 15: networking.mesh.gloo.solo.io.TrafficPolicySpec.OutlierDetection
	(*v1alpha2.ApprovalStatus)(nil),                     // 16: networking.mesh.gloo.solo.io.ApprovalStatus
}
var file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_depIdxs = []int32{
	3,  // 0: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.port:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.Port
	11, // 1: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.virtual_mesh:type_name -> core.skv2.solo.io.ObjectRef
	4,  // 2: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.mesh_list:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.MeshList
	5,  // 3: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.static:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.BackingServiceList
	6,  // 4: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.localized:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.LocalityConfig
	12, // 5: networking.enterprise.mesh.gloo.solo.io.BackingService.kube_service:type_name -> core.skv2.solo.io.ClusterObjectRef
	13, // 6: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationStatus.state:type_name -> networking.mesh.gloo.solo.io.ApprovalState
	9,  // 7: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationStatus.meshes:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualDestinationStatus.MeshesEntry
	10, // 8: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationStatus.selected_traffic_targets:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualDestinationStatus.SelectedTrafficTarget
	11, // 9: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.MeshList.meshes:type_name -> core.skv2.solo.io.ObjectRef
	1,  // 10: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.BackingServiceList.services:type_name -> networking.enterprise.mesh.gloo.solo.io.BackingService
	14, // 11: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.LocalityConfig.service_selectors:type_name -> networking.mesh.gloo.solo.io.TrafficTargetSelector
	7,  // 12: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.LocalityConfig.failover_directives:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.LocalityConfig.LocalityFailoverDirective
	15, // 13: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.LocalityConfig.outlier_detection:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.OutlierDetection
	8,  // 14: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.LocalityConfig.LocalityFailoverDirective.from:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.LocalityConfig.Locality
	8,  // 15: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.LocalityConfig.LocalityFailoverDirective.to:type_name -> networking.enterprise.mesh.gloo.solo.io.VirtualDestinationSpec.LocalityConfig.Locality
	16, // 16: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationStatus.MeshesEntry.value:type_name -> networking.mesh.gloo.solo.io.ApprovalStatus
	12, // 17: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationStatus.SelectedTrafficTarget.ref:type_name -> core.skv2.solo.io.ClusterObjectRef
	1,  // 18: networking.enterprise.mesh.gloo.solo.io.VirtualDestinationStatus.SelectedTrafficTarget.service:type_name -> networking.enterprise.mesh.gloo.solo.io.BackingService
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_init()
}
func file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_init() {
	if File_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualDestinationSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackingService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualDestinationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualDestinationSpec_Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualDestinationSpec_MeshList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualDestinationSpec_BackingServiceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualDestinationSpec_LocalityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualDestinationSpec_LocalityConfig_LocalityFailoverDirective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualDestinationSpec_LocalityConfig_Locality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualDestinationStatus_SelectedTrafficTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*VirtualDestinationSpec_VirtualMesh)(nil),
		(*VirtualDestinationSpec_MeshList_)(nil),
		(*VirtualDestinationSpec_Static)(nil),
		(*VirtualDestinationSpec_Localized)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*BackingService_KubeService)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto = out.File
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_virtual_destination_proto_depIdxs = nil
}
