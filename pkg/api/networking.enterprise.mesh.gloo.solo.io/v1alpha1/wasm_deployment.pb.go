// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo-mesh/api/enterprise/networking/v1alpha1/wasm_deployment.proto

package v1alpha1

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1alpha2"
	_ "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1alpha2/types"
	_ "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1alpha3 "istio.io/api/networking/v1alpha3"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// WorkloadState is the state of the WasmDeployment resource as it has been applied to an individual workload.
type WasmDeploymentStatus_WorkloadState int32

const (
	// DEPLOYMENT_PENDING filters have not yet been deployed to the target workload.
	WasmDeploymentStatus_DEPLOYMENT_PENDING WasmDeploymentStatus_WorkloadState = 0
	// FILTERS_DEPLOYED indicates the WASM Filters have been deployed to the target workload (along with any cluster dependencies).
	WasmDeploymentStatus_FILTERS_DEPLOYED WasmDeploymentStatus_WorkloadState = 1
	// DEPLOYMENT_FAILED indicates Deploying the WASM Filters to this workload failed
	WasmDeploymentStatus_DEPLOYMENT_FAILED WasmDeploymentStatus_WorkloadState = 2
)

// Enum value maps for WasmDeploymentStatus_WorkloadState.
var (
	WasmDeploymentStatus_WorkloadState_name = map[int32]string{
		0: "DEPLOYMENT_PENDING",
		1: "FILTERS_DEPLOYED",
		2: "DEPLOYMENT_FAILED",
	}
	WasmDeploymentStatus_WorkloadState_value = map[string]int32{
		"DEPLOYMENT_PENDING": 0,
		"FILTERS_DEPLOYED":   1,
		"DEPLOYMENT_FAILED":  2,
	}
)

func (x WasmDeploymentStatus_WorkloadState) Enum() *WasmDeploymentStatus_WorkloadState {
	p := new(WasmDeploymentStatus_WorkloadState)
	*p = x
	return p
}

func (x WasmDeploymentStatus_WorkloadState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WasmDeploymentStatus_WorkloadState) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_enumTypes[0].Descriptor()
}

func (WasmDeploymentStatus_WorkloadState) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_enumTypes[0]
}

func (x WasmDeploymentStatus_WorkloadState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WasmDeploymentStatus_WorkloadState.Descriptor instead.
func (WasmDeploymentStatus_WorkloadState) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDescGZIP(), []int{5, 0}
}

//
//A WasmDeployment deploys one or more WASM Envoy Filters to selected Sidecars and Gateways in a Mesh.
type WasmDeploymentSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//Sidecars/Gateways whose Workloads match these selectors will attach the specified WASM Filters.
	//Leave empty to have all workloads in the mesh apply receive the WASM Filter.
	WorkloadSelector []*v1alpha2.WorkloadSelector `protobuf:"bytes,1,rep,name=workload_selector,json=workloadSelector,proto3" json:"workload_selector,omitempty"`
	// Parameters for specifying the WASM filter
	Filters []*WasmFilterSpec `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	// weight is used to determine the order of WASM Filters when applying
	// multiple WasmDeployments to a single workload.
	// Deployed WASM filters will be sorted in order of
	// highest to lowest weight. WasmDeployments with equal weights will be
	// sorted non-deterministically.
	// Note that all WASM Filters are currently inserted just before the Envoy router filter
	// in the HTTP Connection Manager's HTTP Filter Chain.
	Weight uint32 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *WasmDeploymentSpec) Reset() {
	*x = WasmDeploymentSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasmDeploymentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmDeploymentSpec) ProtoMessage() {}

func (x *WasmDeploymentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmDeploymentSpec.ProtoReflect.Descriptor instead.
func (*WasmDeploymentSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDescGZIP(), []int{0}
}

func (x *WasmDeploymentSpec) GetWorkloadSelector() []*v1alpha2.WorkloadSelector {
	if x != nil {
		return x.WorkloadSelector
	}
	return nil
}

func (x *WasmDeploymentSpec) GetFilters() []*WasmFilterSpec {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *WasmDeploymentSpec) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// description of the WASM Filter to deploy
type WasmFilterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Several options are available for providing a source of the WASM filter file.
	// An option must be specified in order to execute the WasmDeployment.
	//
	// Types that are assignable to FilterSource:
	//	*WasmFilterSpec_LocalPathSource
	//	*WasmFilterSpec_HttpUriSource
	//	*WasmFilterSpec_WasmImageSource
	FilterSource isWasmFilterSpec_FilterSource `protobuf_oneof:"filter_source"`
	// Filter/service configuration used to configure or reconfigure a filter
	// (proxy_on_configuration).
	// Several options are available for providing a source of filter config (dynamic and static)/
	//
	// Types that are assignable to FilterConfigSource:
	//	*WasmFilterSpec_StaticFilterConfig
	//	*WasmFilterSpec_DynamicFilterConfig
	FilterConfigSource isWasmFilterSpec_FilterConfigSource `protobuf_oneof:"filter_config_source"`
	// the root id must match the root id
	// defined inside the filter.
	// if the user does not provide this field,
	// Gloo Mesh will attempt to pull the image
	// and set it from the filter_conf contained in the image config.
	// note that if the filter_source is not set to wasm_image_source,
	// this field is required
	RootId string `protobuf:"bytes,5,opt,name=root_id,json=rootId,proto3" json:"root_id,omitempty"`
	// An ID which will be used along with a hash of the wasm code
	// (or the name of the registered Null VM plugin) to determine which VM will be used to load the WASM filter.
	// All filters on the same proxy which use the same vm_id and code within will use the same VM.
	// May be left blank. Sharing a VM between plugins can reduce memory utilization and make sharing of data easier which may have security implications.
	VmId string `protobuf:"bytes,6,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	// The specific config generation context to which to attach the filter. Istio
	// generates envoy configuration in the context of a gateway,
	// inbound traffic to sidecar and outbound traffic from sidecar.
	// Uses the Istio default (ANY).
	FilterContext v1alpha3.EnvoyFilter_PatchContext `protobuf:"varint,7,opt,name=filter_context,json=filterContext,proto3,enum=istio.networking.v1alpha3.EnvoyFilter_PatchContext" json:"filter_context,omitempty"`
	// The filter in the Envoy HTTP Filter Chain immediately before which the WASM filter will be
	// inserted.
	// Defaults to `envoy.router`.
	InsertBeforeFilter string `protobuf:"bytes,9,opt,name=insert_before_filter,json=insertBeforeFilter,proto3" json:"insert_before_filter,omitempty"`
}

func (x *WasmFilterSpec) Reset() {
	*x = WasmFilterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasmFilterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmFilterSpec) ProtoMessage() {}

func (x *WasmFilterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmFilterSpec.ProtoReflect.Descriptor instead.
func (*WasmFilterSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDescGZIP(), []int{1}
}

func (m *WasmFilterSpec) GetFilterSource() isWasmFilterSpec_FilterSource {
	if m != nil {
		return m.FilterSource
	}
	return nil
}

func (x *WasmFilterSpec) GetLocalPathSource() string {
	if x, ok := x.GetFilterSource().(*WasmFilterSpec_LocalPathSource); ok {
		return x.LocalPathSource
	}
	return ""
}

func (x *WasmFilterSpec) GetHttpUriSource() *UriSource {
	if x, ok := x.GetFilterSource().(*WasmFilterSpec_HttpUriSource); ok {
		return x.HttpUriSource
	}
	return nil
}

func (x *WasmFilterSpec) GetWasmImageSource() *WasmImageSource {
	if x, ok := x.GetFilterSource().(*WasmFilterSpec_WasmImageSource); ok {
		return x.WasmImageSource
	}
	return nil
}

func (m *WasmFilterSpec) GetFilterConfigSource() isWasmFilterSpec_FilterConfigSource {
	if m != nil {
		return m.FilterConfigSource
	}
	return nil
}

func (x *WasmFilterSpec) GetStaticFilterConfig() *any.Any {
	if x, ok := x.GetFilterConfigSource().(*WasmFilterSpec_StaticFilterConfig); ok {
		return x.StaticFilterConfig
	}
	return nil
}

func (x *WasmFilterSpec) GetDynamicFilterConfig() string {
	if x, ok := x.GetFilterConfigSource().(*WasmFilterSpec_DynamicFilterConfig); ok {
		return x.DynamicFilterConfig
	}
	return ""
}

func (x *WasmFilterSpec) GetRootId() string {
	if x != nil {
		return x.RootId
	}
	return ""
}

func (x *WasmFilterSpec) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *WasmFilterSpec) GetFilterContext() v1alpha3.EnvoyFilter_PatchContext {
	if x != nil {
		return x.FilterContext
	}
	return v1alpha3.EnvoyFilter_ANY
}

func (x *WasmFilterSpec) GetInsertBeforeFilter() string {
	if x != nil {
		return x.InsertBeforeFilter
	}
	return ""
}

type isWasmFilterSpec_FilterSource interface {
	isWasmFilterSpec_FilterSource()
}

type WasmFilterSpec_LocalPathSource struct {
	// Select `local_path_source` to deploy the filter from a file accessible
	// to the workload proxy. Note that Gloo Mesh cannot verify
	// whether the target workload proxy containers contain the given path.
	// If filters do not load, please inspect the sidecar proxy logs.
	// TODO(ilackarms): see if we can somehow verify the filter exists in the proxy container and surface that on the WasmDeployment status
	LocalPathSource string `protobuf:"bytes,1,opt,name=local_path_source,json=localPathSource,proto3,oneof"`
}

type WasmFilterSpec_HttpUriSource struct {
	// Select `http_uri_source` to deploy the filter from an HTTP/S URI accessible
	// to the workload proxy. Note that Gloo Mesh cannot verify
	// whether the target workload proxy containers have HTTP accesss the given URI.
	// If filters do not load, please inspect the sidecar proxy logs.
	// TODO(ilackarms): see if we can somehow verify the filter exists in the proxy container and surface that on the WasmDeployment status
	// TODO(ilackarms): we may need to provide options for customizing the Cluster given to envoy along with the HTTP Fetch URI. currently Gloo Mesh will create a simple plaintext HTTP cluster from the Host/Port specified in the URI.
	HttpUriSource *UriSource `protobuf:"bytes,2,opt,name=http_uri_source,json=httpUriSource,proto3,oneof"`
}

type WasmFilterSpec_WasmImageSource struct {
	// fetch the image from a [WASM OCI Registry](https://webassemblyhub.io/)
	// Images can be built and pushed to registries using `meshctl` and `wasme`.
	WasmImageSource *WasmImageSource `protobuf:"bytes,3,opt,name=wasm_image_source,json=wasmImageSource,proto3,oneof"`
}

func (*WasmFilterSpec_LocalPathSource) isWasmFilterSpec_FilterSource() {}

func (*WasmFilterSpec_HttpUriSource) isWasmFilterSpec_FilterSource() {}

func (*WasmFilterSpec_WasmImageSource) isWasmFilterSpec_FilterSource() {}

type isWasmFilterSpec_FilterConfigSource interface {
	isWasmFilterSpec_FilterConfigSource()
}

type WasmFilterSpec_StaticFilterConfig struct {
	// Provide configuration as a static
	// `google.protobuf.Struct` is serialized as JSON before
	// passing it to the plugin. `google.protobuf.BytesValue` and
	// `google.protobuf.StringValue` are passed directly without the wrapper.
	StaticFilterConfig *any.Any `protobuf:"bytes,4,opt,name=static_filter_config,json=staticFilterConfig,proto3,oneof"`
}

type WasmFilterSpec_DynamicFilterConfig struct {
	// Provide configuration from a dynamic configuration source.
	// This is used to connect proxies to a user-provided configuration server
	// rather than using the WasmDeployment CR to update filter configuration.
	// NOTE: Not currently implemented. This field serves as a placeholder.
	// passing it to the plugin. `google.protobuf.BytesValue` and
	// `google.protobuf.StringValue` are passed directly without the wrapper.
	// TODO(ilackarms): implement with dynamic filter config source (FCDS) https://github.com/envoyproxy/envoy/issues/7867
	DynamicFilterConfig string `protobuf:"bytes,8,opt,name=dynamic_filter_config,json=dynamicFilterConfig,proto3,oneof"`
}

func (*WasmFilterSpec_StaticFilterConfig) isWasmFilterSpec_FilterConfigSource() {}

func (*WasmFilterSpec_DynamicFilterConfig) isWasmFilterSpec_FilterConfigSource() {}

// Specifies options for fetching WASM Filters from an HTTP URI.
type UriSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP URI from which to fetch the filter
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// The Sha256 Checksum of the filter binary (will be verified by the proxy).
	// Required.
	Sha string `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *UriSource) Reset() {
	*x = UriSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UriSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UriSource) ProtoMessage() {}

func (x *UriSource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UriSource.ProtoReflect.Descriptor instead.
func (*UriSource) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDescGZIP(), []int{2}
}

func (x *UriSource) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *UriSource) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

// Specifies options for fetching WASM Filters from a [WASM-compatible OCI Registry](https://webassemblyhub.io/)
// Images can be built and pushed to registries using `meshctl` and `wasme`.
type WasmImageSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the full tag of the wasm image. should include the registry address at the beginning, e.g. webassemblyhub.io/ilackarms/helloworld:v0.1
	WasmImageTag string `protobuf:"bytes,1,opt,name=wasm_image_tag,json=wasmImageTag,proto3" json:"wasm_image_tag,omitempty"`
}

func (x *WasmImageSource) Reset() {
	*x = WasmImageSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasmImageSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmImageSource) ProtoMessage() {}

func (x *WasmImageSource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmImageSource.ProtoReflect.Descriptor instead.
func (*WasmImageSource) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDescGZIP(), []int{3}
}

func (x *WasmImageSource) GetWasmImageTag() string {
	if x != nil {
		return x.WasmImageTag
	}
	return ""
}

// NOTE: ImagePullOptions are currently unsupported
type ImagePullOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if a username/password is required,
	// specify here the name of a secret:
	// with keys:
	// * username: <username>
	// * password: <password>
	//
	// the secret must live in the WASM Cache Agent namespace
	// as the FilterDeployment
	PullSecret string `protobuf:"bytes,1,opt,name=pullSecret,proto3" json:"pullSecret,omitempty"`
	// skip verifying the image server's TLS certificate
	InsecureSkipVerify bool `protobuf:"varint,2,opt,name=insecureSkipVerify,proto3" json:"insecureSkipVerify,omitempty"`
	// use HTTP instead of HTTPS
	PlainHttp bool `protobuf:"varint,3,opt,name=plainHttp,proto3" json:"plainHttp,omitempty"`
}

func (x *ImagePullOptions) Reset() {
	*x = ImagePullOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagePullOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePullOptions) ProtoMessage() {}

func (x *ImagePullOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagePullOptions.ProtoReflect.Descriptor instead.
func (*ImagePullOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDescGZIP(), []int{4}
}

func (x *ImagePullOptions) GetPullSecret() string {
	if x != nil {
		return x.PullSecret
	}
	return ""
}

func (x *ImagePullOptions) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

func (x *ImagePullOptions) GetPlainHttp() bool {
	if x != nil {
		return x.PlainHttp
	}
	return false
}

type WasmDeploymentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The most recent generation observed in the the WasmDeployment metadata.
	// if the observedGeneration does not match generation, the controller has not received the most
	// recent version of this resource.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// Any errors encountered while processing this generation of the resource.
	// This can include failures to pull a WASM image as well as missing or invalid
	// fields in the spec.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// the state of the WasmDeployment as it has been applied to each individual workload.
	WorkloadStates map[string]WasmDeploymentStatus_WorkloadState `protobuf:"bytes,3,rep,name=workload_states,json=workloadStates,proto3" json:"workload_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=networking.enterprise.mesh.gloo.solo.io.WasmDeploymentStatus_WorkloadState"`
}

func (x *WasmDeploymentStatus) Reset() {
	*x = WasmDeploymentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasmDeploymentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmDeploymentStatus) ProtoMessage() {}

func (x *WasmDeploymentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmDeploymentStatus.ProtoReflect.Descriptor instead.
func (*WasmDeploymentStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDescGZIP(), []int{5}
}

func (x *WasmDeploymentStatus) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *WasmDeploymentStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *WasmDeploymentStatus) GetWorkloadStates() map[string]WasmDeploymentStatus_WorkloadState {
	if x != nil {
		return x.WorkloadStates
	}
	return nil
}

var File_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDesc = []byte{
	0x0a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f,
	0x73, 0x6b, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f,
	0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x26, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x01, 0x0a, 0x12, 0x57, 0x61, 0x73, 0x6d,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5b,
	0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe9, 0x04, 0x0a, 0x0e, 0x57, 0x61, 0x73, 0x6d, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x75, 0x72, 0x69, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x55, 0x72, 0x69, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x11, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x77, 0x61,
	0x73, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a,
	0x14, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x48, 0x01, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e,
	0x45, 0x6e, 0x76, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x2f, 0x0a, 0x09, 0x55, 0x72, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x69, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x68, 0x61, 0x22, 0x37, 0x0a, 0x0f, 0x57, 0x61, 0x73, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x77, 0x61, 0x73, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x22, 0x80, 0x01, 0x0a,
	0x10, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69,
	0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x48, 0x74, 0x74, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x48, 0x74, 0x74, 0x70, 0x22,
	0xc0, 0x03, 0x0a, 0x14, 0x57, 0x61, 0x73, 0x6d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x7a, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x8e, 0x01, 0x0a, 0x13,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x61, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57,
	0x61, 0x73, 0x6d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x54, 0x0a, 0x0d,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x53,
	0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x44,
	0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x42, 0x57, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65,
	0x73, 0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDescData = file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_goTypes = []interface{}{
	(WasmDeploymentStatus_WorkloadState)(0), // 0: networking.enterprise.mesh.gloo.solo.io.WasmDeploymentStatus.WorkloadState
	(*WasmDeploymentSpec)(nil),              // 1: networking.enterprise.mesh.gloo.solo.io.WasmDeploymentSpec
	(*WasmFilterSpec)(nil),                  // 2: networking.enterprise.mesh.gloo.solo.io.WasmFilterSpec
	(*UriSource)(nil),                       // 3: networking.enterprise.mesh.gloo.solo.io.UriSource
	(*WasmImageSource)(nil),                 // 4: networking.enterprise.mesh.gloo.solo.io.WasmImageSource
	(*ImagePullOptions)(nil),                // 5: networking.enterprise.mesh.gloo.solo.io.ImagePullOptions
	(*WasmDeploymentStatus)(nil),            // 6: networking.enterprise.mesh.gloo.solo.io.WasmDeploymentStatus
	nil,                                     // 7: networking.enterprise.mesh.gloo.solo.io.WasmDeploymentStatus.WorkloadStatesEntry
	(*v1alpha2.WorkloadSelector)(nil),       // 8: networking.mesh.gloo.solo.io.WorkloadSelector
	(*any.Any)(nil),                         // 9: google.protobuf.Any
	(v1alpha3.EnvoyFilter_PatchContext)(0),  // 10: istio.networking.v1alpha3.EnvoyFilter.PatchContext
}
var file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_depIdxs = []int32{
	8,  // 0: networking.enterprise.mesh.gloo.solo.io.WasmDeploymentSpec.workload_selector:type_name -> networking.mesh.gloo.solo.io.WorkloadSelector
	2,  // 1: networking.enterprise.mesh.gloo.solo.io.WasmDeploymentSpec.filters:type_name -> networking.enterprise.mesh.gloo.solo.io.WasmFilterSpec
	3,  // 2: networking.enterprise.mesh.gloo.solo.io.WasmFilterSpec.http_uri_source:type_name -> networking.enterprise.mesh.gloo.solo.io.UriSource
	4,  // 3: networking.enterprise.mesh.gloo.solo.io.WasmFilterSpec.wasm_image_source:type_name -> networking.enterprise.mesh.gloo.solo.io.WasmImageSource
	9,  // 4: networking.enterprise.mesh.gloo.solo.io.WasmFilterSpec.static_filter_config:type_name -> google.protobuf.Any
	10, // 5: networking.enterprise.mesh.gloo.solo.io.WasmFilterSpec.filter_context:type_name -> istio.networking.v1alpha3.EnvoyFilter.PatchContext
	7,  // 6: networking.enterprise.mesh.gloo.solo.io.WasmDeploymentStatus.workload_states:type_name -> networking.enterprise.mesh.gloo.solo.io.WasmDeploymentStatus.WorkloadStatesEntry
	0,  // 7: networking.enterprise.mesh.gloo.solo.io.WasmDeploymentStatus.WorkloadStatesEntry.value:type_name -> networking.enterprise.mesh.gloo.solo.io.WasmDeploymentStatus.WorkloadState
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_init()
}
func file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_init() {
	if File_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasmDeploymentSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasmFilterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UriSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasmImageSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagePullOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasmDeploymentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*WasmFilterSpec_LocalPathSource)(nil),
		(*WasmFilterSpec_HttpUriSource)(nil),
		(*WasmFilterSpec_WasmImageSource)(nil),
		(*WasmFilterSpec_StaticFilterConfig)(nil),
		(*WasmFilterSpec_DynamicFilterConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto = out.File
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_api_enterprise_networking_v1alpha1_wasm_deployment_proto_depIdxs = nil
}
