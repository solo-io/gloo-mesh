// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/security.smh.solo.io/v1alpha1"
	controller "github.com/solo-io/service-mesh-hub/pkg/api/security.smh.solo.io/v1alpha1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockVirtualMeshCertificateSigningRequestReconciler is a mock of VirtualMeshCertificateSigningRequestReconciler interface.
type MockVirtualMeshCertificateSigningRequestReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshCertificateSigningRequestReconcilerMockRecorder
}

// MockVirtualMeshCertificateSigningRequestReconcilerMockRecorder is the mock recorder for MockVirtualMeshCertificateSigningRequestReconciler.
type MockVirtualMeshCertificateSigningRequestReconcilerMockRecorder struct {
	mock *MockVirtualMeshCertificateSigningRequestReconciler
}

// NewMockVirtualMeshCertificateSigningRequestReconciler creates a new mock instance.
func NewMockVirtualMeshCertificateSigningRequestReconciler(ctrl *gomock.Controller) *MockVirtualMeshCertificateSigningRequestReconciler {
	mock := &MockVirtualMeshCertificateSigningRequestReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshCertificateSigningRequestReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshCertificateSigningRequestReconciler) EXPECT() *MockVirtualMeshCertificateSigningRequestReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestReconciler) ReconcileVirtualMeshCertificateSigningRequest(obj *v1alpha1.VirtualMeshCertificateSigningRequest) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualMeshCertificateSigningRequest", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualMeshCertificateSigningRequest indicates an expected call of ReconcileVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestReconcilerMockRecorder) ReconcileVirtualMeshCertificateSigningRequest(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestReconciler)(nil).ReconcileVirtualMeshCertificateSigningRequest), obj)
}

// MockVirtualMeshCertificateSigningRequestDeletionReconciler is a mock of VirtualMeshCertificateSigningRequestDeletionReconciler interface.
type MockVirtualMeshCertificateSigningRequestDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshCertificateSigningRequestDeletionReconcilerMockRecorder
}

// MockVirtualMeshCertificateSigningRequestDeletionReconcilerMockRecorder is the mock recorder for MockVirtualMeshCertificateSigningRequestDeletionReconciler.
type MockVirtualMeshCertificateSigningRequestDeletionReconcilerMockRecorder struct {
	mock *MockVirtualMeshCertificateSigningRequestDeletionReconciler
}

// NewMockVirtualMeshCertificateSigningRequestDeletionReconciler creates a new mock instance.
func NewMockVirtualMeshCertificateSigningRequestDeletionReconciler(ctrl *gomock.Controller) *MockVirtualMeshCertificateSigningRequestDeletionReconciler {
	mock := &MockVirtualMeshCertificateSigningRequestDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshCertificateSigningRequestDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshCertificateSigningRequestDeletionReconciler) EXPECT() *MockVirtualMeshCertificateSigningRequestDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualMeshCertificateSigningRequestDeletion mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestDeletionReconciler) ReconcileVirtualMeshCertificateSigningRequestDeletion(req reconcile.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReconcileVirtualMeshCertificateSigningRequestDeletion", req)
}

// ReconcileVirtualMeshCertificateSigningRequestDeletion indicates an expected call of ReconcileVirtualMeshCertificateSigningRequestDeletion.
func (mr *MockVirtualMeshCertificateSigningRequestDeletionReconcilerMockRecorder) ReconcileVirtualMeshCertificateSigningRequestDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualMeshCertificateSigningRequestDeletion", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestDeletionReconciler)(nil).ReconcileVirtualMeshCertificateSigningRequestDeletion), req)
}

// MockVirtualMeshCertificateSigningRequestFinalizer is a mock of VirtualMeshCertificateSigningRequestFinalizer interface.
type MockVirtualMeshCertificateSigningRequestFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshCertificateSigningRequestFinalizerMockRecorder
}

// MockVirtualMeshCertificateSigningRequestFinalizerMockRecorder is the mock recorder for MockVirtualMeshCertificateSigningRequestFinalizer.
type MockVirtualMeshCertificateSigningRequestFinalizerMockRecorder struct {
	mock *MockVirtualMeshCertificateSigningRequestFinalizer
}

// NewMockVirtualMeshCertificateSigningRequestFinalizer creates a new mock instance.
func NewMockVirtualMeshCertificateSigningRequestFinalizer(ctrl *gomock.Controller) *MockVirtualMeshCertificateSigningRequestFinalizer {
	mock := &MockVirtualMeshCertificateSigningRequestFinalizer{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshCertificateSigningRequestFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshCertificateSigningRequestFinalizer) EXPECT() *MockVirtualMeshCertificateSigningRequestFinalizerMockRecorder {
	return m.recorder
}

// ReconcileVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestFinalizer) ReconcileVirtualMeshCertificateSigningRequest(obj *v1alpha1.VirtualMeshCertificateSigningRequest) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualMeshCertificateSigningRequest", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualMeshCertificateSigningRequest indicates an expected call of ReconcileVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestFinalizerMockRecorder) ReconcileVirtualMeshCertificateSigningRequest(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestFinalizer)(nil).ReconcileVirtualMeshCertificateSigningRequest), obj)
}

// VirtualMeshCertificateSigningRequestFinalizerName mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestFinalizer) VirtualMeshCertificateSigningRequestFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMeshCertificateSigningRequestFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// VirtualMeshCertificateSigningRequestFinalizerName indicates an expected call of VirtualMeshCertificateSigningRequestFinalizerName.
func (mr *MockVirtualMeshCertificateSigningRequestFinalizerMockRecorder) VirtualMeshCertificateSigningRequestFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMeshCertificateSigningRequestFinalizerName", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestFinalizer)(nil).VirtualMeshCertificateSigningRequestFinalizerName))
}

// FinalizeVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestFinalizer) FinalizeVirtualMeshCertificateSigningRequest(obj *v1alpha1.VirtualMeshCertificateSigningRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeVirtualMeshCertificateSigningRequest", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeVirtualMeshCertificateSigningRequest indicates an expected call of FinalizeVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestFinalizerMockRecorder) FinalizeVirtualMeshCertificateSigningRequest(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestFinalizer)(nil).FinalizeVirtualMeshCertificateSigningRequest), obj)
}

// MockVirtualMeshCertificateSigningRequestReconcileLoop is a mock of VirtualMeshCertificateSigningRequestReconcileLoop interface.
type MockVirtualMeshCertificateSigningRequestReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshCertificateSigningRequestReconcileLoopMockRecorder
}

// MockVirtualMeshCertificateSigningRequestReconcileLoopMockRecorder is the mock recorder for MockVirtualMeshCertificateSigningRequestReconcileLoop.
type MockVirtualMeshCertificateSigningRequestReconcileLoopMockRecorder struct {
	mock *MockVirtualMeshCertificateSigningRequestReconcileLoop
}

// NewMockVirtualMeshCertificateSigningRequestReconcileLoop creates a new mock instance.
func NewMockVirtualMeshCertificateSigningRequestReconcileLoop(ctrl *gomock.Controller) *MockVirtualMeshCertificateSigningRequestReconcileLoop {
	mock := &MockVirtualMeshCertificateSigningRequestReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshCertificateSigningRequestReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshCertificateSigningRequestReconcileLoop) EXPECT() *MockVirtualMeshCertificateSigningRequestReconcileLoopMockRecorder {
	return m.recorder
}

// RunVirtualMeshCertificateSigningRequestReconciler mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestReconcileLoop) RunVirtualMeshCertificateSigningRequestReconciler(ctx context.Context, rec controller.VirtualMeshCertificateSigningRequestReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunVirtualMeshCertificateSigningRequestReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunVirtualMeshCertificateSigningRequestReconciler indicates an expected call of RunVirtualMeshCertificateSigningRequestReconciler.
func (mr *MockVirtualMeshCertificateSigningRequestReconcileLoopMockRecorder) RunVirtualMeshCertificateSigningRequestReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunVirtualMeshCertificateSigningRequestReconciler", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestReconcileLoop)(nil).RunVirtualMeshCertificateSigningRequestReconciler), varargs...)
}
