// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1alpha1 is a generated GoMock package.
package mock_v1alpha1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/security.smh.solo.io/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1alpha1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// VirtualMeshCertificateSigningRequests mocks base method.
func (m *MockClientset) VirtualMeshCertificateSigningRequests() v1alpha1.VirtualMeshCertificateSigningRequestClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMeshCertificateSigningRequests")
	ret0, _ := ret[0].(v1alpha1.VirtualMeshCertificateSigningRequestClient)
	return ret0
}

// VirtualMeshCertificateSigningRequests indicates an expected call of VirtualMeshCertificateSigningRequests.
func (mr *MockClientsetMockRecorder) VirtualMeshCertificateSigningRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMeshCertificateSigningRequests", reflect.TypeOf((*MockClientset)(nil).VirtualMeshCertificateSigningRequests))
}

// MockVirtualMeshCertificateSigningRequestReader is a mock of VirtualMeshCertificateSigningRequestReader interface.
type MockVirtualMeshCertificateSigningRequestReader struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshCertificateSigningRequestReaderMockRecorder
}

// MockVirtualMeshCertificateSigningRequestReaderMockRecorder is the mock recorder for MockVirtualMeshCertificateSigningRequestReader.
type MockVirtualMeshCertificateSigningRequestReaderMockRecorder struct {
	mock *MockVirtualMeshCertificateSigningRequestReader
}

// NewMockVirtualMeshCertificateSigningRequestReader creates a new mock instance.
func NewMockVirtualMeshCertificateSigningRequestReader(ctrl *gomock.Controller) *MockVirtualMeshCertificateSigningRequestReader {
	mock := &MockVirtualMeshCertificateSigningRequestReader{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshCertificateSigningRequestReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshCertificateSigningRequestReader) EXPECT() *MockVirtualMeshCertificateSigningRequestReaderMockRecorder {
	return m.recorder
}

// GetVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestReader) GetVirtualMeshCertificateSigningRequest(ctx context.Context, key client.ObjectKey) (*v1alpha1.VirtualMeshCertificateSigningRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMeshCertificateSigningRequest", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.VirtualMeshCertificateSigningRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMeshCertificateSigningRequest indicates an expected call of GetVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestReaderMockRecorder) GetVirtualMeshCertificateSigningRequest(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestReader)(nil).GetVirtualMeshCertificateSigningRequest), ctx, key)
}

// ListVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestReader) ListVirtualMeshCertificateSigningRequest(ctx context.Context, opts ...client.ListOption) (*v1alpha1.VirtualMeshCertificateSigningRequestList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualMeshCertificateSigningRequest", varargs...)
	ret0, _ := ret[0].(*v1alpha1.VirtualMeshCertificateSigningRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMeshCertificateSigningRequest indicates an expected call of ListVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestReaderMockRecorder) ListVirtualMeshCertificateSigningRequest(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestReader)(nil).ListVirtualMeshCertificateSigningRequest), varargs...)
}

// MockVirtualMeshCertificateSigningRequestWriter is a mock of VirtualMeshCertificateSigningRequestWriter interface.
type MockVirtualMeshCertificateSigningRequestWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshCertificateSigningRequestWriterMockRecorder
}

// MockVirtualMeshCertificateSigningRequestWriterMockRecorder is the mock recorder for MockVirtualMeshCertificateSigningRequestWriter.
type MockVirtualMeshCertificateSigningRequestWriterMockRecorder struct {
	mock *MockVirtualMeshCertificateSigningRequestWriter
}

// NewMockVirtualMeshCertificateSigningRequestWriter creates a new mock instance.
func NewMockVirtualMeshCertificateSigningRequestWriter(ctrl *gomock.Controller) *MockVirtualMeshCertificateSigningRequestWriter {
	mock := &MockVirtualMeshCertificateSigningRequestWriter{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshCertificateSigningRequestWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshCertificateSigningRequestWriter) EXPECT() *MockVirtualMeshCertificateSigningRequestWriterMockRecorder {
	return m.recorder
}

// CreateVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestWriter) CreateVirtualMeshCertificateSigningRequest(ctx context.Context, obj *v1alpha1.VirtualMeshCertificateSigningRequest, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualMeshCertificateSigningRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualMeshCertificateSigningRequest indicates an expected call of CreateVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestWriterMockRecorder) CreateVirtualMeshCertificateSigningRequest(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestWriter)(nil).CreateVirtualMeshCertificateSigningRequest), varargs...)
}

// DeleteVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestWriter) DeleteVirtualMeshCertificateSigningRequest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualMeshCertificateSigningRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMeshCertificateSigningRequest indicates an expected call of DeleteVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestWriterMockRecorder) DeleteVirtualMeshCertificateSigningRequest(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestWriter)(nil).DeleteVirtualMeshCertificateSigningRequest), varargs...)
}

// UpdateVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestWriter) UpdateVirtualMeshCertificateSigningRequest(ctx context.Context, obj *v1alpha1.VirtualMeshCertificateSigningRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualMeshCertificateSigningRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMeshCertificateSigningRequest indicates an expected call of UpdateVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestWriterMockRecorder) UpdateVirtualMeshCertificateSigningRequest(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestWriter)(nil).UpdateVirtualMeshCertificateSigningRequest), varargs...)
}

// PatchVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestWriter) PatchVirtualMeshCertificateSigningRequest(ctx context.Context, obj *v1alpha1.VirtualMeshCertificateSigningRequest, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualMeshCertificateSigningRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMeshCertificateSigningRequest indicates an expected call of PatchVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestWriterMockRecorder) PatchVirtualMeshCertificateSigningRequest(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestWriter)(nil).PatchVirtualMeshCertificateSigningRequest), varargs...)
}

// DeleteAllOfVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestWriter) DeleteAllOfVirtualMeshCertificateSigningRequest(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualMeshCertificateSigningRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualMeshCertificateSigningRequest indicates an expected call of DeleteAllOfVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestWriterMockRecorder) DeleteAllOfVirtualMeshCertificateSigningRequest(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestWriter)(nil).DeleteAllOfVirtualMeshCertificateSigningRequest), varargs...)
}

// UpsertVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestWriter) UpsertVirtualMeshCertificateSigningRequest(ctx context.Context, obj *v1alpha1.VirtualMeshCertificateSigningRequest, transitionFuncs ...v1alpha1.VirtualMeshCertificateSigningRequestTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualMeshCertificateSigningRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualMeshCertificateSigningRequest indicates an expected call of UpsertVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestWriterMockRecorder) UpsertVirtualMeshCertificateSigningRequest(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestWriter)(nil).UpsertVirtualMeshCertificateSigningRequest), varargs...)
}

// MockVirtualMeshCertificateSigningRequestStatusWriter is a mock of VirtualMeshCertificateSigningRequestStatusWriter interface.
type MockVirtualMeshCertificateSigningRequestStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshCertificateSigningRequestStatusWriterMockRecorder
}

// MockVirtualMeshCertificateSigningRequestStatusWriterMockRecorder is the mock recorder for MockVirtualMeshCertificateSigningRequestStatusWriter.
type MockVirtualMeshCertificateSigningRequestStatusWriterMockRecorder struct {
	mock *MockVirtualMeshCertificateSigningRequestStatusWriter
}

// NewMockVirtualMeshCertificateSigningRequestStatusWriter creates a new mock instance.
func NewMockVirtualMeshCertificateSigningRequestStatusWriter(ctrl *gomock.Controller) *MockVirtualMeshCertificateSigningRequestStatusWriter {
	mock := &MockVirtualMeshCertificateSigningRequestStatusWriter{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshCertificateSigningRequestStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshCertificateSigningRequestStatusWriter) EXPECT() *MockVirtualMeshCertificateSigningRequestStatusWriterMockRecorder {
	return m.recorder
}

// UpdateVirtualMeshCertificateSigningRequestStatus mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestStatusWriter) UpdateVirtualMeshCertificateSigningRequestStatus(ctx context.Context, obj *v1alpha1.VirtualMeshCertificateSigningRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualMeshCertificateSigningRequestStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMeshCertificateSigningRequestStatus indicates an expected call of UpdateVirtualMeshCertificateSigningRequestStatus.
func (mr *MockVirtualMeshCertificateSigningRequestStatusWriterMockRecorder) UpdateVirtualMeshCertificateSigningRequestStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMeshCertificateSigningRequestStatus", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestStatusWriter)(nil).UpdateVirtualMeshCertificateSigningRequestStatus), varargs...)
}

// PatchVirtualMeshCertificateSigningRequestStatus mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestStatusWriter) PatchVirtualMeshCertificateSigningRequestStatus(ctx context.Context, obj *v1alpha1.VirtualMeshCertificateSigningRequest, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualMeshCertificateSigningRequestStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMeshCertificateSigningRequestStatus indicates an expected call of PatchVirtualMeshCertificateSigningRequestStatus.
func (mr *MockVirtualMeshCertificateSigningRequestStatusWriterMockRecorder) PatchVirtualMeshCertificateSigningRequestStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMeshCertificateSigningRequestStatus", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestStatusWriter)(nil).PatchVirtualMeshCertificateSigningRequestStatus), varargs...)
}

// MockVirtualMeshCertificateSigningRequestClient is a mock of VirtualMeshCertificateSigningRequestClient interface.
type MockVirtualMeshCertificateSigningRequestClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshCertificateSigningRequestClientMockRecorder
}

// MockVirtualMeshCertificateSigningRequestClientMockRecorder is the mock recorder for MockVirtualMeshCertificateSigningRequestClient.
type MockVirtualMeshCertificateSigningRequestClientMockRecorder struct {
	mock *MockVirtualMeshCertificateSigningRequestClient
}

// NewMockVirtualMeshCertificateSigningRequestClient creates a new mock instance.
func NewMockVirtualMeshCertificateSigningRequestClient(ctrl *gomock.Controller) *MockVirtualMeshCertificateSigningRequestClient {
	mock := &MockVirtualMeshCertificateSigningRequestClient{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshCertificateSigningRequestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshCertificateSigningRequestClient) EXPECT() *MockVirtualMeshCertificateSigningRequestClientMockRecorder {
	return m.recorder
}

// GetVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestClient) GetVirtualMeshCertificateSigningRequest(ctx context.Context, key client.ObjectKey) (*v1alpha1.VirtualMeshCertificateSigningRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMeshCertificateSigningRequest", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.VirtualMeshCertificateSigningRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMeshCertificateSigningRequest indicates an expected call of GetVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestClientMockRecorder) GetVirtualMeshCertificateSigningRequest(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestClient)(nil).GetVirtualMeshCertificateSigningRequest), ctx, key)
}

// ListVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestClient) ListVirtualMeshCertificateSigningRequest(ctx context.Context, opts ...client.ListOption) (*v1alpha1.VirtualMeshCertificateSigningRequestList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualMeshCertificateSigningRequest", varargs...)
	ret0, _ := ret[0].(*v1alpha1.VirtualMeshCertificateSigningRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMeshCertificateSigningRequest indicates an expected call of ListVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestClientMockRecorder) ListVirtualMeshCertificateSigningRequest(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestClient)(nil).ListVirtualMeshCertificateSigningRequest), varargs...)
}

// CreateVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestClient) CreateVirtualMeshCertificateSigningRequest(ctx context.Context, obj *v1alpha1.VirtualMeshCertificateSigningRequest, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualMeshCertificateSigningRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualMeshCertificateSigningRequest indicates an expected call of CreateVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestClientMockRecorder) CreateVirtualMeshCertificateSigningRequest(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestClient)(nil).CreateVirtualMeshCertificateSigningRequest), varargs...)
}

// DeleteVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestClient) DeleteVirtualMeshCertificateSigningRequest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualMeshCertificateSigningRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMeshCertificateSigningRequest indicates an expected call of DeleteVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestClientMockRecorder) DeleteVirtualMeshCertificateSigningRequest(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestClient)(nil).DeleteVirtualMeshCertificateSigningRequest), varargs...)
}

// UpdateVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestClient) UpdateVirtualMeshCertificateSigningRequest(ctx context.Context, obj *v1alpha1.VirtualMeshCertificateSigningRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualMeshCertificateSigningRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMeshCertificateSigningRequest indicates an expected call of UpdateVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestClientMockRecorder) UpdateVirtualMeshCertificateSigningRequest(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestClient)(nil).UpdateVirtualMeshCertificateSigningRequest), varargs...)
}

// PatchVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestClient) PatchVirtualMeshCertificateSigningRequest(ctx context.Context, obj *v1alpha1.VirtualMeshCertificateSigningRequest, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualMeshCertificateSigningRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMeshCertificateSigningRequest indicates an expected call of PatchVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestClientMockRecorder) PatchVirtualMeshCertificateSigningRequest(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestClient)(nil).PatchVirtualMeshCertificateSigningRequest), varargs...)
}

// DeleteAllOfVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestClient) DeleteAllOfVirtualMeshCertificateSigningRequest(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualMeshCertificateSigningRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualMeshCertificateSigningRequest indicates an expected call of DeleteAllOfVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestClientMockRecorder) DeleteAllOfVirtualMeshCertificateSigningRequest(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestClient)(nil).DeleteAllOfVirtualMeshCertificateSigningRequest), varargs...)
}

// UpsertVirtualMeshCertificateSigningRequest mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestClient) UpsertVirtualMeshCertificateSigningRequest(ctx context.Context, obj *v1alpha1.VirtualMeshCertificateSigningRequest, transitionFuncs ...v1alpha1.VirtualMeshCertificateSigningRequestTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualMeshCertificateSigningRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualMeshCertificateSigningRequest indicates an expected call of UpsertVirtualMeshCertificateSigningRequest.
func (mr *MockVirtualMeshCertificateSigningRequestClientMockRecorder) UpsertVirtualMeshCertificateSigningRequest(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualMeshCertificateSigningRequest", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestClient)(nil).UpsertVirtualMeshCertificateSigningRequest), varargs...)
}

// UpdateVirtualMeshCertificateSigningRequestStatus mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestClient) UpdateVirtualMeshCertificateSigningRequestStatus(ctx context.Context, obj *v1alpha1.VirtualMeshCertificateSigningRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualMeshCertificateSigningRequestStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMeshCertificateSigningRequestStatus indicates an expected call of UpdateVirtualMeshCertificateSigningRequestStatus.
func (mr *MockVirtualMeshCertificateSigningRequestClientMockRecorder) UpdateVirtualMeshCertificateSigningRequestStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMeshCertificateSigningRequestStatus", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestClient)(nil).UpdateVirtualMeshCertificateSigningRequestStatus), varargs...)
}

// PatchVirtualMeshCertificateSigningRequestStatus mocks base method.
func (m *MockVirtualMeshCertificateSigningRequestClient) PatchVirtualMeshCertificateSigningRequestStatus(ctx context.Context, obj *v1alpha1.VirtualMeshCertificateSigningRequest, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualMeshCertificateSigningRequestStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMeshCertificateSigningRequestStatus indicates an expected call of PatchVirtualMeshCertificateSigningRequestStatus.
func (mr *MockVirtualMeshCertificateSigningRequestClientMockRecorder) PatchVirtualMeshCertificateSigningRequestStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMeshCertificateSigningRequestStatus", reflect.TypeOf((*MockVirtualMeshCertificateSigningRequestClient)(nil).PatchVirtualMeshCertificateSigningRequestStatus), varargs...)
}
