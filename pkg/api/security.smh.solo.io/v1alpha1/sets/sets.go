// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1alpha1sets

import (
	security_smh_solo_io_v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/security.smh.solo.io/v1alpha1"

	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/sets"
)

type VirtualMeshCertificateSigningRequestSet interface {
	Keys() sets.String
	List() []*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest
	Map() map[string]*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest
	Insert(virtualMeshCertificateSigningRequest ...*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest)
	Equal(virtualMeshCertificateSigningRequestSet VirtualMeshCertificateSigningRequestSet) bool
	Has(virtualMeshCertificateSigningRequest *security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest) bool
	Delete(virtualMeshCertificateSigningRequest *security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest)
	Union(set VirtualMeshCertificateSigningRequestSet) VirtualMeshCertificateSigningRequestSet
	Difference(set VirtualMeshCertificateSigningRequestSet) VirtualMeshCertificateSigningRequestSet
	Intersection(set VirtualMeshCertificateSigningRequestSet) VirtualMeshCertificateSigningRequestSet
}

func makeGenericVirtualMeshCertificateSigningRequestSet(virtualMeshCertificateSigningRequestList []*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest) sksets.ResourceSet {
	var genericResources []metav1.Object
	for _, obj := range virtualMeshCertificateSigningRequestList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type virtualMeshCertificateSigningRequestSet struct {
	set sksets.ResourceSet
}

func NewVirtualMeshCertificateSigningRequestSet(virtualMeshCertificateSigningRequestList ...*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest) VirtualMeshCertificateSigningRequestSet {
	return &virtualMeshCertificateSigningRequestSet{set: makeGenericVirtualMeshCertificateSigningRequestSet(virtualMeshCertificateSigningRequestList)}
}

func (s virtualMeshCertificateSigningRequestSet) Keys() sets.String {
	return s.set.Keys()
}

func (s virtualMeshCertificateSigningRequestSet) List() []*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest {
	var virtualMeshCertificateSigningRequestList []*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest
	for _, obj := range s.set.List() {
		virtualMeshCertificateSigningRequestList = append(virtualMeshCertificateSigningRequestList, obj.(*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest))
	}
	return virtualMeshCertificateSigningRequestList
}

func (s virtualMeshCertificateSigningRequestSet) Map() map[string]*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest {
	newMap := map[string]*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest)
	}
	return newMap
}

func (s virtualMeshCertificateSigningRequestSet) Insert(
	virtualMeshCertificateSigningRequestList ...*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest,
) {
	for _, obj := range virtualMeshCertificateSigningRequestList {
		s.set.Insert(obj)
	}
}

func (s virtualMeshCertificateSigningRequestSet) Has(virtualMeshCertificateSigningRequest *security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest) bool {
	return s.set.Has(virtualMeshCertificateSigningRequest)
}

func (s virtualMeshCertificateSigningRequestSet) Equal(
	virtualMeshCertificateSigningRequestSet VirtualMeshCertificateSigningRequestSet,
) bool {
	return s.set.Equal(makeGenericVirtualMeshCertificateSigningRequestSet(virtualMeshCertificateSigningRequestSet.List()))
}

func (s virtualMeshCertificateSigningRequestSet) Delete(VirtualMeshCertificateSigningRequest *security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest) {
	s.set.Delete(VirtualMeshCertificateSigningRequest)
}

func (s virtualMeshCertificateSigningRequestSet) Union(set VirtualMeshCertificateSigningRequestSet) VirtualMeshCertificateSigningRequestSet {
	return NewVirtualMeshCertificateSigningRequestSet(append(s.List(), set.List()...)...)
}

func (s virtualMeshCertificateSigningRequestSet) Difference(set VirtualMeshCertificateSigningRequestSet) VirtualMeshCertificateSigningRequestSet {
	newSet := s.set.Difference(makeGenericVirtualMeshCertificateSigningRequestSet(set.List()))
	return virtualMeshCertificateSigningRequestSet{set: newSet}
}

func (s virtualMeshCertificateSigningRequestSet) Intersection(set VirtualMeshCertificateSigningRequestSet) VirtualMeshCertificateSigningRequestSet {
	newSet := s.set.Intersection(makeGenericVirtualMeshCertificateSigningRequestSet(set.List()))
	var virtualMeshCertificateSigningRequestList []*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest
	for _, obj := range newSet.List() {
		virtualMeshCertificateSigningRequestList = append(virtualMeshCertificateSigningRequestList, obj.(*security_smh_solo_io_v1alpha1.VirtualMeshCertificateSigningRequest))
	}
	return NewVirtualMeshCertificateSigningRequestSet(virtualMeshCertificateSigningRequestList...)
}
