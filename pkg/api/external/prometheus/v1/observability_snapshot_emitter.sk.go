// Code generated by protoc-gen-solo-kit. DO NOT EDIT.

package v1

import (
	"sync"
	"time"

	"go.opencensus.io/stats"
	"go.opencensus.io/stats/view"
	"go.opencensus.io/tag"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/errors"
	"github.com/solo-io/solo-kit/pkg/utils/errutils"
)

var (
	mObservabilitySnapshotIn  = stats.Int64("observability.config.prometheus.io/snap_emitter/snap_in", "The number of snapshots in", "1")
	mObservabilitySnapshotOut = stats.Int64("observability.config.prometheus.io/snap_emitter/snap_out", "The number of snapshots out", "1")

	observabilitysnapshotInView = &view.View{
		Name:        "observability.config.prometheus.io_snap_emitter/snap_in",
		Measure:     mObservabilitySnapshotIn,
		Description: "The number of snapshots updates coming in",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
	observabilitysnapshotOutView = &view.View{
		Name:        "observability.config.prometheus.io/snap_emitter/snap_out",
		Measure:     mObservabilitySnapshotOut,
		Description: "The number of snapshots updates going out",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
)

func init() {
	view.Register(observabilitysnapshotInView, observabilitysnapshotOutView)
}

type ObservabilityEmitter interface {
	Register() error
	Config() ConfigClient
	Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *ObservabilitySnapshot, <-chan error, error)
}

func NewObservabilityEmitter(configClient ConfigClient) ObservabilityEmitter {
	return NewObservabilityEmitterWithEmit(configClient, make(chan struct{}))
}

func NewObservabilityEmitterWithEmit(configClient ConfigClient, emit <-chan struct{}) ObservabilityEmitter {
	return &observabilityEmitter{
		config:    configClient,
		forceEmit: emit,
	}
}

type observabilityEmitter struct {
	forceEmit <-chan struct{}
	config    ConfigClient
}

func (c *observabilityEmitter) Register() error {
	if err := c.config.Register(); err != nil {
		return err
	}
	return nil
}

func (c *observabilityEmitter) Config() ConfigClient {
	return c.config
}

func (c *observabilityEmitter) Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *ObservabilitySnapshot, <-chan error, error) {
	errs := make(chan error)
	var done sync.WaitGroup
	ctx := opts.Ctx
	/* Create channel for Config */
	type configListWithNamespace struct {
		list      ConfigList
		namespace string
	}
	configChan := make(chan configListWithNamespace)

	for _, namespace := range watchNamespaces {
		/* Setup watch for Config */
		configNamespacesChan, configErrs, err := c.config.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting Config watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, configErrs, namespace+"-prometheusconfigs")
		}(namespace)

		/* Watch for changes and update snapshot */
		go func(namespace string) {
			for {
				select {
				case <-ctx.Done():
					return
				case configList := <-configNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case configChan <- configListWithNamespace{list: configList, namespace: namespace}:
					}
				}
			}
		}(namespace)
	}

	snapshots := make(chan *ObservabilitySnapshot)
	go func() {
		originalSnapshot := ObservabilitySnapshot{}
		currentSnapshot := originalSnapshot.Clone()
		timer := time.NewTicker(time.Second * 1)
		sync := func() {
			if originalSnapshot.Hash() == currentSnapshot.Hash() {
				return
			}

			stats.Record(ctx, mObservabilitySnapshotOut.M(1))
			originalSnapshot = currentSnapshot.Clone()
			sentSnapshot := currentSnapshot.Clone()
			snapshots <- &sentSnapshot
		}

		/* TODO (yuval-k): figure out how to make this work to avoid a stale snapshot.
		   		// construct the first snapshot from all the configs that are currently there
		   		// that guarantees that the first snapshot contains all the data.
		   		for range watchNamespaces {
		      configNamespacedList := <- configChan
		      currentSnapshot.Prometheusconfigs.Clear(configNamespacedList.namespace)
		      configList := configNamespacedList.list
		   	currentSnapshot.Prometheusconfigs.Add(configList...)
		   		}
		*/

		for {
			record := func() { stats.Record(ctx, mObservabilitySnapshotIn.M(1)) }

			select {
			case <-timer.C:
				sync()
			case <-ctx.Done():
				close(snapshots)
				done.Wait()
				close(errs)
				return
			case <-c.forceEmit:
				sentSnapshot := currentSnapshot.Clone()
				snapshots <- &sentSnapshot
			case configNamespacedList := <-configChan:
				record()

				namespace := configNamespacedList.namespace
				configList := configNamespacedList.list

				currentSnapshot.Prometheusconfigs.Clear(namespace)
				currentSnapshot.Prometheusconfigs.Add(configList...)
			}
		}
	}()
	return snapshots, errs, nil
}
