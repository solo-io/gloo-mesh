// Code generated by protoc-gen-solo-kit. DO NOT EDIT.

package v1

import (
	"sort"

	"github.com/gogo/protobuf/proto"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// TODO: modify as needed to populate additional fields
func NewConfig(namespace, name string) *Config {
	return &Config{
		Metadata: core.Metadata{
			Name:      name,
			Namespace: namespace,
		},
	}
}

func (r *Config) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

type ConfigList []*Config
type PrometheusconfigsByNamespace map[string]ConfigList

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list ConfigList) Find(namespace, name string) (*Config, error) {
	for _, config := range list {
		if config.Metadata.Name == name {
			if namespace == "" || config.Metadata.Namespace == namespace {
				return config, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find config %v.%v", namespace, name)
}

func (list ConfigList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, config := range list {
		ress = append(ress, config)
	}
	return ress
}

func (list ConfigList) Names() []string {
	var names []string
	for _, config := range list {
		names = append(names, config.Metadata.Name)
	}
	return names
}

func (list ConfigList) NamespacesDotNames() []string {
	var names []string
	for _, config := range list {
		names = append(names, config.Metadata.Namespace+"."+config.Metadata.Name)
	}
	return names
}

func (list ConfigList) Sort() ConfigList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].Metadata.Less(list[j].Metadata)
	})
	return list
}

func (list ConfigList) Clone() ConfigList {
	var configList ConfigList
	for _, config := range list {
		configList = append(configList, proto.Clone(config).(*Config))
	}
	return configList
}

func (list ConfigList) ByNamespace() PrometheusconfigsByNamespace {
	byNamespace := make(PrometheusconfigsByNamespace)
	for _, config := range list {
		byNamespace.Add(config)
	}
	return byNamespace
}

func (byNamespace PrometheusconfigsByNamespace) Add(config ...*Config) {
	for _, item := range config {
		byNamespace[item.Metadata.Namespace] = append(byNamespace[item.Metadata.Namespace], item)
	}
}

func (byNamespace PrometheusconfigsByNamespace) Clear(namespace string) {
	delete(byNamespace, namespace)
}

func (byNamespace PrometheusconfigsByNamespace) List() ConfigList {
	var list ConfigList
	for _, configList := range byNamespace {
		list = append(list, configList...)
	}
	return list.Sort()
}

func (byNamespace PrometheusconfigsByNamespace) Clone() PrometheusconfigsByNamespace {
	return byNamespace.List().Clone().ByNamespace()
}

var _ resources.Resource = &Config{}

// Kubernetes Adapter for Config

func (o *Config) GetObjectKind() schema.ObjectKind {
	t := ConfigCrd.TypeMeta()
	return &t
}

func (o *Config) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*Config)
}

var ConfigCrd = crd.NewCrd("config.prometheus.io",
	"prometheusconfigs",
	"config.prometheus.io",
	"v1",
	"Config",
	"pcf",
	&Config{})
