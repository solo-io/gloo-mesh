// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"sort"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"github.com/solo-io/solo-kit/pkg/utils/hashutils"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewPrometheusConfig(namespace, name string) *PrometheusConfig {
	prometheusconfig := &PrometheusConfig{}
	prometheusconfig.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return prometheusconfig
}

func (r *PrometheusConfig) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *PrometheusConfig) Hash() uint64 {
	metaCopy := r.GetMetadata()
	metaCopy.ResourceVersion = ""
	return hashutils.HashAll(
		metaCopy,
		r.Prometheus,
		r.Alerts,
		r.Rules,
	)
}

type PrometheusConfigList []*PrometheusConfig
type PrometheusconfigsByNamespace map[string]PrometheusConfigList

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list PrometheusConfigList) Find(namespace, name string) (*PrometheusConfig, error) {
	for _, prometheusConfig := range list {
		if prometheusConfig.GetMetadata().Name == name {
			if namespace == "" || prometheusConfig.GetMetadata().Namespace == namespace {
				return prometheusConfig, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find prometheusConfig %v.%v", namespace, name)
}

func (list PrometheusConfigList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, prometheusConfig := range list {
		ress = append(ress, prometheusConfig)
	}
	return ress
}

func (list PrometheusConfigList) Names() []string {
	var names []string
	for _, prometheusConfig := range list {
		names = append(names, prometheusConfig.GetMetadata().Name)
	}
	return names
}

func (list PrometheusConfigList) NamespacesDotNames() []string {
	var names []string
	for _, prometheusConfig := range list {
		names = append(names, prometheusConfig.GetMetadata().Namespace+"."+prometheusConfig.GetMetadata().Name)
	}
	return names
}

func (list PrometheusConfigList) Sort() PrometheusConfigList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list PrometheusConfigList) Clone() PrometheusConfigList {
	var prometheusConfigList PrometheusConfigList
	for _, prometheusConfig := range list {
		prometheusConfigList = append(prometheusConfigList, resources.Clone(prometheusConfig).(*PrometheusConfig))
	}
	return prometheusConfigList
}

func (list PrometheusConfigList) Each(f func(element *PrometheusConfig)) {
	for _, prometheusConfig := range list {
		f(prometheusConfig)
	}
}

func (list PrometheusConfigList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *PrometheusConfig) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

func (byNamespace PrometheusconfigsByNamespace) Add(prometheusConfig ...*PrometheusConfig) {
	for _, item := range prometheusConfig {
		byNamespace[item.GetMetadata().Namespace] = append(byNamespace[item.GetMetadata().Namespace], item)
	}
}

func (byNamespace PrometheusconfigsByNamespace) Clear(namespace string) {
	delete(byNamespace, namespace)
}

func (byNamespace PrometheusconfigsByNamespace) List() PrometheusConfigList {
	var list PrometheusConfigList
	for _, prometheusConfigList := range byNamespace {
		list = append(list, prometheusConfigList...)
	}
	return list.Sort()
}

func (byNamespace PrometheusconfigsByNamespace) Clone() PrometheusconfigsByNamespace {
	cloned := make(PrometheusconfigsByNamespace)
	for ns, list := range byNamespace {
		cloned[ns] = list.Clone()
	}
	return cloned
}

var _ resources.Resource = &PrometheusConfig{}

// Kubernetes Adapter for PrometheusConfig

func (o *PrometheusConfig) GetObjectKind() schema.ObjectKind {
	t := PrometheusConfigCrd.TypeMeta()
	return &t
}

func (o *PrometheusConfig) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*PrometheusConfig)
}

var PrometheusConfigCrd = crd.NewCrd("config.prometheus.io",
	"prometheusconfigs",
	"config.prometheus.io",
	"v1",
	"PrometheusConfig",
	"pc",
	false,
	&PrometheusConfig{})
