// Code generated by protoc-gen-solo-kit. DO NOT EDIT.

package v1

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type ConfigClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*Config, error)
	Write(resource *Config, opts clients.WriteOpts) (*Config, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (ConfigList, error)
	Watch(namespace string, opts clients.WatchOpts) (<-chan ConfigList, <-chan error, error)
}

type configClient struct {
	rc clients.ResourceClient
}

func NewConfigClient(rcFactory factory.ResourceClientFactory) (ConfigClient, error) {
	return NewConfigClientWithToken(rcFactory, "")
}

func NewConfigClientWithToken(rcFactory factory.ResourceClientFactory, token string) (ConfigClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &Config{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base Config resource client")
	}
	return &configClient{
		rc: rc,
	}, nil
}

func (client *configClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *configClient) Register() error {
	return client.rc.Register()
}

func (client *configClient) Read(namespace, name string, opts clients.ReadOpts) (*Config, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*Config), nil
}

func (client *configClient) Write(config *Config, opts clients.WriteOpts) (*Config, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(config, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*Config), nil
}

func (client *configClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()
	return client.rc.Delete(namespace, name, opts)
}

func (client *configClient) List(namespace string, opts clients.ListOpts) (ConfigList, error) {
	opts = opts.WithDefaults()
	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToConfig(resourceList), nil
}

func (client *configClient) Watch(namespace string, opts clients.WatchOpts) (<-chan ConfigList, <-chan error, error) {
	opts = opts.WithDefaults()
	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	prometheusconfigsChan := make(chan ConfigList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				prometheusconfigsChan <- convertToConfig(resourceList)
			case <-opts.Ctx.Done():
				close(prometheusconfigsChan)
				return
			}
		}
	}()
	return prometheusconfigsChan, errs, nil
}

func convertToConfig(resources resources.ResourceList) ConfigList {
	var configList ConfigList
	for _, resource := range resources {
		configList = append(configList, resource.(*Config))
	}
	return configList
}
