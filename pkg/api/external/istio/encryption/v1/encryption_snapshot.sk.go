// Code generated by protoc-gen-solo-kit. DO NOT EDIT.

package v1

import (
	istio_encryption_v1 "github.com/solo-io/supergloo/pkg/api/external/istio/encryption/v1"

	"github.com/mitchellh/hashstructure"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"go.uber.org/zap"
)

type EncryptionSnapshot struct {
	Istiocerts istio_encryption_v1.IstiocertsByNamespace
}

func (s EncryptionSnapshot) Clone() EncryptionSnapshot {
	return EncryptionSnapshot{
		Istiocerts: s.Istiocerts.Clone(),
	}
}

func (s EncryptionSnapshot) snapshotToHash() EncryptionSnapshot {
	snapshotForHashing := s.Clone()
	for _, istioCacertsSecret := range snapshotForHashing.Istiocerts.List() {
		resources.UpdateMetadata(istioCacertsSecret, func(meta *core.Metadata) {
			meta.ResourceVersion = ""
		})
	}

	return snapshotForHashing
}

func (s EncryptionSnapshot) Hash() uint64 {
	return s.hashStruct(s.snapshotToHash())
}

func (s EncryptionSnapshot) HashFields() []zap.Field {
	snapshotForHashing := s.snapshotToHash()
	var fields []zap.Field
	istiocerts := s.hashStruct(snapshotForHashing.Istiocerts.List())
	fields = append(fields, zap.Uint64("istiocerts", istiocerts))

	return append(fields, zap.Uint64("snapshotHash", s.hashStruct(snapshotForHashing)))
}

func (s EncryptionSnapshot) hashStruct(v interface{}) uint64 {
	h, err := hashstructure.Hash(v, nil)
	if err != nil {
		panic(err)
	}
	return h
}
