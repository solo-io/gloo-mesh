// Code generated by solo-kit. DO NOT EDIT.

package v1alpha1

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type ServiceRoleWatcher interface {
	// watch namespace-scoped Serviceroles
	Watch(namespace string, opts clients.WatchOpts) (<-chan ServiceRoleList, <-chan error, error)
}

type ServiceRoleClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*ServiceRole, error)
	Write(resource *ServiceRole, opts clients.WriteOpts) (*ServiceRole, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (ServiceRoleList, error)
	ServiceRoleWatcher
}

type serviceRoleClient struct {
	rc clients.ResourceClient
}

func NewServiceRoleClient(rcFactory factory.ResourceClientFactory) (ServiceRoleClient, error) {
	return NewServiceRoleClientWithToken(rcFactory, "")
}

func NewServiceRoleClientWithToken(rcFactory factory.ResourceClientFactory, token string) (ServiceRoleClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &ServiceRole{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base ServiceRole resource client")
	}
	return NewServiceRoleClientWithBase(rc), nil
}

func NewServiceRoleClientWithBase(rc clients.ResourceClient) ServiceRoleClient {
	return &serviceRoleClient{
		rc: rc,
	}
}

func (client *serviceRoleClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *serviceRoleClient) Register() error {
	return client.rc.Register()
}

func (client *serviceRoleClient) Read(namespace, name string, opts clients.ReadOpts) (*ServiceRole, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*ServiceRole), nil
}

func (client *serviceRoleClient) Write(serviceRole *ServiceRole, opts clients.WriteOpts) (*ServiceRole, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(serviceRole, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*ServiceRole), nil
}

func (client *serviceRoleClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *serviceRoleClient) List(namespace string, opts clients.ListOpts) (ServiceRoleList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToServiceRole(resourceList), nil
}

func (client *serviceRoleClient) Watch(namespace string, opts clients.WatchOpts) (<-chan ServiceRoleList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	servicerolesChan := make(chan ServiceRoleList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				servicerolesChan <- convertToServiceRole(resourceList)
			case <-opts.Ctx.Done():
				close(servicerolesChan)
				return
			}
		}
	}()
	return servicerolesChan, errs, nil
}

func convertToServiceRole(resources resources.ResourceList) ServiceRoleList {
	var serviceRoleList ServiceRoleList
	for _, resource := range resources {
		serviceRoleList = append(serviceRoleList, resource.(*ServiceRole))
	}
	return serviceRoleList
}
