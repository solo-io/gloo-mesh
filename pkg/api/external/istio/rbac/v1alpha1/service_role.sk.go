// Code generated by solo-kit. DO NOT EDIT.

package v1alpha1

import (
	"sort"

	"github.com/solo-io/go-utils/hashutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewServiceRole(namespace, name string) *ServiceRole {
	servicerole := &ServiceRole{}
	servicerole.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return servicerole
}

func (r *ServiceRole) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *ServiceRole) SetStatus(status core.Status) {
	r.Status = status
}

func (r *ServiceRole) Hash() uint64 {
	metaCopy := r.GetMetadata()
	metaCopy.ResourceVersion = ""
	return hashutils.HashAll(
		metaCopy,
		r.Rules,
	)
}

type ServiceRoleList []*ServiceRole
type ServicerolesByNamespace map[string]ServiceRoleList

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list ServiceRoleList) Find(namespace, name string) (*ServiceRole, error) {
	for _, serviceRole := range list {
		if serviceRole.GetMetadata().Name == name {
			if namespace == "" || serviceRole.GetMetadata().Namespace == namespace {
				return serviceRole, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find serviceRole %v.%v", namespace, name)
}

func (list ServiceRoleList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, serviceRole := range list {
		ress = append(ress, serviceRole)
	}
	return ress
}

func (list ServiceRoleList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, serviceRole := range list {
		ress = append(ress, serviceRole)
	}
	return ress
}

func (list ServiceRoleList) Names() []string {
	var names []string
	for _, serviceRole := range list {
		names = append(names, serviceRole.GetMetadata().Name)
	}
	return names
}

func (list ServiceRoleList) NamespacesDotNames() []string {
	var names []string
	for _, serviceRole := range list {
		names = append(names, serviceRole.GetMetadata().Namespace+"."+serviceRole.GetMetadata().Name)
	}
	return names
}

func (list ServiceRoleList) Sort() ServiceRoleList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list ServiceRoleList) Clone() ServiceRoleList {
	var serviceRoleList ServiceRoleList
	for _, serviceRole := range list {
		serviceRoleList = append(serviceRoleList, resources.Clone(serviceRole).(*ServiceRole))
	}
	return serviceRoleList
}

func (list ServiceRoleList) Each(f func(element *ServiceRole)) {
	for _, serviceRole := range list {
		f(serviceRole)
	}
}

func (list ServiceRoleList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *ServiceRole) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

func (byNamespace ServicerolesByNamespace) Add(serviceRole ...*ServiceRole) {
	for _, item := range serviceRole {
		byNamespace[item.GetMetadata().Namespace] = append(byNamespace[item.GetMetadata().Namespace], item)
	}
}

func (byNamespace ServicerolesByNamespace) Clear(namespace string) {
	delete(byNamespace, namespace)
}

func (byNamespace ServicerolesByNamespace) List() ServiceRoleList {
	var list ServiceRoleList
	for _, serviceRoleList := range byNamespace {
		list = append(list, serviceRoleList...)
	}
	return list.Sort()
}

func (byNamespace ServicerolesByNamespace) Clone() ServicerolesByNamespace {
	cloned := make(ServicerolesByNamespace)
	for ns, list := range byNamespace {
		cloned[ns] = list.Clone()
	}
	return cloned
}

var _ resources.Resource = &ServiceRole{}

// Kubernetes Adapter for ServiceRole

func (o *ServiceRole) GetObjectKind() schema.ObjectKind {
	t := ServiceRoleCrd.TypeMeta()
	return &t
}

func (o *ServiceRole) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*ServiceRole)
}

var ServiceRoleCrd = crd.NewCrd("rbac.istio.io",
	"serviceroles",
	"rbac.istio.io",
	"v1alpha1",
	"ServiceRole",
	"servicerole",
	false,
	&ServiceRole{})
