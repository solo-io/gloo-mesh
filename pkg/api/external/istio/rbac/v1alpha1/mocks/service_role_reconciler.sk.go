// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/external/istio/rbac/v1alpha1/service_role_reconciler.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	v1alpha1 "github.com/solo-io/supergloo/pkg/api/external/istio/rbac/v1alpha1"
)

// MockServiceRoleReconciler is a mock of ServiceRoleReconciler interface
type MockServiceRoleReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRoleReconcilerMockRecorder
}

// MockServiceRoleReconcilerMockRecorder is the mock recorder for MockServiceRoleReconciler
type MockServiceRoleReconcilerMockRecorder struct {
	mock *MockServiceRoleReconciler
}

// NewMockServiceRoleReconciler creates a new mock instance
func NewMockServiceRoleReconciler(ctrl *gomock.Controller) *MockServiceRoleReconciler {
	mock := &MockServiceRoleReconciler{ctrl: ctrl}
	mock.recorder = &MockServiceRoleReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceRoleReconciler) EXPECT() *MockServiceRoleReconcilerMockRecorder {
	return m.recorder
}

// Reconcile mocks base method
func (m *MockServiceRoleReconciler) Reconcile(namespace string, desiredResources v1alpha1.ServiceRoleList, transition v1alpha1.TransitionServiceRoleFunc, opts clients.ListOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", namespace, desiredResources, transition, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile
func (mr *MockServiceRoleReconcilerMockRecorder) Reconcile(namespace, desiredResources, transition, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockServiceRoleReconciler)(nil).Reconcile), namespace, desiredResources, transition, opts)
}
