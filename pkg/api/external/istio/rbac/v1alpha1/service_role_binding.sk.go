// Code generated by protoc-gen-solo-kit. DO NOT EDIT.

package v1alpha1

import (
	"sort"

	"github.com/gogo/protobuf/proto"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// TODO: modify as needed to populate additional fields
func NewServiceRoleBinding(namespace, name string) *ServiceRoleBinding {
	return &ServiceRoleBinding{
		Metadata: core.Metadata{
			Name:      name,
			Namespace: namespace,
		},
	}
}

func (r *ServiceRoleBinding) SetStatus(status core.Status) {
	r.Status = status
}

func (r *ServiceRoleBinding) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

type ServiceRoleBindingList []*ServiceRoleBinding
type ServiceRoleBindingsByNamespace map[string]ServiceRoleBindingList

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list ServiceRoleBindingList) Find(namespace, name string) (*ServiceRoleBinding, error) {
	for _, serviceRoleBinding := range list {
		if serviceRoleBinding.Metadata.Name == name {
			if namespace == "" || serviceRoleBinding.Metadata.Namespace == namespace {
				return serviceRoleBinding, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find serviceRoleBinding %v.%v", namespace, name)
}

func (list ServiceRoleBindingList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, serviceRoleBinding := range list {
		ress = append(ress, serviceRoleBinding)
	}
	return ress
}

func (list ServiceRoleBindingList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, serviceRoleBinding := range list {
		ress = append(ress, serviceRoleBinding)
	}
	return ress
}

func (list ServiceRoleBindingList) Names() []string {
	var names []string
	for _, serviceRoleBinding := range list {
		names = append(names, serviceRoleBinding.Metadata.Name)
	}
	return names
}

func (list ServiceRoleBindingList) NamespacesDotNames() []string {
	var names []string
	for _, serviceRoleBinding := range list {
		names = append(names, serviceRoleBinding.Metadata.Namespace+"."+serviceRoleBinding.Metadata.Name)
	}
	return names
}

func (list ServiceRoleBindingList) Sort() ServiceRoleBindingList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].Metadata.Less(list[j].Metadata)
	})
	return list
}

func (list ServiceRoleBindingList) Clone() ServiceRoleBindingList {
	var serviceRoleBindingList ServiceRoleBindingList
	for _, serviceRoleBinding := range list {
		serviceRoleBindingList = append(serviceRoleBindingList, proto.Clone(serviceRoleBinding).(*ServiceRoleBinding))
	}
	return serviceRoleBindingList
}

func (list ServiceRoleBindingList) ByNamespace() ServiceRoleBindingsByNamespace {
	byNamespace := make(ServiceRoleBindingsByNamespace)
	for _, serviceRoleBinding := range list {
		byNamespace.Add(serviceRoleBinding)
	}
	return byNamespace
}

func (byNamespace ServiceRoleBindingsByNamespace) Add(serviceRoleBinding ...*ServiceRoleBinding) {
	for _, item := range serviceRoleBinding {
		byNamespace[item.Metadata.Namespace] = append(byNamespace[item.Metadata.Namespace], item)
	}
}

func (byNamespace ServiceRoleBindingsByNamespace) Clear(namespace string) {
	delete(byNamespace, namespace)
}

func (byNamespace ServiceRoleBindingsByNamespace) List() ServiceRoleBindingList {
	var list ServiceRoleBindingList
	for _, serviceRoleBindingList := range byNamespace {
		list = append(list, serviceRoleBindingList...)
	}
	return list.Sort()
}

func (byNamespace ServiceRoleBindingsByNamespace) Clone() ServiceRoleBindingsByNamespace {
	return byNamespace.List().Clone().ByNamespace()
}

var _ resources.Resource = &ServiceRoleBinding{}

// Kubernetes Adapter for ServiceRoleBinding

func (o *ServiceRoleBinding) GetObjectKind() schema.ObjectKind {
	t := ServiceRoleBindingCrd.TypeMeta()
	return &t
}

func (o *ServiceRoleBinding) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*ServiceRoleBinding)
}

var ServiceRoleBindingCrd = crd.NewCrd("rbac.istio.io",
	"servicerolebindings",
	"rbac.istio.io",
	"v1alpha1",
	"ServiceRoleBinding",
	"svcrolebind",
	&ServiceRoleBinding{})
