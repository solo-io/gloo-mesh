// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/external/istio/networking/v1alpha3/destination_rule_reconciler.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	v1alpha3 "github.com/solo-io/supergloo/pkg/api/external/istio/networking/v1alpha3"
)

// MockDestinationRuleReconciler is a mock of DestinationRuleReconciler interface
type MockDestinationRuleReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationRuleReconcilerMockRecorder
}

// MockDestinationRuleReconcilerMockRecorder is the mock recorder for MockDestinationRuleReconciler
type MockDestinationRuleReconcilerMockRecorder struct {
	mock *MockDestinationRuleReconciler
}

// NewMockDestinationRuleReconciler creates a new mock instance
func NewMockDestinationRuleReconciler(ctrl *gomock.Controller) *MockDestinationRuleReconciler {
	mock := &MockDestinationRuleReconciler{ctrl: ctrl}
	mock.recorder = &MockDestinationRuleReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDestinationRuleReconciler) EXPECT() *MockDestinationRuleReconcilerMockRecorder {
	return m.recorder
}

// Reconcile mocks base method
func (m *MockDestinationRuleReconciler) Reconcile(namespace string, desiredResources v1alpha3.DestinationRuleList, transition v1alpha3.TransitionDestinationRuleFunc, opts clients.ListOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", namespace, desiredResources, transition, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile
func (mr *MockDestinationRuleReconcilerMockRecorder) Reconcile(namespace, desiredResources, transition, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockDestinationRuleReconciler)(nil).Reconcile), namespace, desiredResources, transition, opts)
}
