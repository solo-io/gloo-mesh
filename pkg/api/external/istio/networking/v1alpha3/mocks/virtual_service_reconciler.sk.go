// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/external/istio/networking/v1alpha3/virtual_service_reconciler.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	v1alpha3 "github.com/solo-io/supergloo/pkg/api/external/istio/networking/v1alpha3"
)

// MockVirtualServiceReconciler is a mock of VirtualServiceReconciler interface
type MockVirtualServiceReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceReconcilerMockRecorder
}

// MockVirtualServiceReconcilerMockRecorder is the mock recorder for MockVirtualServiceReconciler
type MockVirtualServiceReconcilerMockRecorder struct {
	mock *MockVirtualServiceReconciler
}

// NewMockVirtualServiceReconciler creates a new mock instance
func NewMockVirtualServiceReconciler(ctrl *gomock.Controller) *MockVirtualServiceReconciler {
	mock := &MockVirtualServiceReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualServiceReconciler) EXPECT() *MockVirtualServiceReconcilerMockRecorder {
	return m.recorder
}

// Reconcile mocks base method
func (m *MockVirtualServiceReconciler) Reconcile(namespace string, desiredResources v1alpha3.VirtualServiceList, transition v1alpha3.TransitionVirtualServiceFunc, opts clients.ListOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", namespace, desiredResources, transition, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile
func (mr *MockVirtualServiceReconcilerMockRecorder) Reconcile(namespace, desiredResources, transition, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockVirtualServiceReconciler)(nil).Reconcile), namespace, desiredResources, transition, opts)
}
