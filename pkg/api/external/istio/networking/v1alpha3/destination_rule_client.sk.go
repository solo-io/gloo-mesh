// Code generated by solo-kit. DO NOT EDIT.

package v1alpha3

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type DestinationRuleWatcher interface {
	// watch namespace-scoped Destinationrules
	Watch(namespace string, opts clients.WatchOpts) (<-chan DestinationRuleList, <-chan error, error)
}

type DestinationRuleClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*DestinationRule, error)
	Write(resource *DestinationRule, opts clients.WriteOpts) (*DestinationRule, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (DestinationRuleList, error)
	DestinationRuleWatcher
}

type destinationRuleClient struct {
	rc clients.ResourceClient
}

func NewDestinationRuleClient(rcFactory factory.ResourceClientFactory) (DestinationRuleClient, error) {
	return NewDestinationRuleClientWithToken(rcFactory, "")
}

func NewDestinationRuleClientWithToken(rcFactory factory.ResourceClientFactory, token string) (DestinationRuleClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &DestinationRule{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base DestinationRule resource client")
	}
	return NewDestinationRuleClientWithBase(rc), nil
}

func NewDestinationRuleClientWithBase(rc clients.ResourceClient) DestinationRuleClient {
	return &destinationRuleClient{
		rc: rc,
	}
}

func (client *destinationRuleClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *destinationRuleClient) Register() error {
	return client.rc.Register()
}

func (client *destinationRuleClient) Read(namespace, name string, opts clients.ReadOpts) (*DestinationRule, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*DestinationRule), nil
}

func (client *destinationRuleClient) Write(destinationRule *DestinationRule, opts clients.WriteOpts) (*DestinationRule, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(destinationRule, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*DestinationRule), nil
}

func (client *destinationRuleClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *destinationRuleClient) List(namespace string, opts clients.ListOpts) (DestinationRuleList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToDestinationRule(resourceList), nil
}

func (client *destinationRuleClient) Watch(namespace string, opts clients.WatchOpts) (<-chan DestinationRuleList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	destinationrulesChan := make(chan DestinationRuleList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				destinationrulesChan <- convertToDestinationRule(resourceList)
			case <-opts.Ctx.Done():
				close(destinationrulesChan)
				return
			}
		}
	}()
	return destinationrulesChan, errs, nil
}

func convertToDestinationRule(resources resources.ResourceList) DestinationRuleList {
	var destinationRuleList DestinationRuleList
	for _, resource := range resources {
		destinationRuleList = append(destinationRuleList, resource.(*DestinationRule))
	}
	return destinationRuleList
}
