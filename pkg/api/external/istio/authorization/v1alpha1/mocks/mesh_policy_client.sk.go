// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/external/istio/authorization/v1alpha1/mesh_policy_client.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	v1alpha1 "github.com/solo-io/supergloo/pkg/api/external/istio/authorization/v1alpha1"
)

// MockMeshPolicyWatcher is a mock of MeshPolicyWatcher interface
type MockMeshPolicyWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMeshPolicyWatcherMockRecorder
}

// MockMeshPolicyWatcherMockRecorder is the mock recorder for MockMeshPolicyWatcher
type MockMeshPolicyWatcherMockRecorder struct {
	mock *MockMeshPolicyWatcher
}

// NewMockMeshPolicyWatcher creates a new mock instance
func NewMockMeshPolicyWatcher(ctrl *gomock.Controller) *MockMeshPolicyWatcher {
	mock := &MockMeshPolicyWatcher{ctrl: ctrl}
	mock.recorder = &MockMeshPolicyWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshPolicyWatcher) EXPECT() *MockMeshPolicyWatcherMockRecorder {
	return m.recorder
}

// Watch mocks base method
func (m *MockMeshPolicyWatcher) Watch(opts clients.WatchOpts) (<-chan v1alpha1.MeshPolicyList, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", opts)
	ret0, _ := ret[0].(<-chan v1alpha1.MeshPolicyList)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Watch indicates an expected call of Watch
func (mr *MockMeshPolicyWatcherMockRecorder) Watch(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMeshPolicyWatcher)(nil).Watch), opts)
}

// MockMeshPolicyClient is a mock of MeshPolicyClient interface
type MockMeshPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeshPolicyClientMockRecorder
}

// MockMeshPolicyClientMockRecorder is the mock recorder for MockMeshPolicyClient
type MockMeshPolicyClientMockRecorder struct {
	mock *MockMeshPolicyClient
}

// NewMockMeshPolicyClient creates a new mock instance
func NewMockMeshPolicyClient(ctrl *gomock.Controller) *MockMeshPolicyClient {
	mock := &MockMeshPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMeshPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshPolicyClient) EXPECT() *MockMeshPolicyClientMockRecorder {
	return m.recorder
}

// BaseClient mocks base method
func (m *MockMeshPolicyClient) BaseClient() clients.ResourceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseClient")
	ret0, _ := ret[0].(clients.ResourceClient)
	return ret0
}

// BaseClient indicates an expected call of BaseClient
func (mr *MockMeshPolicyClientMockRecorder) BaseClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseClient", reflect.TypeOf((*MockMeshPolicyClient)(nil).BaseClient))
}

// Register mocks base method
func (m *MockMeshPolicyClient) Register() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockMeshPolicyClientMockRecorder) Register() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockMeshPolicyClient)(nil).Register))
}

// Read mocks base method
func (m *MockMeshPolicyClient) Read(name string, opts clients.ReadOpts) (*v1alpha1.MeshPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", name, opts)
	ret0, _ := ret[0].(*v1alpha1.MeshPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockMeshPolicyClientMockRecorder) Read(name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockMeshPolicyClient)(nil).Read), name, opts)
}

// Write mocks base method
func (m *MockMeshPolicyClient) Write(resource *v1alpha1.MeshPolicy, opts clients.WriteOpts) (*v1alpha1.MeshPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", resource, opts)
	ret0, _ := ret[0].(*v1alpha1.MeshPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockMeshPolicyClientMockRecorder) Write(resource, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockMeshPolicyClient)(nil).Write), resource, opts)
}

// Delete mocks base method
func (m *MockMeshPolicyClient) Delete(name string, opts clients.DeleteOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMeshPolicyClientMockRecorder) Delete(name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMeshPolicyClient)(nil).Delete), name, opts)
}

// List mocks base method
func (m *MockMeshPolicyClient) List(opts clients.ListOpts) (v1alpha1.MeshPolicyList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opts)
	ret0, _ := ret[0].(v1alpha1.MeshPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMeshPolicyClientMockRecorder) List(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMeshPolicyClient)(nil).List), opts)
}

// Watch mocks base method
func (m *MockMeshPolicyClient) Watch(opts clients.WatchOpts) (<-chan v1alpha1.MeshPolicyList, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", opts)
	ret0, _ := ret[0].(<-chan v1alpha1.MeshPolicyList)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Watch indicates an expected call of Watch
func (mr *MockMeshPolicyClientMockRecorder) Watch(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMeshPolicyClient)(nil).Watch), opts)
}
