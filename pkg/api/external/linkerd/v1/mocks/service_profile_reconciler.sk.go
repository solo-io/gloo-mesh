// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/external/linkerd/v1/service_profile_reconciler.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	v1 "github.com/solo-io/supergloo/pkg/api/external/linkerd/v1"
)

// MockServiceProfileReconciler is a mock of ServiceProfileReconciler interface
type MockServiceProfileReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProfileReconcilerMockRecorder
}

// MockServiceProfileReconcilerMockRecorder is the mock recorder for MockServiceProfileReconciler
type MockServiceProfileReconcilerMockRecorder struct {
	mock *MockServiceProfileReconciler
}

// NewMockServiceProfileReconciler creates a new mock instance
func NewMockServiceProfileReconciler(ctrl *gomock.Controller) *MockServiceProfileReconciler {
	mock := &MockServiceProfileReconciler{ctrl: ctrl}
	mock.recorder = &MockServiceProfileReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceProfileReconciler) EXPECT() *MockServiceProfileReconcilerMockRecorder {
	return m.recorder
}

// Reconcile mocks base method
func (m *MockServiceProfileReconciler) Reconcile(namespace string, desiredResources v1.ServiceProfileList, transition v1.TransitionServiceProfileFunc, opts clients.ListOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", namespace, desiredResources, transition, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile
func (mr *MockServiceProfileReconcilerMockRecorder) Reconcile(namespace, desiredResources, transition, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockServiceProfileReconciler)(nil).Reconcile), namespace, desiredResources, transition, opts)
}
