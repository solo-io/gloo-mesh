// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/external/linkerd/v1/service_profile_client.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	v1 "github.com/solo-io/supergloo/pkg/api/external/linkerd/v1"
)

// MockServiceProfileWatcher is a mock of ServiceProfileWatcher interface
type MockServiceProfileWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProfileWatcherMockRecorder
}

// MockServiceProfileWatcherMockRecorder is the mock recorder for MockServiceProfileWatcher
type MockServiceProfileWatcherMockRecorder struct {
	mock *MockServiceProfileWatcher
}

// NewMockServiceProfileWatcher creates a new mock instance
func NewMockServiceProfileWatcher(ctrl *gomock.Controller) *MockServiceProfileWatcher {
	mock := &MockServiceProfileWatcher{ctrl: ctrl}
	mock.recorder = &MockServiceProfileWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceProfileWatcher) EXPECT() *MockServiceProfileWatcherMockRecorder {
	return m.recorder
}

// Watch mocks base method
func (m *MockServiceProfileWatcher) Watch(namespace string, opts clients.WatchOpts) (<-chan v1.ServiceProfileList, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", namespace, opts)
	ret0, _ := ret[0].(<-chan v1.ServiceProfileList)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Watch indicates an expected call of Watch
func (mr *MockServiceProfileWatcherMockRecorder) Watch(namespace, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockServiceProfileWatcher)(nil).Watch), namespace, opts)
}

// MockServiceProfileClient is a mock of ServiceProfileClient interface
type MockServiceProfileClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProfileClientMockRecorder
}

// MockServiceProfileClientMockRecorder is the mock recorder for MockServiceProfileClient
type MockServiceProfileClientMockRecorder struct {
	mock *MockServiceProfileClient
}

// NewMockServiceProfileClient creates a new mock instance
func NewMockServiceProfileClient(ctrl *gomock.Controller) *MockServiceProfileClient {
	mock := &MockServiceProfileClient{ctrl: ctrl}
	mock.recorder = &MockServiceProfileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceProfileClient) EXPECT() *MockServiceProfileClientMockRecorder {
	return m.recorder
}

// BaseClient mocks base method
func (m *MockServiceProfileClient) BaseClient() clients.ResourceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseClient")
	ret0, _ := ret[0].(clients.ResourceClient)
	return ret0
}

// BaseClient indicates an expected call of BaseClient
func (mr *MockServiceProfileClientMockRecorder) BaseClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseClient", reflect.TypeOf((*MockServiceProfileClient)(nil).BaseClient))
}

// Register mocks base method
func (m *MockServiceProfileClient) Register() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockServiceProfileClientMockRecorder) Register() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockServiceProfileClient)(nil).Register))
}

// Read mocks base method
func (m *MockServiceProfileClient) Read(namespace, name string, opts clients.ReadOpts) (*v1.ServiceProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", namespace, name, opts)
	ret0, _ := ret[0].(*v1.ServiceProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockServiceProfileClientMockRecorder) Read(namespace, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockServiceProfileClient)(nil).Read), namespace, name, opts)
}

// Write mocks base method
func (m *MockServiceProfileClient) Write(resource *v1.ServiceProfile, opts clients.WriteOpts) (*v1.ServiceProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", resource, opts)
	ret0, _ := ret[0].(*v1.ServiceProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockServiceProfileClientMockRecorder) Write(resource, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockServiceProfileClient)(nil).Write), resource, opts)
}

// Delete mocks base method
func (m *MockServiceProfileClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", namespace, name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockServiceProfileClientMockRecorder) Delete(namespace, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceProfileClient)(nil).Delete), namespace, name, opts)
}

// List mocks base method
func (m *MockServiceProfileClient) List(namespace string, opts clients.ListOpts) (v1.ServiceProfileList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", namespace, opts)
	ret0, _ := ret[0].(v1.ServiceProfileList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockServiceProfileClientMockRecorder) List(namespace, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceProfileClient)(nil).List), namespace, opts)
}

// Watch mocks base method
func (m *MockServiceProfileClient) Watch(namespace string, opts clients.WatchOpts) (<-chan v1.ServiceProfileList, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", namespace, opts)
	ret0, _ := ret[0].(<-chan v1.ServiceProfileList)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Watch indicates an expected call of Watch
func (mr *MockServiceProfileClientMockRecorder) Watch(namespace, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockServiceProfileClient)(nil).Watch), namespace, opts)
}
