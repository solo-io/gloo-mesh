// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type ServiceProfileWatcher interface {
	// watch namespace-scoped serviceprofiles
	Watch(namespace string, opts clients.WatchOpts) (<-chan ServiceProfileList, <-chan error, error)
}

type ServiceProfileClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*ServiceProfile, error)
	Write(resource *ServiceProfile, opts clients.WriteOpts) (*ServiceProfile, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (ServiceProfileList, error)
	ServiceProfileWatcher
}

type serviceProfileClient struct {
	rc clients.ResourceClient
}

func NewServiceProfileClient(rcFactory factory.ResourceClientFactory) (ServiceProfileClient, error) {
	return NewServiceProfileClientWithToken(rcFactory, "")
}

func NewServiceProfileClientWithToken(rcFactory factory.ResourceClientFactory, token string) (ServiceProfileClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &ServiceProfile{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base ServiceProfile resource client")
	}
	return NewServiceProfileClientWithBase(rc), nil
}

func NewServiceProfileClientWithBase(rc clients.ResourceClient) ServiceProfileClient {
	return &serviceProfileClient{
		rc: rc,
	}
}

func (client *serviceProfileClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *serviceProfileClient) Register() error {
	return client.rc.Register()
}

func (client *serviceProfileClient) Read(namespace, name string, opts clients.ReadOpts) (*ServiceProfile, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*ServiceProfile), nil
}

func (client *serviceProfileClient) Write(serviceProfile *ServiceProfile, opts clients.WriteOpts) (*ServiceProfile, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(serviceProfile, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*ServiceProfile), nil
}

func (client *serviceProfileClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *serviceProfileClient) List(namespace string, opts clients.ListOpts) (ServiceProfileList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToServiceProfile(resourceList), nil
}

func (client *serviceProfileClient) Watch(namespace string, opts clients.WatchOpts) (<-chan ServiceProfileList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	serviceprofilesChan := make(chan ServiceProfileList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				serviceprofilesChan <- convertToServiceProfile(resourceList)
			case <-opts.Ctx.Done():
				close(serviceprofilesChan)
				return
			}
		}
	}()
	return serviceprofilesChan, errs, nil
}

func convertToServiceProfile(resources resources.ResourceList) ServiceProfileList {
	var serviceProfileList ServiceProfileList
	for _, resource := range resources {
		serviceProfileList = append(serviceProfileList, resource.(*ServiceProfile))
	}
	return serviceProfileList
}
