// Code generated by solo-kit. DO NOT EDIT.

package v1alpha1

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type TrafficTargetWatcher interface {
	// watch namespace-scoped traffictargets
	Watch(namespace string, opts clients.WatchOpts) (<-chan TrafficTargetList, <-chan error, error)
}

type TrafficTargetClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*TrafficTarget, error)
	Write(resource *TrafficTarget, opts clients.WriteOpts) (*TrafficTarget, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (TrafficTargetList, error)
	TrafficTargetWatcher
}

type trafficTargetClient struct {
	rc clients.ResourceClient
}

func NewTrafficTargetClient(rcFactory factory.ResourceClientFactory) (TrafficTargetClient, error) {
	return NewTrafficTargetClientWithToken(rcFactory, "")
}

func NewTrafficTargetClientWithToken(rcFactory factory.ResourceClientFactory, token string) (TrafficTargetClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &TrafficTarget{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base TrafficTarget resource client")
	}
	return NewTrafficTargetClientWithBase(rc), nil
}

func NewTrafficTargetClientWithBase(rc clients.ResourceClient) TrafficTargetClient {
	return &trafficTargetClient{
		rc: rc,
	}
}

func (client *trafficTargetClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *trafficTargetClient) Register() error {
	return client.rc.Register()
}

func (client *trafficTargetClient) Read(namespace, name string, opts clients.ReadOpts) (*TrafficTarget, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*TrafficTarget), nil
}

func (client *trafficTargetClient) Write(trafficTarget *TrafficTarget, opts clients.WriteOpts) (*TrafficTarget, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(trafficTarget, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*TrafficTarget), nil
}

func (client *trafficTargetClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *trafficTargetClient) List(namespace string, opts clients.ListOpts) (TrafficTargetList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToTrafficTarget(resourceList), nil
}

func (client *trafficTargetClient) Watch(namespace string, opts clients.WatchOpts) (<-chan TrafficTargetList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	traffictargetsChan := make(chan TrafficTargetList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				traffictargetsChan <- convertToTrafficTarget(resourceList)
			case <-opts.Ctx.Done():
				close(traffictargetsChan)
				return
			}
		}
	}()
	return traffictargetsChan, errs, nil
}

func convertToTrafficTarget(resources resources.ResourceList) TrafficTargetList {
	var trafficTargetList TrafficTargetList
	for _, resource := range resources {
		trafficTargetList = append(trafficTargetList, resource.(*TrafficTarget))
	}
	return trafficTargetList
}
