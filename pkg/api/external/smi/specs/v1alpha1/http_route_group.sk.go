// Code generated by solo-kit. DO NOT EDIT.

package v1alpha1

import (
	"sort"

	github_com_solo_io_supergloo_api_external_smi_specs "github.com/solo-io/supergloo/api/external/smi/specs"

	"github.com/solo-io/go-utils/hashutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
)

func NewHTTPRouteGroup(namespace, name string) *HTTPRouteGroup {
	httproutegroup := &HTTPRouteGroup{}
	httproutegroup.HTTPRouteGroup.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return httproutegroup
}

// require custom resource to implement Clone() as well as resources.Resource interface

type CloneableHTTPRouteGroup interface {
	resources.Resource
	Clone() *github_com_solo_io_supergloo_api_external_smi_specs.HTTPRouteGroup
}

var _ CloneableHTTPRouteGroup = &github_com_solo_io_supergloo_api_external_smi_specs.HTTPRouteGroup{}

type HTTPRouteGroup struct {
	github_com_solo_io_supergloo_api_external_smi_specs.HTTPRouteGroup
}

func (r *HTTPRouteGroup) Clone() resources.Resource {
	return &HTTPRouteGroup{HTTPRouteGroup: *r.HTTPRouteGroup.Clone()}
}

func (r *HTTPRouteGroup) Hash() uint64 {
	clone := r.HTTPRouteGroup.Clone()

	resources.UpdateMetadata(clone, func(meta *core.Metadata) {
		meta.ResourceVersion = ""
	})

	return hashutils.HashAll(clone)
}

type HTTPRouteGroupList []*HTTPRouteGroup

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list HTTPRouteGroupList) Find(namespace, name string) (*HTTPRouteGroup, error) {
	for _, hTTPRouteGroup := range list {
		if hTTPRouteGroup.GetMetadata().Name == name {
			if namespace == "" || hTTPRouteGroup.GetMetadata().Namespace == namespace {
				return hTTPRouteGroup, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find hTTPRouteGroup %v.%v", namespace, name)
}

func (list HTTPRouteGroupList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, hTTPRouteGroup := range list {
		ress = append(ress, hTTPRouteGroup)
	}
	return ress
}

func (list HTTPRouteGroupList) Names() []string {
	var names []string
	for _, hTTPRouteGroup := range list {
		names = append(names, hTTPRouteGroup.GetMetadata().Name)
	}
	return names
}

func (list HTTPRouteGroupList) NamespacesDotNames() []string {
	var names []string
	for _, hTTPRouteGroup := range list {
		names = append(names, hTTPRouteGroup.GetMetadata().Namespace+"."+hTTPRouteGroup.GetMetadata().Name)
	}
	return names
}

func (list HTTPRouteGroupList) Sort() HTTPRouteGroupList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list HTTPRouteGroupList) Clone() HTTPRouteGroupList {
	var hTTPRouteGroupList HTTPRouteGroupList
	for _, hTTPRouteGroup := range list {
		hTTPRouteGroupList = append(hTTPRouteGroupList, resources.Clone(hTTPRouteGroup).(*HTTPRouteGroup))
	}
	return hTTPRouteGroupList
}

func (list HTTPRouteGroupList) Each(f func(element *HTTPRouteGroup)) {
	for _, hTTPRouteGroup := range list {
		f(hTTPRouteGroup)
	}
}

func (list HTTPRouteGroupList) EachResource(f func(element resources.Resource)) {
	for _, hTTPRouteGroup := range list {
		f(hTTPRouteGroup)
	}
}

func (list HTTPRouteGroupList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *HTTPRouteGroup) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}
