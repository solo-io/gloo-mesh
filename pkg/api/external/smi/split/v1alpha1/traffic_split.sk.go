// Code generated by solo-kit. DO NOT EDIT.

package v1alpha1

import (
	"sort"

	github_com_solo_io_supergloo_api_external_smi_split "github.com/solo-io/supergloo/api/external/smi/split"

	"github.com/solo-io/go-utils/hashutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
)

func NewTrafficSplit(namespace, name string) *TrafficSplit {
	trafficsplit := &TrafficSplit{}
	trafficsplit.TrafficSplit.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return trafficsplit
}

// require custom resource to implement Clone() as well as resources.Resource interface

type CloneableTrafficSplit interface {
	resources.Resource
	Clone() *github_com_solo_io_supergloo_api_external_smi_split.TrafficSplit
}

var _ CloneableTrafficSplit = &github_com_solo_io_supergloo_api_external_smi_split.TrafficSplit{}

type TrafficSplit struct {
	github_com_solo_io_supergloo_api_external_smi_split.TrafficSplit
}

func (r *TrafficSplit) Clone() resources.Resource {
	return &TrafficSplit{TrafficSplit: *r.TrafficSplit.Clone()}
}

func (r *TrafficSplit) Hash() uint64 {
	clone := r.TrafficSplit.Clone()

	resources.UpdateMetadata(clone, func(meta *core.Metadata) {
		meta.ResourceVersion = ""
	})

	return hashutils.HashAll(clone)
}

type TrafficSplitList []*TrafficSplit

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list TrafficSplitList) Find(namespace, name string) (*TrafficSplit, error) {
	for _, trafficSplit := range list {
		if trafficSplit.GetMetadata().Name == name {
			if namespace == "" || trafficSplit.GetMetadata().Namespace == namespace {
				return trafficSplit, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find trafficSplit %v.%v", namespace, name)
}

func (list TrafficSplitList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, trafficSplit := range list {
		ress = append(ress, trafficSplit)
	}
	return ress
}

func (list TrafficSplitList) Names() []string {
	var names []string
	for _, trafficSplit := range list {
		names = append(names, trafficSplit.GetMetadata().Name)
	}
	return names
}

func (list TrafficSplitList) NamespacesDotNames() []string {
	var names []string
	for _, trafficSplit := range list {
		names = append(names, trafficSplit.GetMetadata().Namespace+"."+trafficSplit.GetMetadata().Name)
	}
	return names
}

func (list TrafficSplitList) Sort() TrafficSplitList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list TrafficSplitList) Clone() TrafficSplitList {
	var trafficSplitList TrafficSplitList
	for _, trafficSplit := range list {
		trafficSplitList = append(trafficSplitList, resources.Clone(trafficSplit).(*TrafficSplit))
	}
	return trafficSplitList
}

func (list TrafficSplitList) Each(f func(element *TrafficSplit)) {
	for _, trafficSplit := range list {
		f(trafficSplit)
	}
}

func (list TrafficSplitList) EachResource(f func(element resources.Resource)) {
	for _, trafficSplit := range list {
		f(trafficSplit)
	}
}

func (list TrafficSplitList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *TrafficSplit) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}
