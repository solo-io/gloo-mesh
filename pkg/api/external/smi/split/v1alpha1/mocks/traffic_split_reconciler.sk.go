// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/external/smi/split/v1alpha1/traffic_split_reconciler.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	v1alpha1 "github.com/solo-io/supergloo/pkg/api/external/smi/split/v1alpha1"
)

// MockTrafficSplitReconciler is a mock of TrafficSplitReconciler interface
type MockTrafficSplitReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficSplitReconcilerMockRecorder
}

// MockTrafficSplitReconcilerMockRecorder is the mock recorder for MockTrafficSplitReconciler
type MockTrafficSplitReconcilerMockRecorder struct {
	mock *MockTrafficSplitReconciler
}

// NewMockTrafficSplitReconciler creates a new mock instance
func NewMockTrafficSplitReconciler(ctrl *gomock.Controller) *MockTrafficSplitReconciler {
	mock := &MockTrafficSplitReconciler{ctrl: ctrl}
	mock.recorder = &MockTrafficSplitReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTrafficSplitReconciler) EXPECT() *MockTrafficSplitReconcilerMockRecorder {
	return m.recorder
}

// Reconcile mocks base method
func (m *MockTrafficSplitReconciler) Reconcile(namespace string, desiredResources v1alpha1.TrafficSplitList, transition v1alpha1.TransitionTrafficSplitFunc, opts clients.ListOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", namespace, desiredResources, transition, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile
func (mr *MockTrafficSplitReconcilerMockRecorder) Reconcile(namespace, desiredResources, transition, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockTrafficSplitReconciler)(nil).Reconcile), namespace, desiredResources, transition, opts)
}
