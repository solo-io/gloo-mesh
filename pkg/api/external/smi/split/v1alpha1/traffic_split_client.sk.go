// Code generated by solo-kit. DO NOT EDIT.

package v1alpha1

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type TrafficSplitWatcher interface {
	// watch namespace-scoped trafficsplits
	Watch(namespace string, opts clients.WatchOpts) (<-chan TrafficSplitList, <-chan error, error)
}

type TrafficSplitClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*TrafficSplit, error)
	Write(resource *TrafficSplit, opts clients.WriteOpts) (*TrafficSplit, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (TrafficSplitList, error)
	TrafficSplitWatcher
}

type trafficSplitClient struct {
	rc clients.ResourceClient
}

func NewTrafficSplitClient(rcFactory factory.ResourceClientFactory) (TrafficSplitClient, error) {
	return NewTrafficSplitClientWithToken(rcFactory, "")
}

func NewTrafficSplitClientWithToken(rcFactory factory.ResourceClientFactory, token string) (TrafficSplitClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &TrafficSplit{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base TrafficSplit resource client")
	}
	return NewTrafficSplitClientWithBase(rc), nil
}

func NewTrafficSplitClientWithBase(rc clients.ResourceClient) TrafficSplitClient {
	return &trafficSplitClient{
		rc: rc,
	}
}

func (client *trafficSplitClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *trafficSplitClient) Register() error {
	return client.rc.Register()
}

func (client *trafficSplitClient) Read(namespace, name string, opts clients.ReadOpts) (*TrafficSplit, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*TrafficSplit), nil
}

func (client *trafficSplitClient) Write(trafficSplit *TrafficSplit, opts clients.WriteOpts) (*TrafficSplit, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(trafficSplit, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*TrafficSplit), nil
}

func (client *trafficSplitClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *trafficSplitClient) List(namespace string, opts clients.ListOpts) (TrafficSplitList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToTrafficSplit(resourceList), nil
}

func (client *trafficSplitClient) Watch(namespace string, opts clients.WatchOpts) (<-chan TrafficSplitList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	trafficsplitsChan := make(chan TrafficSplitList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				trafficsplitsChan <- convertToTrafficSplit(resourceList)
			case <-opts.Ctx.Done():
				close(trafficsplitsChan)
				return
			}
		}
	}()
	return trafficsplitsChan, errs, nil
}

func convertToTrafficSplit(resources resources.ResourceList) TrafficSplitList {
	var trafficSplitList TrafficSplitList
	for _, resource := range resources {
		trafficSplitList = append(trafficSplitList, resource.(*TrafficSplit))
	}
	return trafficSplitList
}
