// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	rbac_enterprise_mesh_gloo_solo_io_v1 "github.com/solo-io/gloo-mesh/pkg/api/rbac.enterprise.mesh.gloo.solo.io/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the Role Resource.
// implemented by the user
type RoleReconciler interface {
	ReconcileRole(obj *rbac_enterprise_mesh_gloo_solo_io_v1.Role) (reconcile.Result, error)
}

// Reconcile deletion events for the Role Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type RoleDeletionReconciler interface {
	ReconcileRoleDeletion(req reconcile.Request) error
}

type RoleReconcilerFuncs struct {
	OnReconcileRole         func(obj *rbac_enterprise_mesh_gloo_solo_io_v1.Role) (reconcile.Result, error)
	OnReconcileRoleDeletion func(req reconcile.Request) error
}

func (f *RoleReconcilerFuncs) ReconcileRole(obj *rbac_enterprise_mesh_gloo_solo_io_v1.Role) (reconcile.Result, error) {
	if f.OnReconcileRole == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileRole(obj)
}

func (f *RoleReconcilerFuncs) ReconcileRoleDeletion(req reconcile.Request) error {
	if f.OnReconcileRoleDeletion == nil {
		return nil
	}
	return f.OnReconcileRoleDeletion(req)
}

// Reconcile and finalize the Role Resource
// implemented by the user
type RoleFinalizer interface {
	RoleReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	RoleFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeRole(obj *rbac_enterprise_mesh_gloo_solo_io_v1.Role) error
}

type RoleReconcileLoop interface {
	RunRoleReconciler(ctx context.Context, rec RoleReconciler, predicates ...predicate.Predicate) error
}

type roleReconcileLoop struct {
	loop reconcile.Loop
}

func NewRoleReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) RoleReconcileLoop {
	return &roleReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &rbac_enterprise_mesh_gloo_solo_io_v1.Role{}, options),
	}
}

func (c *roleReconcileLoop) RunRoleReconciler(ctx context.Context, reconciler RoleReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericRoleReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(RoleFinalizer); ok {
		reconcilerWrapper = genericRoleFinalizer{
			genericRoleReconciler: genericReconciler,
			finalizingReconciler:  finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericRoleHandler implements a generic reconcile.Reconciler
type genericRoleReconciler struct {
	reconciler RoleReconciler
}

func (r genericRoleReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*rbac_enterprise_mesh_gloo_solo_io_v1.Role)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: Role handler received event for %T", object)
	}
	return r.reconciler.ReconcileRole(obj)
}

func (r genericRoleReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(RoleDeletionReconciler); ok {
		return deletionReconciler.ReconcileRoleDeletion(request)
	}
	return nil
}

// genericRoleFinalizer implements a generic reconcile.FinalizingReconciler
type genericRoleFinalizer struct {
	genericRoleReconciler
	finalizingReconciler RoleFinalizer
}

func (r genericRoleFinalizer) FinalizerName() string {
	return r.finalizingReconciler.RoleFinalizerName()
}

func (r genericRoleFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*rbac_enterprise_mesh_gloo_solo_io_v1.Role)
	if !ok {
		return errors.Errorf("internal error: Role handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeRole(obj)
}

// Reconcile Upsert events for the RoleBinding Resource.
// implemented by the user
type RoleBindingReconciler interface {
	ReconcileRoleBinding(obj *rbac_enterprise_mesh_gloo_solo_io_v1.RoleBinding) (reconcile.Result, error)
}

// Reconcile deletion events for the RoleBinding Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type RoleBindingDeletionReconciler interface {
	ReconcileRoleBindingDeletion(req reconcile.Request) error
}

type RoleBindingReconcilerFuncs struct {
	OnReconcileRoleBinding         func(obj *rbac_enterprise_mesh_gloo_solo_io_v1.RoleBinding) (reconcile.Result, error)
	OnReconcileRoleBindingDeletion func(req reconcile.Request) error
}

func (f *RoleBindingReconcilerFuncs) ReconcileRoleBinding(obj *rbac_enterprise_mesh_gloo_solo_io_v1.RoleBinding) (reconcile.Result, error) {
	if f.OnReconcileRoleBinding == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileRoleBinding(obj)
}

func (f *RoleBindingReconcilerFuncs) ReconcileRoleBindingDeletion(req reconcile.Request) error {
	if f.OnReconcileRoleBindingDeletion == nil {
		return nil
	}
	return f.OnReconcileRoleBindingDeletion(req)
}

// Reconcile and finalize the RoleBinding Resource
// implemented by the user
type RoleBindingFinalizer interface {
	RoleBindingReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	RoleBindingFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeRoleBinding(obj *rbac_enterprise_mesh_gloo_solo_io_v1.RoleBinding) error
}

type RoleBindingReconcileLoop interface {
	RunRoleBindingReconciler(ctx context.Context, rec RoleBindingReconciler, predicates ...predicate.Predicate) error
}

type roleBindingReconcileLoop struct {
	loop reconcile.Loop
}

func NewRoleBindingReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) RoleBindingReconcileLoop {
	return &roleBindingReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &rbac_enterprise_mesh_gloo_solo_io_v1.RoleBinding{}, options),
	}
}

func (c *roleBindingReconcileLoop) RunRoleBindingReconciler(ctx context.Context, reconciler RoleBindingReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericRoleBindingReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(RoleBindingFinalizer); ok {
		reconcilerWrapper = genericRoleBindingFinalizer{
			genericRoleBindingReconciler: genericReconciler,
			finalizingReconciler:         finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericRoleBindingHandler implements a generic reconcile.Reconciler
type genericRoleBindingReconciler struct {
	reconciler RoleBindingReconciler
}

func (r genericRoleBindingReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*rbac_enterprise_mesh_gloo_solo_io_v1.RoleBinding)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: RoleBinding handler received event for %T", object)
	}
	return r.reconciler.ReconcileRoleBinding(obj)
}

func (r genericRoleBindingReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(RoleBindingDeletionReconciler); ok {
		return deletionReconciler.ReconcileRoleBindingDeletion(request)
	}
	return nil
}

// genericRoleBindingFinalizer implements a generic reconcile.FinalizingReconciler
type genericRoleBindingFinalizer struct {
	genericRoleBindingReconciler
	finalizingReconciler RoleBindingFinalizer
}

func (r genericRoleBindingFinalizer) FinalizerName() string {
	return r.finalizingReconciler.RoleBindingFinalizerName()
}

func (r genericRoleBindingFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*rbac_enterprise_mesh_gloo_solo_io_v1.RoleBinding)
	if !ok {
		return errors.Errorf("internal error: RoleBinding handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeRoleBinding(obj)
}
