// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/gloo-mesh/pkg/api/rbac.enterprise.mesh.gloo.solo.io/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// Roles mocks base method
func (m *MockClientset) Roles() v1.RoleClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roles")
	ret0, _ := ret[0].(v1.RoleClient)
	return ret0
}

// Roles indicates an expected call of Roles
func (mr *MockClientsetMockRecorder) Roles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roles", reflect.TypeOf((*MockClientset)(nil).Roles))
}

// RoleBindings mocks base method
func (m *MockClientset) RoleBindings() v1.RoleBindingClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleBindings")
	ret0, _ := ret[0].(v1.RoleBindingClient)
	return ret0
}

// RoleBindings indicates an expected call of RoleBindings
func (mr *MockClientsetMockRecorder) RoleBindings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleBindings", reflect.TypeOf((*MockClientset)(nil).RoleBindings))
}

// MockRoleReader is a mock of RoleReader interface
type MockRoleReader struct {
	ctrl     *gomock.Controller
	recorder *MockRoleReaderMockRecorder
}

// MockRoleReaderMockRecorder is the mock recorder for MockRoleReader
type MockRoleReaderMockRecorder struct {
	mock *MockRoleReader
}

// NewMockRoleReader creates a new mock instance
func NewMockRoleReader(ctrl *gomock.Controller) *MockRoleReader {
	mock := &MockRoleReader{ctrl: ctrl}
	mock.recorder = &MockRoleReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleReader) EXPECT() *MockRoleReaderMockRecorder {
	return m.recorder
}

// GetRole mocks base method
func (m *MockRoleReader) GetRole(ctx context.Context, key client.ObjectKey) (*v1.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, key)
	ret0, _ := ret[0].(*v1.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole
func (mr *MockRoleReaderMockRecorder) GetRole(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockRoleReader)(nil).GetRole), ctx, key)
}

// ListRole mocks base method
func (m *MockRoleReader) ListRole(ctx context.Context, opts ...client.ListOption) (*v1.RoleList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRole", varargs...)
	ret0, _ := ret[0].(*v1.RoleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRole indicates an expected call of ListRole
func (mr *MockRoleReaderMockRecorder) ListRole(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRole", reflect.TypeOf((*MockRoleReader)(nil).ListRole), varargs...)
}

// MockRoleWriter is a mock of RoleWriter interface
type MockRoleWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRoleWriterMockRecorder
}

// MockRoleWriterMockRecorder is the mock recorder for MockRoleWriter
type MockRoleWriterMockRecorder struct {
	mock *MockRoleWriter
}

// NewMockRoleWriter creates a new mock instance
func NewMockRoleWriter(ctrl *gomock.Controller) *MockRoleWriter {
	mock := &MockRoleWriter{ctrl: ctrl}
	mock.recorder = &MockRoleWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleWriter) EXPECT() *MockRoleWriterMockRecorder {
	return m.recorder
}

// CreateRole mocks base method
func (m *MockRoleWriter) CreateRole(ctx context.Context, obj *v1.Role, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole
func (mr *MockRoleWriterMockRecorder) CreateRole(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleWriter)(nil).CreateRole), varargs...)
}

// DeleteRole mocks base method
func (m *MockRoleWriter) DeleteRole(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole
func (mr *MockRoleWriterMockRecorder) DeleteRole(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRoleWriter)(nil).DeleteRole), varargs...)
}

// UpdateRole mocks base method
func (m *MockRoleWriter) UpdateRole(ctx context.Context, obj *v1.Role, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole
func (mr *MockRoleWriterMockRecorder) UpdateRole(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRoleWriter)(nil).UpdateRole), varargs...)
}

// PatchRole mocks base method
func (m *MockRoleWriter) PatchRole(ctx context.Context, obj *v1.Role, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRole indicates an expected call of PatchRole
func (mr *MockRoleWriterMockRecorder) PatchRole(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRole", reflect.TypeOf((*MockRoleWriter)(nil).PatchRole), varargs...)
}

// DeleteAllOfRole mocks base method
func (m *MockRoleWriter) DeleteAllOfRole(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRole indicates an expected call of DeleteAllOfRole
func (mr *MockRoleWriterMockRecorder) DeleteAllOfRole(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRole", reflect.TypeOf((*MockRoleWriter)(nil).DeleteAllOfRole), varargs...)
}

// UpsertRole mocks base method
func (m *MockRoleWriter) UpsertRole(ctx context.Context, obj *v1.Role, transitionFuncs ...v1.RoleTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRole indicates an expected call of UpsertRole
func (mr *MockRoleWriterMockRecorder) UpsertRole(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRole", reflect.TypeOf((*MockRoleWriter)(nil).UpsertRole), varargs...)
}

// MockRoleStatusWriter is a mock of RoleStatusWriter interface
type MockRoleStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRoleStatusWriterMockRecorder
}

// MockRoleStatusWriterMockRecorder is the mock recorder for MockRoleStatusWriter
type MockRoleStatusWriterMockRecorder struct {
	mock *MockRoleStatusWriter
}

// NewMockRoleStatusWriter creates a new mock instance
func NewMockRoleStatusWriter(ctrl *gomock.Controller) *MockRoleStatusWriter {
	mock := &MockRoleStatusWriter{ctrl: ctrl}
	mock.recorder = &MockRoleStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleStatusWriter) EXPECT() *MockRoleStatusWriterMockRecorder {
	return m.recorder
}

// UpdateRoleStatus mocks base method
func (m *MockRoleStatusWriter) UpdateRoleStatus(ctx context.Context, obj *v1.Role, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoleStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleStatus indicates an expected call of UpdateRoleStatus
func (mr *MockRoleStatusWriterMockRecorder) UpdateRoleStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleStatus", reflect.TypeOf((*MockRoleStatusWriter)(nil).UpdateRoleStatus), varargs...)
}

// PatchRoleStatus mocks base method
func (m *MockRoleStatusWriter) PatchRoleStatus(ctx context.Context, obj *v1.Role, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRoleStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleStatus indicates an expected call of PatchRoleStatus
func (mr *MockRoleStatusWriterMockRecorder) PatchRoleStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleStatus", reflect.TypeOf((*MockRoleStatusWriter)(nil).PatchRoleStatus), varargs...)
}

// MockRoleClient is a mock of RoleClient interface
type MockRoleClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoleClientMockRecorder
}

// MockRoleClientMockRecorder is the mock recorder for MockRoleClient
type MockRoleClientMockRecorder struct {
	mock *MockRoleClient
}

// NewMockRoleClient creates a new mock instance
func NewMockRoleClient(ctrl *gomock.Controller) *MockRoleClient {
	mock := &MockRoleClient{ctrl: ctrl}
	mock.recorder = &MockRoleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleClient) EXPECT() *MockRoleClientMockRecorder {
	return m.recorder
}

// GetRole mocks base method
func (m *MockRoleClient) GetRole(ctx context.Context, key client.ObjectKey) (*v1.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, key)
	ret0, _ := ret[0].(*v1.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole
func (mr *MockRoleClientMockRecorder) GetRole(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockRoleClient)(nil).GetRole), ctx, key)
}

// ListRole mocks base method
func (m *MockRoleClient) ListRole(ctx context.Context, opts ...client.ListOption) (*v1.RoleList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRole", varargs...)
	ret0, _ := ret[0].(*v1.RoleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRole indicates an expected call of ListRole
func (mr *MockRoleClientMockRecorder) ListRole(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRole", reflect.TypeOf((*MockRoleClient)(nil).ListRole), varargs...)
}

// CreateRole mocks base method
func (m *MockRoleClient) CreateRole(ctx context.Context, obj *v1.Role, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole
func (mr *MockRoleClientMockRecorder) CreateRole(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleClient)(nil).CreateRole), varargs...)
}

// DeleteRole mocks base method
func (m *MockRoleClient) DeleteRole(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole
func (mr *MockRoleClientMockRecorder) DeleteRole(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRoleClient)(nil).DeleteRole), varargs...)
}

// UpdateRole mocks base method
func (m *MockRoleClient) UpdateRole(ctx context.Context, obj *v1.Role, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole
func (mr *MockRoleClientMockRecorder) UpdateRole(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRoleClient)(nil).UpdateRole), varargs...)
}

// PatchRole mocks base method
func (m *MockRoleClient) PatchRole(ctx context.Context, obj *v1.Role, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRole indicates an expected call of PatchRole
func (mr *MockRoleClientMockRecorder) PatchRole(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRole", reflect.TypeOf((*MockRoleClient)(nil).PatchRole), varargs...)
}

// DeleteAllOfRole mocks base method
func (m *MockRoleClient) DeleteAllOfRole(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRole indicates an expected call of DeleteAllOfRole
func (mr *MockRoleClientMockRecorder) DeleteAllOfRole(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRole", reflect.TypeOf((*MockRoleClient)(nil).DeleteAllOfRole), varargs...)
}

// UpsertRole mocks base method
func (m *MockRoleClient) UpsertRole(ctx context.Context, obj *v1.Role, transitionFuncs ...v1.RoleTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRole indicates an expected call of UpsertRole
func (mr *MockRoleClientMockRecorder) UpsertRole(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRole", reflect.TypeOf((*MockRoleClient)(nil).UpsertRole), varargs...)
}

// UpdateRoleStatus mocks base method
func (m *MockRoleClient) UpdateRoleStatus(ctx context.Context, obj *v1.Role, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoleStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleStatus indicates an expected call of UpdateRoleStatus
func (mr *MockRoleClientMockRecorder) UpdateRoleStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleStatus", reflect.TypeOf((*MockRoleClient)(nil).UpdateRoleStatus), varargs...)
}

// PatchRoleStatus mocks base method
func (m *MockRoleClient) PatchRoleStatus(ctx context.Context, obj *v1.Role, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRoleStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleStatus indicates an expected call of PatchRoleStatus
func (mr *MockRoleClientMockRecorder) PatchRoleStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleStatus", reflect.TypeOf((*MockRoleClient)(nil).PatchRoleStatus), varargs...)
}

// MockMulticlusterRoleClient is a mock of MulticlusterRoleClient interface
type MockMulticlusterRoleClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRoleClientMockRecorder
}

// MockMulticlusterRoleClientMockRecorder is the mock recorder for MockMulticlusterRoleClient
type MockMulticlusterRoleClientMockRecorder struct {
	mock *MockMulticlusterRoleClient
}

// NewMockMulticlusterRoleClient creates a new mock instance
func NewMockMulticlusterRoleClient(ctrl *gomock.Controller) *MockMulticlusterRoleClient {
	mock := &MockMulticlusterRoleClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRoleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterRoleClient) EXPECT() *MockMulticlusterRoleClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterRoleClient) Cluster(cluster string) (v1.RoleClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1.RoleClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterRoleClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterRoleClient)(nil).Cluster), cluster)
}

// MockRoleBindingReader is a mock of RoleBindingReader interface
type MockRoleBindingReader struct {
	ctrl     *gomock.Controller
	recorder *MockRoleBindingReaderMockRecorder
}

// MockRoleBindingReaderMockRecorder is the mock recorder for MockRoleBindingReader
type MockRoleBindingReaderMockRecorder struct {
	mock *MockRoleBindingReader
}

// NewMockRoleBindingReader creates a new mock instance
func NewMockRoleBindingReader(ctrl *gomock.Controller) *MockRoleBindingReader {
	mock := &MockRoleBindingReader{ctrl: ctrl}
	mock.recorder = &MockRoleBindingReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleBindingReader) EXPECT() *MockRoleBindingReaderMockRecorder {
	return m.recorder
}

// GetRoleBinding mocks base method
func (m *MockRoleBindingReader) GetRoleBinding(ctx context.Context, key client.ObjectKey) (*v1.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleBinding", ctx, key)
	ret0, _ := ret[0].(*v1.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleBinding indicates an expected call of GetRoleBinding
func (mr *MockRoleBindingReaderMockRecorder) GetRoleBinding(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBinding", reflect.TypeOf((*MockRoleBindingReader)(nil).GetRoleBinding), ctx, key)
}

// ListRoleBinding mocks base method
func (m *MockRoleBindingReader) ListRoleBinding(ctx context.Context, opts ...client.ListOption) (*v1.RoleBindingList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoleBinding", varargs...)
	ret0, _ := ret[0].(*v1.RoleBindingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleBinding indicates an expected call of ListRoleBinding
func (mr *MockRoleBindingReaderMockRecorder) ListRoleBinding(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleBinding", reflect.TypeOf((*MockRoleBindingReader)(nil).ListRoleBinding), varargs...)
}

// MockRoleBindingWriter is a mock of RoleBindingWriter interface
type MockRoleBindingWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRoleBindingWriterMockRecorder
}

// MockRoleBindingWriterMockRecorder is the mock recorder for MockRoleBindingWriter
type MockRoleBindingWriterMockRecorder struct {
	mock *MockRoleBindingWriter
}

// NewMockRoleBindingWriter creates a new mock instance
func NewMockRoleBindingWriter(ctrl *gomock.Controller) *MockRoleBindingWriter {
	mock := &MockRoleBindingWriter{ctrl: ctrl}
	mock.recorder = &MockRoleBindingWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleBindingWriter) EXPECT() *MockRoleBindingWriterMockRecorder {
	return m.recorder
}

// CreateRoleBinding mocks base method
func (m *MockRoleBindingWriter) CreateRoleBinding(ctx context.Context, obj *v1.RoleBinding, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoleBinding indicates an expected call of CreateRoleBinding
func (mr *MockRoleBindingWriterMockRecorder) CreateRoleBinding(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleBinding", reflect.TypeOf((*MockRoleBindingWriter)(nil).CreateRoleBinding), varargs...)
}

// DeleteRoleBinding mocks base method
func (m *MockRoleBindingWriter) DeleteRoleBinding(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleBinding indicates an expected call of DeleteRoleBinding
func (mr *MockRoleBindingWriterMockRecorder) DeleteRoleBinding(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleBinding", reflect.TypeOf((*MockRoleBindingWriter)(nil).DeleteRoleBinding), varargs...)
}

// UpdateRoleBinding mocks base method
func (m *MockRoleBindingWriter) UpdateRoleBinding(ctx context.Context, obj *v1.RoleBinding, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleBinding indicates an expected call of UpdateRoleBinding
func (mr *MockRoleBindingWriterMockRecorder) UpdateRoleBinding(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleBinding", reflect.TypeOf((*MockRoleBindingWriter)(nil).UpdateRoleBinding), varargs...)
}

// PatchRoleBinding mocks base method
func (m *MockRoleBindingWriter) PatchRoleBinding(ctx context.Context, obj *v1.RoleBinding, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleBinding indicates an expected call of PatchRoleBinding
func (mr *MockRoleBindingWriterMockRecorder) PatchRoleBinding(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleBinding", reflect.TypeOf((*MockRoleBindingWriter)(nil).PatchRoleBinding), varargs...)
}

// DeleteAllOfRoleBinding mocks base method
func (m *MockRoleBindingWriter) DeleteAllOfRoleBinding(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRoleBinding indicates an expected call of DeleteAllOfRoleBinding
func (mr *MockRoleBindingWriterMockRecorder) DeleteAllOfRoleBinding(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRoleBinding", reflect.TypeOf((*MockRoleBindingWriter)(nil).DeleteAllOfRoleBinding), varargs...)
}

// UpsertRoleBinding mocks base method
func (m *MockRoleBindingWriter) UpsertRoleBinding(ctx context.Context, obj *v1.RoleBinding, transitionFuncs ...v1.RoleBindingTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRoleBinding indicates an expected call of UpsertRoleBinding
func (mr *MockRoleBindingWriterMockRecorder) UpsertRoleBinding(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRoleBinding", reflect.TypeOf((*MockRoleBindingWriter)(nil).UpsertRoleBinding), varargs...)
}

// MockRoleBindingStatusWriter is a mock of RoleBindingStatusWriter interface
type MockRoleBindingStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRoleBindingStatusWriterMockRecorder
}

// MockRoleBindingStatusWriterMockRecorder is the mock recorder for MockRoleBindingStatusWriter
type MockRoleBindingStatusWriterMockRecorder struct {
	mock *MockRoleBindingStatusWriter
}

// NewMockRoleBindingStatusWriter creates a new mock instance
func NewMockRoleBindingStatusWriter(ctrl *gomock.Controller) *MockRoleBindingStatusWriter {
	mock := &MockRoleBindingStatusWriter{ctrl: ctrl}
	mock.recorder = &MockRoleBindingStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleBindingStatusWriter) EXPECT() *MockRoleBindingStatusWriterMockRecorder {
	return m.recorder
}

// UpdateRoleBindingStatus mocks base method
func (m *MockRoleBindingStatusWriter) UpdateRoleBindingStatus(ctx context.Context, obj *v1.RoleBinding, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoleBindingStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleBindingStatus indicates an expected call of UpdateRoleBindingStatus
func (mr *MockRoleBindingStatusWriterMockRecorder) UpdateRoleBindingStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleBindingStatus", reflect.TypeOf((*MockRoleBindingStatusWriter)(nil).UpdateRoleBindingStatus), varargs...)
}

// PatchRoleBindingStatus mocks base method
func (m *MockRoleBindingStatusWriter) PatchRoleBindingStatus(ctx context.Context, obj *v1.RoleBinding, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRoleBindingStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleBindingStatus indicates an expected call of PatchRoleBindingStatus
func (mr *MockRoleBindingStatusWriterMockRecorder) PatchRoleBindingStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleBindingStatus", reflect.TypeOf((*MockRoleBindingStatusWriter)(nil).PatchRoleBindingStatus), varargs...)
}

// MockRoleBindingClient is a mock of RoleBindingClient interface
type MockRoleBindingClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoleBindingClientMockRecorder
}

// MockRoleBindingClientMockRecorder is the mock recorder for MockRoleBindingClient
type MockRoleBindingClientMockRecorder struct {
	mock *MockRoleBindingClient
}

// NewMockRoleBindingClient creates a new mock instance
func NewMockRoleBindingClient(ctrl *gomock.Controller) *MockRoleBindingClient {
	mock := &MockRoleBindingClient{ctrl: ctrl}
	mock.recorder = &MockRoleBindingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleBindingClient) EXPECT() *MockRoleBindingClientMockRecorder {
	return m.recorder
}

// GetRoleBinding mocks base method
func (m *MockRoleBindingClient) GetRoleBinding(ctx context.Context, key client.ObjectKey) (*v1.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleBinding", ctx, key)
	ret0, _ := ret[0].(*v1.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleBinding indicates an expected call of GetRoleBinding
func (mr *MockRoleBindingClientMockRecorder) GetRoleBinding(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBinding", reflect.TypeOf((*MockRoleBindingClient)(nil).GetRoleBinding), ctx, key)
}

// ListRoleBinding mocks base method
func (m *MockRoleBindingClient) ListRoleBinding(ctx context.Context, opts ...client.ListOption) (*v1.RoleBindingList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoleBinding", varargs...)
	ret0, _ := ret[0].(*v1.RoleBindingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleBinding indicates an expected call of ListRoleBinding
func (mr *MockRoleBindingClientMockRecorder) ListRoleBinding(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleBinding", reflect.TypeOf((*MockRoleBindingClient)(nil).ListRoleBinding), varargs...)
}

// CreateRoleBinding mocks base method
func (m *MockRoleBindingClient) CreateRoleBinding(ctx context.Context, obj *v1.RoleBinding, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoleBinding indicates an expected call of CreateRoleBinding
func (mr *MockRoleBindingClientMockRecorder) CreateRoleBinding(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleBinding", reflect.TypeOf((*MockRoleBindingClient)(nil).CreateRoleBinding), varargs...)
}

// DeleteRoleBinding mocks base method
func (m *MockRoleBindingClient) DeleteRoleBinding(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleBinding indicates an expected call of DeleteRoleBinding
func (mr *MockRoleBindingClientMockRecorder) DeleteRoleBinding(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleBinding", reflect.TypeOf((*MockRoleBindingClient)(nil).DeleteRoleBinding), varargs...)
}

// UpdateRoleBinding mocks base method
func (m *MockRoleBindingClient) UpdateRoleBinding(ctx context.Context, obj *v1.RoleBinding, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleBinding indicates an expected call of UpdateRoleBinding
func (mr *MockRoleBindingClientMockRecorder) UpdateRoleBinding(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleBinding", reflect.TypeOf((*MockRoleBindingClient)(nil).UpdateRoleBinding), varargs...)
}

// PatchRoleBinding mocks base method
func (m *MockRoleBindingClient) PatchRoleBinding(ctx context.Context, obj *v1.RoleBinding, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleBinding indicates an expected call of PatchRoleBinding
func (mr *MockRoleBindingClientMockRecorder) PatchRoleBinding(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleBinding", reflect.TypeOf((*MockRoleBindingClient)(nil).PatchRoleBinding), varargs...)
}

// DeleteAllOfRoleBinding mocks base method
func (m *MockRoleBindingClient) DeleteAllOfRoleBinding(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRoleBinding indicates an expected call of DeleteAllOfRoleBinding
func (mr *MockRoleBindingClientMockRecorder) DeleteAllOfRoleBinding(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRoleBinding", reflect.TypeOf((*MockRoleBindingClient)(nil).DeleteAllOfRoleBinding), varargs...)
}

// UpsertRoleBinding mocks base method
func (m *MockRoleBindingClient) UpsertRoleBinding(ctx context.Context, obj *v1.RoleBinding, transitionFuncs ...v1.RoleBindingTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRoleBinding indicates an expected call of UpsertRoleBinding
func (mr *MockRoleBindingClientMockRecorder) UpsertRoleBinding(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRoleBinding", reflect.TypeOf((*MockRoleBindingClient)(nil).UpsertRoleBinding), varargs...)
}

// UpdateRoleBindingStatus mocks base method
func (m *MockRoleBindingClient) UpdateRoleBindingStatus(ctx context.Context, obj *v1.RoleBinding, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoleBindingStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleBindingStatus indicates an expected call of UpdateRoleBindingStatus
func (mr *MockRoleBindingClientMockRecorder) UpdateRoleBindingStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleBindingStatus", reflect.TypeOf((*MockRoleBindingClient)(nil).UpdateRoleBindingStatus), varargs...)
}

// PatchRoleBindingStatus mocks base method
func (m *MockRoleBindingClient) PatchRoleBindingStatus(ctx context.Context, obj *v1.RoleBinding, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRoleBindingStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleBindingStatus indicates an expected call of PatchRoleBindingStatus
func (mr *MockRoleBindingClientMockRecorder) PatchRoleBindingStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleBindingStatus", reflect.TypeOf((*MockRoleBindingClient)(nil).PatchRoleBindingStatus), varargs...)
}

// MockMulticlusterRoleBindingClient is a mock of MulticlusterRoleBindingClient interface
type MockMulticlusterRoleBindingClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRoleBindingClientMockRecorder
}

// MockMulticlusterRoleBindingClientMockRecorder is the mock recorder for MockMulticlusterRoleBindingClient
type MockMulticlusterRoleBindingClientMockRecorder struct {
	mock *MockMulticlusterRoleBindingClient
}

// NewMockMulticlusterRoleBindingClient creates a new mock instance
func NewMockMulticlusterRoleBindingClient(ctrl *gomock.Controller) *MockMulticlusterRoleBindingClient {
	mock := &MockMulticlusterRoleBindingClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRoleBindingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterRoleBindingClient) EXPECT() *MockMulticlusterRoleBindingClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterRoleBindingClient) Cluster(cluster string) (v1.RoleBindingClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1.RoleBindingClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterRoleBindingClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterRoleBindingClient)(nil).Cluster), cluster)
}
