// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	discovery_smh_solo_io_v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha2"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the TrafficTarget Resource across clusters.
// implemented by the user
type MulticlusterTrafficTargetReconciler interface {
	ReconcileTrafficTarget(clusterName string, obj *discovery_smh_solo_io_v1alpha2.TrafficTarget) (reconcile.Result, error)
}

// Reconcile deletion events for the TrafficTarget Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterTrafficTargetDeletionReconciler interface {
	ReconcileTrafficTargetDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterTrafficTargetReconcilerFuncs struct {
	OnReconcileTrafficTarget         func(clusterName string, obj *discovery_smh_solo_io_v1alpha2.TrafficTarget) (reconcile.Result, error)
	OnReconcileTrafficTargetDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterTrafficTargetReconcilerFuncs) ReconcileTrafficTarget(clusterName string, obj *discovery_smh_solo_io_v1alpha2.TrafficTarget) (reconcile.Result, error) {
	if f.OnReconcileTrafficTarget == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileTrafficTarget(clusterName, obj)
}

func (f *MulticlusterTrafficTargetReconcilerFuncs) ReconcileTrafficTargetDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileTrafficTargetDeletion == nil {
		return nil
	}
	return f.OnReconcileTrafficTargetDeletion(clusterName, req)
}

type MulticlusterTrafficTargetReconcileLoop interface {
	// AddMulticlusterTrafficTargetReconciler adds a MulticlusterTrafficTargetReconciler to the MulticlusterTrafficTargetReconcileLoop.
	AddMulticlusterTrafficTargetReconciler(ctx context.Context, rec MulticlusterTrafficTargetReconciler, predicates ...predicate.Predicate)
}

type multiclusterTrafficTargetReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterTrafficTargetReconcileLoop) AddMulticlusterTrafficTargetReconciler(ctx context.Context, rec MulticlusterTrafficTargetReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericTrafficTargetMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterTrafficTargetReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterTrafficTargetReconcileLoop {
	return &multiclusterTrafficTargetReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &discovery_smh_solo_io_v1alpha2.TrafficTarget{}, options)}
}

type genericTrafficTargetMulticlusterReconciler struct {
	reconciler MulticlusterTrafficTargetReconciler
}

func (g genericTrafficTargetMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterTrafficTargetDeletionReconciler); ok {
		return deletionReconciler.ReconcileTrafficTargetDeletion(cluster, req)
	}
	return nil
}

func (g genericTrafficTargetMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha2.TrafficTarget)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: TrafficTarget handler received event for %T", object)
	}
	return g.reconciler.ReconcileTrafficTarget(cluster, obj)
}

// Reconcile Upsert events for the Workload Resource across clusters.
// implemented by the user
type MulticlusterWorkloadReconciler interface {
	ReconcileWorkload(clusterName string, obj *discovery_smh_solo_io_v1alpha2.Workload) (reconcile.Result, error)
}

// Reconcile deletion events for the Workload Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterWorkloadDeletionReconciler interface {
	ReconcileWorkloadDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterWorkloadReconcilerFuncs struct {
	OnReconcileWorkload         func(clusterName string, obj *discovery_smh_solo_io_v1alpha2.Workload) (reconcile.Result, error)
	OnReconcileWorkloadDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterWorkloadReconcilerFuncs) ReconcileWorkload(clusterName string, obj *discovery_smh_solo_io_v1alpha2.Workload) (reconcile.Result, error) {
	if f.OnReconcileWorkload == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileWorkload(clusterName, obj)
}

func (f *MulticlusterWorkloadReconcilerFuncs) ReconcileWorkloadDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileWorkloadDeletion == nil {
		return nil
	}
	return f.OnReconcileWorkloadDeletion(clusterName, req)
}

type MulticlusterWorkloadReconcileLoop interface {
	// AddMulticlusterWorkloadReconciler adds a MulticlusterWorkloadReconciler to the MulticlusterWorkloadReconcileLoop.
	AddMulticlusterWorkloadReconciler(ctx context.Context, rec MulticlusterWorkloadReconciler, predicates ...predicate.Predicate)
}

type multiclusterWorkloadReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterWorkloadReconcileLoop) AddMulticlusterWorkloadReconciler(ctx context.Context, rec MulticlusterWorkloadReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericWorkloadMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterWorkloadReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterWorkloadReconcileLoop {
	return &multiclusterWorkloadReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &discovery_smh_solo_io_v1alpha2.Workload{}, options)}
}

type genericWorkloadMulticlusterReconciler struct {
	reconciler MulticlusterWorkloadReconciler
}

func (g genericWorkloadMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterWorkloadDeletionReconciler); ok {
		return deletionReconciler.ReconcileWorkloadDeletion(cluster, req)
	}
	return nil
}

func (g genericWorkloadMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha2.Workload)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: Workload handler received event for %T", object)
	}
	return g.reconciler.ReconcileWorkload(cluster, obj)
}

// Reconcile Upsert events for the Mesh Resource across clusters.
// implemented by the user
type MulticlusterMeshReconciler interface {
	ReconcileMesh(clusterName string, obj *discovery_smh_solo_io_v1alpha2.Mesh) (reconcile.Result, error)
}

// Reconcile deletion events for the Mesh Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterMeshDeletionReconciler interface {
	ReconcileMeshDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterMeshReconcilerFuncs struct {
	OnReconcileMesh         func(clusterName string, obj *discovery_smh_solo_io_v1alpha2.Mesh) (reconcile.Result, error)
	OnReconcileMeshDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterMeshReconcilerFuncs) ReconcileMesh(clusterName string, obj *discovery_smh_solo_io_v1alpha2.Mesh) (reconcile.Result, error) {
	if f.OnReconcileMesh == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileMesh(clusterName, obj)
}

func (f *MulticlusterMeshReconcilerFuncs) ReconcileMeshDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileMeshDeletion == nil {
		return nil
	}
	return f.OnReconcileMeshDeletion(clusterName, req)
}

type MulticlusterMeshReconcileLoop interface {
	// AddMulticlusterMeshReconciler adds a MulticlusterMeshReconciler to the MulticlusterMeshReconcileLoop.
	AddMulticlusterMeshReconciler(ctx context.Context, rec MulticlusterMeshReconciler, predicates ...predicate.Predicate)
}

type multiclusterMeshReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterMeshReconcileLoop) AddMulticlusterMeshReconciler(ctx context.Context, rec MulticlusterMeshReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericMeshMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterMeshReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterMeshReconcileLoop {
	return &multiclusterMeshReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &discovery_smh_solo_io_v1alpha2.Mesh{}, options)}
}

type genericMeshMulticlusterReconciler struct {
	reconciler MulticlusterMeshReconciler
}

func (g genericMeshMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterMeshDeletionReconciler); ok {
		return deletionReconciler.ReconcileMeshDeletion(cluster, req)
	}
	return nil
}

func (g genericMeshMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha2.Mesh)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: Mesh handler received event for %T", object)
	}
	return g.reconciler.ReconcileMesh(cluster, obj)
}
