// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	discovery_smh_solo_io_v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha2"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the TrafficTarget Resource
// DEPRECATED: Prefer reconciler pattern.
type TrafficTargetEventHandler interface {
	CreateTrafficTarget(obj *discovery_smh_solo_io_v1alpha2.TrafficTarget) error
	UpdateTrafficTarget(old, new *discovery_smh_solo_io_v1alpha2.TrafficTarget) error
	DeleteTrafficTarget(obj *discovery_smh_solo_io_v1alpha2.TrafficTarget) error
	GenericTrafficTarget(obj *discovery_smh_solo_io_v1alpha2.TrafficTarget) error
}

type TrafficTargetEventHandlerFuncs struct {
	OnCreate  func(obj *discovery_smh_solo_io_v1alpha2.TrafficTarget) error
	OnUpdate  func(old, new *discovery_smh_solo_io_v1alpha2.TrafficTarget) error
	OnDelete  func(obj *discovery_smh_solo_io_v1alpha2.TrafficTarget) error
	OnGeneric func(obj *discovery_smh_solo_io_v1alpha2.TrafficTarget) error
}

func (f *TrafficTargetEventHandlerFuncs) CreateTrafficTarget(obj *discovery_smh_solo_io_v1alpha2.TrafficTarget) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *TrafficTargetEventHandlerFuncs) DeleteTrafficTarget(obj *discovery_smh_solo_io_v1alpha2.TrafficTarget) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *TrafficTargetEventHandlerFuncs) UpdateTrafficTarget(objOld, objNew *discovery_smh_solo_io_v1alpha2.TrafficTarget) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *TrafficTargetEventHandlerFuncs) GenericTrafficTarget(obj *discovery_smh_solo_io_v1alpha2.TrafficTarget) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type TrafficTargetEventWatcher interface {
	AddEventHandler(ctx context.Context, h TrafficTargetEventHandler, predicates ...predicate.Predicate) error
}

type trafficTargetEventWatcher struct {
	watcher events.EventWatcher
}

func NewTrafficTargetEventWatcher(name string, mgr manager.Manager) TrafficTargetEventWatcher {
	return &trafficTargetEventWatcher{
		watcher: events.NewWatcher(name, mgr, &discovery_smh_solo_io_v1alpha2.TrafficTarget{}),
	}
}

func (c *trafficTargetEventWatcher) AddEventHandler(ctx context.Context, h TrafficTargetEventHandler, predicates ...predicate.Predicate) error {
	handler := genericTrafficTargetHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericTrafficTargetHandler implements a generic events.EventHandler
type genericTrafficTargetHandler struct {
	handler TrafficTargetEventHandler
}

func (h genericTrafficTargetHandler) Create(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha2.TrafficTarget)
	if !ok {
		return errors.Errorf("internal error: TrafficTarget handler received event for %T", object)
	}
	return h.handler.CreateTrafficTarget(obj)
}

func (h genericTrafficTargetHandler) Delete(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha2.TrafficTarget)
	if !ok {
		return errors.Errorf("internal error: TrafficTarget handler received event for %T", object)
	}
	return h.handler.DeleteTrafficTarget(obj)
}

func (h genericTrafficTargetHandler) Update(old, new runtime.Object) error {
	objOld, ok := old.(*discovery_smh_solo_io_v1alpha2.TrafficTarget)
	if !ok {
		return errors.Errorf("internal error: TrafficTarget handler received event for %T", old)
	}
	objNew, ok := new.(*discovery_smh_solo_io_v1alpha2.TrafficTarget)
	if !ok {
		return errors.Errorf("internal error: TrafficTarget handler received event for %T", new)
	}
	return h.handler.UpdateTrafficTarget(objOld, objNew)
}

func (h genericTrafficTargetHandler) Generic(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha2.TrafficTarget)
	if !ok {
		return errors.Errorf("internal error: TrafficTarget handler received event for %T", object)
	}
	return h.handler.GenericTrafficTarget(obj)
}

// Handle events for the Workload Resource
// DEPRECATED: Prefer reconciler pattern.
type WorkloadEventHandler interface {
	CreateWorkload(obj *discovery_smh_solo_io_v1alpha2.Workload) error
	UpdateWorkload(old, new *discovery_smh_solo_io_v1alpha2.Workload) error
	DeleteWorkload(obj *discovery_smh_solo_io_v1alpha2.Workload) error
	GenericWorkload(obj *discovery_smh_solo_io_v1alpha2.Workload) error
}

type WorkloadEventHandlerFuncs struct {
	OnCreate  func(obj *discovery_smh_solo_io_v1alpha2.Workload) error
	OnUpdate  func(old, new *discovery_smh_solo_io_v1alpha2.Workload) error
	OnDelete  func(obj *discovery_smh_solo_io_v1alpha2.Workload) error
	OnGeneric func(obj *discovery_smh_solo_io_v1alpha2.Workload) error
}

func (f *WorkloadEventHandlerFuncs) CreateWorkload(obj *discovery_smh_solo_io_v1alpha2.Workload) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *WorkloadEventHandlerFuncs) DeleteWorkload(obj *discovery_smh_solo_io_v1alpha2.Workload) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *WorkloadEventHandlerFuncs) UpdateWorkload(objOld, objNew *discovery_smh_solo_io_v1alpha2.Workload) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *WorkloadEventHandlerFuncs) GenericWorkload(obj *discovery_smh_solo_io_v1alpha2.Workload) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type WorkloadEventWatcher interface {
	AddEventHandler(ctx context.Context, h WorkloadEventHandler, predicates ...predicate.Predicate) error
}

type workloadEventWatcher struct {
	watcher events.EventWatcher
}

func NewWorkloadEventWatcher(name string, mgr manager.Manager) WorkloadEventWatcher {
	return &workloadEventWatcher{
		watcher: events.NewWatcher(name, mgr, &discovery_smh_solo_io_v1alpha2.Workload{}),
	}
}

func (c *workloadEventWatcher) AddEventHandler(ctx context.Context, h WorkloadEventHandler, predicates ...predicate.Predicate) error {
	handler := genericWorkloadHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericWorkloadHandler implements a generic events.EventHandler
type genericWorkloadHandler struct {
	handler WorkloadEventHandler
}

func (h genericWorkloadHandler) Create(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha2.Workload)
	if !ok {
		return errors.Errorf("internal error: Workload handler received event for %T", object)
	}
	return h.handler.CreateWorkload(obj)
}

func (h genericWorkloadHandler) Delete(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha2.Workload)
	if !ok {
		return errors.Errorf("internal error: Workload handler received event for %T", object)
	}
	return h.handler.DeleteWorkload(obj)
}

func (h genericWorkloadHandler) Update(old, new runtime.Object) error {
	objOld, ok := old.(*discovery_smh_solo_io_v1alpha2.Workload)
	if !ok {
		return errors.Errorf("internal error: Workload handler received event for %T", old)
	}
	objNew, ok := new.(*discovery_smh_solo_io_v1alpha2.Workload)
	if !ok {
		return errors.Errorf("internal error: Workload handler received event for %T", new)
	}
	return h.handler.UpdateWorkload(objOld, objNew)
}

func (h genericWorkloadHandler) Generic(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha2.Workload)
	if !ok {
		return errors.Errorf("internal error: Workload handler received event for %T", object)
	}
	return h.handler.GenericWorkload(obj)
}

// Handle events for the Mesh Resource
// DEPRECATED: Prefer reconciler pattern.
type MeshEventHandler interface {
	CreateMesh(obj *discovery_smh_solo_io_v1alpha2.Mesh) error
	UpdateMesh(old, new *discovery_smh_solo_io_v1alpha2.Mesh) error
	DeleteMesh(obj *discovery_smh_solo_io_v1alpha2.Mesh) error
	GenericMesh(obj *discovery_smh_solo_io_v1alpha2.Mesh) error
}

type MeshEventHandlerFuncs struct {
	OnCreate  func(obj *discovery_smh_solo_io_v1alpha2.Mesh) error
	OnUpdate  func(old, new *discovery_smh_solo_io_v1alpha2.Mesh) error
	OnDelete  func(obj *discovery_smh_solo_io_v1alpha2.Mesh) error
	OnGeneric func(obj *discovery_smh_solo_io_v1alpha2.Mesh) error
}

func (f *MeshEventHandlerFuncs) CreateMesh(obj *discovery_smh_solo_io_v1alpha2.Mesh) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *MeshEventHandlerFuncs) DeleteMesh(obj *discovery_smh_solo_io_v1alpha2.Mesh) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *MeshEventHandlerFuncs) UpdateMesh(objOld, objNew *discovery_smh_solo_io_v1alpha2.Mesh) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *MeshEventHandlerFuncs) GenericMesh(obj *discovery_smh_solo_io_v1alpha2.Mesh) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type MeshEventWatcher interface {
	AddEventHandler(ctx context.Context, h MeshEventHandler, predicates ...predicate.Predicate) error
}

type meshEventWatcher struct {
	watcher events.EventWatcher
}

func NewMeshEventWatcher(name string, mgr manager.Manager) MeshEventWatcher {
	return &meshEventWatcher{
		watcher: events.NewWatcher(name, mgr, &discovery_smh_solo_io_v1alpha2.Mesh{}),
	}
}

func (c *meshEventWatcher) AddEventHandler(ctx context.Context, h MeshEventHandler, predicates ...predicate.Predicate) error {
	handler := genericMeshHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericMeshHandler implements a generic events.EventHandler
type genericMeshHandler struct {
	handler MeshEventHandler
}

func (h genericMeshHandler) Create(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha2.Mesh)
	if !ok {
		return errors.Errorf("internal error: Mesh handler received event for %T", object)
	}
	return h.handler.CreateMesh(obj)
}

func (h genericMeshHandler) Delete(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha2.Mesh)
	if !ok {
		return errors.Errorf("internal error: Mesh handler received event for %T", object)
	}
	return h.handler.DeleteMesh(obj)
}

func (h genericMeshHandler) Update(old, new runtime.Object) error {
	objOld, ok := old.(*discovery_smh_solo_io_v1alpha2.Mesh)
	if !ok {
		return errors.Errorf("internal error: Mesh handler received event for %T", old)
	}
	objNew, ok := new.(*discovery_smh_solo_io_v1alpha2.Mesh)
	if !ok {
		return errors.Errorf("internal error: Mesh handler received event for %T", new)
	}
	return h.handler.UpdateMesh(objOld, objNew)
}

func (h genericMeshHandler) Generic(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha2.Mesh)
	if !ok {
		return errors.Errorf("internal error: Mesh handler received event for %T", object)
	}
	return h.handler.GenericMesh(obj)
}
