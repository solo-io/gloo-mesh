// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha2"
	controller "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha2/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMeshServiceReconciler is a mock of MeshServiceReconciler interface
type MockMeshServiceReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMeshServiceReconcilerMockRecorder
}

// MockMeshServiceReconcilerMockRecorder is the mock recorder for MockMeshServiceReconciler
type MockMeshServiceReconcilerMockRecorder struct {
	mock *MockMeshServiceReconciler
}

// NewMockMeshServiceReconciler creates a new mock instance
func NewMockMeshServiceReconciler(ctrl *gomock.Controller) *MockMeshServiceReconciler {
	mock := &MockMeshServiceReconciler{ctrl: ctrl}
	mock.recorder = &MockMeshServiceReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshServiceReconciler) EXPECT() *MockMeshServiceReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMeshService mocks base method
func (m *MockMeshServiceReconciler) ReconcileMeshService(obj *v1alpha2.MeshService) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMeshService", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMeshService indicates an expected call of ReconcileMeshService
func (mr *MockMeshServiceReconcilerMockRecorder) ReconcileMeshService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMeshService", reflect.TypeOf((*MockMeshServiceReconciler)(nil).ReconcileMeshService), obj)
}

// MockMeshServiceDeletionReconciler is a mock of MeshServiceDeletionReconciler interface
type MockMeshServiceDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMeshServiceDeletionReconcilerMockRecorder
}

// MockMeshServiceDeletionReconcilerMockRecorder is the mock recorder for MockMeshServiceDeletionReconciler
type MockMeshServiceDeletionReconcilerMockRecorder struct {
	mock *MockMeshServiceDeletionReconciler
}

// NewMockMeshServiceDeletionReconciler creates a new mock instance
func NewMockMeshServiceDeletionReconciler(ctrl *gomock.Controller) *MockMeshServiceDeletionReconciler {
	mock := &MockMeshServiceDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMeshServiceDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshServiceDeletionReconciler) EXPECT() *MockMeshServiceDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMeshServiceDeletion mocks base method
func (m *MockMeshServiceDeletionReconciler) ReconcileMeshServiceDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMeshServiceDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileMeshServiceDeletion indicates an expected call of ReconcileMeshServiceDeletion
func (mr *MockMeshServiceDeletionReconcilerMockRecorder) ReconcileMeshServiceDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMeshServiceDeletion", reflect.TypeOf((*MockMeshServiceDeletionReconciler)(nil).ReconcileMeshServiceDeletion), req)
}

// MockMeshServiceFinalizer is a mock of MeshServiceFinalizer interface
type MockMeshServiceFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockMeshServiceFinalizerMockRecorder
}

// MockMeshServiceFinalizerMockRecorder is the mock recorder for MockMeshServiceFinalizer
type MockMeshServiceFinalizerMockRecorder struct {
	mock *MockMeshServiceFinalizer
}

// NewMockMeshServiceFinalizer creates a new mock instance
func NewMockMeshServiceFinalizer(ctrl *gomock.Controller) *MockMeshServiceFinalizer {
	mock := &MockMeshServiceFinalizer{ctrl: ctrl}
	mock.recorder = &MockMeshServiceFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshServiceFinalizer) EXPECT() *MockMeshServiceFinalizerMockRecorder {
	return m.recorder
}

// ReconcileMeshService mocks base method
func (m *MockMeshServiceFinalizer) ReconcileMeshService(obj *v1alpha2.MeshService) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMeshService", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMeshService indicates an expected call of ReconcileMeshService
func (mr *MockMeshServiceFinalizerMockRecorder) ReconcileMeshService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMeshService", reflect.TypeOf((*MockMeshServiceFinalizer)(nil).ReconcileMeshService), obj)
}

// MeshServiceFinalizerName mocks base method
func (m *MockMeshServiceFinalizer) MeshServiceFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeshServiceFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// MeshServiceFinalizerName indicates an expected call of MeshServiceFinalizerName
func (mr *MockMeshServiceFinalizerMockRecorder) MeshServiceFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeshServiceFinalizerName", reflect.TypeOf((*MockMeshServiceFinalizer)(nil).MeshServiceFinalizerName))
}

// FinalizeMeshService mocks base method
func (m *MockMeshServiceFinalizer) FinalizeMeshService(obj *v1alpha2.MeshService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeMeshService", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeMeshService indicates an expected call of FinalizeMeshService
func (mr *MockMeshServiceFinalizerMockRecorder) FinalizeMeshService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeMeshService", reflect.TypeOf((*MockMeshServiceFinalizer)(nil).FinalizeMeshService), obj)
}

// MockMeshServiceReconcileLoop is a mock of MeshServiceReconcileLoop interface
type MockMeshServiceReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMeshServiceReconcileLoopMockRecorder
}

// MockMeshServiceReconcileLoopMockRecorder is the mock recorder for MockMeshServiceReconcileLoop
type MockMeshServiceReconcileLoopMockRecorder struct {
	mock *MockMeshServiceReconcileLoop
}

// NewMockMeshServiceReconcileLoop creates a new mock instance
func NewMockMeshServiceReconcileLoop(ctrl *gomock.Controller) *MockMeshServiceReconcileLoop {
	mock := &MockMeshServiceReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMeshServiceReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshServiceReconcileLoop) EXPECT() *MockMeshServiceReconcileLoopMockRecorder {
	return m.recorder
}

// RunMeshServiceReconciler mocks base method
func (m *MockMeshServiceReconcileLoop) RunMeshServiceReconciler(ctx context.Context, rec controller.MeshServiceReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunMeshServiceReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunMeshServiceReconciler indicates an expected call of RunMeshServiceReconciler
func (mr *MockMeshServiceReconcileLoopMockRecorder) RunMeshServiceReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunMeshServiceReconciler", reflect.TypeOf((*MockMeshServiceReconcileLoop)(nil).RunMeshServiceReconciler), varargs...)
}

// MockMeshWorkloadReconciler is a mock of MeshWorkloadReconciler interface
type MockMeshWorkloadReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadReconcilerMockRecorder
}

// MockMeshWorkloadReconcilerMockRecorder is the mock recorder for MockMeshWorkloadReconciler
type MockMeshWorkloadReconcilerMockRecorder struct {
	mock *MockMeshWorkloadReconciler
}

// NewMockMeshWorkloadReconciler creates a new mock instance
func NewMockMeshWorkloadReconciler(ctrl *gomock.Controller) *MockMeshWorkloadReconciler {
	mock := &MockMeshWorkloadReconciler{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshWorkloadReconciler) EXPECT() *MockMeshWorkloadReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMeshWorkload mocks base method
func (m *MockMeshWorkloadReconciler) ReconcileMeshWorkload(obj *v1alpha2.MeshWorkload) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMeshWorkload", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMeshWorkload indicates an expected call of ReconcileMeshWorkload
func (mr *MockMeshWorkloadReconcilerMockRecorder) ReconcileMeshWorkload(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMeshWorkload", reflect.TypeOf((*MockMeshWorkloadReconciler)(nil).ReconcileMeshWorkload), obj)
}

// MockMeshWorkloadDeletionReconciler is a mock of MeshWorkloadDeletionReconciler interface
type MockMeshWorkloadDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadDeletionReconcilerMockRecorder
}

// MockMeshWorkloadDeletionReconcilerMockRecorder is the mock recorder for MockMeshWorkloadDeletionReconciler
type MockMeshWorkloadDeletionReconcilerMockRecorder struct {
	mock *MockMeshWorkloadDeletionReconciler
}

// NewMockMeshWorkloadDeletionReconciler creates a new mock instance
func NewMockMeshWorkloadDeletionReconciler(ctrl *gomock.Controller) *MockMeshWorkloadDeletionReconciler {
	mock := &MockMeshWorkloadDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshWorkloadDeletionReconciler) EXPECT() *MockMeshWorkloadDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMeshWorkloadDeletion mocks base method
func (m *MockMeshWorkloadDeletionReconciler) ReconcileMeshWorkloadDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMeshWorkloadDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileMeshWorkloadDeletion indicates an expected call of ReconcileMeshWorkloadDeletion
func (mr *MockMeshWorkloadDeletionReconcilerMockRecorder) ReconcileMeshWorkloadDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMeshWorkloadDeletion", reflect.TypeOf((*MockMeshWorkloadDeletionReconciler)(nil).ReconcileMeshWorkloadDeletion), req)
}

// MockMeshWorkloadFinalizer is a mock of MeshWorkloadFinalizer interface
type MockMeshWorkloadFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadFinalizerMockRecorder
}

// MockMeshWorkloadFinalizerMockRecorder is the mock recorder for MockMeshWorkloadFinalizer
type MockMeshWorkloadFinalizerMockRecorder struct {
	mock *MockMeshWorkloadFinalizer
}

// NewMockMeshWorkloadFinalizer creates a new mock instance
func NewMockMeshWorkloadFinalizer(ctrl *gomock.Controller) *MockMeshWorkloadFinalizer {
	mock := &MockMeshWorkloadFinalizer{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshWorkloadFinalizer) EXPECT() *MockMeshWorkloadFinalizerMockRecorder {
	return m.recorder
}

// ReconcileMeshWorkload mocks base method
func (m *MockMeshWorkloadFinalizer) ReconcileMeshWorkload(obj *v1alpha2.MeshWorkload) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMeshWorkload", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMeshWorkload indicates an expected call of ReconcileMeshWorkload
func (mr *MockMeshWorkloadFinalizerMockRecorder) ReconcileMeshWorkload(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMeshWorkload", reflect.TypeOf((*MockMeshWorkloadFinalizer)(nil).ReconcileMeshWorkload), obj)
}

// MeshWorkloadFinalizerName mocks base method
func (m *MockMeshWorkloadFinalizer) MeshWorkloadFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeshWorkloadFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// MeshWorkloadFinalizerName indicates an expected call of MeshWorkloadFinalizerName
func (mr *MockMeshWorkloadFinalizerMockRecorder) MeshWorkloadFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeshWorkloadFinalizerName", reflect.TypeOf((*MockMeshWorkloadFinalizer)(nil).MeshWorkloadFinalizerName))
}

// FinalizeMeshWorkload mocks base method
func (m *MockMeshWorkloadFinalizer) FinalizeMeshWorkload(obj *v1alpha2.MeshWorkload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeMeshWorkload", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeMeshWorkload indicates an expected call of FinalizeMeshWorkload
func (mr *MockMeshWorkloadFinalizerMockRecorder) FinalizeMeshWorkload(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeMeshWorkload", reflect.TypeOf((*MockMeshWorkloadFinalizer)(nil).FinalizeMeshWorkload), obj)
}

// MockMeshWorkloadReconcileLoop is a mock of MeshWorkloadReconcileLoop interface
type MockMeshWorkloadReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadReconcileLoopMockRecorder
}

// MockMeshWorkloadReconcileLoopMockRecorder is the mock recorder for MockMeshWorkloadReconcileLoop
type MockMeshWorkloadReconcileLoopMockRecorder struct {
	mock *MockMeshWorkloadReconcileLoop
}

// NewMockMeshWorkloadReconcileLoop creates a new mock instance
func NewMockMeshWorkloadReconcileLoop(ctrl *gomock.Controller) *MockMeshWorkloadReconcileLoop {
	mock := &MockMeshWorkloadReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshWorkloadReconcileLoop) EXPECT() *MockMeshWorkloadReconcileLoopMockRecorder {
	return m.recorder
}

// RunMeshWorkloadReconciler mocks base method
func (m *MockMeshWorkloadReconcileLoop) RunMeshWorkloadReconciler(ctx context.Context, rec controller.MeshWorkloadReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunMeshWorkloadReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunMeshWorkloadReconciler indicates an expected call of RunMeshWorkloadReconciler
func (mr *MockMeshWorkloadReconcileLoopMockRecorder) RunMeshWorkloadReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunMeshWorkloadReconciler", reflect.TypeOf((*MockMeshWorkloadReconcileLoop)(nil).RunMeshWorkloadReconciler), varargs...)
}

// MockMeshReconciler is a mock of MeshReconciler interface
type MockMeshReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMeshReconcilerMockRecorder
}

// MockMeshReconcilerMockRecorder is the mock recorder for MockMeshReconciler
type MockMeshReconcilerMockRecorder struct {
	mock *MockMeshReconciler
}

// NewMockMeshReconciler creates a new mock instance
func NewMockMeshReconciler(ctrl *gomock.Controller) *MockMeshReconciler {
	mock := &MockMeshReconciler{ctrl: ctrl}
	mock.recorder = &MockMeshReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshReconciler) EXPECT() *MockMeshReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMesh mocks base method
func (m *MockMeshReconciler) ReconcileMesh(obj *v1alpha2.Mesh) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMesh", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMesh indicates an expected call of ReconcileMesh
func (mr *MockMeshReconcilerMockRecorder) ReconcileMesh(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMesh", reflect.TypeOf((*MockMeshReconciler)(nil).ReconcileMesh), obj)
}

// MockMeshDeletionReconciler is a mock of MeshDeletionReconciler interface
type MockMeshDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMeshDeletionReconcilerMockRecorder
}

// MockMeshDeletionReconcilerMockRecorder is the mock recorder for MockMeshDeletionReconciler
type MockMeshDeletionReconcilerMockRecorder struct {
	mock *MockMeshDeletionReconciler
}

// NewMockMeshDeletionReconciler creates a new mock instance
func NewMockMeshDeletionReconciler(ctrl *gomock.Controller) *MockMeshDeletionReconciler {
	mock := &MockMeshDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMeshDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshDeletionReconciler) EXPECT() *MockMeshDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMeshDeletion mocks base method
func (m *MockMeshDeletionReconciler) ReconcileMeshDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMeshDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileMeshDeletion indicates an expected call of ReconcileMeshDeletion
func (mr *MockMeshDeletionReconcilerMockRecorder) ReconcileMeshDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMeshDeletion", reflect.TypeOf((*MockMeshDeletionReconciler)(nil).ReconcileMeshDeletion), req)
}

// MockMeshFinalizer is a mock of MeshFinalizer interface
type MockMeshFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockMeshFinalizerMockRecorder
}

// MockMeshFinalizerMockRecorder is the mock recorder for MockMeshFinalizer
type MockMeshFinalizerMockRecorder struct {
	mock *MockMeshFinalizer
}

// NewMockMeshFinalizer creates a new mock instance
func NewMockMeshFinalizer(ctrl *gomock.Controller) *MockMeshFinalizer {
	mock := &MockMeshFinalizer{ctrl: ctrl}
	mock.recorder = &MockMeshFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshFinalizer) EXPECT() *MockMeshFinalizerMockRecorder {
	return m.recorder
}

// ReconcileMesh mocks base method
func (m *MockMeshFinalizer) ReconcileMesh(obj *v1alpha2.Mesh) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMesh", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMesh indicates an expected call of ReconcileMesh
func (mr *MockMeshFinalizerMockRecorder) ReconcileMesh(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMesh", reflect.TypeOf((*MockMeshFinalizer)(nil).ReconcileMesh), obj)
}

// MeshFinalizerName mocks base method
func (m *MockMeshFinalizer) MeshFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeshFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// MeshFinalizerName indicates an expected call of MeshFinalizerName
func (mr *MockMeshFinalizerMockRecorder) MeshFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeshFinalizerName", reflect.TypeOf((*MockMeshFinalizer)(nil).MeshFinalizerName))
}

// FinalizeMesh mocks base method
func (m *MockMeshFinalizer) FinalizeMesh(obj *v1alpha2.Mesh) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeMesh", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeMesh indicates an expected call of FinalizeMesh
func (mr *MockMeshFinalizerMockRecorder) FinalizeMesh(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeMesh", reflect.TypeOf((*MockMeshFinalizer)(nil).FinalizeMesh), obj)
}

// MockMeshReconcileLoop is a mock of MeshReconcileLoop interface
type MockMeshReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMeshReconcileLoopMockRecorder
}

// MockMeshReconcileLoopMockRecorder is the mock recorder for MockMeshReconcileLoop
type MockMeshReconcileLoopMockRecorder struct {
	mock *MockMeshReconcileLoop
}

// NewMockMeshReconcileLoop creates a new mock instance
func NewMockMeshReconcileLoop(ctrl *gomock.Controller) *MockMeshReconcileLoop {
	mock := &MockMeshReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMeshReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshReconcileLoop) EXPECT() *MockMeshReconcileLoopMockRecorder {
	return m.recorder
}

// RunMeshReconciler mocks base method
func (m *MockMeshReconcileLoop) RunMeshReconciler(ctx context.Context, rec controller.MeshReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunMeshReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunMeshReconciler indicates an expected call of RunMeshReconciler
func (mr *MockMeshReconcileLoopMockRecorder) RunMeshReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunMeshReconciler", reflect.TypeOf((*MockMeshReconcileLoop)(nil).RunMeshReconciler), varargs...)
}
