// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha2"
	controller "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha2/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterTrafficTargetReconciler is a mock of MulticlusterTrafficTargetReconciler interface
type MockMulticlusterTrafficTargetReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTrafficTargetReconcilerMockRecorder
}

// MockMulticlusterTrafficTargetReconcilerMockRecorder is the mock recorder for MockMulticlusterTrafficTargetReconciler
type MockMulticlusterTrafficTargetReconcilerMockRecorder struct {
	mock *MockMulticlusterTrafficTargetReconciler
}

// NewMockMulticlusterTrafficTargetReconciler creates a new mock instance
func NewMockMulticlusterTrafficTargetReconciler(ctrl *gomock.Controller) *MockMulticlusterTrafficTargetReconciler {
	mock := &MockMulticlusterTrafficTargetReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTrafficTargetReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterTrafficTargetReconciler) EXPECT() *MockMulticlusterTrafficTargetReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTrafficTarget mocks base method
func (m *MockMulticlusterTrafficTargetReconciler) ReconcileTrafficTarget(clusterName string, obj *v1alpha2.TrafficTarget) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTrafficTarget", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileTrafficTarget indicates an expected call of ReconcileTrafficTarget
func (mr *MockMulticlusterTrafficTargetReconcilerMockRecorder) ReconcileTrafficTarget(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTrafficTarget", reflect.TypeOf((*MockMulticlusterTrafficTargetReconciler)(nil).ReconcileTrafficTarget), clusterName, obj)
}

// MockMulticlusterTrafficTargetDeletionReconciler is a mock of MulticlusterTrafficTargetDeletionReconciler interface
type MockMulticlusterTrafficTargetDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTrafficTargetDeletionReconcilerMockRecorder
}

// MockMulticlusterTrafficTargetDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterTrafficTargetDeletionReconciler
type MockMulticlusterTrafficTargetDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterTrafficTargetDeletionReconciler
}

// NewMockMulticlusterTrafficTargetDeletionReconciler creates a new mock instance
func NewMockMulticlusterTrafficTargetDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterTrafficTargetDeletionReconciler {
	mock := &MockMulticlusterTrafficTargetDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTrafficTargetDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterTrafficTargetDeletionReconciler) EXPECT() *MockMulticlusterTrafficTargetDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTrafficTargetDeletion mocks base method
func (m *MockMulticlusterTrafficTargetDeletionReconciler) ReconcileTrafficTargetDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTrafficTargetDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileTrafficTargetDeletion indicates an expected call of ReconcileTrafficTargetDeletion
func (mr *MockMulticlusterTrafficTargetDeletionReconcilerMockRecorder) ReconcileTrafficTargetDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTrafficTargetDeletion", reflect.TypeOf((*MockMulticlusterTrafficTargetDeletionReconciler)(nil).ReconcileTrafficTargetDeletion), clusterName, req)
}

// MockMulticlusterTrafficTargetReconcileLoop is a mock of MulticlusterTrafficTargetReconcileLoop interface
type MockMulticlusterTrafficTargetReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTrafficTargetReconcileLoopMockRecorder
}

// MockMulticlusterTrafficTargetReconcileLoopMockRecorder is the mock recorder for MockMulticlusterTrafficTargetReconcileLoop
type MockMulticlusterTrafficTargetReconcileLoopMockRecorder struct {
	mock *MockMulticlusterTrafficTargetReconcileLoop
}

// NewMockMulticlusterTrafficTargetReconcileLoop creates a new mock instance
func NewMockMulticlusterTrafficTargetReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterTrafficTargetReconcileLoop {
	mock := &MockMulticlusterTrafficTargetReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTrafficTargetReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterTrafficTargetReconcileLoop) EXPECT() *MockMulticlusterTrafficTargetReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterTrafficTargetReconciler mocks base method
func (m *MockMulticlusterTrafficTargetReconcileLoop) AddMulticlusterTrafficTargetReconciler(ctx context.Context, rec controller.MulticlusterTrafficTargetReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterTrafficTargetReconciler", varargs...)
}

// AddMulticlusterTrafficTargetReconciler indicates an expected call of AddMulticlusterTrafficTargetReconciler
func (mr *MockMulticlusterTrafficTargetReconcileLoopMockRecorder) AddMulticlusterTrafficTargetReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterTrafficTargetReconciler", reflect.TypeOf((*MockMulticlusterTrafficTargetReconcileLoop)(nil).AddMulticlusterTrafficTargetReconciler), varargs...)
}

// MockMulticlusterWorkloadReconciler is a mock of MulticlusterWorkloadReconciler interface
type MockMulticlusterWorkloadReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWorkloadReconcilerMockRecorder
}

// MockMulticlusterWorkloadReconcilerMockRecorder is the mock recorder for MockMulticlusterWorkloadReconciler
type MockMulticlusterWorkloadReconcilerMockRecorder struct {
	mock *MockMulticlusterWorkloadReconciler
}

// NewMockMulticlusterWorkloadReconciler creates a new mock instance
func NewMockMulticlusterWorkloadReconciler(ctrl *gomock.Controller) *MockMulticlusterWorkloadReconciler {
	mock := &MockMulticlusterWorkloadReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWorkloadReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterWorkloadReconciler) EXPECT() *MockMulticlusterWorkloadReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWorkload mocks base method
func (m *MockMulticlusterWorkloadReconciler) ReconcileWorkload(clusterName string, obj *v1alpha2.Workload) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWorkload", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWorkload indicates an expected call of ReconcileWorkload
func (mr *MockMulticlusterWorkloadReconcilerMockRecorder) ReconcileWorkload(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWorkload", reflect.TypeOf((*MockMulticlusterWorkloadReconciler)(nil).ReconcileWorkload), clusterName, obj)
}

// MockMulticlusterWorkloadDeletionReconciler is a mock of MulticlusterWorkloadDeletionReconciler interface
type MockMulticlusterWorkloadDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWorkloadDeletionReconcilerMockRecorder
}

// MockMulticlusterWorkloadDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterWorkloadDeletionReconciler
type MockMulticlusterWorkloadDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterWorkloadDeletionReconciler
}

// NewMockMulticlusterWorkloadDeletionReconciler creates a new mock instance
func NewMockMulticlusterWorkloadDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterWorkloadDeletionReconciler {
	mock := &MockMulticlusterWorkloadDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWorkloadDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterWorkloadDeletionReconciler) EXPECT() *MockMulticlusterWorkloadDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWorkloadDeletion mocks base method
func (m *MockMulticlusterWorkloadDeletionReconciler) ReconcileWorkloadDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWorkloadDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileWorkloadDeletion indicates an expected call of ReconcileWorkloadDeletion
func (mr *MockMulticlusterWorkloadDeletionReconcilerMockRecorder) ReconcileWorkloadDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWorkloadDeletion", reflect.TypeOf((*MockMulticlusterWorkloadDeletionReconciler)(nil).ReconcileWorkloadDeletion), clusterName, req)
}

// MockMulticlusterWorkloadReconcileLoop is a mock of MulticlusterWorkloadReconcileLoop interface
type MockMulticlusterWorkloadReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWorkloadReconcileLoopMockRecorder
}

// MockMulticlusterWorkloadReconcileLoopMockRecorder is the mock recorder for MockMulticlusterWorkloadReconcileLoop
type MockMulticlusterWorkloadReconcileLoopMockRecorder struct {
	mock *MockMulticlusterWorkloadReconcileLoop
}

// NewMockMulticlusterWorkloadReconcileLoop creates a new mock instance
func NewMockMulticlusterWorkloadReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterWorkloadReconcileLoop {
	mock := &MockMulticlusterWorkloadReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWorkloadReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterWorkloadReconcileLoop) EXPECT() *MockMulticlusterWorkloadReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterWorkloadReconciler mocks base method
func (m *MockMulticlusterWorkloadReconcileLoop) AddMulticlusterWorkloadReconciler(ctx context.Context, rec controller.MulticlusterWorkloadReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterWorkloadReconciler", varargs...)
}

// AddMulticlusterWorkloadReconciler indicates an expected call of AddMulticlusterWorkloadReconciler
func (mr *MockMulticlusterWorkloadReconcileLoopMockRecorder) AddMulticlusterWorkloadReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterWorkloadReconciler", reflect.TypeOf((*MockMulticlusterWorkloadReconcileLoop)(nil).AddMulticlusterWorkloadReconciler), varargs...)
}

// MockMulticlusterMeshReconciler is a mock of MulticlusterMeshReconciler interface
type MockMulticlusterMeshReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMeshReconcilerMockRecorder
}

// MockMulticlusterMeshReconcilerMockRecorder is the mock recorder for MockMulticlusterMeshReconciler
type MockMulticlusterMeshReconcilerMockRecorder struct {
	mock *MockMulticlusterMeshReconciler
}

// NewMockMulticlusterMeshReconciler creates a new mock instance
func NewMockMulticlusterMeshReconciler(ctrl *gomock.Controller) *MockMulticlusterMeshReconciler {
	mock := &MockMulticlusterMeshReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMeshReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterMeshReconciler) EXPECT() *MockMulticlusterMeshReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMesh mocks base method
func (m *MockMulticlusterMeshReconciler) ReconcileMesh(clusterName string, obj *v1alpha2.Mesh) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMesh", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMesh indicates an expected call of ReconcileMesh
func (mr *MockMulticlusterMeshReconcilerMockRecorder) ReconcileMesh(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMesh", reflect.TypeOf((*MockMulticlusterMeshReconciler)(nil).ReconcileMesh), clusterName, obj)
}

// MockMulticlusterMeshDeletionReconciler is a mock of MulticlusterMeshDeletionReconciler interface
type MockMulticlusterMeshDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMeshDeletionReconcilerMockRecorder
}

// MockMulticlusterMeshDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterMeshDeletionReconciler
type MockMulticlusterMeshDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterMeshDeletionReconciler
}

// NewMockMulticlusterMeshDeletionReconciler creates a new mock instance
func NewMockMulticlusterMeshDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterMeshDeletionReconciler {
	mock := &MockMulticlusterMeshDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMeshDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterMeshDeletionReconciler) EXPECT() *MockMulticlusterMeshDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMeshDeletion mocks base method
func (m *MockMulticlusterMeshDeletionReconciler) ReconcileMeshDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMeshDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileMeshDeletion indicates an expected call of ReconcileMeshDeletion
func (mr *MockMulticlusterMeshDeletionReconcilerMockRecorder) ReconcileMeshDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMeshDeletion", reflect.TypeOf((*MockMulticlusterMeshDeletionReconciler)(nil).ReconcileMeshDeletion), clusterName, req)
}

// MockMulticlusterMeshReconcileLoop is a mock of MulticlusterMeshReconcileLoop interface
type MockMulticlusterMeshReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMeshReconcileLoopMockRecorder
}

// MockMulticlusterMeshReconcileLoopMockRecorder is the mock recorder for MockMulticlusterMeshReconcileLoop
type MockMulticlusterMeshReconcileLoopMockRecorder struct {
	mock *MockMulticlusterMeshReconcileLoop
}

// NewMockMulticlusterMeshReconcileLoop creates a new mock instance
func NewMockMulticlusterMeshReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterMeshReconcileLoop {
	mock := &MockMulticlusterMeshReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMeshReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterMeshReconcileLoop) EXPECT() *MockMulticlusterMeshReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterMeshReconciler mocks base method
func (m *MockMulticlusterMeshReconcileLoop) AddMulticlusterMeshReconciler(ctx context.Context, rec controller.MulticlusterMeshReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterMeshReconciler", varargs...)
}

// AddMulticlusterMeshReconciler indicates an expected call of AddMulticlusterMeshReconciler
func (mr *MockMulticlusterMeshReconcileLoopMockRecorder) AddMulticlusterMeshReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterMeshReconciler", reflect.TypeOf((*MockMulticlusterMeshReconcileLoop)(nil).AddMulticlusterMeshReconciler), varargs...)
}
