// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1alpha2 is a generated GoMock package.
package mock_v1alpha2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha2"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1alpha2.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// TrafficTargets mocks base method
func (m *MockClientset) TrafficTargets() v1alpha2.TrafficTargetClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrafficTargets")
	ret0, _ := ret[0].(v1alpha2.TrafficTargetClient)
	return ret0
}

// TrafficTargets indicates an expected call of TrafficTargets
func (mr *MockClientsetMockRecorder) TrafficTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrafficTargets", reflect.TypeOf((*MockClientset)(nil).TrafficTargets))
}

// MeshWorkloads mocks base method
func (m *MockClientset) MeshWorkloads() v1alpha2.MeshWorkloadClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeshWorkloads")
	ret0, _ := ret[0].(v1alpha2.MeshWorkloadClient)
	return ret0
}

// MeshWorkloads indicates an expected call of MeshWorkloads
func (mr *MockClientsetMockRecorder) MeshWorkloads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeshWorkloads", reflect.TypeOf((*MockClientset)(nil).MeshWorkloads))
}

// Meshes mocks base method
func (m *MockClientset) Meshes() v1alpha2.MeshClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meshes")
	ret0, _ := ret[0].(v1alpha2.MeshClient)
	return ret0
}

// Meshes indicates an expected call of Meshes
func (mr *MockClientsetMockRecorder) Meshes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meshes", reflect.TypeOf((*MockClientset)(nil).Meshes))
}

// MockTrafficTargetReader is a mock of TrafficTargetReader interface
type MockTrafficTargetReader struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficTargetReaderMockRecorder
}

// MockTrafficTargetReaderMockRecorder is the mock recorder for MockTrafficTargetReader
type MockTrafficTargetReaderMockRecorder struct {
	mock *MockTrafficTargetReader
}

// NewMockTrafficTargetReader creates a new mock instance
func NewMockTrafficTargetReader(ctrl *gomock.Controller) *MockTrafficTargetReader {
	mock := &MockTrafficTargetReader{ctrl: ctrl}
	mock.recorder = &MockTrafficTargetReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTrafficTargetReader) EXPECT() *MockTrafficTargetReaderMockRecorder {
	return m.recorder
}

// GetTrafficTarget mocks base method
func (m *MockTrafficTargetReader) GetTrafficTarget(ctx context.Context, key client.ObjectKey) (*v1alpha2.TrafficTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrafficTarget", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.TrafficTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrafficTarget indicates an expected call of GetTrafficTarget
func (mr *MockTrafficTargetReaderMockRecorder) GetTrafficTarget(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficTarget", reflect.TypeOf((*MockTrafficTargetReader)(nil).GetTrafficTarget), ctx, key)
}

// ListTrafficTarget mocks base method
func (m *MockTrafficTargetReader) ListTrafficTarget(ctx context.Context, opts ...client.ListOption) (*v1alpha2.TrafficTargetList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrafficTarget", varargs...)
	ret0, _ := ret[0].(*v1alpha2.TrafficTargetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrafficTarget indicates an expected call of ListTrafficTarget
func (mr *MockTrafficTargetReaderMockRecorder) ListTrafficTarget(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficTarget", reflect.TypeOf((*MockTrafficTargetReader)(nil).ListTrafficTarget), varargs...)
}

// MockTrafficTargetWriter is a mock of TrafficTargetWriter interface
type MockTrafficTargetWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficTargetWriterMockRecorder
}

// MockTrafficTargetWriterMockRecorder is the mock recorder for MockTrafficTargetWriter
type MockTrafficTargetWriterMockRecorder struct {
	mock *MockTrafficTargetWriter
}

// NewMockTrafficTargetWriter creates a new mock instance
func NewMockTrafficTargetWriter(ctrl *gomock.Controller) *MockTrafficTargetWriter {
	mock := &MockTrafficTargetWriter{ctrl: ctrl}
	mock.recorder = &MockTrafficTargetWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTrafficTargetWriter) EXPECT() *MockTrafficTargetWriterMockRecorder {
	return m.recorder
}

// CreateTrafficTarget mocks base method
func (m *MockTrafficTargetWriter) CreateTrafficTarget(ctx context.Context, obj *v1alpha2.TrafficTarget, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrafficTarget indicates an expected call of CreateTrafficTarget
func (mr *MockTrafficTargetWriterMockRecorder) CreateTrafficTarget(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrafficTarget", reflect.TypeOf((*MockTrafficTargetWriter)(nil).CreateTrafficTarget), varargs...)
}

// DeleteTrafficTarget mocks base method
func (m *MockTrafficTargetWriter) DeleteTrafficTarget(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrafficTarget indicates an expected call of DeleteTrafficTarget
func (mr *MockTrafficTargetWriterMockRecorder) DeleteTrafficTarget(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrafficTarget", reflect.TypeOf((*MockTrafficTargetWriter)(nil).DeleteTrafficTarget), varargs...)
}

// UpdateTrafficTarget mocks base method
func (m *MockTrafficTargetWriter) UpdateTrafficTarget(ctx context.Context, obj *v1alpha2.TrafficTarget, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficTarget indicates an expected call of UpdateTrafficTarget
func (mr *MockTrafficTargetWriterMockRecorder) UpdateTrafficTarget(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficTarget", reflect.TypeOf((*MockTrafficTargetWriter)(nil).UpdateTrafficTarget), varargs...)
}

// PatchTrafficTarget mocks base method
func (m *MockTrafficTargetWriter) PatchTrafficTarget(ctx context.Context, obj *v1alpha2.TrafficTarget, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficTarget indicates an expected call of PatchTrafficTarget
func (mr *MockTrafficTargetWriterMockRecorder) PatchTrafficTarget(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficTarget", reflect.TypeOf((*MockTrafficTargetWriter)(nil).PatchTrafficTarget), varargs...)
}

// DeleteAllOfTrafficTarget mocks base method
func (m *MockTrafficTargetWriter) DeleteAllOfTrafficTarget(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTrafficTarget indicates an expected call of DeleteAllOfTrafficTarget
func (mr *MockTrafficTargetWriterMockRecorder) DeleteAllOfTrafficTarget(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTrafficTarget", reflect.TypeOf((*MockTrafficTargetWriter)(nil).DeleteAllOfTrafficTarget), varargs...)
}

// UpsertTrafficTarget mocks base method
func (m *MockTrafficTargetWriter) UpsertTrafficTarget(ctx context.Context, obj *v1alpha2.TrafficTarget, transitionFuncs ...v1alpha2.TrafficTargetTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTrafficTarget indicates an expected call of UpsertTrafficTarget
func (mr *MockTrafficTargetWriterMockRecorder) UpsertTrafficTarget(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTrafficTarget", reflect.TypeOf((*MockTrafficTargetWriter)(nil).UpsertTrafficTarget), varargs...)
}

// MockTrafficTargetStatusWriter is a mock of TrafficTargetStatusWriter interface
type MockTrafficTargetStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficTargetStatusWriterMockRecorder
}

// MockTrafficTargetStatusWriterMockRecorder is the mock recorder for MockTrafficTargetStatusWriter
type MockTrafficTargetStatusWriterMockRecorder struct {
	mock *MockTrafficTargetStatusWriter
}

// NewMockTrafficTargetStatusWriter creates a new mock instance
func NewMockTrafficTargetStatusWriter(ctrl *gomock.Controller) *MockTrafficTargetStatusWriter {
	mock := &MockTrafficTargetStatusWriter{ctrl: ctrl}
	mock.recorder = &MockTrafficTargetStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTrafficTargetStatusWriter) EXPECT() *MockTrafficTargetStatusWriterMockRecorder {
	return m.recorder
}

// UpdateTrafficTargetStatus mocks base method
func (m *MockTrafficTargetStatusWriter) UpdateTrafficTargetStatus(ctx context.Context, obj *v1alpha2.TrafficTarget, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficTargetStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficTargetStatus indicates an expected call of UpdateTrafficTargetStatus
func (mr *MockTrafficTargetStatusWriterMockRecorder) UpdateTrafficTargetStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficTargetStatus", reflect.TypeOf((*MockTrafficTargetStatusWriter)(nil).UpdateTrafficTargetStatus), varargs...)
}

// PatchTrafficTargetStatus mocks base method
func (m *MockTrafficTargetStatusWriter) PatchTrafficTargetStatus(ctx context.Context, obj *v1alpha2.TrafficTarget, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficTargetStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficTargetStatus indicates an expected call of PatchTrafficTargetStatus
func (mr *MockTrafficTargetStatusWriterMockRecorder) PatchTrafficTargetStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficTargetStatus", reflect.TypeOf((*MockTrafficTargetStatusWriter)(nil).PatchTrafficTargetStatus), varargs...)
}

// MockTrafficTargetClient is a mock of TrafficTargetClient interface
type MockTrafficTargetClient struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficTargetClientMockRecorder
}

// MockTrafficTargetClientMockRecorder is the mock recorder for MockTrafficTargetClient
type MockTrafficTargetClientMockRecorder struct {
	mock *MockTrafficTargetClient
}

// NewMockTrafficTargetClient creates a new mock instance
func NewMockTrafficTargetClient(ctrl *gomock.Controller) *MockTrafficTargetClient {
	mock := &MockTrafficTargetClient{ctrl: ctrl}
	mock.recorder = &MockTrafficTargetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTrafficTargetClient) EXPECT() *MockTrafficTargetClientMockRecorder {
	return m.recorder
}

// GetTrafficTarget mocks base method
func (m *MockTrafficTargetClient) GetTrafficTarget(ctx context.Context, key client.ObjectKey) (*v1alpha2.TrafficTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrafficTarget", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.TrafficTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrafficTarget indicates an expected call of GetTrafficTarget
func (mr *MockTrafficTargetClientMockRecorder) GetTrafficTarget(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficTarget", reflect.TypeOf((*MockTrafficTargetClient)(nil).GetTrafficTarget), ctx, key)
}

// ListTrafficTarget mocks base method
func (m *MockTrafficTargetClient) ListTrafficTarget(ctx context.Context, opts ...client.ListOption) (*v1alpha2.TrafficTargetList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrafficTarget", varargs...)
	ret0, _ := ret[0].(*v1alpha2.TrafficTargetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrafficTarget indicates an expected call of ListTrafficTarget
func (mr *MockTrafficTargetClientMockRecorder) ListTrafficTarget(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficTarget", reflect.TypeOf((*MockTrafficTargetClient)(nil).ListTrafficTarget), varargs...)
}

// CreateTrafficTarget mocks base method
func (m *MockTrafficTargetClient) CreateTrafficTarget(ctx context.Context, obj *v1alpha2.TrafficTarget, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrafficTarget indicates an expected call of CreateTrafficTarget
func (mr *MockTrafficTargetClientMockRecorder) CreateTrafficTarget(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrafficTarget", reflect.TypeOf((*MockTrafficTargetClient)(nil).CreateTrafficTarget), varargs...)
}

// DeleteTrafficTarget mocks base method
func (m *MockTrafficTargetClient) DeleteTrafficTarget(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrafficTarget indicates an expected call of DeleteTrafficTarget
func (mr *MockTrafficTargetClientMockRecorder) DeleteTrafficTarget(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrafficTarget", reflect.TypeOf((*MockTrafficTargetClient)(nil).DeleteTrafficTarget), varargs...)
}

// UpdateTrafficTarget mocks base method
func (m *MockTrafficTargetClient) UpdateTrafficTarget(ctx context.Context, obj *v1alpha2.TrafficTarget, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficTarget indicates an expected call of UpdateTrafficTarget
func (mr *MockTrafficTargetClientMockRecorder) UpdateTrafficTarget(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficTarget", reflect.TypeOf((*MockTrafficTargetClient)(nil).UpdateTrafficTarget), varargs...)
}

// PatchTrafficTarget mocks base method
func (m *MockTrafficTargetClient) PatchTrafficTarget(ctx context.Context, obj *v1alpha2.TrafficTarget, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficTarget indicates an expected call of PatchTrafficTarget
func (mr *MockTrafficTargetClientMockRecorder) PatchTrafficTarget(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficTarget", reflect.TypeOf((*MockTrafficTargetClient)(nil).PatchTrafficTarget), varargs...)
}

// DeleteAllOfTrafficTarget mocks base method
func (m *MockTrafficTargetClient) DeleteAllOfTrafficTarget(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTrafficTarget indicates an expected call of DeleteAllOfTrafficTarget
func (mr *MockTrafficTargetClientMockRecorder) DeleteAllOfTrafficTarget(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTrafficTarget", reflect.TypeOf((*MockTrafficTargetClient)(nil).DeleteAllOfTrafficTarget), varargs...)
}

// UpsertTrafficTarget mocks base method
func (m *MockTrafficTargetClient) UpsertTrafficTarget(ctx context.Context, obj *v1alpha2.TrafficTarget, transitionFuncs ...v1alpha2.TrafficTargetTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTrafficTarget indicates an expected call of UpsertTrafficTarget
func (mr *MockTrafficTargetClientMockRecorder) UpsertTrafficTarget(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTrafficTarget", reflect.TypeOf((*MockTrafficTargetClient)(nil).UpsertTrafficTarget), varargs...)
}

// UpdateTrafficTargetStatus mocks base method
func (m *MockTrafficTargetClient) UpdateTrafficTargetStatus(ctx context.Context, obj *v1alpha2.TrafficTarget, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficTargetStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficTargetStatus indicates an expected call of UpdateTrafficTargetStatus
func (mr *MockTrafficTargetClientMockRecorder) UpdateTrafficTargetStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficTargetStatus", reflect.TypeOf((*MockTrafficTargetClient)(nil).UpdateTrafficTargetStatus), varargs...)
}

// PatchTrafficTargetStatus mocks base method
func (m *MockTrafficTargetClient) PatchTrafficTargetStatus(ctx context.Context, obj *v1alpha2.TrafficTarget, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficTargetStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficTargetStatus indicates an expected call of PatchTrafficTargetStatus
func (mr *MockTrafficTargetClientMockRecorder) PatchTrafficTargetStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficTargetStatus", reflect.TypeOf((*MockTrafficTargetClient)(nil).PatchTrafficTargetStatus), varargs...)
}

// MockMulticlusterTrafficTargetClient is a mock of MulticlusterTrafficTargetClient interface
type MockMulticlusterTrafficTargetClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTrafficTargetClientMockRecorder
}

// MockMulticlusterTrafficTargetClientMockRecorder is the mock recorder for MockMulticlusterTrafficTargetClient
type MockMulticlusterTrafficTargetClientMockRecorder struct {
	mock *MockMulticlusterTrafficTargetClient
}

// NewMockMulticlusterTrafficTargetClient creates a new mock instance
func NewMockMulticlusterTrafficTargetClient(ctrl *gomock.Controller) *MockMulticlusterTrafficTargetClient {
	mock := &MockMulticlusterTrafficTargetClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTrafficTargetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterTrafficTargetClient) EXPECT() *MockMulticlusterTrafficTargetClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterTrafficTargetClient) Cluster(cluster string) (v1alpha2.TrafficTargetClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.TrafficTargetClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterTrafficTargetClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterTrafficTargetClient)(nil).Cluster), cluster)
}

// MockMeshWorkloadReader is a mock of MeshWorkloadReader interface
type MockMeshWorkloadReader struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadReaderMockRecorder
}

// MockMeshWorkloadReaderMockRecorder is the mock recorder for MockMeshWorkloadReader
type MockMeshWorkloadReaderMockRecorder struct {
	mock *MockMeshWorkloadReader
}

// NewMockMeshWorkloadReader creates a new mock instance
func NewMockMeshWorkloadReader(ctrl *gomock.Controller) *MockMeshWorkloadReader {
	mock := &MockMeshWorkloadReader{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshWorkloadReader) EXPECT() *MockMeshWorkloadReaderMockRecorder {
	return m.recorder
}

// GetMeshWorkload mocks base method
func (m *MockMeshWorkloadReader) GetMeshWorkload(ctx context.Context, key client.ObjectKey) (*v1alpha2.MeshWorkload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshWorkload", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.MeshWorkload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshWorkload indicates an expected call of GetMeshWorkload
func (mr *MockMeshWorkloadReaderMockRecorder) GetMeshWorkload(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshWorkload", reflect.TypeOf((*MockMeshWorkloadReader)(nil).GetMeshWorkload), ctx, key)
}

// ListMeshWorkload mocks base method
func (m *MockMeshWorkloadReader) ListMeshWorkload(ctx context.Context, opts ...client.ListOption) (*v1alpha2.MeshWorkloadList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMeshWorkload", varargs...)
	ret0, _ := ret[0].(*v1alpha2.MeshWorkloadList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshWorkload indicates an expected call of ListMeshWorkload
func (mr *MockMeshWorkloadReaderMockRecorder) ListMeshWorkload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshWorkload", reflect.TypeOf((*MockMeshWorkloadReader)(nil).ListMeshWorkload), varargs...)
}

// MockMeshWorkloadWriter is a mock of MeshWorkloadWriter interface
type MockMeshWorkloadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadWriterMockRecorder
}

// MockMeshWorkloadWriterMockRecorder is the mock recorder for MockMeshWorkloadWriter
type MockMeshWorkloadWriterMockRecorder struct {
	mock *MockMeshWorkloadWriter
}

// NewMockMeshWorkloadWriter creates a new mock instance
func NewMockMeshWorkloadWriter(ctrl *gomock.Controller) *MockMeshWorkloadWriter {
	mock := &MockMeshWorkloadWriter{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshWorkloadWriter) EXPECT() *MockMeshWorkloadWriterMockRecorder {
	return m.recorder
}

// CreateMeshWorkload mocks base method
func (m *MockMeshWorkloadWriter) CreateMeshWorkload(ctx context.Context, obj *v1alpha2.MeshWorkload, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMeshWorkload indicates an expected call of CreateMeshWorkload
func (mr *MockMeshWorkloadWriterMockRecorder) CreateMeshWorkload(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshWorkload", reflect.TypeOf((*MockMeshWorkloadWriter)(nil).CreateMeshWorkload), varargs...)
}

// DeleteMeshWorkload mocks base method
func (m *MockMeshWorkloadWriter) DeleteMeshWorkload(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMeshWorkload indicates an expected call of DeleteMeshWorkload
func (mr *MockMeshWorkloadWriterMockRecorder) DeleteMeshWorkload(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshWorkload", reflect.TypeOf((*MockMeshWorkloadWriter)(nil).DeleteMeshWorkload), varargs...)
}

// UpdateMeshWorkload mocks base method
func (m *MockMeshWorkloadWriter) UpdateMeshWorkload(ctx context.Context, obj *v1alpha2.MeshWorkload, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshWorkload indicates an expected call of UpdateMeshWorkload
func (mr *MockMeshWorkloadWriterMockRecorder) UpdateMeshWorkload(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshWorkload", reflect.TypeOf((*MockMeshWorkloadWriter)(nil).UpdateMeshWorkload), varargs...)
}

// PatchMeshWorkload mocks base method
func (m *MockMeshWorkloadWriter) PatchMeshWorkload(ctx context.Context, obj *v1alpha2.MeshWorkload, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshWorkload indicates an expected call of PatchMeshWorkload
func (mr *MockMeshWorkloadWriterMockRecorder) PatchMeshWorkload(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshWorkload", reflect.TypeOf((*MockMeshWorkloadWriter)(nil).PatchMeshWorkload), varargs...)
}

// DeleteAllOfMeshWorkload mocks base method
func (m *MockMeshWorkloadWriter) DeleteAllOfMeshWorkload(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMeshWorkload indicates an expected call of DeleteAllOfMeshWorkload
func (mr *MockMeshWorkloadWriterMockRecorder) DeleteAllOfMeshWorkload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMeshWorkload", reflect.TypeOf((*MockMeshWorkloadWriter)(nil).DeleteAllOfMeshWorkload), varargs...)
}

// UpsertMeshWorkload mocks base method
func (m *MockMeshWorkloadWriter) UpsertMeshWorkload(ctx context.Context, obj *v1alpha2.MeshWorkload, transitionFuncs ...v1alpha2.MeshWorkloadTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMeshWorkload indicates an expected call of UpsertMeshWorkload
func (mr *MockMeshWorkloadWriterMockRecorder) UpsertMeshWorkload(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMeshWorkload", reflect.TypeOf((*MockMeshWorkloadWriter)(nil).UpsertMeshWorkload), varargs...)
}

// MockMeshWorkloadStatusWriter is a mock of MeshWorkloadStatusWriter interface
type MockMeshWorkloadStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadStatusWriterMockRecorder
}

// MockMeshWorkloadStatusWriterMockRecorder is the mock recorder for MockMeshWorkloadStatusWriter
type MockMeshWorkloadStatusWriterMockRecorder struct {
	mock *MockMeshWorkloadStatusWriter
}

// NewMockMeshWorkloadStatusWriter creates a new mock instance
func NewMockMeshWorkloadStatusWriter(ctrl *gomock.Controller) *MockMeshWorkloadStatusWriter {
	mock := &MockMeshWorkloadStatusWriter{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshWorkloadStatusWriter) EXPECT() *MockMeshWorkloadStatusWriterMockRecorder {
	return m.recorder
}

// UpdateMeshWorkloadStatus mocks base method
func (m *MockMeshWorkloadStatusWriter) UpdateMeshWorkloadStatus(ctx context.Context, obj *v1alpha2.MeshWorkload, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshWorkloadStatus indicates an expected call of UpdateMeshWorkloadStatus
func (mr *MockMeshWorkloadStatusWriterMockRecorder) UpdateMeshWorkloadStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshWorkloadStatus", reflect.TypeOf((*MockMeshWorkloadStatusWriter)(nil).UpdateMeshWorkloadStatus), varargs...)
}

// PatchMeshWorkloadStatus mocks base method
func (m *MockMeshWorkloadStatusWriter) PatchMeshWorkloadStatus(ctx context.Context, obj *v1alpha2.MeshWorkload, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshWorkloadStatus indicates an expected call of PatchMeshWorkloadStatus
func (mr *MockMeshWorkloadStatusWriterMockRecorder) PatchMeshWorkloadStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshWorkloadStatus", reflect.TypeOf((*MockMeshWorkloadStatusWriter)(nil).PatchMeshWorkloadStatus), varargs...)
}

// MockMeshWorkloadClient is a mock of MeshWorkloadClient interface
type MockMeshWorkloadClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadClientMockRecorder
}

// MockMeshWorkloadClientMockRecorder is the mock recorder for MockMeshWorkloadClient
type MockMeshWorkloadClientMockRecorder struct {
	mock *MockMeshWorkloadClient
}

// NewMockMeshWorkloadClient creates a new mock instance
func NewMockMeshWorkloadClient(ctrl *gomock.Controller) *MockMeshWorkloadClient {
	mock := &MockMeshWorkloadClient{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshWorkloadClient) EXPECT() *MockMeshWorkloadClientMockRecorder {
	return m.recorder
}

// GetMeshWorkload mocks base method
func (m *MockMeshWorkloadClient) GetMeshWorkload(ctx context.Context, key client.ObjectKey) (*v1alpha2.MeshWorkload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshWorkload", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.MeshWorkload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshWorkload indicates an expected call of GetMeshWorkload
func (mr *MockMeshWorkloadClientMockRecorder) GetMeshWorkload(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).GetMeshWorkload), ctx, key)
}

// ListMeshWorkload mocks base method
func (m *MockMeshWorkloadClient) ListMeshWorkload(ctx context.Context, opts ...client.ListOption) (*v1alpha2.MeshWorkloadList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMeshWorkload", varargs...)
	ret0, _ := ret[0].(*v1alpha2.MeshWorkloadList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshWorkload indicates an expected call of ListMeshWorkload
func (mr *MockMeshWorkloadClientMockRecorder) ListMeshWorkload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).ListMeshWorkload), varargs...)
}

// CreateMeshWorkload mocks base method
func (m *MockMeshWorkloadClient) CreateMeshWorkload(ctx context.Context, obj *v1alpha2.MeshWorkload, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMeshWorkload indicates an expected call of CreateMeshWorkload
func (mr *MockMeshWorkloadClientMockRecorder) CreateMeshWorkload(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).CreateMeshWorkload), varargs...)
}

// DeleteMeshWorkload mocks base method
func (m *MockMeshWorkloadClient) DeleteMeshWorkload(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMeshWorkload indicates an expected call of DeleteMeshWorkload
func (mr *MockMeshWorkloadClientMockRecorder) DeleteMeshWorkload(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).DeleteMeshWorkload), varargs...)
}

// UpdateMeshWorkload mocks base method
func (m *MockMeshWorkloadClient) UpdateMeshWorkload(ctx context.Context, obj *v1alpha2.MeshWorkload, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshWorkload indicates an expected call of UpdateMeshWorkload
func (mr *MockMeshWorkloadClientMockRecorder) UpdateMeshWorkload(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).UpdateMeshWorkload), varargs...)
}

// PatchMeshWorkload mocks base method
func (m *MockMeshWorkloadClient) PatchMeshWorkload(ctx context.Context, obj *v1alpha2.MeshWorkload, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshWorkload indicates an expected call of PatchMeshWorkload
func (mr *MockMeshWorkloadClientMockRecorder) PatchMeshWorkload(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).PatchMeshWorkload), varargs...)
}

// DeleteAllOfMeshWorkload mocks base method
func (m *MockMeshWorkloadClient) DeleteAllOfMeshWorkload(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMeshWorkload indicates an expected call of DeleteAllOfMeshWorkload
func (mr *MockMeshWorkloadClientMockRecorder) DeleteAllOfMeshWorkload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).DeleteAllOfMeshWorkload), varargs...)
}

// UpsertMeshWorkload mocks base method
func (m *MockMeshWorkloadClient) UpsertMeshWorkload(ctx context.Context, obj *v1alpha2.MeshWorkload, transitionFuncs ...v1alpha2.MeshWorkloadTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMeshWorkload indicates an expected call of UpsertMeshWorkload
func (mr *MockMeshWorkloadClientMockRecorder) UpsertMeshWorkload(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).UpsertMeshWorkload), varargs...)
}

// UpdateMeshWorkloadStatus mocks base method
func (m *MockMeshWorkloadClient) UpdateMeshWorkloadStatus(ctx context.Context, obj *v1alpha2.MeshWorkload, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshWorkloadStatus indicates an expected call of UpdateMeshWorkloadStatus
func (mr *MockMeshWorkloadClientMockRecorder) UpdateMeshWorkloadStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshWorkloadStatus", reflect.TypeOf((*MockMeshWorkloadClient)(nil).UpdateMeshWorkloadStatus), varargs...)
}

// PatchMeshWorkloadStatus mocks base method
func (m *MockMeshWorkloadClient) PatchMeshWorkloadStatus(ctx context.Context, obj *v1alpha2.MeshWorkload, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshWorkloadStatus indicates an expected call of PatchMeshWorkloadStatus
func (mr *MockMeshWorkloadClientMockRecorder) PatchMeshWorkloadStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshWorkloadStatus", reflect.TypeOf((*MockMeshWorkloadClient)(nil).PatchMeshWorkloadStatus), varargs...)
}

// MockMulticlusterMeshWorkloadClient is a mock of MulticlusterMeshWorkloadClient interface
type MockMulticlusterMeshWorkloadClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMeshWorkloadClientMockRecorder
}

// MockMulticlusterMeshWorkloadClientMockRecorder is the mock recorder for MockMulticlusterMeshWorkloadClient
type MockMulticlusterMeshWorkloadClientMockRecorder struct {
	mock *MockMulticlusterMeshWorkloadClient
}

// NewMockMulticlusterMeshWorkloadClient creates a new mock instance
func NewMockMulticlusterMeshWorkloadClient(ctrl *gomock.Controller) *MockMulticlusterMeshWorkloadClient {
	mock := &MockMulticlusterMeshWorkloadClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMeshWorkloadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterMeshWorkloadClient) EXPECT() *MockMulticlusterMeshWorkloadClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterMeshWorkloadClient) Cluster(cluster string) (v1alpha2.MeshWorkloadClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.MeshWorkloadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterMeshWorkloadClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterMeshWorkloadClient)(nil).Cluster), cluster)
}

// MockMeshReader is a mock of MeshReader interface
type MockMeshReader struct {
	ctrl     *gomock.Controller
	recorder *MockMeshReaderMockRecorder
}

// MockMeshReaderMockRecorder is the mock recorder for MockMeshReader
type MockMeshReaderMockRecorder struct {
	mock *MockMeshReader
}

// NewMockMeshReader creates a new mock instance
func NewMockMeshReader(ctrl *gomock.Controller) *MockMeshReader {
	mock := &MockMeshReader{ctrl: ctrl}
	mock.recorder = &MockMeshReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshReader) EXPECT() *MockMeshReaderMockRecorder {
	return m.recorder
}

// GetMesh mocks base method
func (m *MockMeshReader) GetMesh(ctx context.Context, key client.ObjectKey) (*v1alpha2.Mesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMesh", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.Mesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMesh indicates an expected call of GetMesh
func (mr *MockMeshReaderMockRecorder) GetMesh(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMesh", reflect.TypeOf((*MockMeshReader)(nil).GetMesh), ctx, key)
}

// ListMesh mocks base method
func (m *MockMeshReader) ListMesh(ctx context.Context, opts ...client.ListOption) (*v1alpha2.MeshList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMesh", varargs...)
	ret0, _ := ret[0].(*v1alpha2.MeshList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMesh indicates an expected call of ListMesh
func (mr *MockMeshReaderMockRecorder) ListMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMesh", reflect.TypeOf((*MockMeshReader)(nil).ListMesh), varargs...)
}

// MockMeshWriter is a mock of MeshWriter interface
type MockMeshWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWriterMockRecorder
}

// MockMeshWriterMockRecorder is the mock recorder for MockMeshWriter
type MockMeshWriterMockRecorder struct {
	mock *MockMeshWriter
}

// NewMockMeshWriter creates a new mock instance
func NewMockMeshWriter(ctrl *gomock.Controller) *MockMeshWriter {
	mock := &MockMeshWriter{ctrl: ctrl}
	mock.recorder = &MockMeshWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshWriter) EXPECT() *MockMeshWriterMockRecorder {
	return m.recorder
}

// CreateMesh mocks base method
func (m *MockMeshWriter) CreateMesh(ctx context.Context, obj *v1alpha2.Mesh, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMesh indicates an expected call of CreateMesh
func (mr *MockMeshWriterMockRecorder) CreateMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMesh", reflect.TypeOf((*MockMeshWriter)(nil).CreateMesh), varargs...)
}

// DeleteMesh mocks base method
func (m *MockMeshWriter) DeleteMesh(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMesh indicates an expected call of DeleteMesh
func (mr *MockMeshWriterMockRecorder) DeleteMesh(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMesh", reflect.TypeOf((*MockMeshWriter)(nil).DeleteMesh), varargs...)
}

// UpdateMesh mocks base method
func (m *MockMeshWriter) UpdateMesh(ctx context.Context, obj *v1alpha2.Mesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMesh indicates an expected call of UpdateMesh
func (mr *MockMeshWriterMockRecorder) UpdateMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMesh", reflect.TypeOf((*MockMeshWriter)(nil).UpdateMesh), varargs...)
}

// PatchMesh mocks base method
func (m *MockMeshWriter) PatchMesh(ctx context.Context, obj *v1alpha2.Mesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMesh indicates an expected call of PatchMesh
func (mr *MockMeshWriterMockRecorder) PatchMesh(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMesh", reflect.TypeOf((*MockMeshWriter)(nil).PatchMesh), varargs...)
}

// DeleteAllOfMesh mocks base method
func (m *MockMeshWriter) DeleteAllOfMesh(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMesh indicates an expected call of DeleteAllOfMesh
func (mr *MockMeshWriterMockRecorder) DeleteAllOfMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMesh", reflect.TypeOf((*MockMeshWriter)(nil).DeleteAllOfMesh), varargs...)
}

// UpsertMesh mocks base method
func (m *MockMeshWriter) UpsertMesh(ctx context.Context, obj *v1alpha2.Mesh, transitionFuncs ...v1alpha2.MeshTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMesh indicates an expected call of UpsertMesh
func (mr *MockMeshWriterMockRecorder) UpsertMesh(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMesh", reflect.TypeOf((*MockMeshWriter)(nil).UpsertMesh), varargs...)
}

// MockMeshStatusWriter is a mock of MeshStatusWriter interface
type MockMeshStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMeshStatusWriterMockRecorder
}

// MockMeshStatusWriterMockRecorder is the mock recorder for MockMeshStatusWriter
type MockMeshStatusWriterMockRecorder struct {
	mock *MockMeshStatusWriter
}

// NewMockMeshStatusWriter creates a new mock instance
func NewMockMeshStatusWriter(ctrl *gomock.Controller) *MockMeshStatusWriter {
	mock := &MockMeshStatusWriter{ctrl: ctrl}
	mock.recorder = &MockMeshStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshStatusWriter) EXPECT() *MockMeshStatusWriterMockRecorder {
	return m.recorder
}

// UpdateMeshStatus mocks base method
func (m *MockMeshStatusWriter) UpdateMeshStatus(ctx context.Context, obj *v1alpha2.Mesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshStatus indicates an expected call of UpdateMeshStatus
func (mr *MockMeshStatusWriterMockRecorder) UpdateMeshStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshStatus", reflect.TypeOf((*MockMeshStatusWriter)(nil).UpdateMeshStatus), varargs...)
}

// PatchMeshStatus mocks base method
func (m *MockMeshStatusWriter) PatchMeshStatus(ctx context.Context, obj *v1alpha2.Mesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshStatus indicates an expected call of PatchMeshStatus
func (mr *MockMeshStatusWriterMockRecorder) PatchMeshStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshStatus", reflect.TypeOf((*MockMeshStatusWriter)(nil).PatchMeshStatus), varargs...)
}

// MockMeshClient is a mock of MeshClient interface
type MockMeshClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeshClientMockRecorder
}

// MockMeshClientMockRecorder is the mock recorder for MockMeshClient
type MockMeshClientMockRecorder struct {
	mock *MockMeshClient
}

// NewMockMeshClient creates a new mock instance
func NewMockMeshClient(ctrl *gomock.Controller) *MockMeshClient {
	mock := &MockMeshClient{ctrl: ctrl}
	mock.recorder = &MockMeshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshClient) EXPECT() *MockMeshClientMockRecorder {
	return m.recorder
}

// GetMesh mocks base method
func (m *MockMeshClient) GetMesh(ctx context.Context, key client.ObjectKey) (*v1alpha2.Mesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMesh", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.Mesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMesh indicates an expected call of GetMesh
func (mr *MockMeshClientMockRecorder) GetMesh(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMesh", reflect.TypeOf((*MockMeshClient)(nil).GetMesh), ctx, key)
}

// ListMesh mocks base method
func (m *MockMeshClient) ListMesh(ctx context.Context, opts ...client.ListOption) (*v1alpha2.MeshList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMesh", varargs...)
	ret0, _ := ret[0].(*v1alpha2.MeshList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMesh indicates an expected call of ListMesh
func (mr *MockMeshClientMockRecorder) ListMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMesh", reflect.TypeOf((*MockMeshClient)(nil).ListMesh), varargs...)
}

// CreateMesh mocks base method
func (m *MockMeshClient) CreateMesh(ctx context.Context, obj *v1alpha2.Mesh, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMesh indicates an expected call of CreateMesh
func (mr *MockMeshClientMockRecorder) CreateMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMesh", reflect.TypeOf((*MockMeshClient)(nil).CreateMesh), varargs...)
}

// DeleteMesh mocks base method
func (m *MockMeshClient) DeleteMesh(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMesh indicates an expected call of DeleteMesh
func (mr *MockMeshClientMockRecorder) DeleteMesh(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMesh", reflect.TypeOf((*MockMeshClient)(nil).DeleteMesh), varargs...)
}

// UpdateMesh mocks base method
func (m *MockMeshClient) UpdateMesh(ctx context.Context, obj *v1alpha2.Mesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMesh indicates an expected call of UpdateMesh
func (mr *MockMeshClientMockRecorder) UpdateMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMesh", reflect.TypeOf((*MockMeshClient)(nil).UpdateMesh), varargs...)
}

// PatchMesh mocks base method
func (m *MockMeshClient) PatchMesh(ctx context.Context, obj *v1alpha2.Mesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMesh indicates an expected call of PatchMesh
func (mr *MockMeshClientMockRecorder) PatchMesh(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMesh", reflect.TypeOf((*MockMeshClient)(nil).PatchMesh), varargs...)
}

// DeleteAllOfMesh mocks base method
func (m *MockMeshClient) DeleteAllOfMesh(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMesh indicates an expected call of DeleteAllOfMesh
func (mr *MockMeshClientMockRecorder) DeleteAllOfMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMesh", reflect.TypeOf((*MockMeshClient)(nil).DeleteAllOfMesh), varargs...)
}

// UpsertMesh mocks base method
func (m *MockMeshClient) UpsertMesh(ctx context.Context, obj *v1alpha2.Mesh, transitionFuncs ...v1alpha2.MeshTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMesh indicates an expected call of UpsertMesh
func (mr *MockMeshClientMockRecorder) UpsertMesh(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMesh", reflect.TypeOf((*MockMeshClient)(nil).UpsertMesh), varargs...)
}

// UpdateMeshStatus mocks base method
func (m *MockMeshClient) UpdateMeshStatus(ctx context.Context, obj *v1alpha2.Mesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshStatus indicates an expected call of UpdateMeshStatus
func (mr *MockMeshClientMockRecorder) UpdateMeshStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshStatus", reflect.TypeOf((*MockMeshClient)(nil).UpdateMeshStatus), varargs...)
}

// PatchMeshStatus mocks base method
func (m *MockMeshClient) PatchMeshStatus(ctx context.Context, obj *v1alpha2.Mesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshStatus indicates an expected call of PatchMeshStatus
func (mr *MockMeshClientMockRecorder) PatchMeshStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshStatus", reflect.TypeOf((*MockMeshClient)(nil).PatchMeshStatus), varargs...)
}

// MockMulticlusterMeshClient is a mock of MulticlusterMeshClient interface
type MockMulticlusterMeshClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMeshClientMockRecorder
}

// MockMulticlusterMeshClientMockRecorder is the mock recorder for MockMulticlusterMeshClient
type MockMulticlusterMeshClientMockRecorder struct {
	mock *MockMulticlusterMeshClient
}

// NewMockMulticlusterMeshClient creates a new mock instance
func NewMockMulticlusterMeshClient(ctrl *gomock.Controller) *MockMulticlusterMeshClient {
	mock := &MockMulticlusterMeshClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMeshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterMeshClient) EXPECT() *MockMulticlusterMeshClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterMeshClient) Cluster(cluster string) (v1alpha2.MeshClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.MeshClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterMeshClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterMeshClient)(nil).Cluster), cluster)
}
