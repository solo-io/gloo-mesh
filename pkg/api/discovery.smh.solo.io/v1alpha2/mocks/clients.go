// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1alpha2 is a generated GoMock package.
package mock_v1alpha2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha2"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1alpha2.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// TrafficTargets mocks base method
func (m *MockClientset) TrafficTargets() v1alpha2.TrafficTargetClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrafficTargets")
	ret0, _ := ret[0].(v1alpha2.TrafficTargetClient)
	return ret0
}

// TrafficTargets indicates an expected call of TrafficTargets
func (mr *MockClientsetMockRecorder) TrafficTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrafficTargets", reflect.TypeOf((*MockClientset)(nil).TrafficTargets))
}

// Workloads mocks base method
func (m *MockClientset) Workloads() v1alpha2.WorkloadClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Workloads")
	ret0, _ := ret[0].(v1alpha2.WorkloadClient)
	return ret0
}

// Workloads indicates an expected call of Workloads
func (mr *MockClientsetMockRecorder) Workloads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Workloads", reflect.TypeOf((*MockClientset)(nil).Workloads))
}

// Meshes mocks base method
func (m *MockClientset) Meshes() v1alpha2.MeshClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meshes")
	ret0, _ := ret[0].(v1alpha2.MeshClient)
	return ret0
}

// Meshes indicates an expected call of Meshes
func (mr *MockClientsetMockRecorder) Meshes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meshes", reflect.TypeOf((*MockClientset)(nil).Meshes))
}

// MockTrafficTargetReader is a mock of TrafficTargetReader interface
type MockTrafficTargetReader struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficTargetReaderMockRecorder
}

// MockTrafficTargetReaderMockRecorder is the mock recorder for MockTrafficTargetReader
type MockTrafficTargetReaderMockRecorder struct {
	mock *MockTrafficTargetReader
}

// NewMockTrafficTargetReader creates a new mock instance
func NewMockTrafficTargetReader(ctrl *gomock.Controller) *MockTrafficTargetReader {
	mock := &MockTrafficTargetReader{ctrl: ctrl}
	mock.recorder = &MockTrafficTargetReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTrafficTargetReader) EXPECT() *MockTrafficTargetReaderMockRecorder {
	return m.recorder
}

// GetTrafficTarget mocks base method
func (m *MockTrafficTargetReader) GetTrafficTarget(ctx context.Context, key client.ObjectKey) (*v1alpha2.TrafficTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrafficTarget", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.TrafficTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrafficTarget indicates an expected call of GetTrafficTarget
func (mr *MockTrafficTargetReaderMockRecorder) GetTrafficTarget(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficTarget", reflect.TypeOf((*MockTrafficTargetReader)(nil).GetTrafficTarget), ctx, key)
}

// ListTrafficTarget mocks base method
func (m *MockTrafficTargetReader) ListTrafficTarget(ctx context.Context, opts ...client.ListOption) (*v1alpha2.TrafficTargetList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrafficTarget", varargs...)
	ret0, _ := ret[0].(*v1alpha2.TrafficTargetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrafficTarget indicates an expected call of ListTrafficTarget
func (mr *MockTrafficTargetReaderMockRecorder) ListTrafficTarget(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficTarget", reflect.TypeOf((*MockTrafficTargetReader)(nil).ListTrafficTarget), varargs...)
}

// MockTrafficTargetWriter is a mock of TrafficTargetWriter interface
type MockTrafficTargetWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficTargetWriterMockRecorder
}

// MockTrafficTargetWriterMockRecorder is the mock recorder for MockTrafficTargetWriter
type MockTrafficTargetWriterMockRecorder struct {
	mock *MockTrafficTargetWriter
}

// NewMockTrafficTargetWriter creates a new mock instance
func NewMockTrafficTargetWriter(ctrl *gomock.Controller) *MockTrafficTargetWriter {
	mock := &MockTrafficTargetWriter{ctrl: ctrl}
	mock.recorder = &MockTrafficTargetWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTrafficTargetWriter) EXPECT() *MockTrafficTargetWriterMockRecorder {
	return m.recorder
}

// CreateTrafficTarget mocks base method
func (m *MockTrafficTargetWriter) CreateTrafficTarget(ctx context.Context, obj *v1alpha2.TrafficTarget, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrafficTarget indicates an expected call of CreateTrafficTarget
func (mr *MockTrafficTargetWriterMockRecorder) CreateTrafficTarget(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrafficTarget", reflect.TypeOf((*MockTrafficTargetWriter)(nil).CreateTrafficTarget), varargs...)
}

// DeleteTrafficTarget mocks base method
func (m *MockTrafficTargetWriter) DeleteTrafficTarget(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrafficTarget indicates an expected call of DeleteTrafficTarget
func (mr *MockTrafficTargetWriterMockRecorder) DeleteTrafficTarget(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrafficTarget", reflect.TypeOf((*MockTrafficTargetWriter)(nil).DeleteTrafficTarget), varargs...)
}

// UpdateTrafficTarget mocks base method
func (m *MockTrafficTargetWriter) UpdateTrafficTarget(ctx context.Context, obj *v1alpha2.TrafficTarget, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficTarget indicates an expected call of UpdateTrafficTarget
func (mr *MockTrafficTargetWriterMockRecorder) UpdateTrafficTarget(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficTarget", reflect.TypeOf((*MockTrafficTargetWriter)(nil).UpdateTrafficTarget), varargs...)
}

// PatchTrafficTarget mocks base method
func (m *MockTrafficTargetWriter) PatchTrafficTarget(ctx context.Context, obj *v1alpha2.TrafficTarget, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficTarget indicates an expected call of PatchTrafficTarget
func (mr *MockTrafficTargetWriterMockRecorder) PatchTrafficTarget(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficTarget", reflect.TypeOf((*MockTrafficTargetWriter)(nil).PatchTrafficTarget), varargs...)
}

// DeleteAllOfTrafficTarget mocks base method
func (m *MockTrafficTargetWriter) DeleteAllOfTrafficTarget(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTrafficTarget indicates an expected call of DeleteAllOfTrafficTarget
func (mr *MockTrafficTargetWriterMockRecorder) DeleteAllOfTrafficTarget(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTrafficTarget", reflect.TypeOf((*MockTrafficTargetWriter)(nil).DeleteAllOfTrafficTarget), varargs...)
}

// UpsertTrafficTarget mocks base method
func (m *MockTrafficTargetWriter) UpsertTrafficTarget(ctx context.Context, obj *v1alpha2.TrafficTarget, transitionFuncs ...v1alpha2.TrafficTargetTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTrafficTarget indicates an expected call of UpsertTrafficTarget
func (mr *MockTrafficTargetWriterMockRecorder) UpsertTrafficTarget(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTrafficTarget", reflect.TypeOf((*MockTrafficTargetWriter)(nil).UpsertTrafficTarget), varargs...)
}

// MockTrafficTargetStatusWriter is a mock of TrafficTargetStatusWriter interface
type MockTrafficTargetStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficTargetStatusWriterMockRecorder
}

// MockTrafficTargetStatusWriterMockRecorder is the mock recorder for MockTrafficTargetStatusWriter
type MockTrafficTargetStatusWriterMockRecorder struct {
	mock *MockTrafficTargetStatusWriter
}

// NewMockTrafficTargetStatusWriter creates a new mock instance
func NewMockTrafficTargetStatusWriter(ctrl *gomock.Controller) *MockTrafficTargetStatusWriter {
	mock := &MockTrafficTargetStatusWriter{ctrl: ctrl}
	mock.recorder = &MockTrafficTargetStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTrafficTargetStatusWriter) EXPECT() *MockTrafficTargetStatusWriterMockRecorder {
	return m.recorder
}

// UpdateTrafficTargetStatus mocks base method
func (m *MockTrafficTargetStatusWriter) UpdateTrafficTargetStatus(ctx context.Context, obj *v1alpha2.TrafficTarget, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficTargetStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficTargetStatus indicates an expected call of UpdateTrafficTargetStatus
func (mr *MockTrafficTargetStatusWriterMockRecorder) UpdateTrafficTargetStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficTargetStatus", reflect.TypeOf((*MockTrafficTargetStatusWriter)(nil).UpdateTrafficTargetStatus), varargs...)
}

// PatchTrafficTargetStatus mocks base method
func (m *MockTrafficTargetStatusWriter) PatchTrafficTargetStatus(ctx context.Context, obj *v1alpha2.TrafficTarget, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficTargetStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficTargetStatus indicates an expected call of PatchTrafficTargetStatus
func (mr *MockTrafficTargetStatusWriterMockRecorder) PatchTrafficTargetStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficTargetStatus", reflect.TypeOf((*MockTrafficTargetStatusWriter)(nil).PatchTrafficTargetStatus), varargs...)
}

// MockTrafficTargetClient is a mock of TrafficTargetClient interface
type MockTrafficTargetClient struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficTargetClientMockRecorder
}

// MockTrafficTargetClientMockRecorder is the mock recorder for MockTrafficTargetClient
type MockTrafficTargetClientMockRecorder struct {
	mock *MockTrafficTargetClient
}

// NewMockTrafficTargetClient creates a new mock instance
func NewMockTrafficTargetClient(ctrl *gomock.Controller) *MockTrafficTargetClient {
	mock := &MockTrafficTargetClient{ctrl: ctrl}
	mock.recorder = &MockTrafficTargetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTrafficTargetClient) EXPECT() *MockTrafficTargetClientMockRecorder {
	return m.recorder
}

// GetTrafficTarget mocks base method
func (m *MockTrafficTargetClient) GetTrafficTarget(ctx context.Context, key client.ObjectKey) (*v1alpha2.TrafficTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrafficTarget", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.TrafficTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrafficTarget indicates an expected call of GetTrafficTarget
func (mr *MockTrafficTargetClientMockRecorder) GetTrafficTarget(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficTarget", reflect.TypeOf((*MockTrafficTargetClient)(nil).GetTrafficTarget), ctx, key)
}

// ListTrafficTarget mocks base method
func (m *MockTrafficTargetClient) ListTrafficTarget(ctx context.Context, opts ...client.ListOption) (*v1alpha2.TrafficTargetList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrafficTarget", varargs...)
	ret0, _ := ret[0].(*v1alpha2.TrafficTargetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrafficTarget indicates an expected call of ListTrafficTarget
func (mr *MockTrafficTargetClientMockRecorder) ListTrafficTarget(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficTarget", reflect.TypeOf((*MockTrafficTargetClient)(nil).ListTrafficTarget), varargs...)
}

// CreateTrafficTarget mocks base method
func (m *MockTrafficTargetClient) CreateTrafficTarget(ctx context.Context, obj *v1alpha2.TrafficTarget, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrafficTarget indicates an expected call of CreateTrafficTarget
func (mr *MockTrafficTargetClientMockRecorder) CreateTrafficTarget(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrafficTarget", reflect.TypeOf((*MockTrafficTargetClient)(nil).CreateTrafficTarget), varargs...)
}

// DeleteTrafficTarget mocks base method
func (m *MockTrafficTargetClient) DeleteTrafficTarget(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrafficTarget indicates an expected call of DeleteTrafficTarget
func (mr *MockTrafficTargetClientMockRecorder) DeleteTrafficTarget(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrafficTarget", reflect.TypeOf((*MockTrafficTargetClient)(nil).DeleteTrafficTarget), varargs...)
}

// UpdateTrafficTarget mocks base method
func (m *MockTrafficTargetClient) UpdateTrafficTarget(ctx context.Context, obj *v1alpha2.TrafficTarget, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficTarget indicates an expected call of UpdateTrafficTarget
func (mr *MockTrafficTargetClientMockRecorder) UpdateTrafficTarget(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficTarget", reflect.TypeOf((*MockTrafficTargetClient)(nil).UpdateTrafficTarget), varargs...)
}

// PatchTrafficTarget mocks base method
func (m *MockTrafficTargetClient) PatchTrafficTarget(ctx context.Context, obj *v1alpha2.TrafficTarget, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficTarget indicates an expected call of PatchTrafficTarget
func (mr *MockTrafficTargetClientMockRecorder) PatchTrafficTarget(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficTarget", reflect.TypeOf((*MockTrafficTargetClient)(nil).PatchTrafficTarget), varargs...)
}

// DeleteAllOfTrafficTarget mocks base method
func (m *MockTrafficTargetClient) DeleteAllOfTrafficTarget(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTrafficTarget indicates an expected call of DeleteAllOfTrafficTarget
func (mr *MockTrafficTargetClientMockRecorder) DeleteAllOfTrafficTarget(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTrafficTarget", reflect.TypeOf((*MockTrafficTargetClient)(nil).DeleteAllOfTrafficTarget), varargs...)
}

// UpsertTrafficTarget mocks base method
func (m *MockTrafficTargetClient) UpsertTrafficTarget(ctx context.Context, obj *v1alpha2.TrafficTarget, transitionFuncs ...v1alpha2.TrafficTargetTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTrafficTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTrafficTarget indicates an expected call of UpsertTrafficTarget
func (mr *MockTrafficTargetClientMockRecorder) UpsertTrafficTarget(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTrafficTarget", reflect.TypeOf((*MockTrafficTargetClient)(nil).UpsertTrafficTarget), varargs...)
}

// UpdateTrafficTargetStatus mocks base method
func (m *MockTrafficTargetClient) UpdateTrafficTargetStatus(ctx context.Context, obj *v1alpha2.TrafficTarget, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficTargetStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficTargetStatus indicates an expected call of UpdateTrafficTargetStatus
func (mr *MockTrafficTargetClientMockRecorder) UpdateTrafficTargetStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficTargetStatus", reflect.TypeOf((*MockTrafficTargetClient)(nil).UpdateTrafficTargetStatus), varargs...)
}

// PatchTrafficTargetStatus mocks base method
func (m *MockTrafficTargetClient) PatchTrafficTargetStatus(ctx context.Context, obj *v1alpha2.TrafficTarget, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficTargetStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficTargetStatus indicates an expected call of PatchTrafficTargetStatus
func (mr *MockTrafficTargetClientMockRecorder) PatchTrafficTargetStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficTargetStatus", reflect.TypeOf((*MockTrafficTargetClient)(nil).PatchTrafficTargetStatus), varargs...)
}

// MockMulticlusterTrafficTargetClient is a mock of MulticlusterTrafficTargetClient interface
type MockMulticlusterTrafficTargetClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTrafficTargetClientMockRecorder
}

// MockMulticlusterTrafficTargetClientMockRecorder is the mock recorder for MockMulticlusterTrafficTargetClient
type MockMulticlusterTrafficTargetClientMockRecorder struct {
	mock *MockMulticlusterTrafficTargetClient
}

// NewMockMulticlusterTrafficTargetClient creates a new mock instance
func NewMockMulticlusterTrafficTargetClient(ctrl *gomock.Controller) *MockMulticlusterTrafficTargetClient {
	mock := &MockMulticlusterTrafficTargetClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTrafficTargetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterTrafficTargetClient) EXPECT() *MockMulticlusterTrafficTargetClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterTrafficTargetClient) Cluster(cluster string) (v1alpha2.TrafficTargetClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.TrafficTargetClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterTrafficTargetClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterTrafficTargetClient)(nil).Cluster), cluster)
}

// MockWorkloadReader is a mock of WorkloadReader interface
type MockWorkloadReader struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadReaderMockRecorder
}

// MockWorkloadReaderMockRecorder is the mock recorder for MockWorkloadReader
type MockWorkloadReaderMockRecorder struct {
	mock *MockWorkloadReader
}

// NewMockWorkloadReader creates a new mock instance
func NewMockWorkloadReader(ctrl *gomock.Controller) *MockWorkloadReader {
	mock := &MockWorkloadReader{ctrl: ctrl}
	mock.recorder = &MockWorkloadReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkloadReader) EXPECT() *MockWorkloadReaderMockRecorder {
	return m.recorder
}

// GetWorkload mocks base method
func (m *MockWorkloadReader) GetWorkload(ctx context.Context, key client.ObjectKey) (*v1alpha2.Workload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkload", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.Workload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkload indicates an expected call of GetWorkload
func (mr *MockWorkloadReaderMockRecorder) GetWorkload(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkload", reflect.TypeOf((*MockWorkloadReader)(nil).GetWorkload), ctx, key)
}

// ListWorkload mocks base method
func (m *MockWorkloadReader) ListWorkload(ctx context.Context, opts ...client.ListOption) (*v1alpha2.WorkloadList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkload", varargs...)
	ret0, _ := ret[0].(*v1alpha2.WorkloadList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkload indicates an expected call of ListWorkload
func (mr *MockWorkloadReaderMockRecorder) ListWorkload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkload", reflect.TypeOf((*MockWorkloadReader)(nil).ListWorkload), varargs...)
}

// MockWorkloadWriter is a mock of WorkloadWriter interface
type MockWorkloadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadWriterMockRecorder
}

// MockWorkloadWriterMockRecorder is the mock recorder for MockWorkloadWriter
type MockWorkloadWriterMockRecorder struct {
	mock *MockWorkloadWriter
}

// NewMockWorkloadWriter creates a new mock instance
func NewMockWorkloadWriter(ctrl *gomock.Controller) *MockWorkloadWriter {
	mock := &MockWorkloadWriter{ctrl: ctrl}
	mock.recorder = &MockWorkloadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkloadWriter) EXPECT() *MockWorkloadWriterMockRecorder {
	return m.recorder
}

// CreateWorkload mocks base method
func (m *MockWorkloadWriter) CreateWorkload(ctx context.Context, obj *v1alpha2.Workload, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkload indicates an expected call of CreateWorkload
func (mr *MockWorkloadWriterMockRecorder) CreateWorkload(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkload", reflect.TypeOf((*MockWorkloadWriter)(nil).CreateWorkload), varargs...)
}

// DeleteWorkload mocks base method
func (m *MockWorkloadWriter) DeleteWorkload(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkload indicates an expected call of DeleteWorkload
func (mr *MockWorkloadWriterMockRecorder) DeleteWorkload(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkload", reflect.TypeOf((*MockWorkloadWriter)(nil).DeleteWorkload), varargs...)
}

// UpdateWorkload mocks base method
func (m *MockWorkloadWriter) UpdateWorkload(ctx context.Context, obj *v1alpha2.Workload, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkload indicates an expected call of UpdateWorkload
func (mr *MockWorkloadWriterMockRecorder) UpdateWorkload(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkload", reflect.TypeOf((*MockWorkloadWriter)(nil).UpdateWorkload), varargs...)
}

// PatchWorkload mocks base method
func (m *MockWorkloadWriter) PatchWorkload(ctx context.Context, obj *v1alpha2.Workload, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWorkload indicates an expected call of PatchWorkload
func (mr *MockWorkloadWriterMockRecorder) PatchWorkload(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWorkload", reflect.TypeOf((*MockWorkloadWriter)(nil).PatchWorkload), varargs...)
}

// DeleteAllOfWorkload mocks base method
func (m *MockWorkloadWriter) DeleteAllOfWorkload(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfWorkload indicates an expected call of DeleteAllOfWorkload
func (mr *MockWorkloadWriterMockRecorder) DeleteAllOfWorkload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfWorkload", reflect.TypeOf((*MockWorkloadWriter)(nil).DeleteAllOfWorkload), varargs...)
}

// UpsertWorkload mocks base method
func (m *MockWorkloadWriter) UpsertWorkload(ctx context.Context, obj *v1alpha2.Workload, transitionFuncs ...v1alpha2.WorkloadTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWorkload indicates an expected call of UpsertWorkload
func (mr *MockWorkloadWriterMockRecorder) UpsertWorkload(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWorkload", reflect.TypeOf((*MockWorkloadWriter)(nil).UpsertWorkload), varargs...)
}

// MockWorkloadStatusWriter is a mock of WorkloadStatusWriter interface
type MockWorkloadStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadStatusWriterMockRecorder
}

// MockWorkloadStatusWriterMockRecorder is the mock recorder for MockWorkloadStatusWriter
type MockWorkloadStatusWriterMockRecorder struct {
	mock *MockWorkloadStatusWriter
}

// NewMockWorkloadStatusWriter creates a new mock instance
func NewMockWorkloadStatusWriter(ctrl *gomock.Controller) *MockWorkloadStatusWriter {
	mock := &MockWorkloadStatusWriter{ctrl: ctrl}
	mock.recorder = &MockWorkloadStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkloadStatusWriter) EXPECT() *MockWorkloadStatusWriterMockRecorder {
	return m.recorder
}

// UpdateWorkloadStatus mocks base method
func (m *MockWorkloadStatusWriter) UpdateWorkloadStatus(ctx context.Context, obj *v1alpha2.Workload, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkloadStatus indicates an expected call of UpdateWorkloadStatus
func (mr *MockWorkloadStatusWriterMockRecorder) UpdateWorkloadStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkloadStatus", reflect.TypeOf((*MockWorkloadStatusWriter)(nil).UpdateWorkloadStatus), varargs...)
}

// PatchWorkloadStatus mocks base method
func (m *MockWorkloadStatusWriter) PatchWorkloadStatus(ctx context.Context, obj *v1alpha2.Workload, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWorkloadStatus indicates an expected call of PatchWorkloadStatus
func (mr *MockWorkloadStatusWriterMockRecorder) PatchWorkloadStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWorkloadStatus", reflect.TypeOf((*MockWorkloadStatusWriter)(nil).PatchWorkloadStatus), varargs...)
}

// MockWorkloadClient is a mock of WorkloadClient interface
type MockWorkloadClient struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadClientMockRecorder
}

// MockWorkloadClientMockRecorder is the mock recorder for MockWorkloadClient
type MockWorkloadClientMockRecorder struct {
	mock *MockWorkloadClient
}

// NewMockWorkloadClient creates a new mock instance
func NewMockWorkloadClient(ctrl *gomock.Controller) *MockWorkloadClient {
	mock := &MockWorkloadClient{ctrl: ctrl}
	mock.recorder = &MockWorkloadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkloadClient) EXPECT() *MockWorkloadClientMockRecorder {
	return m.recorder
}

// GetWorkload mocks base method
func (m *MockWorkloadClient) GetWorkload(ctx context.Context, key client.ObjectKey) (*v1alpha2.Workload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkload", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.Workload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkload indicates an expected call of GetWorkload
func (mr *MockWorkloadClientMockRecorder) GetWorkload(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkload", reflect.TypeOf((*MockWorkloadClient)(nil).GetWorkload), ctx, key)
}

// ListWorkload mocks base method
func (m *MockWorkloadClient) ListWorkload(ctx context.Context, opts ...client.ListOption) (*v1alpha2.WorkloadList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkload", varargs...)
	ret0, _ := ret[0].(*v1alpha2.WorkloadList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkload indicates an expected call of ListWorkload
func (mr *MockWorkloadClientMockRecorder) ListWorkload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkload", reflect.TypeOf((*MockWorkloadClient)(nil).ListWorkload), varargs...)
}

// CreateWorkload mocks base method
func (m *MockWorkloadClient) CreateWorkload(ctx context.Context, obj *v1alpha2.Workload, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkload indicates an expected call of CreateWorkload
func (mr *MockWorkloadClientMockRecorder) CreateWorkload(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkload", reflect.TypeOf((*MockWorkloadClient)(nil).CreateWorkload), varargs...)
}

// DeleteWorkload mocks base method
func (m *MockWorkloadClient) DeleteWorkload(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkload indicates an expected call of DeleteWorkload
func (mr *MockWorkloadClientMockRecorder) DeleteWorkload(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkload", reflect.TypeOf((*MockWorkloadClient)(nil).DeleteWorkload), varargs...)
}

// UpdateWorkload mocks base method
func (m *MockWorkloadClient) UpdateWorkload(ctx context.Context, obj *v1alpha2.Workload, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkload indicates an expected call of UpdateWorkload
func (mr *MockWorkloadClientMockRecorder) UpdateWorkload(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkload", reflect.TypeOf((*MockWorkloadClient)(nil).UpdateWorkload), varargs...)
}

// PatchWorkload mocks base method
func (m *MockWorkloadClient) PatchWorkload(ctx context.Context, obj *v1alpha2.Workload, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWorkload indicates an expected call of PatchWorkload
func (mr *MockWorkloadClientMockRecorder) PatchWorkload(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWorkload", reflect.TypeOf((*MockWorkloadClient)(nil).PatchWorkload), varargs...)
}

// DeleteAllOfWorkload mocks base method
func (m *MockWorkloadClient) DeleteAllOfWorkload(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfWorkload indicates an expected call of DeleteAllOfWorkload
func (mr *MockWorkloadClientMockRecorder) DeleteAllOfWorkload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfWorkload", reflect.TypeOf((*MockWorkloadClient)(nil).DeleteAllOfWorkload), varargs...)
}

// UpsertWorkload mocks base method
func (m *MockWorkloadClient) UpsertWorkload(ctx context.Context, obj *v1alpha2.Workload, transitionFuncs ...v1alpha2.WorkloadTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWorkload indicates an expected call of UpsertWorkload
func (mr *MockWorkloadClientMockRecorder) UpsertWorkload(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWorkload", reflect.TypeOf((*MockWorkloadClient)(nil).UpsertWorkload), varargs...)
}

// UpdateWorkloadStatus mocks base method
func (m *MockWorkloadClient) UpdateWorkloadStatus(ctx context.Context, obj *v1alpha2.Workload, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkloadStatus indicates an expected call of UpdateWorkloadStatus
func (mr *MockWorkloadClientMockRecorder) UpdateWorkloadStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkloadStatus", reflect.TypeOf((*MockWorkloadClient)(nil).UpdateWorkloadStatus), varargs...)
}

// PatchWorkloadStatus mocks base method
func (m *MockWorkloadClient) PatchWorkloadStatus(ctx context.Context, obj *v1alpha2.Workload, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWorkloadStatus indicates an expected call of PatchWorkloadStatus
func (mr *MockWorkloadClientMockRecorder) PatchWorkloadStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWorkloadStatus", reflect.TypeOf((*MockWorkloadClient)(nil).PatchWorkloadStatus), varargs...)
}

// MockMulticlusterWorkloadClient is a mock of MulticlusterWorkloadClient interface
type MockMulticlusterWorkloadClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWorkloadClientMockRecorder
}

// MockMulticlusterWorkloadClientMockRecorder is the mock recorder for MockMulticlusterWorkloadClient
type MockMulticlusterWorkloadClientMockRecorder struct {
	mock *MockMulticlusterWorkloadClient
}

// NewMockMulticlusterWorkloadClient creates a new mock instance
func NewMockMulticlusterWorkloadClient(ctrl *gomock.Controller) *MockMulticlusterWorkloadClient {
	mock := &MockMulticlusterWorkloadClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWorkloadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterWorkloadClient) EXPECT() *MockMulticlusterWorkloadClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterWorkloadClient) Cluster(cluster string) (v1alpha2.WorkloadClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.WorkloadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterWorkloadClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterWorkloadClient)(nil).Cluster), cluster)
}

// MockMeshReader is a mock of MeshReader interface
type MockMeshReader struct {
	ctrl     *gomock.Controller
	recorder *MockMeshReaderMockRecorder
}

// MockMeshReaderMockRecorder is the mock recorder for MockMeshReader
type MockMeshReaderMockRecorder struct {
	mock *MockMeshReader
}

// NewMockMeshReader creates a new mock instance
func NewMockMeshReader(ctrl *gomock.Controller) *MockMeshReader {
	mock := &MockMeshReader{ctrl: ctrl}
	mock.recorder = &MockMeshReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshReader) EXPECT() *MockMeshReaderMockRecorder {
	return m.recorder
}

// GetMesh mocks base method
func (m *MockMeshReader) GetMesh(ctx context.Context, key client.ObjectKey) (*v1alpha2.Mesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMesh", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.Mesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMesh indicates an expected call of GetMesh
func (mr *MockMeshReaderMockRecorder) GetMesh(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMesh", reflect.TypeOf((*MockMeshReader)(nil).GetMesh), ctx, key)
}

// ListMesh mocks base method
func (m *MockMeshReader) ListMesh(ctx context.Context, opts ...client.ListOption) (*v1alpha2.MeshList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMesh", varargs...)
	ret0, _ := ret[0].(*v1alpha2.MeshList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMesh indicates an expected call of ListMesh
func (mr *MockMeshReaderMockRecorder) ListMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMesh", reflect.TypeOf((*MockMeshReader)(nil).ListMesh), varargs...)
}

// MockMeshWriter is a mock of MeshWriter interface
type MockMeshWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWriterMockRecorder
}

// MockMeshWriterMockRecorder is the mock recorder for MockMeshWriter
type MockMeshWriterMockRecorder struct {
	mock *MockMeshWriter
}

// NewMockMeshWriter creates a new mock instance
func NewMockMeshWriter(ctrl *gomock.Controller) *MockMeshWriter {
	mock := &MockMeshWriter{ctrl: ctrl}
	mock.recorder = &MockMeshWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshWriter) EXPECT() *MockMeshWriterMockRecorder {
	return m.recorder
}

// CreateMesh mocks base method
func (m *MockMeshWriter) CreateMesh(ctx context.Context, obj *v1alpha2.Mesh, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMesh indicates an expected call of CreateMesh
func (mr *MockMeshWriterMockRecorder) CreateMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMesh", reflect.TypeOf((*MockMeshWriter)(nil).CreateMesh), varargs...)
}

// DeleteMesh mocks base method
func (m *MockMeshWriter) DeleteMesh(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMesh indicates an expected call of DeleteMesh
func (mr *MockMeshWriterMockRecorder) DeleteMesh(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMesh", reflect.TypeOf((*MockMeshWriter)(nil).DeleteMesh), varargs...)
}

// UpdateMesh mocks base method
func (m *MockMeshWriter) UpdateMesh(ctx context.Context, obj *v1alpha2.Mesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMesh indicates an expected call of UpdateMesh
func (mr *MockMeshWriterMockRecorder) UpdateMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMesh", reflect.TypeOf((*MockMeshWriter)(nil).UpdateMesh), varargs...)
}

// PatchMesh mocks base method
func (m *MockMeshWriter) PatchMesh(ctx context.Context, obj *v1alpha2.Mesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMesh indicates an expected call of PatchMesh
func (mr *MockMeshWriterMockRecorder) PatchMesh(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMesh", reflect.TypeOf((*MockMeshWriter)(nil).PatchMesh), varargs...)
}

// DeleteAllOfMesh mocks base method
func (m *MockMeshWriter) DeleteAllOfMesh(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMesh indicates an expected call of DeleteAllOfMesh
func (mr *MockMeshWriterMockRecorder) DeleteAllOfMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMesh", reflect.TypeOf((*MockMeshWriter)(nil).DeleteAllOfMesh), varargs...)
}

// UpsertMesh mocks base method
func (m *MockMeshWriter) UpsertMesh(ctx context.Context, obj *v1alpha2.Mesh, transitionFuncs ...v1alpha2.MeshTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMesh indicates an expected call of UpsertMesh
func (mr *MockMeshWriterMockRecorder) UpsertMesh(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMesh", reflect.TypeOf((*MockMeshWriter)(nil).UpsertMesh), varargs...)
}

// MockMeshStatusWriter is a mock of MeshStatusWriter interface
type MockMeshStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMeshStatusWriterMockRecorder
}

// MockMeshStatusWriterMockRecorder is the mock recorder for MockMeshStatusWriter
type MockMeshStatusWriterMockRecorder struct {
	mock *MockMeshStatusWriter
}

// NewMockMeshStatusWriter creates a new mock instance
func NewMockMeshStatusWriter(ctrl *gomock.Controller) *MockMeshStatusWriter {
	mock := &MockMeshStatusWriter{ctrl: ctrl}
	mock.recorder = &MockMeshStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshStatusWriter) EXPECT() *MockMeshStatusWriterMockRecorder {
	return m.recorder
}

// UpdateMeshStatus mocks base method
func (m *MockMeshStatusWriter) UpdateMeshStatus(ctx context.Context, obj *v1alpha2.Mesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshStatus indicates an expected call of UpdateMeshStatus
func (mr *MockMeshStatusWriterMockRecorder) UpdateMeshStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshStatus", reflect.TypeOf((*MockMeshStatusWriter)(nil).UpdateMeshStatus), varargs...)
}

// PatchMeshStatus mocks base method
func (m *MockMeshStatusWriter) PatchMeshStatus(ctx context.Context, obj *v1alpha2.Mesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshStatus indicates an expected call of PatchMeshStatus
func (mr *MockMeshStatusWriterMockRecorder) PatchMeshStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshStatus", reflect.TypeOf((*MockMeshStatusWriter)(nil).PatchMeshStatus), varargs...)
}

// MockMeshClient is a mock of MeshClient interface
type MockMeshClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeshClientMockRecorder
}

// MockMeshClientMockRecorder is the mock recorder for MockMeshClient
type MockMeshClientMockRecorder struct {
	mock *MockMeshClient
}

// NewMockMeshClient creates a new mock instance
func NewMockMeshClient(ctrl *gomock.Controller) *MockMeshClient {
	mock := &MockMeshClient{ctrl: ctrl}
	mock.recorder = &MockMeshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshClient) EXPECT() *MockMeshClientMockRecorder {
	return m.recorder
}

// GetMesh mocks base method
func (m *MockMeshClient) GetMesh(ctx context.Context, key client.ObjectKey) (*v1alpha2.Mesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMesh", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.Mesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMesh indicates an expected call of GetMesh
func (mr *MockMeshClientMockRecorder) GetMesh(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMesh", reflect.TypeOf((*MockMeshClient)(nil).GetMesh), ctx, key)
}

// ListMesh mocks base method
func (m *MockMeshClient) ListMesh(ctx context.Context, opts ...client.ListOption) (*v1alpha2.MeshList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMesh", varargs...)
	ret0, _ := ret[0].(*v1alpha2.MeshList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMesh indicates an expected call of ListMesh
func (mr *MockMeshClientMockRecorder) ListMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMesh", reflect.TypeOf((*MockMeshClient)(nil).ListMesh), varargs...)
}

// CreateMesh mocks base method
func (m *MockMeshClient) CreateMesh(ctx context.Context, obj *v1alpha2.Mesh, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMesh indicates an expected call of CreateMesh
func (mr *MockMeshClientMockRecorder) CreateMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMesh", reflect.TypeOf((*MockMeshClient)(nil).CreateMesh), varargs...)
}

// DeleteMesh mocks base method
func (m *MockMeshClient) DeleteMesh(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMesh indicates an expected call of DeleteMesh
func (mr *MockMeshClientMockRecorder) DeleteMesh(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMesh", reflect.TypeOf((*MockMeshClient)(nil).DeleteMesh), varargs...)
}

// UpdateMesh mocks base method
func (m *MockMeshClient) UpdateMesh(ctx context.Context, obj *v1alpha2.Mesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMesh indicates an expected call of UpdateMesh
func (mr *MockMeshClientMockRecorder) UpdateMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMesh", reflect.TypeOf((*MockMeshClient)(nil).UpdateMesh), varargs...)
}

// PatchMesh mocks base method
func (m *MockMeshClient) PatchMesh(ctx context.Context, obj *v1alpha2.Mesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMesh indicates an expected call of PatchMesh
func (mr *MockMeshClientMockRecorder) PatchMesh(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMesh", reflect.TypeOf((*MockMeshClient)(nil).PatchMesh), varargs...)
}

// DeleteAllOfMesh mocks base method
func (m *MockMeshClient) DeleteAllOfMesh(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMesh indicates an expected call of DeleteAllOfMesh
func (mr *MockMeshClientMockRecorder) DeleteAllOfMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMesh", reflect.TypeOf((*MockMeshClient)(nil).DeleteAllOfMesh), varargs...)
}

// UpsertMesh mocks base method
func (m *MockMeshClient) UpsertMesh(ctx context.Context, obj *v1alpha2.Mesh, transitionFuncs ...v1alpha2.MeshTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMesh indicates an expected call of UpsertMesh
func (mr *MockMeshClientMockRecorder) UpsertMesh(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMesh", reflect.TypeOf((*MockMeshClient)(nil).UpsertMesh), varargs...)
}

// UpdateMeshStatus mocks base method
func (m *MockMeshClient) UpdateMeshStatus(ctx context.Context, obj *v1alpha2.Mesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshStatus indicates an expected call of UpdateMeshStatus
func (mr *MockMeshClientMockRecorder) UpdateMeshStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshStatus", reflect.TypeOf((*MockMeshClient)(nil).UpdateMeshStatus), varargs...)
}

// PatchMeshStatus mocks base method
func (m *MockMeshClient) PatchMeshStatus(ctx context.Context, obj *v1alpha2.Mesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshStatus indicates an expected call of PatchMeshStatus
func (mr *MockMeshClientMockRecorder) PatchMeshStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshStatus", reflect.TypeOf((*MockMeshClient)(nil).PatchMeshStatus), varargs...)
}

// MockMulticlusterMeshClient is a mock of MulticlusterMeshClient interface
type MockMulticlusterMeshClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMeshClientMockRecorder
}

// MockMulticlusterMeshClientMockRecorder is the mock recorder for MockMulticlusterMeshClient
type MockMulticlusterMeshClientMockRecorder struct {
	mock *MockMulticlusterMeshClient
}

// NewMockMulticlusterMeshClient creates a new mock instance
func NewMockMulticlusterMeshClient(ctrl *gomock.Controller) *MockMulticlusterMeshClient {
	mock := &MockMulticlusterMeshClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMeshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterMeshClient) EXPECT() *MockMulticlusterMeshClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterMeshClient) Cluster(cluster string) (v1alpha2.MeshClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.MeshClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterMeshClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterMeshClient)(nil).Cluster), cluster)
}
