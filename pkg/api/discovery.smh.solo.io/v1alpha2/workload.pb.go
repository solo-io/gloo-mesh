// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/service-mesh-hub/api/discovery/v1alpha2/workload.proto

package v1alpha2

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//*
//The Workload is an abstraction for a workload/client which mesh-discovery has discovered to be part of a
//given mesh (i.e. its traffic is managed by an in-mesh sidecar).
type WorkloadSpec struct {
	// Specifies the underlying type of workload that this Workload is abstracting.
	//
	// Types that are valid to be assigned to WorkloadType:
	//	*WorkloadSpec_Kubernetes
	WorkloadType isWorkloadSpec_WorkloadType `protobuf_oneof:"workload_type"`
	// The mesh with which this workload is associated.
	Mesh *v1.ObjectRef `protobuf:"bytes,4,opt,name=mesh,proto3" json:"mesh,omitempty"`
	// Appmesh specific metadata.
	AppMesh              *WorkloadSpec_AppMesh `protobuf:"bytes,5,opt,name=app_mesh,json=appMesh,proto3" json:"app_mesh,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *WorkloadSpec) Reset()         { *m = WorkloadSpec{} }
func (m *WorkloadSpec) String() string { return proto.CompactTextString(m) }
func (*WorkloadSpec) ProtoMessage()    {}
func (*WorkloadSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_fba2ef6aa9a85613, []int{0}
}
func (m *WorkloadSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkloadSpec.Unmarshal(m, b)
}
func (m *WorkloadSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkloadSpec.Marshal(b, m, deterministic)
}
func (m *WorkloadSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadSpec.Merge(m, src)
}
func (m *WorkloadSpec) XXX_Size() int {
	return xxx_messageInfo_WorkloadSpec.Size(m)
}
func (m *WorkloadSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadSpec.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadSpec proto.InternalMessageInfo

type isWorkloadSpec_WorkloadType interface {
	isWorkloadSpec_WorkloadType()
	Equal(interface{}) bool
}

type WorkloadSpec_Kubernetes struct {
	Kubernetes *WorkloadSpec_KubernetesWorkload `protobuf:"bytes,1,opt,name=kubernetes,proto3,oneof" json:"kubernetes,omitempty"`
}

func (*WorkloadSpec_Kubernetes) isWorkloadSpec_WorkloadType() {}

func (m *WorkloadSpec) GetWorkloadType() isWorkloadSpec_WorkloadType {
	if m != nil {
		return m.WorkloadType
	}
	return nil
}

func (m *WorkloadSpec) GetKubernetes() *WorkloadSpec_KubernetesWorkload {
	if x, ok := m.GetWorkloadType().(*WorkloadSpec_Kubernetes); ok {
		return x.Kubernetes
	}
	return nil
}

func (m *WorkloadSpec) GetMesh() *v1.ObjectRef {
	if m != nil {
		return m.Mesh
	}
	return nil
}

func (m *WorkloadSpec) GetAppMesh() *WorkloadSpec_AppMesh {
	if m != nil {
		return m.AppMesh
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WorkloadSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WorkloadSpec_Kubernetes)(nil),
	}
}

// Information describing a Kubernetes-based workload (e.g. a Deployment or DaemonSet).
type WorkloadSpec_KubernetesWorkload struct {
	//*
	//Resource ref to the underlying kubernetes controller which is managing the pods associated with the workloads.
	//It has the generic name controller as it can represent a deployment, daemonset, or statefulset.
	Controller *v1.ClusterObjectRef `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
	//*
	//These are the labels directly from the pods that this controller owns.
	//NB: these labels are read directly from the pod template metadata.labels
	//defined in the workload spec.
	//We need these to determine which services are backed by this workload.
	PodLabels map[string]string `protobuf:"bytes,2,rep,name=pod_labels,json=podLabels,proto3" json:"pod_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Service account attached to the pods owned by this controller.
	ServiceAccountName   string   `protobuf:"bytes,3,opt,name=service_account_name,json=serviceAccountName,proto3" json:"service_account_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkloadSpec_KubernetesWorkload) Reset()         { *m = WorkloadSpec_KubernetesWorkload{} }
func (m *WorkloadSpec_KubernetesWorkload) String() string { return proto.CompactTextString(m) }
func (*WorkloadSpec_KubernetesWorkload) ProtoMessage()    {}
func (*WorkloadSpec_KubernetesWorkload) Descriptor() ([]byte, []int) {
	return fileDescriptor_fba2ef6aa9a85613, []int{0, 0}
}
func (m *WorkloadSpec_KubernetesWorkload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkloadSpec_KubernetesWorkload.Unmarshal(m, b)
}
func (m *WorkloadSpec_KubernetesWorkload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkloadSpec_KubernetesWorkload.Marshal(b, m, deterministic)
}
func (m *WorkloadSpec_KubernetesWorkload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadSpec_KubernetesWorkload.Merge(m, src)
}
func (m *WorkloadSpec_KubernetesWorkload) XXX_Size() int {
	return xxx_messageInfo_WorkloadSpec_KubernetesWorkload.Size(m)
}
func (m *WorkloadSpec_KubernetesWorkload) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadSpec_KubernetesWorkload.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadSpec_KubernetesWorkload proto.InternalMessageInfo

func (m *WorkloadSpec_KubernetesWorkload) GetController() *v1.ClusterObjectRef {
	if m != nil {
		return m.Controller
	}
	return nil
}

func (m *WorkloadSpec_KubernetesWorkload) GetPodLabels() map[string]string {
	if m != nil {
		return m.PodLabels
	}
	return nil
}

func (m *WorkloadSpec_KubernetesWorkload) GetServiceAccountName() string {
	if m != nil {
		return m.ServiceAccountName
	}
	return ""
}

// Information relevant to AppMesh-injected workloads.
type WorkloadSpec_AppMesh struct {
	// The value of the env var APPMESH_VIRTUAL_NODE_NAME on the Appmesh envoy proxy container.
	VirtualNodeName string `protobuf:"bytes,1,opt,name=virtual_node_name,json=virtualNodeName,proto3" json:"virtual_node_name,omitempty"`
	// Needed for declaring Appmesh VirtualNode listeners.
	Ports                []*WorkloadSpec_AppMesh_ContainerPort `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *WorkloadSpec_AppMesh) Reset()         { *m = WorkloadSpec_AppMesh{} }
func (m *WorkloadSpec_AppMesh) String() string { return proto.CompactTextString(m) }
func (*WorkloadSpec_AppMesh) ProtoMessage()    {}
func (*WorkloadSpec_AppMesh) Descriptor() ([]byte, []int) {
	return fileDescriptor_fba2ef6aa9a85613, []int{0, 1}
}
func (m *WorkloadSpec_AppMesh) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkloadSpec_AppMesh.Unmarshal(m, b)
}
func (m *WorkloadSpec_AppMesh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkloadSpec_AppMesh.Marshal(b, m, deterministic)
}
func (m *WorkloadSpec_AppMesh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadSpec_AppMesh.Merge(m, src)
}
func (m *WorkloadSpec_AppMesh) XXX_Size() int {
	return xxx_messageInfo_WorkloadSpec_AppMesh.Size(m)
}
func (m *WorkloadSpec_AppMesh) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadSpec_AppMesh.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadSpec_AppMesh proto.InternalMessageInfo

func (m *WorkloadSpec_AppMesh) GetVirtualNodeName() string {
	if m != nil {
		return m.VirtualNodeName
	}
	return ""
}

func (m *WorkloadSpec_AppMesh) GetPorts() []*WorkloadSpec_AppMesh_ContainerPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

// k8s application container ports.
type WorkloadSpec_AppMesh_ContainerPort struct {
	Port                 uint32   `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Protocol             string   `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkloadSpec_AppMesh_ContainerPort) Reset()         { *m = WorkloadSpec_AppMesh_ContainerPort{} }
func (m *WorkloadSpec_AppMesh_ContainerPort) String() string { return proto.CompactTextString(m) }
func (*WorkloadSpec_AppMesh_ContainerPort) ProtoMessage()    {}
func (*WorkloadSpec_AppMesh_ContainerPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_fba2ef6aa9a85613, []int{0, 1, 0}
}
func (m *WorkloadSpec_AppMesh_ContainerPort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkloadSpec_AppMesh_ContainerPort.Unmarshal(m, b)
}
func (m *WorkloadSpec_AppMesh_ContainerPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkloadSpec_AppMesh_ContainerPort.Marshal(b, m, deterministic)
}
func (m *WorkloadSpec_AppMesh_ContainerPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadSpec_AppMesh_ContainerPort.Merge(m, src)
}
func (m *WorkloadSpec_AppMesh_ContainerPort) XXX_Size() int {
	return xxx_messageInfo_WorkloadSpec_AppMesh_ContainerPort.Size(m)
}
func (m *WorkloadSpec_AppMesh_ContainerPort) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadSpec_AppMesh_ContainerPort.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadSpec_AppMesh_ContainerPort proto.InternalMessageInfo

func (m *WorkloadSpec_AppMesh_ContainerPort) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *WorkloadSpec_AppMesh_ContainerPort) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type WorkloadStatus struct {
	// The observed generation of the Workload.
	// When this matches the Workload's metadata.generation it indicates that mesh-networking
	// has reconciled the latest version of the Workload.
	ObservedGeneration   int64    `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkloadStatus) Reset()         { *m = WorkloadStatus{} }
func (m *WorkloadStatus) String() string { return proto.CompactTextString(m) }
func (*WorkloadStatus) ProtoMessage()    {}
func (*WorkloadStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_fba2ef6aa9a85613, []int{1}
}
func (m *WorkloadStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkloadStatus.Unmarshal(m, b)
}
func (m *WorkloadStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkloadStatus.Marshal(b, m, deterministic)
}
func (m *WorkloadStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadStatus.Merge(m, src)
}
func (m *WorkloadStatus) XXX_Size() int {
	return xxx_messageInfo_WorkloadStatus.Size(m)
}
func (m *WorkloadStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadStatus proto.InternalMessageInfo

func (m *WorkloadStatus) GetObservedGeneration() int64 {
	if m != nil {
		return m.ObservedGeneration
	}
	return 0
}

func init() {
	proto.RegisterType((*WorkloadSpec)(nil), "discovery.smh.solo.io.WorkloadSpec")
	proto.RegisterType((*WorkloadSpec_KubernetesWorkload)(nil), "discovery.smh.solo.io.WorkloadSpec.KubernetesWorkload")
	proto.RegisterMapType((map[string]string)(nil), "discovery.smh.solo.io.WorkloadSpec.KubernetesWorkload.PodLabelsEntry")
	proto.RegisterType((*WorkloadSpec_AppMesh)(nil), "discovery.smh.solo.io.WorkloadSpec.AppMesh")
	proto.RegisterType((*WorkloadSpec_AppMesh_ContainerPort)(nil), "discovery.smh.solo.io.WorkloadSpec.AppMesh.ContainerPort")
	proto.RegisterType((*WorkloadStatus)(nil), "discovery.smh.solo.io.WorkloadStatus")
}

func init() {
	proto.RegisterFile("github.com/solo-io/service-mesh-hub/api/discovery/v1alpha2/workload.proto", fileDescriptor_fba2ef6aa9a85613)
}

var fileDescriptor_fba2ef6aa9a85613 = []byte{
	// 542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0xfd, 0x9c, 0x9f, 0xaf, 0xcd, 0x94, 0xb4, 0xb0, 0x04, 0x29, 0x32, 0x08, 0x45, 0xe5, 0x26,
	0x02, 0xc5, 0x6e, 0x83, 0x84, 0x00, 0x21, 0xa1, 0x34, 0x2a, 0xff, 0xb4, 0x91, 0xb9, 0x00, 0x71,
	0x63, 0xad, 0xed, 0x21, 0x36, 0x71, 0x3c, 0xab, 0xf5, 0xda, 0x28, 0x6f, 0xc4, 0x1d, 0x8f, 0xc1,
	0x7b, 0xf0, 0x02, 0xbc, 0x02, 0xf2, 0xda, 0x31, 0x89, 0xe8, 0x45, 0xe1, 0xca, 0xb3, 0x73, 0xf6,
	0x9c, 0x39, 0x33, 0xde, 0x81, 0x97, 0xf3, 0x48, 0x85, 0x99, 0x67, 0xf9, 0xb4, 0xb4, 0x53, 0x8a,
	0x69, 0x14, 0x91, 0x9d, 0xa2, 0xcc, 0x23, 0x1f, 0x47, 0x4b, 0x4c, 0xc3, 0x51, 0x98, 0x79, 0x36,
	0x17, 0x91, 0x1d, 0x44, 0xa9, 0x4f, 0x39, 0xca, 0x95, 0x9d, 0x1f, 0xf3, 0x58, 0x84, 0x7c, 0x6c,
	0x7f, 0x21, 0xb9, 0x88, 0x89, 0x07, 0x96, 0x90, 0xa4, 0x88, 0xdd, 0xa8, 0xaf, 0x58, 0xe9, 0x32,
	0xb4, 0x0a, 0x35, 0x2b, 0x22, 0xf3, 0x66, 0xba, 0xc8, 0xc7, 0x5a, 0xc2, 0x27, 0x89, 0x76, 0x7e,
	0xac, 0xbf, 0x25, 0xc7, 0xec, 0xcd, 0x69, 0x4e, 0x3a, 0xb4, 0x8b, 0xa8, 0xcc, 0x1e, 0xfe, 0x6c,
	0xc3, 0x95, 0xf7, 0x95, 0xf8, 0x3b, 0x81, 0x3e, 0xfb, 0x00, 0xb0, 0xc8, 0x3c, 0x94, 0x09, 0x2a,
	0x4c, 0xfb, 0xc6, 0xc0, 0x18, 0xee, 0x8d, 0x1f, 0x58, 0x17, 0xd6, 0xb3, 0x36, 0x89, 0xd6, 0xeb,
	0x9a, 0xb5, 0x4e, 0xbf, 0xf8, 0xcf, 0xd9, 0xd0, 0x62, 0x47, 0xd0, 0x2a, 0xda, 0xec, 0xb7, 0xb4,
	0xe6, 0x2d, 0x4b, 0x7b, 0x2b, 0x1c, 0xd7, 0x7a, 0xe7, 0xde, 0x67, 0xf4, 0x95, 0x83, 0x9f, 0x1c,
	0x7d, 0x93, 0x3d, 0x83, 0x5d, 0x2e, 0x84, 0xab, 0x59, 0x6d, 0xcd, 0xba, 0x77, 0x19, 0x27, 0x13,
	0x21, 0xde, 0x62, 0x1a, 0x3a, 0x3b, 0xbc, 0x0c, 0xcc, 0x6f, 0x0d, 0x60, 0x7f, 0xda, 0x63, 0x53,
	0x00, 0x9f, 0x12, 0x25, 0x29, 0x8e, 0x51, 0x56, 0xad, 0xde, 0xb9, 0xc0, 0xd6, 0x34, 0xce, 0x52,
	0x85, 0xf2, 0xb7, 0xbb, 0x0d, 0x1a, 0x0b, 0x00, 0x04, 0x05, 0x6e, 0xcc, 0x3d, 0x8c, 0xd3, 0x7e,
	0x63, 0xd0, 0x1c, 0xee, 0x8d, 0x4f, 0xff, 0x6d, 0x5e, 0xd6, 0x8c, 0x82, 0x37, 0x5a, 0xe7, 0x34,
	0x51, 0x72, 0xe5, 0x74, 0xc4, 0xfa, 0xcc, 0x8e, 0xa0, 0x57, 0x3d, 0x15, 0x97, 0xfb, 0x3e, 0x65,
	0x89, 0x72, 0x13, 0xbe, 0xc4, 0x7e, 0x73, 0x60, 0x0c, 0x3b, 0x0e, 0xab, 0xb0, 0x49, 0x09, 0x9d,
	0xf1, 0x25, 0x9a, 0x4f, 0x60, 0x7f, 0x5b, 0x8e, 0x5d, 0x85, 0xe6, 0x02, 0x57, 0xba, 0xcf, 0x8e,
	0x53, 0x84, 0xac, 0x07, 0xed, 0x9c, 0xc7, 0x19, 0xf6, 0x1b, 0x3a, 0x57, 0x1e, 0x1e, 0x37, 0x1e,
	0x1a, 0xe6, 0x77, 0x03, 0x76, 0xaa, 0x31, 0xb2, 0xbb, 0x70, 0x2d, 0x8f, 0xa4, 0xca, 0x78, 0xec,
	0x26, 0x14, 0x60, 0x59, 0xb8, 0x54, 0x39, 0xa8, 0x80, 0x33, 0x0a, 0xb0, 0xa8, 0xca, 0xce, 0xa1,
	0x2d, 0x48, 0xaa, 0xf5, 0x20, 0x1e, 0xfd, 0xc5, 0xef, 0xb2, 0xa6, 0x94, 0x28, 0x1e, 0x25, 0x28,
	0x67, 0x24, 0x95, 0x53, 0xea, 0x98, 0x4f, 0xa1, 0xbb, 0x95, 0x67, 0x0c, 0x5a, 0x05, 0xa2, 0x0d,
	0x74, 0x1d, 0x1d, 0x33, 0x13, 0x76, 0xf5, 0x6b, 0xf6, 0x29, 0xae, 0x5a, 0xa9, 0xcf, 0x27, 0x07,
	0xd0, 0x5d, 0x2f, 0x8f, 0xab, 0x56, 0x02, 0x0f, 0x27, 0xb0, 0x5f, 0x97, 0x57, 0x5c, 0x65, 0x29,
	0xb3, 0xe1, 0x3a, 0x79, 0xc5, 0x08, 0x31, 0x70, 0xe7, 0x98, 0xa0, 0xe4, 0x2a, 0xa2, 0x44, 0x57,
	0x68, 0x3a, 0x6c, 0x0d, 0x3d, 0xaf, 0x91, 0x93, 0xd9, 0xd7, 0x1f, 0xb7, 0x8d, 0x8f, 0xaf, 0x2e,
	0xb3, 0xcf, 0x62, 0x31, 0xdf, 0xde, 0xe9, 0xcd, 0x39, 0xd4, 0xfb, 0xed, 0xfd, 0xaf, 0xfd, 0xde,
	0xff, 0x15, 0x00, 0x00, 0xff, 0xff, 0x26, 0xab, 0x67, 0x10, 0x24, 0x04, 0x00, 0x00,
}

func (this *WorkloadSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkloadSpec)
	if !ok {
		that2, ok := that.(WorkloadSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.WorkloadType == nil {
		if this.WorkloadType != nil {
			return false
		}
	} else if this.WorkloadType == nil {
		return false
	} else if !this.WorkloadType.Equal(that1.WorkloadType) {
		return false
	}
	if !this.Mesh.Equal(that1.Mesh) {
		return false
	}
	if !this.AppMesh.Equal(that1.AppMesh) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *WorkloadSpec_Kubernetes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkloadSpec_Kubernetes)
	if !ok {
		that2, ok := that.(WorkloadSpec_Kubernetes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Kubernetes.Equal(that1.Kubernetes) {
		return false
	}
	return true
}
func (this *WorkloadSpec_KubernetesWorkload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkloadSpec_KubernetesWorkload)
	if !ok {
		that2, ok := that.(WorkloadSpec_KubernetesWorkload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Controller.Equal(that1.Controller) {
		return false
	}
	if len(this.PodLabels) != len(that1.PodLabels) {
		return false
	}
	for i := range this.PodLabels {
		if this.PodLabels[i] != that1.PodLabels[i] {
			return false
		}
	}
	if this.ServiceAccountName != that1.ServiceAccountName {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *WorkloadSpec_AppMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkloadSpec_AppMesh)
	if !ok {
		that2, ok := that.(WorkloadSpec_AppMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VirtualNodeName != that1.VirtualNodeName {
		return false
	}
	if len(this.Ports) != len(that1.Ports) {
		return false
	}
	for i := range this.Ports {
		if !this.Ports[i].Equal(that1.Ports[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *WorkloadSpec_AppMesh_ContainerPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkloadSpec_AppMesh_ContainerPort)
	if !ok {
		that2, ok := that.(WorkloadSpec_AppMesh_ContainerPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *WorkloadStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkloadStatus)
	if !ok {
		that2, ok := that.(WorkloadStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObservedGeneration != that1.ObservedGeneration {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
