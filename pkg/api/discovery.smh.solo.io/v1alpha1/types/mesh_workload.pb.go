// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/service-mesh-hub/api/discovery/v1alpha1/mesh_workload.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/solo-io/service-mesh-hub/pkg/api/core.smh.solo.io/v1alpha1/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//*
//The MeshWorkload is an abstraction for a workload/client which we have discovered to be part of a
//given mesh. The Mesh object has references to the MeshWorkloads which belong to it.
type MeshWorkloadSpec struct {
	// The controller (e.g. deployment) that owns this workload
	KubeController *MeshWorkloadSpec_KubeController `protobuf:"bytes,1,opt,name=kube_controller,json=kubeController,proto3" json:"kube_controller,omitempty"`
	// The mesh with which this workload is associated
	Mesh *types.ResourceRef `protobuf:"bytes,2,opt,name=mesh,proto3" json:"mesh,omitempty"`
	// Appmesh specific metadata
	Appmesh              *MeshWorkloadSpec_Appmesh `protobuf:"bytes,3,opt,name=appmesh,proto3" json:"appmesh,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *MeshWorkloadSpec) Reset()         { *m = MeshWorkloadSpec{} }
func (m *MeshWorkloadSpec) String() string { return proto.CompactTextString(m) }
func (*MeshWorkloadSpec) ProtoMessage()    {}
func (*MeshWorkloadSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_20997816445c0b02, []int{0}
}
func (m *MeshWorkloadSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshWorkloadSpec.Unmarshal(m, b)
}
func (m *MeshWorkloadSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshWorkloadSpec.Marshal(b, m, deterministic)
}
func (m *MeshWorkloadSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshWorkloadSpec.Merge(m, src)
}
func (m *MeshWorkloadSpec) XXX_Size() int {
	return xxx_messageInfo_MeshWorkloadSpec.Size(m)
}
func (m *MeshWorkloadSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshWorkloadSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MeshWorkloadSpec proto.InternalMessageInfo

func (m *MeshWorkloadSpec) GetKubeController() *MeshWorkloadSpec_KubeController {
	if m != nil {
		return m.KubeController
	}
	return nil
}

func (m *MeshWorkloadSpec) GetMesh() *types.ResourceRef {
	if m != nil {
		return m.Mesh
	}
	return nil
}

func (m *MeshWorkloadSpec) GetAppmesh() *MeshWorkloadSpec_Appmesh {
	if m != nil {
		return m.Appmesh
	}
	return nil
}

type MeshWorkloadSpec_Appmesh struct {
	// The value of the env var APPMESH_VIRTUAL_NODE_NAME on the Appmesh envoy proxy container
	VirtualNodeName string `protobuf:"bytes,1,opt,name=virtual_node_name,json=virtualNodeName,proto3" json:"virtual_node_name,omitempty"`
	// Needed for declaring Appmesh VirtualNode listeners
	Ports                []*MeshWorkloadSpec_Appmesh_ContainerPort `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *MeshWorkloadSpec_Appmesh) Reset()         { *m = MeshWorkloadSpec_Appmesh{} }
func (m *MeshWorkloadSpec_Appmesh) String() string { return proto.CompactTextString(m) }
func (*MeshWorkloadSpec_Appmesh) ProtoMessage()    {}
func (*MeshWorkloadSpec_Appmesh) Descriptor() ([]byte, []int) {
	return fileDescriptor_20997816445c0b02, []int{0, 0}
}
func (m *MeshWorkloadSpec_Appmesh) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshWorkloadSpec_Appmesh.Unmarshal(m, b)
}
func (m *MeshWorkloadSpec_Appmesh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshWorkloadSpec_Appmesh.Marshal(b, m, deterministic)
}
func (m *MeshWorkloadSpec_Appmesh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshWorkloadSpec_Appmesh.Merge(m, src)
}
func (m *MeshWorkloadSpec_Appmesh) XXX_Size() int {
	return xxx_messageInfo_MeshWorkloadSpec_Appmesh.Size(m)
}
func (m *MeshWorkloadSpec_Appmesh) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshWorkloadSpec_Appmesh.DiscardUnknown(m)
}

var xxx_messageInfo_MeshWorkloadSpec_Appmesh proto.InternalMessageInfo

func (m *MeshWorkloadSpec_Appmesh) GetVirtualNodeName() string {
	if m != nil {
		return m.VirtualNodeName
	}
	return ""
}

func (m *MeshWorkloadSpec_Appmesh) GetPorts() []*MeshWorkloadSpec_Appmesh_ContainerPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

// k8s application container ports
type MeshWorkloadSpec_Appmesh_ContainerPort struct {
	Port                 uint32   `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Protocol             string   `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshWorkloadSpec_Appmesh_ContainerPort) Reset() {
	*m = MeshWorkloadSpec_Appmesh_ContainerPort{}
}
func (m *MeshWorkloadSpec_Appmesh_ContainerPort) String() string { return proto.CompactTextString(m) }
func (*MeshWorkloadSpec_Appmesh_ContainerPort) ProtoMessage()    {}
func (*MeshWorkloadSpec_Appmesh_ContainerPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_20997816445c0b02, []int{0, 0, 0}
}
func (m *MeshWorkloadSpec_Appmesh_ContainerPort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshWorkloadSpec_Appmesh_ContainerPort.Unmarshal(m, b)
}
func (m *MeshWorkloadSpec_Appmesh_ContainerPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshWorkloadSpec_Appmesh_ContainerPort.Marshal(b, m, deterministic)
}
func (m *MeshWorkloadSpec_Appmesh_ContainerPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshWorkloadSpec_Appmesh_ContainerPort.Merge(m, src)
}
func (m *MeshWorkloadSpec_Appmesh_ContainerPort) XXX_Size() int {
	return xxx_messageInfo_MeshWorkloadSpec_Appmesh_ContainerPort.Size(m)
}
func (m *MeshWorkloadSpec_Appmesh_ContainerPort) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshWorkloadSpec_Appmesh_ContainerPort.DiscardUnknown(m)
}

var xxx_messageInfo_MeshWorkloadSpec_Appmesh_ContainerPort proto.InternalMessageInfo

func (m *MeshWorkloadSpec_Appmesh_ContainerPort) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *MeshWorkloadSpec_Appmesh_ContainerPort) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type MeshWorkloadSpec_KubeController struct {
	//*
	//Resource ref to the underlying kubernetes controller which is managing the pods associated with the workloads.
	//It has the generic name kube_controller as it can represent either a deployment or a daemonset. Or potentially
	//any other kubernetes object which creates injected pods.
	KubeControllerRef *types.ResourceRef `protobuf:"bytes,1,opt,name=kube_controller_ref,json=kubeControllerRef,proto3" json:"kube_controller_ref,omitempty"`
	//*
	//these are the labels directly from the pods that this controller owns
	//NB: these are NEITHER the matchLabels nor the labels on the controller itself.
	//we need these to determine which services are backed by this workload, and
	//the service backing is determined by the pod labels.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Service account attached to the pods owned by this controller
	ServiceAccountName   string   `protobuf:"bytes,3,opt,name=service_account_name,json=serviceAccountName,proto3" json:"service_account_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshWorkloadSpec_KubeController) Reset()         { *m = MeshWorkloadSpec_KubeController{} }
func (m *MeshWorkloadSpec_KubeController) String() string { return proto.CompactTextString(m) }
func (*MeshWorkloadSpec_KubeController) ProtoMessage()    {}
func (*MeshWorkloadSpec_KubeController) Descriptor() ([]byte, []int) {
	return fileDescriptor_20997816445c0b02, []int{0, 1}
}
func (m *MeshWorkloadSpec_KubeController) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshWorkloadSpec_KubeController.Unmarshal(m, b)
}
func (m *MeshWorkloadSpec_KubeController) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshWorkloadSpec_KubeController.Marshal(b, m, deterministic)
}
func (m *MeshWorkloadSpec_KubeController) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshWorkloadSpec_KubeController.Merge(m, src)
}
func (m *MeshWorkloadSpec_KubeController) XXX_Size() int {
	return xxx_messageInfo_MeshWorkloadSpec_KubeController.Size(m)
}
func (m *MeshWorkloadSpec_KubeController) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshWorkloadSpec_KubeController.DiscardUnknown(m)
}

var xxx_messageInfo_MeshWorkloadSpec_KubeController proto.InternalMessageInfo

func (m *MeshWorkloadSpec_KubeController) GetKubeControllerRef() *types.ResourceRef {
	if m != nil {
		return m.KubeControllerRef
	}
	return nil
}

func (m *MeshWorkloadSpec_KubeController) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MeshWorkloadSpec_KubeController) GetServiceAccountName() string {
	if m != nil {
		return m.ServiceAccountName
	}
	return ""
}

type MeshWorkloadStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshWorkloadStatus) Reset()         { *m = MeshWorkloadStatus{} }
func (m *MeshWorkloadStatus) String() string { return proto.CompactTextString(m) }
func (*MeshWorkloadStatus) ProtoMessage()    {}
func (*MeshWorkloadStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_20997816445c0b02, []int{1}
}
func (m *MeshWorkloadStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshWorkloadStatus.Unmarshal(m, b)
}
func (m *MeshWorkloadStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshWorkloadStatus.Marshal(b, m, deterministic)
}
func (m *MeshWorkloadStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshWorkloadStatus.Merge(m, src)
}
func (m *MeshWorkloadStatus) XXX_Size() int {
	return xxx_messageInfo_MeshWorkloadStatus.Size(m)
}
func (m *MeshWorkloadStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshWorkloadStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MeshWorkloadStatus proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MeshWorkloadSpec)(nil), "discovery.smh.solo.io.MeshWorkloadSpec")
	proto.RegisterType((*MeshWorkloadSpec_Appmesh)(nil), "discovery.smh.solo.io.MeshWorkloadSpec.Appmesh")
	proto.RegisterType((*MeshWorkloadSpec_Appmesh_ContainerPort)(nil), "discovery.smh.solo.io.MeshWorkloadSpec.Appmesh.ContainerPort")
	proto.RegisterType((*MeshWorkloadSpec_KubeController)(nil), "discovery.smh.solo.io.MeshWorkloadSpec.KubeController")
	proto.RegisterMapType((map[string]string)(nil), "discovery.smh.solo.io.MeshWorkloadSpec.KubeController.LabelsEntry")
	proto.RegisterType((*MeshWorkloadStatus)(nil), "discovery.smh.solo.io.MeshWorkloadStatus")
}

func init() {
	proto.RegisterFile("github.com/solo-io/service-mesh-hub/api/discovery/v1alpha1/mesh_workload.proto", fileDescriptor_20997816445c0b02)
}

var fileDescriptor_20997816445c0b02 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x5f, 0x6b, 0x13, 0x41,
	0x10, 0x27, 0x49, 0xd3, 0xda, 0x0d, 0xfd, 0xb7, 0x46, 0x08, 0x07, 0x4a, 0xe9, 0x53, 0x11, 0xb3,
	0x67, 0x2a, 0x88, 0x0a, 0x22, 0xad, 0xf8, 0x20, 0xda, 0x50, 0xb6, 0xa0, 0xd0, 0x97, 0x63, 0x6f,
	0x33, 0xc9, 0x1d, 0xd9, 0xdc, 0x1c, 0xbb, 0x7b, 0x27, 0xf9, 0x46, 0xfd, 0x2e, 0x7e, 0x0b, 0x1f,
	0xfd, 0x14, 0x72, 0x7b, 0xdb, 0xb4, 0x57, 0x0a, 0x46, 0xdf, 0x66, 0x67, 0xe6, 0xf7, 0xe3, 0x37,
	0xf3, 0xdb, 0x21, 0xe3, 0x59, 0x6a, 0x93, 0x22, 0x66, 0x12, 0x17, 0xa1, 0x41, 0x85, 0xc3, 0x14,
	0x43, 0x03, 0xba, 0x4c, 0x25, 0x0c, 0x17, 0x60, 0x92, 0x61, 0x52, 0xc4, 0xa1, 0xc8, 0xd3, 0x70,
	0x92, 0x1a, 0x89, 0x25, 0xe8, 0x65, 0x58, 0x8e, 0x84, 0xca, 0x13, 0x31, 0x0a, 0xab, 0x7a, 0xf4,
	0x03, 0xf5, 0x5c, 0xa1, 0x98, 0xb0, 0x5c, 0xa3, 0x45, 0xfa, 0x64, 0xd5, 0xc7, 0xcc, 0x22, 0x61,
	0x15, 0x25, 0x4b, 0x31, 0x78, 0xf1, 0x20, 0xa7, 0x44, 0x0d, 0xb7, 0x74, 0x1a, 0xa6, 0x35, 0x49,
	0x10, 0xae, 0xd1, 0x6d, 0xac, 0xb0, 0x85, 0xf1, 0x80, 0xfe, 0x0c, 0x67, 0xe8, 0xc2, 0xb0, 0x8a,
	0xea, 0xec, 0xd1, 0xef, 0x2e, 0xd9, 0x3f, 0x07, 0x93, 0x7c, 0xf7, 0x12, 0x2f, 0x73, 0x90, 0x34,
	0x22, 0x7b, 0xf3, 0x22, 0x86, 0x48, 0x62, 0x66, 0x35, 0x2a, 0x05, 0x7a, 0xd0, 0x3a, 0x6c, 0x1d,
	0xf7, 0x4e, 0x5e, 0xb3, 0x07, 0xa5, 0xb3, 0xfb, 0x0c, 0xec, 0x4b, 0x11, 0xc3, 0xc7, 0x15, 0x9a,
	0xef, 0xce, 0x1b, 0x6f, 0x3a, 0x22, 0x1b, 0x95, 0xec, 0x41, 0xdb, 0xb1, 0x3e, 0x65, 0x95, 0xec,
	0x06, 0x21, 0x07, 0x83, 0x85, 0x96, 0xc0, 0x61, 0xca, 0x5d, 0x2b, 0xfd, 0x4c, 0xb6, 0x44, 0x9e,
	0x3b, 0x54, 0xc7, 0xa1, 0xc2, 0x75, 0xb5, 0x9c, 0xd6, 0x30, 0x7e, 0x83, 0x0f, 0x7e, 0xb6, 0xc8,
	0x96, 0x4f, 0xd2, 0xe7, 0xe4, 0xa0, 0x4c, 0xb5, 0x2d, 0x84, 0x8a, 0x32, 0x9c, 0x40, 0x94, 0x89,
	0x05, 0xb8, 0x61, 0xb7, 0xf9, 0x9e, 0x2f, 0x8c, 0x71, 0x02, 0x63, 0xb1, 0x00, 0x7a, 0x49, 0xba,
	0x39, 0x6a, 0x6b, 0x06, 0xed, 0xc3, 0xce, 0x71, 0xef, 0xe4, 0xfd, 0x3f, 0x0a, 0x60, 0xd5, 0x02,
	0x44, 0x9a, 0x81, 0xbe, 0x40, 0x6d, 0x79, 0xcd, 0x15, 0x7c, 0x20, 0x3b, 0x8d, 0x3c, 0xa5, 0x64,
	0xa3, 0xaa, 0x38, 0x11, 0x3b, 0xdc, 0xc5, 0x34, 0x20, 0x8f, 0x9c, 0x5d, 0x12, 0x95, 0xdb, 0xd9,
	0x36, 0x5f, 0xbd, 0x83, 0xeb, 0x36, 0xd9, 0x6d, 0xae, 0x9b, 0x9e, 0x93, 0xc7, 0xf7, 0xfc, 0x8b,
	0x34, 0x4c, 0xbd, 0x87, 0x7f, 0xd9, 0xf6, 0x41, 0xd3, 0x2a, 0x0e, 0x53, 0x7a, 0x45, 0x36, 0x95,
	0x88, 0x41, 0xdd, 0x0c, 0x7e, 0xf6, 0x7f, 0xbf, 0x80, 0x7d, 0x75, 0x24, 0x9f, 0x32, 0xab, 0x97,
	0xdc, 0x33, 0xd2, 0x97, 0xa4, 0xef, 0x3f, 0x72, 0x24, 0xa4, 0xc4, 0x22, 0xb3, 0xb5, 0x05, 0x1d,
	0x37, 0x25, 0xf5, 0xb5, 0xd3, 0xba, 0x54, 0xb9, 0x10, 0xbc, 0x25, 0xbd, 0x3b, 0x44, 0x74, 0x9f,
	0x74, 0xe6, 0xb0, 0xf4, 0x96, 0x55, 0x21, 0xed, 0x93, 0x6e, 0x29, 0x54, 0x01, 0x7e, 0x53, 0xf5,
	0xe3, 0x5d, 0xfb, 0x4d, 0xeb, 0xa8, 0x4f, 0x68, 0x43, 0xa3, 0x3b, 0x8f, 0xb3, 0x6f, 0xd7, 0xbf,
	0x9e, 0xb5, 0xae, 0x2e, 0xd6, 0x39, 0xf2, 0x7c, 0x3e, 0x6b, 0x1e, 0xfa, 0xdd, 0xf9, 0x6f, 0xef,
	0xce, 0x2e, 0x73, 0x30, 0xf1, 0xa6, 0xb3, 0xe8, 0xd5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe5,
	0x31, 0x9d, 0x96, 0x3f, 0x04, 0x00, 0x00,
}

func (this *MeshWorkloadSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshWorkloadSpec)
	if !ok {
		that2, ok := that.(MeshWorkloadSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KubeController.Equal(that1.KubeController) {
		return false
	}
	if !this.Mesh.Equal(that1.Mesh) {
		return false
	}
	if !this.Appmesh.Equal(that1.Appmesh) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshWorkloadSpec_Appmesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshWorkloadSpec_Appmesh)
	if !ok {
		that2, ok := that.(MeshWorkloadSpec_Appmesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VirtualNodeName != that1.VirtualNodeName {
		return false
	}
	if len(this.Ports) != len(that1.Ports) {
		return false
	}
	for i := range this.Ports {
		if !this.Ports[i].Equal(that1.Ports[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshWorkloadSpec_Appmesh_ContainerPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshWorkloadSpec_Appmesh_ContainerPort)
	if !ok {
		that2, ok := that.(MeshWorkloadSpec_Appmesh_ContainerPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshWorkloadSpec_KubeController) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshWorkloadSpec_KubeController)
	if !ok {
		that2, ok := that.(MeshWorkloadSpec_KubeController)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KubeControllerRef.Equal(that1.KubeControllerRef) {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if this.ServiceAccountName != that1.ServiceAccountName {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshWorkloadStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshWorkloadStatus)
	if !ok {
		that2, ok := that.(MeshWorkloadStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
