// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1alpha1 is a generated GoMock package.
package mock_v1alpha1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1alpha1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// KubernetesClusters mocks base method.
func (m *MockClientset) KubernetesClusters() v1alpha1.KubernetesClusterClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubernetesClusters")
	ret0, _ := ret[0].(v1alpha1.KubernetesClusterClient)
	return ret0
}

// KubernetesClusters indicates an expected call of KubernetesClusters.
func (mr *MockClientsetMockRecorder) KubernetesClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubernetesClusters", reflect.TypeOf((*MockClientset)(nil).KubernetesClusters))
}

// MeshServices mocks base method.
func (m *MockClientset) MeshServices() v1alpha1.MeshServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeshServices")
	ret0, _ := ret[0].(v1alpha1.MeshServiceClient)
	return ret0
}

// MeshServices indicates an expected call of MeshServices.
func (mr *MockClientsetMockRecorder) MeshServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeshServices", reflect.TypeOf((*MockClientset)(nil).MeshServices))
}

// MeshWorkloads mocks base method.
func (m *MockClientset) MeshWorkloads() v1alpha1.MeshWorkloadClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeshWorkloads")
	ret0, _ := ret[0].(v1alpha1.MeshWorkloadClient)
	return ret0
}

// MeshWorkloads indicates an expected call of MeshWorkloads.
func (mr *MockClientsetMockRecorder) MeshWorkloads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeshWorkloads", reflect.TypeOf((*MockClientset)(nil).MeshWorkloads))
}

// Meshes mocks base method.
func (m *MockClientset) Meshes() v1alpha1.MeshClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meshes")
	ret0, _ := ret[0].(v1alpha1.MeshClient)
	return ret0
}

// Meshes indicates an expected call of Meshes.
func (mr *MockClientsetMockRecorder) Meshes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meshes", reflect.TypeOf((*MockClientset)(nil).Meshes))
}

// MockKubernetesClusterReader is a mock of KubernetesClusterReader interface.
type MockKubernetesClusterReader struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesClusterReaderMockRecorder
}

// MockKubernetesClusterReaderMockRecorder is the mock recorder for MockKubernetesClusterReader.
type MockKubernetesClusterReaderMockRecorder struct {
	mock *MockKubernetesClusterReader
}

// NewMockKubernetesClusterReader creates a new mock instance.
func NewMockKubernetesClusterReader(ctrl *gomock.Controller) *MockKubernetesClusterReader {
	mock := &MockKubernetesClusterReader{ctrl: ctrl}
	mock.recorder = &MockKubernetesClusterReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesClusterReader) EXPECT() *MockKubernetesClusterReaderMockRecorder {
	return m.recorder
}

// GetKubernetesCluster mocks base method.
func (m *MockKubernetesClusterReader) GetKubernetesCluster(ctx context.Context, key client.ObjectKey) (*v1alpha1.KubernetesCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubernetesCluster", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.KubernetesCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubernetesCluster indicates an expected call of GetKubernetesCluster.
func (mr *MockKubernetesClusterReaderMockRecorder) GetKubernetesCluster(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterReader)(nil).GetKubernetesCluster), ctx, key)
}

// ListKubernetesCluster mocks base method.
func (m *MockKubernetesClusterReader) ListKubernetesCluster(ctx context.Context, opts ...client.ListOption) (*v1alpha1.KubernetesClusterList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKubernetesCluster", varargs...)
	ret0, _ := ret[0].(*v1alpha1.KubernetesClusterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKubernetesCluster indicates an expected call of ListKubernetesCluster.
func (mr *MockKubernetesClusterReaderMockRecorder) ListKubernetesCluster(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterReader)(nil).ListKubernetesCluster), varargs...)
}

// MockKubernetesClusterWriter is a mock of KubernetesClusterWriter interface.
type MockKubernetesClusterWriter struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesClusterWriterMockRecorder
}

// MockKubernetesClusterWriterMockRecorder is the mock recorder for MockKubernetesClusterWriter.
type MockKubernetesClusterWriterMockRecorder struct {
	mock *MockKubernetesClusterWriter
}

// NewMockKubernetesClusterWriter creates a new mock instance.
func NewMockKubernetesClusterWriter(ctrl *gomock.Controller) *MockKubernetesClusterWriter {
	mock := &MockKubernetesClusterWriter{ctrl: ctrl}
	mock.recorder = &MockKubernetesClusterWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesClusterWriter) EXPECT() *MockKubernetesClusterWriterMockRecorder {
	return m.recorder
}

// CreateKubernetesCluster mocks base method.
func (m *MockKubernetesClusterWriter) CreateKubernetesCluster(ctx context.Context, obj *v1alpha1.KubernetesCluster, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKubernetesCluster indicates an expected call of CreateKubernetesCluster.
func (mr *MockKubernetesClusterWriterMockRecorder) CreateKubernetesCluster(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterWriter)(nil).CreateKubernetesCluster), varargs...)
}

// DeleteKubernetesCluster mocks base method.
func (m *MockKubernetesClusterWriter) DeleteKubernetesCluster(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKubernetesCluster indicates an expected call of DeleteKubernetesCluster.
func (mr *MockKubernetesClusterWriterMockRecorder) DeleteKubernetesCluster(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterWriter)(nil).DeleteKubernetesCluster), varargs...)
}

// UpdateKubernetesCluster mocks base method.
func (m *MockKubernetesClusterWriter) UpdateKubernetesCluster(ctx context.Context, obj *v1alpha1.KubernetesCluster, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKubernetesCluster indicates an expected call of UpdateKubernetesCluster.
func (mr *MockKubernetesClusterWriterMockRecorder) UpdateKubernetesCluster(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterWriter)(nil).UpdateKubernetesCluster), varargs...)
}

// PatchKubernetesCluster mocks base method.
func (m *MockKubernetesClusterWriter) PatchKubernetesCluster(ctx context.Context, obj *v1alpha1.KubernetesCluster, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchKubernetesCluster indicates an expected call of PatchKubernetesCluster.
func (mr *MockKubernetesClusterWriterMockRecorder) PatchKubernetesCluster(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterWriter)(nil).PatchKubernetesCluster), varargs...)
}

// DeleteAllOfKubernetesCluster mocks base method.
func (m *MockKubernetesClusterWriter) DeleteAllOfKubernetesCluster(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfKubernetesCluster indicates an expected call of DeleteAllOfKubernetesCluster.
func (mr *MockKubernetesClusterWriterMockRecorder) DeleteAllOfKubernetesCluster(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterWriter)(nil).DeleteAllOfKubernetesCluster), varargs...)
}

// UpsertKubernetesCluster mocks base method.
func (m *MockKubernetesClusterWriter) UpsertKubernetesCluster(ctx context.Context, obj *v1alpha1.KubernetesCluster, transitionFuncs ...v1alpha1.KubernetesClusterTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertKubernetesCluster indicates an expected call of UpsertKubernetesCluster.
func (mr *MockKubernetesClusterWriterMockRecorder) UpsertKubernetesCluster(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterWriter)(nil).UpsertKubernetesCluster), varargs...)
}

// MockKubernetesClusterStatusWriter is a mock of KubernetesClusterStatusWriter interface.
type MockKubernetesClusterStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesClusterStatusWriterMockRecorder
}

// MockKubernetesClusterStatusWriterMockRecorder is the mock recorder for MockKubernetesClusterStatusWriter.
type MockKubernetesClusterStatusWriterMockRecorder struct {
	mock *MockKubernetesClusterStatusWriter
}

// NewMockKubernetesClusterStatusWriter creates a new mock instance.
func NewMockKubernetesClusterStatusWriter(ctrl *gomock.Controller) *MockKubernetesClusterStatusWriter {
	mock := &MockKubernetesClusterStatusWriter{ctrl: ctrl}
	mock.recorder = &MockKubernetesClusterStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesClusterStatusWriter) EXPECT() *MockKubernetesClusterStatusWriterMockRecorder {
	return m.recorder
}

// UpdateKubernetesClusterStatus mocks base method.
func (m *MockKubernetesClusterStatusWriter) UpdateKubernetesClusterStatus(ctx context.Context, obj *v1alpha1.KubernetesCluster, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKubernetesClusterStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKubernetesClusterStatus indicates an expected call of UpdateKubernetesClusterStatus.
func (mr *MockKubernetesClusterStatusWriterMockRecorder) UpdateKubernetesClusterStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKubernetesClusterStatus", reflect.TypeOf((*MockKubernetesClusterStatusWriter)(nil).UpdateKubernetesClusterStatus), varargs...)
}

// PatchKubernetesClusterStatus mocks base method.
func (m *MockKubernetesClusterStatusWriter) PatchKubernetesClusterStatus(ctx context.Context, obj *v1alpha1.KubernetesCluster, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchKubernetesClusterStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchKubernetesClusterStatus indicates an expected call of PatchKubernetesClusterStatus.
func (mr *MockKubernetesClusterStatusWriterMockRecorder) PatchKubernetesClusterStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchKubernetesClusterStatus", reflect.TypeOf((*MockKubernetesClusterStatusWriter)(nil).PatchKubernetesClusterStatus), varargs...)
}

// MockKubernetesClusterClient is a mock of KubernetesClusterClient interface.
type MockKubernetesClusterClient struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesClusterClientMockRecorder
}

// MockKubernetesClusterClientMockRecorder is the mock recorder for MockKubernetesClusterClient.
type MockKubernetesClusterClientMockRecorder struct {
	mock *MockKubernetesClusterClient
}

// NewMockKubernetesClusterClient creates a new mock instance.
func NewMockKubernetesClusterClient(ctrl *gomock.Controller) *MockKubernetesClusterClient {
	mock := &MockKubernetesClusterClient{ctrl: ctrl}
	mock.recorder = &MockKubernetesClusterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesClusterClient) EXPECT() *MockKubernetesClusterClientMockRecorder {
	return m.recorder
}

// GetKubernetesCluster mocks base method.
func (m *MockKubernetesClusterClient) GetKubernetesCluster(ctx context.Context, key client.ObjectKey) (*v1alpha1.KubernetesCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubernetesCluster", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.KubernetesCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubernetesCluster indicates an expected call of GetKubernetesCluster.
func (mr *MockKubernetesClusterClientMockRecorder) GetKubernetesCluster(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterClient)(nil).GetKubernetesCluster), ctx, key)
}

// ListKubernetesCluster mocks base method.
func (m *MockKubernetesClusterClient) ListKubernetesCluster(ctx context.Context, opts ...client.ListOption) (*v1alpha1.KubernetesClusterList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKubernetesCluster", varargs...)
	ret0, _ := ret[0].(*v1alpha1.KubernetesClusterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKubernetesCluster indicates an expected call of ListKubernetesCluster.
func (mr *MockKubernetesClusterClientMockRecorder) ListKubernetesCluster(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterClient)(nil).ListKubernetesCluster), varargs...)
}

// CreateKubernetesCluster mocks base method.
func (m *MockKubernetesClusterClient) CreateKubernetesCluster(ctx context.Context, obj *v1alpha1.KubernetesCluster, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKubernetesCluster indicates an expected call of CreateKubernetesCluster.
func (mr *MockKubernetesClusterClientMockRecorder) CreateKubernetesCluster(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterClient)(nil).CreateKubernetesCluster), varargs...)
}

// DeleteKubernetesCluster mocks base method.
func (m *MockKubernetesClusterClient) DeleteKubernetesCluster(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKubernetesCluster indicates an expected call of DeleteKubernetesCluster.
func (mr *MockKubernetesClusterClientMockRecorder) DeleteKubernetesCluster(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterClient)(nil).DeleteKubernetesCluster), varargs...)
}

// UpdateKubernetesCluster mocks base method.
func (m *MockKubernetesClusterClient) UpdateKubernetesCluster(ctx context.Context, obj *v1alpha1.KubernetesCluster, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKubernetesCluster indicates an expected call of UpdateKubernetesCluster.
func (mr *MockKubernetesClusterClientMockRecorder) UpdateKubernetesCluster(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterClient)(nil).UpdateKubernetesCluster), varargs...)
}

// PatchKubernetesCluster mocks base method.
func (m *MockKubernetesClusterClient) PatchKubernetesCluster(ctx context.Context, obj *v1alpha1.KubernetesCluster, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchKubernetesCluster indicates an expected call of PatchKubernetesCluster.
func (mr *MockKubernetesClusterClientMockRecorder) PatchKubernetesCluster(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterClient)(nil).PatchKubernetesCluster), varargs...)
}

// DeleteAllOfKubernetesCluster mocks base method.
func (m *MockKubernetesClusterClient) DeleteAllOfKubernetesCluster(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfKubernetesCluster indicates an expected call of DeleteAllOfKubernetesCluster.
func (mr *MockKubernetesClusterClientMockRecorder) DeleteAllOfKubernetesCluster(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterClient)(nil).DeleteAllOfKubernetesCluster), varargs...)
}

// UpsertKubernetesCluster mocks base method.
func (m *MockKubernetesClusterClient) UpsertKubernetesCluster(ctx context.Context, obj *v1alpha1.KubernetesCluster, transitionFuncs ...v1alpha1.KubernetesClusterTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertKubernetesCluster indicates an expected call of UpsertKubernetesCluster.
func (mr *MockKubernetesClusterClientMockRecorder) UpsertKubernetesCluster(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterClient)(nil).UpsertKubernetesCluster), varargs...)
}

// UpdateKubernetesClusterStatus mocks base method.
func (m *MockKubernetesClusterClient) UpdateKubernetesClusterStatus(ctx context.Context, obj *v1alpha1.KubernetesCluster, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKubernetesClusterStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKubernetesClusterStatus indicates an expected call of UpdateKubernetesClusterStatus.
func (mr *MockKubernetesClusterClientMockRecorder) UpdateKubernetesClusterStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKubernetesClusterStatus", reflect.TypeOf((*MockKubernetesClusterClient)(nil).UpdateKubernetesClusterStatus), varargs...)
}

// PatchKubernetesClusterStatus mocks base method.
func (m *MockKubernetesClusterClient) PatchKubernetesClusterStatus(ctx context.Context, obj *v1alpha1.KubernetesCluster, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchKubernetesClusterStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchKubernetesClusterStatus indicates an expected call of PatchKubernetesClusterStatus.
func (mr *MockKubernetesClusterClientMockRecorder) PatchKubernetesClusterStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchKubernetesClusterStatus", reflect.TypeOf((*MockKubernetesClusterClient)(nil).PatchKubernetesClusterStatus), varargs...)
}

// MockMulticlusterKubernetesClusterClient is a mock of MulticlusterKubernetesClusterClient interface.
type MockMulticlusterKubernetesClusterClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterKubernetesClusterClientMockRecorder
}

// MockMulticlusterKubernetesClusterClientMockRecorder is the mock recorder for MockMulticlusterKubernetesClusterClient.
type MockMulticlusterKubernetesClusterClientMockRecorder struct {
	mock *MockMulticlusterKubernetesClusterClient
}

// NewMockMulticlusterKubernetesClusterClient creates a new mock instance.
func NewMockMulticlusterKubernetesClusterClient(ctrl *gomock.Controller) *MockMulticlusterKubernetesClusterClient {
	mock := &MockMulticlusterKubernetesClusterClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterKubernetesClusterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterKubernetesClusterClient) EXPECT() *MockMulticlusterKubernetesClusterClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterKubernetesClusterClient) Cluster(cluster string) (v1alpha1.KubernetesClusterClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.KubernetesClusterClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterKubernetesClusterClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterKubernetesClusterClient)(nil).Cluster), cluster)
}

// MockMeshServiceReader is a mock of MeshServiceReader interface.
type MockMeshServiceReader struct {
	ctrl     *gomock.Controller
	recorder *MockMeshServiceReaderMockRecorder
}

// MockMeshServiceReaderMockRecorder is the mock recorder for MockMeshServiceReader.
type MockMeshServiceReaderMockRecorder struct {
	mock *MockMeshServiceReader
}

// NewMockMeshServiceReader creates a new mock instance.
func NewMockMeshServiceReader(ctrl *gomock.Controller) *MockMeshServiceReader {
	mock := &MockMeshServiceReader{ctrl: ctrl}
	mock.recorder = &MockMeshServiceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshServiceReader) EXPECT() *MockMeshServiceReaderMockRecorder {
	return m.recorder
}

// GetMeshService mocks base method.
func (m *MockMeshServiceReader) GetMeshService(ctx context.Context, key client.ObjectKey) (*v1alpha1.MeshService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshService", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.MeshService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshService indicates an expected call of GetMeshService.
func (mr *MockMeshServiceReaderMockRecorder) GetMeshService(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshService", reflect.TypeOf((*MockMeshServiceReader)(nil).GetMeshService), ctx, key)
}

// ListMeshService mocks base method.
func (m *MockMeshServiceReader) ListMeshService(ctx context.Context, opts ...client.ListOption) (*v1alpha1.MeshServiceList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMeshService", varargs...)
	ret0, _ := ret[0].(*v1alpha1.MeshServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshService indicates an expected call of ListMeshService.
func (mr *MockMeshServiceReaderMockRecorder) ListMeshService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshService", reflect.TypeOf((*MockMeshServiceReader)(nil).ListMeshService), varargs...)
}

// MockMeshServiceWriter is a mock of MeshServiceWriter interface.
type MockMeshServiceWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMeshServiceWriterMockRecorder
}

// MockMeshServiceWriterMockRecorder is the mock recorder for MockMeshServiceWriter.
type MockMeshServiceWriterMockRecorder struct {
	mock *MockMeshServiceWriter
}

// NewMockMeshServiceWriter creates a new mock instance.
func NewMockMeshServiceWriter(ctrl *gomock.Controller) *MockMeshServiceWriter {
	mock := &MockMeshServiceWriter{ctrl: ctrl}
	mock.recorder = &MockMeshServiceWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshServiceWriter) EXPECT() *MockMeshServiceWriterMockRecorder {
	return m.recorder
}

// CreateMeshService mocks base method.
func (m *MockMeshServiceWriter) CreateMeshService(ctx context.Context, obj *v1alpha1.MeshService, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMeshService indicates an expected call of CreateMeshService.
func (mr *MockMeshServiceWriterMockRecorder) CreateMeshService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshService", reflect.TypeOf((*MockMeshServiceWriter)(nil).CreateMeshService), varargs...)
}

// DeleteMeshService mocks base method.
func (m *MockMeshServiceWriter) DeleteMeshService(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMeshService indicates an expected call of DeleteMeshService.
func (mr *MockMeshServiceWriterMockRecorder) DeleteMeshService(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshService", reflect.TypeOf((*MockMeshServiceWriter)(nil).DeleteMeshService), varargs...)
}

// UpdateMeshService mocks base method.
func (m *MockMeshServiceWriter) UpdateMeshService(ctx context.Context, obj *v1alpha1.MeshService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshService indicates an expected call of UpdateMeshService.
func (mr *MockMeshServiceWriterMockRecorder) UpdateMeshService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshService", reflect.TypeOf((*MockMeshServiceWriter)(nil).UpdateMeshService), varargs...)
}

// PatchMeshService mocks base method.
func (m *MockMeshServiceWriter) PatchMeshService(ctx context.Context, obj *v1alpha1.MeshService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshService indicates an expected call of PatchMeshService.
func (mr *MockMeshServiceWriterMockRecorder) PatchMeshService(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshService", reflect.TypeOf((*MockMeshServiceWriter)(nil).PatchMeshService), varargs...)
}

// DeleteAllOfMeshService mocks base method.
func (m *MockMeshServiceWriter) DeleteAllOfMeshService(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMeshService indicates an expected call of DeleteAllOfMeshService.
func (mr *MockMeshServiceWriterMockRecorder) DeleteAllOfMeshService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMeshService", reflect.TypeOf((*MockMeshServiceWriter)(nil).DeleteAllOfMeshService), varargs...)
}

// UpsertMeshService mocks base method.
func (m *MockMeshServiceWriter) UpsertMeshService(ctx context.Context, obj *v1alpha1.MeshService, transitionFuncs ...v1alpha1.MeshServiceTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMeshService indicates an expected call of UpsertMeshService.
func (mr *MockMeshServiceWriterMockRecorder) UpsertMeshService(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMeshService", reflect.TypeOf((*MockMeshServiceWriter)(nil).UpsertMeshService), varargs...)
}

// MockMeshServiceStatusWriter is a mock of MeshServiceStatusWriter interface.
type MockMeshServiceStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMeshServiceStatusWriterMockRecorder
}

// MockMeshServiceStatusWriterMockRecorder is the mock recorder for MockMeshServiceStatusWriter.
type MockMeshServiceStatusWriterMockRecorder struct {
	mock *MockMeshServiceStatusWriter
}

// NewMockMeshServiceStatusWriter creates a new mock instance.
func NewMockMeshServiceStatusWriter(ctrl *gomock.Controller) *MockMeshServiceStatusWriter {
	mock := &MockMeshServiceStatusWriter{ctrl: ctrl}
	mock.recorder = &MockMeshServiceStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshServiceStatusWriter) EXPECT() *MockMeshServiceStatusWriterMockRecorder {
	return m.recorder
}

// UpdateMeshServiceStatus mocks base method.
func (m *MockMeshServiceStatusWriter) UpdateMeshServiceStatus(ctx context.Context, obj *v1alpha1.MeshService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshServiceStatus indicates an expected call of UpdateMeshServiceStatus.
func (mr *MockMeshServiceStatusWriterMockRecorder) UpdateMeshServiceStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshServiceStatus", reflect.TypeOf((*MockMeshServiceStatusWriter)(nil).UpdateMeshServiceStatus), varargs...)
}

// PatchMeshServiceStatus mocks base method.
func (m *MockMeshServiceStatusWriter) PatchMeshServiceStatus(ctx context.Context, obj *v1alpha1.MeshService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshServiceStatus indicates an expected call of PatchMeshServiceStatus.
func (mr *MockMeshServiceStatusWriterMockRecorder) PatchMeshServiceStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshServiceStatus", reflect.TypeOf((*MockMeshServiceStatusWriter)(nil).PatchMeshServiceStatus), varargs...)
}

// MockMeshServiceClient is a mock of MeshServiceClient interface.
type MockMeshServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeshServiceClientMockRecorder
}

// MockMeshServiceClientMockRecorder is the mock recorder for MockMeshServiceClient.
type MockMeshServiceClientMockRecorder struct {
	mock *MockMeshServiceClient
}

// NewMockMeshServiceClient creates a new mock instance.
func NewMockMeshServiceClient(ctrl *gomock.Controller) *MockMeshServiceClient {
	mock := &MockMeshServiceClient{ctrl: ctrl}
	mock.recorder = &MockMeshServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshServiceClient) EXPECT() *MockMeshServiceClientMockRecorder {
	return m.recorder
}

// GetMeshService mocks base method.
func (m *MockMeshServiceClient) GetMeshService(ctx context.Context, key client.ObjectKey) (*v1alpha1.MeshService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshService", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.MeshService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshService indicates an expected call of GetMeshService.
func (mr *MockMeshServiceClientMockRecorder) GetMeshService(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshService", reflect.TypeOf((*MockMeshServiceClient)(nil).GetMeshService), ctx, key)
}

// ListMeshService mocks base method.
func (m *MockMeshServiceClient) ListMeshService(ctx context.Context, opts ...client.ListOption) (*v1alpha1.MeshServiceList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMeshService", varargs...)
	ret0, _ := ret[0].(*v1alpha1.MeshServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshService indicates an expected call of ListMeshService.
func (mr *MockMeshServiceClientMockRecorder) ListMeshService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshService", reflect.TypeOf((*MockMeshServiceClient)(nil).ListMeshService), varargs...)
}

// CreateMeshService mocks base method.
func (m *MockMeshServiceClient) CreateMeshService(ctx context.Context, obj *v1alpha1.MeshService, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMeshService indicates an expected call of CreateMeshService.
func (mr *MockMeshServiceClientMockRecorder) CreateMeshService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshService", reflect.TypeOf((*MockMeshServiceClient)(nil).CreateMeshService), varargs...)
}

// DeleteMeshService mocks base method.
func (m *MockMeshServiceClient) DeleteMeshService(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMeshService indicates an expected call of DeleteMeshService.
func (mr *MockMeshServiceClientMockRecorder) DeleteMeshService(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshService", reflect.TypeOf((*MockMeshServiceClient)(nil).DeleteMeshService), varargs...)
}

// UpdateMeshService mocks base method.
func (m *MockMeshServiceClient) UpdateMeshService(ctx context.Context, obj *v1alpha1.MeshService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshService indicates an expected call of UpdateMeshService.
func (mr *MockMeshServiceClientMockRecorder) UpdateMeshService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshService", reflect.TypeOf((*MockMeshServiceClient)(nil).UpdateMeshService), varargs...)
}

// PatchMeshService mocks base method.
func (m *MockMeshServiceClient) PatchMeshService(ctx context.Context, obj *v1alpha1.MeshService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshService indicates an expected call of PatchMeshService.
func (mr *MockMeshServiceClientMockRecorder) PatchMeshService(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshService", reflect.TypeOf((*MockMeshServiceClient)(nil).PatchMeshService), varargs...)
}

// DeleteAllOfMeshService mocks base method.
func (m *MockMeshServiceClient) DeleteAllOfMeshService(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMeshService indicates an expected call of DeleteAllOfMeshService.
func (mr *MockMeshServiceClientMockRecorder) DeleteAllOfMeshService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMeshService", reflect.TypeOf((*MockMeshServiceClient)(nil).DeleteAllOfMeshService), varargs...)
}

// UpsertMeshService mocks base method.
func (m *MockMeshServiceClient) UpsertMeshService(ctx context.Context, obj *v1alpha1.MeshService, transitionFuncs ...v1alpha1.MeshServiceTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMeshService indicates an expected call of UpsertMeshService.
func (mr *MockMeshServiceClientMockRecorder) UpsertMeshService(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMeshService", reflect.TypeOf((*MockMeshServiceClient)(nil).UpsertMeshService), varargs...)
}

// UpdateMeshServiceStatus mocks base method.
func (m *MockMeshServiceClient) UpdateMeshServiceStatus(ctx context.Context, obj *v1alpha1.MeshService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshServiceStatus indicates an expected call of UpdateMeshServiceStatus.
func (mr *MockMeshServiceClientMockRecorder) UpdateMeshServiceStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshServiceStatus", reflect.TypeOf((*MockMeshServiceClient)(nil).UpdateMeshServiceStatus), varargs...)
}

// PatchMeshServiceStatus mocks base method.
func (m *MockMeshServiceClient) PatchMeshServiceStatus(ctx context.Context, obj *v1alpha1.MeshService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshServiceStatus indicates an expected call of PatchMeshServiceStatus.
func (mr *MockMeshServiceClientMockRecorder) PatchMeshServiceStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshServiceStatus", reflect.TypeOf((*MockMeshServiceClient)(nil).PatchMeshServiceStatus), varargs...)
}

// MockMulticlusterMeshServiceClient is a mock of MulticlusterMeshServiceClient interface.
type MockMulticlusterMeshServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMeshServiceClientMockRecorder
}

// MockMulticlusterMeshServiceClientMockRecorder is the mock recorder for MockMulticlusterMeshServiceClient.
type MockMulticlusterMeshServiceClientMockRecorder struct {
	mock *MockMulticlusterMeshServiceClient
}

// NewMockMulticlusterMeshServiceClient creates a new mock instance.
func NewMockMulticlusterMeshServiceClient(ctrl *gomock.Controller) *MockMulticlusterMeshServiceClient {
	mock := &MockMulticlusterMeshServiceClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMeshServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMeshServiceClient) EXPECT() *MockMulticlusterMeshServiceClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterMeshServiceClient) Cluster(cluster string) (v1alpha1.MeshServiceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.MeshServiceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterMeshServiceClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterMeshServiceClient)(nil).Cluster), cluster)
}

// MockMeshWorkloadReader is a mock of MeshWorkloadReader interface.
type MockMeshWorkloadReader struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadReaderMockRecorder
}

// MockMeshWorkloadReaderMockRecorder is the mock recorder for MockMeshWorkloadReader.
type MockMeshWorkloadReaderMockRecorder struct {
	mock *MockMeshWorkloadReader
}

// NewMockMeshWorkloadReader creates a new mock instance.
func NewMockMeshWorkloadReader(ctrl *gomock.Controller) *MockMeshWorkloadReader {
	mock := &MockMeshWorkloadReader{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshWorkloadReader) EXPECT() *MockMeshWorkloadReaderMockRecorder {
	return m.recorder
}

// GetMeshWorkload mocks base method.
func (m *MockMeshWorkloadReader) GetMeshWorkload(ctx context.Context, key client.ObjectKey) (*v1alpha1.MeshWorkload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshWorkload", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.MeshWorkload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshWorkload indicates an expected call of GetMeshWorkload.
func (mr *MockMeshWorkloadReaderMockRecorder) GetMeshWorkload(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshWorkload", reflect.TypeOf((*MockMeshWorkloadReader)(nil).GetMeshWorkload), ctx, key)
}

// ListMeshWorkload mocks base method.
func (m *MockMeshWorkloadReader) ListMeshWorkload(ctx context.Context, opts ...client.ListOption) (*v1alpha1.MeshWorkloadList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMeshWorkload", varargs...)
	ret0, _ := ret[0].(*v1alpha1.MeshWorkloadList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshWorkload indicates an expected call of ListMeshWorkload.
func (mr *MockMeshWorkloadReaderMockRecorder) ListMeshWorkload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshWorkload", reflect.TypeOf((*MockMeshWorkloadReader)(nil).ListMeshWorkload), varargs...)
}

// MockMeshWorkloadWriter is a mock of MeshWorkloadWriter interface.
type MockMeshWorkloadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadWriterMockRecorder
}

// MockMeshWorkloadWriterMockRecorder is the mock recorder for MockMeshWorkloadWriter.
type MockMeshWorkloadWriterMockRecorder struct {
	mock *MockMeshWorkloadWriter
}

// NewMockMeshWorkloadWriter creates a new mock instance.
func NewMockMeshWorkloadWriter(ctrl *gomock.Controller) *MockMeshWorkloadWriter {
	mock := &MockMeshWorkloadWriter{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshWorkloadWriter) EXPECT() *MockMeshWorkloadWriterMockRecorder {
	return m.recorder
}

// CreateMeshWorkload mocks base method.
func (m *MockMeshWorkloadWriter) CreateMeshWorkload(ctx context.Context, obj *v1alpha1.MeshWorkload, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMeshWorkload indicates an expected call of CreateMeshWorkload.
func (mr *MockMeshWorkloadWriterMockRecorder) CreateMeshWorkload(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshWorkload", reflect.TypeOf((*MockMeshWorkloadWriter)(nil).CreateMeshWorkload), varargs...)
}

// DeleteMeshWorkload mocks base method.
func (m *MockMeshWorkloadWriter) DeleteMeshWorkload(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMeshWorkload indicates an expected call of DeleteMeshWorkload.
func (mr *MockMeshWorkloadWriterMockRecorder) DeleteMeshWorkload(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshWorkload", reflect.TypeOf((*MockMeshWorkloadWriter)(nil).DeleteMeshWorkload), varargs...)
}

// UpdateMeshWorkload mocks base method.
func (m *MockMeshWorkloadWriter) UpdateMeshWorkload(ctx context.Context, obj *v1alpha1.MeshWorkload, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshWorkload indicates an expected call of UpdateMeshWorkload.
func (mr *MockMeshWorkloadWriterMockRecorder) UpdateMeshWorkload(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshWorkload", reflect.TypeOf((*MockMeshWorkloadWriter)(nil).UpdateMeshWorkload), varargs...)
}

// PatchMeshWorkload mocks base method.
func (m *MockMeshWorkloadWriter) PatchMeshWorkload(ctx context.Context, obj *v1alpha1.MeshWorkload, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshWorkload indicates an expected call of PatchMeshWorkload.
func (mr *MockMeshWorkloadWriterMockRecorder) PatchMeshWorkload(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshWorkload", reflect.TypeOf((*MockMeshWorkloadWriter)(nil).PatchMeshWorkload), varargs...)
}

// DeleteAllOfMeshWorkload mocks base method.
func (m *MockMeshWorkloadWriter) DeleteAllOfMeshWorkload(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMeshWorkload indicates an expected call of DeleteAllOfMeshWorkload.
func (mr *MockMeshWorkloadWriterMockRecorder) DeleteAllOfMeshWorkload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMeshWorkload", reflect.TypeOf((*MockMeshWorkloadWriter)(nil).DeleteAllOfMeshWorkload), varargs...)
}

// UpsertMeshWorkload mocks base method.
func (m *MockMeshWorkloadWriter) UpsertMeshWorkload(ctx context.Context, obj *v1alpha1.MeshWorkload, transitionFuncs ...v1alpha1.MeshWorkloadTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMeshWorkload indicates an expected call of UpsertMeshWorkload.
func (mr *MockMeshWorkloadWriterMockRecorder) UpsertMeshWorkload(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMeshWorkload", reflect.TypeOf((*MockMeshWorkloadWriter)(nil).UpsertMeshWorkload), varargs...)
}

// MockMeshWorkloadStatusWriter is a mock of MeshWorkloadStatusWriter interface.
type MockMeshWorkloadStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadStatusWriterMockRecorder
}

// MockMeshWorkloadStatusWriterMockRecorder is the mock recorder for MockMeshWorkloadStatusWriter.
type MockMeshWorkloadStatusWriterMockRecorder struct {
	mock *MockMeshWorkloadStatusWriter
}

// NewMockMeshWorkloadStatusWriter creates a new mock instance.
func NewMockMeshWorkloadStatusWriter(ctrl *gomock.Controller) *MockMeshWorkloadStatusWriter {
	mock := &MockMeshWorkloadStatusWriter{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshWorkloadStatusWriter) EXPECT() *MockMeshWorkloadStatusWriterMockRecorder {
	return m.recorder
}

// UpdateMeshWorkloadStatus mocks base method.
func (m *MockMeshWorkloadStatusWriter) UpdateMeshWorkloadStatus(ctx context.Context, obj *v1alpha1.MeshWorkload, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshWorkloadStatus indicates an expected call of UpdateMeshWorkloadStatus.
func (mr *MockMeshWorkloadStatusWriterMockRecorder) UpdateMeshWorkloadStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshWorkloadStatus", reflect.TypeOf((*MockMeshWorkloadStatusWriter)(nil).UpdateMeshWorkloadStatus), varargs...)
}

// PatchMeshWorkloadStatus mocks base method.
func (m *MockMeshWorkloadStatusWriter) PatchMeshWorkloadStatus(ctx context.Context, obj *v1alpha1.MeshWorkload, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshWorkloadStatus indicates an expected call of PatchMeshWorkloadStatus.
func (mr *MockMeshWorkloadStatusWriterMockRecorder) PatchMeshWorkloadStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshWorkloadStatus", reflect.TypeOf((*MockMeshWorkloadStatusWriter)(nil).PatchMeshWorkloadStatus), varargs...)
}

// MockMeshWorkloadClient is a mock of MeshWorkloadClient interface.
type MockMeshWorkloadClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadClientMockRecorder
}

// MockMeshWorkloadClientMockRecorder is the mock recorder for MockMeshWorkloadClient.
type MockMeshWorkloadClientMockRecorder struct {
	mock *MockMeshWorkloadClient
}

// NewMockMeshWorkloadClient creates a new mock instance.
func NewMockMeshWorkloadClient(ctrl *gomock.Controller) *MockMeshWorkloadClient {
	mock := &MockMeshWorkloadClient{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshWorkloadClient) EXPECT() *MockMeshWorkloadClientMockRecorder {
	return m.recorder
}

// GetMeshWorkload mocks base method.
func (m *MockMeshWorkloadClient) GetMeshWorkload(ctx context.Context, key client.ObjectKey) (*v1alpha1.MeshWorkload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshWorkload", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.MeshWorkload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshWorkload indicates an expected call of GetMeshWorkload.
func (mr *MockMeshWorkloadClientMockRecorder) GetMeshWorkload(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).GetMeshWorkload), ctx, key)
}

// ListMeshWorkload mocks base method.
func (m *MockMeshWorkloadClient) ListMeshWorkload(ctx context.Context, opts ...client.ListOption) (*v1alpha1.MeshWorkloadList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMeshWorkload", varargs...)
	ret0, _ := ret[0].(*v1alpha1.MeshWorkloadList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshWorkload indicates an expected call of ListMeshWorkload.
func (mr *MockMeshWorkloadClientMockRecorder) ListMeshWorkload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).ListMeshWorkload), varargs...)
}

// CreateMeshWorkload mocks base method.
func (m *MockMeshWorkloadClient) CreateMeshWorkload(ctx context.Context, obj *v1alpha1.MeshWorkload, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMeshWorkload indicates an expected call of CreateMeshWorkload.
func (mr *MockMeshWorkloadClientMockRecorder) CreateMeshWorkload(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).CreateMeshWorkload), varargs...)
}

// DeleteMeshWorkload mocks base method.
func (m *MockMeshWorkloadClient) DeleteMeshWorkload(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMeshWorkload indicates an expected call of DeleteMeshWorkload.
func (mr *MockMeshWorkloadClientMockRecorder) DeleteMeshWorkload(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).DeleteMeshWorkload), varargs...)
}

// UpdateMeshWorkload mocks base method.
func (m *MockMeshWorkloadClient) UpdateMeshWorkload(ctx context.Context, obj *v1alpha1.MeshWorkload, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshWorkload indicates an expected call of UpdateMeshWorkload.
func (mr *MockMeshWorkloadClientMockRecorder) UpdateMeshWorkload(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).UpdateMeshWorkload), varargs...)
}

// PatchMeshWorkload mocks base method.
func (m *MockMeshWorkloadClient) PatchMeshWorkload(ctx context.Context, obj *v1alpha1.MeshWorkload, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshWorkload indicates an expected call of PatchMeshWorkload.
func (mr *MockMeshWorkloadClientMockRecorder) PatchMeshWorkload(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).PatchMeshWorkload), varargs...)
}

// DeleteAllOfMeshWorkload mocks base method.
func (m *MockMeshWorkloadClient) DeleteAllOfMeshWorkload(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMeshWorkload indicates an expected call of DeleteAllOfMeshWorkload.
func (mr *MockMeshWorkloadClientMockRecorder) DeleteAllOfMeshWorkload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).DeleteAllOfMeshWorkload), varargs...)
}

// UpsertMeshWorkload mocks base method.
func (m *MockMeshWorkloadClient) UpsertMeshWorkload(ctx context.Context, obj *v1alpha1.MeshWorkload, transitionFuncs ...v1alpha1.MeshWorkloadTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMeshWorkload indicates an expected call of UpsertMeshWorkload.
func (mr *MockMeshWorkloadClientMockRecorder) UpsertMeshWorkload(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).UpsertMeshWorkload), varargs...)
}

// UpdateMeshWorkloadStatus mocks base method.
func (m *MockMeshWorkloadClient) UpdateMeshWorkloadStatus(ctx context.Context, obj *v1alpha1.MeshWorkload, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshWorkloadStatus indicates an expected call of UpdateMeshWorkloadStatus.
func (mr *MockMeshWorkloadClientMockRecorder) UpdateMeshWorkloadStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshWorkloadStatus", reflect.TypeOf((*MockMeshWorkloadClient)(nil).UpdateMeshWorkloadStatus), varargs...)
}

// PatchMeshWorkloadStatus mocks base method.
func (m *MockMeshWorkloadClient) PatchMeshWorkloadStatus(ctx context.Context, obj *v1alpha1.MeshWorkload, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshWorkloadStatus indicates an expected call of PatchMeshWorkloadStatus.
func (mr *MockMeshWorkloadClientMockRecorder) PatchMeshWorkloadStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshWorkloadStatus", reflect.TypeOf((*MockMeshWorkloadClient)(nil).PatchMeshWorkloadStatus), varargs...)
}

// MockMulticlusterMeshWorkloadClient is a mock of MulticlusterMeshWorkloadClient interface.
type MockMulticlusterMeshWorkloadClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMeshWorkloadClientMockRecorder
}

// MockMulticlusterMeshWorkloadClientMockRecorder is the mock recorder for MockMulticlusterMeshWorkloadClient.
type MockMulticlusterMeshWorkloadClientMockRecorder struct {
	mock *MockMulticlusterMeshWorkloadClient
}

// NewMockMulticlusterMeshWorkloadClient creates a new mock instance.
func NewMockMulticlusterMeshWorkloadClient(ctrl *gomock.Controller) *MockMulticlusterMeshWorkloadClient {
	mock := &MockMulticlusterMeshWorkloadClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMeshWorkloadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMeshWorkloadClient) EXPECT() *MockMulticlusterMeshWorkloadClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterMeshWorkloadClient) Cluster(cluster string) (v1alpha1.MeshWorkloadClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.MeshWorkloadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterMeshWorkloadClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterMeshWorkloadClient)(nil).Cluster), cluster)
}

// MockMeshReader is a mock of MeshReader interface.
type MockMeshReader struct {
	ctrl     *gomock.Controller
	recorder *MockMeshReaderMockRecorder
}

// MockMeshReaderMockRecorder is the mock recorder for MockMeshReader.
type MockMeshReaderMockRecorder struct {
	mock *MockMeshReader
}

// NewMockMeshReader creates a new mock instance.
func NewMockMeshReader(ctrl *gomock.Controller) *MockMeshReader {
	mock := &MockMeshReader{ctrl: ctrl}
	mock.recorder = &MockMeshReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshReader) EXPECT() *MockMeshReaderMockRecorder {
	return m.recorder
}

// GetMesh mocks base method.
func (m *MockMeshReader) GetMesh(ctx context.Context, key client.ObjectKey) (*v1alpha1.Mesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMesh", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.Mesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMesh indicates an expected call of GetMesh.
func (mr *MockMeshReaderMockRecorder) GetMesh(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMesh", reflect.TypeOf((*MockMeshReader)(nil).GetMesh), ctx, key)
}

// ListMesh mocks base method.
func (m *MockMeshReader) ListMesh(ctx context.Context, opts ...client.ListOption) (*v1alpha1.MeshList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMesh", varargs...)
	ret0, _ := ret[0].(*v1alpha1.MeshList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMesh indicates an expected call of ListMesh.
func (mr *MockMeshReaderMockRecorder) ListMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMesh", reflect.TypeOf((*MockMeshReader)(nil).ListMesh), varargs...)
}

// MockMeshWriter is a mock of MeshWriter interface.
type MockMeshWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWriterMockRecorder
}

// MockMeshWriterMockRecorder is the mock recorder for MockMeshWriter.
type MockMeshWriterMockRecorder struct {
	mock *MockMeshWriter
}

// NewMockMeshWriter creates a new mock instance.
func NewMockMeshWriter(ctrl *gomock.Controller) *MockMeshWriter {
	mock := &MockMeshWriter{ctrl: ctrl}
	mock.recorder = &MockMeshWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshWriter) EXPECT() *MockMeshWriterMockRecorder {
	return m.recorder
}

// CreateMesh mocks base method.
func (m *MockMeshWriter) CreateMesh(ctx context.Context, obj *v1alpha1.Mesh, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMesh indicates an expected call of CreateMesh.
func (mr *MockMeshWriterMockRecorder) CreateMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMesh", reflect.TypeOf((*MockMeshWriter)(nil).CreateMesh), varargs...)
}

// DeleteMesh mocks base method.
func (m *MockMeshWriter) DeleteMesh(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMesh indicates an expected call of DeleteMesh.
func (mr *MockMeshWriterMockRecorder) DeleteMesh(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMesh", reflect.TypeOf((*MockMeshWriter)(nil).DeleteMesh), varargs...)
}

// UpdateMesh mocks base method.
func (m *MockMeshWriter) UpdateMesh(ctx context.Context, obj *v1alpha1.Mesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMesh indicates an expected call of UpdateMesh.
func (mr *MockMeshWriterMockRecorder) UpdateMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMesh", reflect.TypeOf((*MockMeshWriter)(nil).UpdateMesh), varargs...)
}

// PatchMesh mocks base method.
func (m *MockMeshWriter) PatchMesh(ctx context.Context, obj *v1alpha1.Mesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMesh indicates an expected call of PatchMesh.
func (mr *MockMeshWriterMockRecorder) PatchMesh(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMesh", reflect.TypeOf((*MockMeshWriter)(nil).PatchMesh), varargs...)
}

// DeleteAllOfMesh mocks base method.
func (m *MockMeshWriter) DeleteAllOfMesh(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMesh indicates an expected call of DeleteAllOfMesh.
func (mr *MockMeshWriterMockRecorder) DeleteAllOfMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMesh", reflect.TypeOf((*MockMeshWriter)(nil).DeleteAllOfMesh), varargs...)
}

// UpsertMesh mocks base method.
func (m *MockMeshWriter) UpsertMesh(ctx context.Context, obj *v1alpha1.Mesh, transitionFuncs ...v1alpha1.MeshTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMesh indicates an expected call of UpsertMesh.
func (mr *MockMeshWriterMockRecorder) UpsertMesh(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMesh", reflect.TypeOf((*MockMeshWriter)(nil).UpsertMesh), varargs...)
}

// MockMeshStatusWriter is a mock of MeshStatusWriter interface.
type MockMeshStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMeshStatusWriterMockRecorder
}

// MockMeshStatusWriterMockRecorder is the mock recorder for MockMeshStatusWriter.
type MockMeshStatusWriterMockRecorder struct {
	mock *MockMeshStatusWriter
}

// NewMockMeshStatusWriter creates a new mock instance.
func NewMockMeshStatusWriter(ctrl *gomock.Controller) *MockMeshStatusWriter {
	mock := &MockMeshStatusWriter{ctrl: ctrl}
	mock.recorder = &MockMeshStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshStatusWriter) EXPECT() *MockMeshStatusWriterMockRecorder {
	return m.recorder
}

// UpdateMeshStatus mocks base method.
func (m *MockMeshStatusWriter) UpdateMeshStatus(ctx context.Context, obj *v1alpha1.Mesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshStatus indicates an expected call of UpdateMeshStatus.
func (mr *MockMeshStatusWriterMockRecorder) UpdateMeshStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshStatus", reflect.TypeOf((*MockMeshStatusWriter)(nil).UpdateMeshStatus), varargs...)
}

// PatchMeshStatus mocks base method.
func (m *MockMeshStatusWriter) PatchMeshStatus(ctx context.Context, obj *v1alpha1.Mesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshStatus indicates an expected call of PatchMeshStatus.
func (mr *MockMeshStatusWriterMockRecorder) PatchMeshStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshStatus", reflect.TypeOf((*MockMeshStatusWriter)(nil).PatchMeshStatus), varargs...)
}

// MockMeshClient is a mock of MeshClient interface.
type MockMeshClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeshClientMockRecorder
}

// MockMeshClientMockRecorder is the mock recorder for MockMeshClient.
type MockMeshClientMockRecorder struct {
	mock *MockMeshClient
}

// NewMockMeshClient creates a new mock instance.
func NewMockMeshClient(ctrl *gomock.Controller) *MockMeshClient {
	mock := &MockMeshClient{ctrl: ctrl}
	mock.recorder = &MockMeshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshClient) EXPECT() *MockMeshClientMockRecorder {
	return m.recorder
}

// GetMesh mocks base method.
func (m *MockMeshClient) GetMesh(ctx context.Context, key client.ObjectKey) (*v1alpha1.Mesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMesh", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.Mesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMesh indicates an expected call of GetMesh.
func (mr *MockMeshClientMockRecorder) GetMesh(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMesh", reflect.TypeOf((*MockMeshClient)(nil).GetMesh), ctx, key)
}

// ListMesh mocks base method.
func (m *MockMeshClient) ListMesh(ctx context.Context, opts ...client.ListOption) (*v1alpha1.MeshList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMesh", varargs...)
	ret0, _ := ret[0].(*v1alpha1.MeshList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMesh indicates an expected call of ListMesh.
func (mr *MockMeshClientMockRecorder) ListMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMesh", reflect.TypeOf((*MockMeshClient)(nil).ListMesh), varargs...)
}

// CreateMesh mocks base method.
func (m *MockMeshClient) CreateMesh(ctx context.Context, obj *v1alpha1.Mesh, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMesh indicates an expected call of CreateMesh.
func (mr *MockMeshClientMockRecorder) CreateMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMesh", reflect.TypeOf((*MockMeshClient)(nil).CreateMesh), varargs...)
}

// DeleteMesh mocks base method.
func (m *MockMeshClient) DeleteMesh(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMesh indicates an expected call of DeleteMesh.
func (mr *MockMeshClientMockRecorder) DeleteMesh(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMesh", reflect.TypeOf((*MockMeshClient)(nil).DeleteMesh), varargs...)
}

// UpdateMesh mocks base method.
func (m *MockMeshClient) UpdateMesh(ctx context.Context, obj *v1alpha1.Mesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMesh indicates an expected call of UpdateMesh.
func (mr *MockMeshClientMockRecorder) UpdateMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMesh", reflect.TypeOf((*MockMeshClient)(nil).UpdateMesh), varargs...)
}

// PatchMesh mocks base method.
func (m *MockMeshClient) PatchMesh(ctx context.Context, obj *v1alpha1.Mesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMesh indicates an expected call of PatchMesh.
func (mr *MockMeshClientMockRecorder) PatchMesh(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMesh", reflect.TypeOf((*MockMeshClient)(nil).PatchMesh), varargs...)
}

// DeleteAllOfMesh mocks base method.
func (m *MockMeshClient) DeleteAllOfMesh(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMesh indicates an expected call of DeleteAllOfMesh.
func (mr *MockMeshClientMockRecorder) DeleteAllOfMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMesh", reflect.TypeOf((*MockMeshClient)(nil).DeleteAllOfMesh), varargs...)
}

// UpsertMesh mocks base method.
func (m *MockMeshClient) UpsertMesh(ctx context.Context, obj *v1alpha1.Mesh, transitionFuncs ...v1alpha1.MeshTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMesh indicates an expected call of UpsertMesh.
func (mr *MockMeshClientMockRecorder) UpsertMesh(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMesh", reflect.TypeOf((*MockMeshClient)(nil).UpsertMesh), varargs...)
}

// UpdateMeshStatus mocks base method.
func (m *MockMeshClient) UpdateMeshStatus(ctx context.Context, obj *v1alpha1.Mesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshStatus indicates an expected call of UpdateMeshStatus.
func (mr *MockMeshClientMockRecorder) UpdateMeshStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshStatus", reflect.TypeOf((*MockMeshClient)(nil).UpdateMeshStatus), varargs...)
}

// PatchMeshStatus mocks base method.
func (m *MockMeshClient) PatchMeshStatus(ctx context.Context, obj *v1alpha1.Mesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshStatus indicates an expected call of PatchMeshStatus.
func (mr *MockMeshClientMockRecorder) PatchMeshStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshStatus", reflect.TypeOf((*MockMeshClient)(nil).PatchMeshStatus), varargs...)
}

// MockMulticlusterMeshClient is a mock of MulticlusterMeshClient interface.
type MockMulticlusterMeshClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMeshClientMockRecorder
}

// MockMulticlusterMeshClientMockRecorder is the mock recorder for MockMulticlusterMeshClient.
type MockMulticlusterMeshClientMockRecorder struct {
	mock *MockMulticlusterMeshClient
}

// NewMockMulticlusterMeshClient creates a new mock instance.
func NewMockMulticlusterMeshClient(ctrl *gomock.Controller) *MockMulticlusterMeshClient {
	mock := &MockMulticlusterMeshClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMeshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMeshClient) EXPECT() *MockMulticlusterMeshClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterMeshClient) Cluster(cluster string) (v1alpha1.MeshClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.MeshClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterMeshClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterMeshClient)(nil).Cluster), cluster)
}
