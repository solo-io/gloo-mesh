// Code generated by skv2. DO NOT EDIT.

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	discovery_smh_solo_io_v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the KubernetesCluster Resource
// DEPRECATED: Prefer reconciler pattern.
type KubernetesClusterEventHandler interface {
	CreateKubernetesCluster(obj *discovery_smh_solo_io_v1alpha1.KubernetesCluster) error
	UpdateKubernetesCluster(old, new *discovery_smh_solo_io_v1alpha1.KubernetesCluster) error
	DeleteKubernetesCluster(obj *discovery_smh_solo_io_v1alpha1.KubernetesCluster) error
	GenericKubernetesCluster(obj *discovery_smh_solo_io_v1alpha1.KubernetesCluster) error
}

type KubernetesClusterEventHandlerFuncs struct {
	OnCreate  func(obj *discovery_smh_solo_io_v1alpha1.KubernetesCluster) error
	OnUpdate  func(old, new *discovery_smh_solo_io_v1alpha1.KubernetesCluster) error
	OnDelete  func(obj *discovery_smh_solo_io_v1alpha1.KubernetesCluster) error
	OnGeneric func(obj *discovery_smh_solo_io_v1alpha1.KubernetesCluster) error
}

func (f *KubernetesClusterEventHandlerFuncs) CreateKubernetesCluster(obj *discovery_smh_solo_io_v1alpha1.KubernetesCluster) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *KubernetesClusterEventHandlerFuncs) DeleteKubernetesCluster(obj *discovery_smh_solo_io_v1alpha1.KubernetesCluster) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *KubernetesClusterEventHandlerFuncs) UpdateKubernetesCluster(objOld, objNew *discovery_smh_solo_io_v1alpha1.KubernetesCluster) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *KubernetesClusterEventHandlerFuncs) GenericKubernetesCluster(obj *discovery_smh_solo_io_v1alpha1.KubernetesCluster) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type KubernetesClusterEventWatcher interface {
	AddEventHandler(ctx context.Context, h KubernetesClusterEventHandler, predicates ...predicate.Predicate) error
}

type kubernetesClusterEventWatcher struct {
	watcher events.EventWatcher
}

func NewKubernetesClusterEventWatcher(name string, mgr manager.Manager) KubernetesClusterEventWatcher {
	return &kubernetesClusterEventWatcher{
		watcher: events.NewWatcher(name, mgr, &discovery_smh_solo_io_v1alpha1.KubernetesCluster{}),
	}
}

func (c *kubernetesClusterEventWatcher) AddEventHandler(ctx context.Context, h KubernetesClusterEventHandler, predicates ...predicate.Predicate) error {
	handler := genericKubernetesClusterHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericKubernetesClusterHandler implements a generic events.EventHandler
type genericKubernetesClusterHandler struct {
	handler KubernetesClusterEventHandler
}

func (h genericKubernetesClusterHandler) Create(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha1.KubernetesCluster)
	if !ok {
		return errors.Errorf("internal error: KubernetesCluster handler received event for %T", object)
	}
	return h.handler.CreateKubernetesCluster(obj)
}

func (h genericKubernetesClusterHandler) Delete(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha1.KubernetesCluster)
	if !ok {
		return errors.Errorf("internal error: KubernetesCluster handler received event for %T", object)
	}
	return h.handler.DeleteKubernetesCluster(obj)
}

func (h genericKubernetesClusterHandler) Update(old, new runtime.Object) error {
	objOld, ok := old.(*discovery_smh_solo_io_v1alpha1.KubernetesCluster)
	if !ok {
		return errors.Errorf("internal error: KubernetesCluster handler received event for %T", old)
	}
	objNew, ok := new.(*discovery_smh_solo_io_v1alpha1.KubernetesCluster)
	if !ok {
		return errors.Errorf("internal error: KubernetesCluster handler received event for %T", new)
	}
	return h.handler.UpdateKubernetesCluster(objOld, objNew)
}

func (h genericKubernetesClusterHandler) Generic(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha1.KubernetesCluster)
	if !ok {
		return errors.Errorf("internal error: KubernetesCluster handler received event for %T", object)
	}
	return h.handler.GenericKubernetesCluster(obj)
}

// Handle events for the MeshService Resource
// DEPRECATED: Prefer reconciler pattern.
type MeshServiceEventHandler interface {
	CreateMeshService(obj *discovery_smh_solo_io_v1alpha1.MeshService) error
	UpdateMeshService(old, new *discovery_smh_solo_io_v1alpha1.MeshService) error
	DeleteMeshService(obj *discovery_smh_solo_io_v1alpha1.MeshService) error
	GenericMeshService(obj *discovery_smh_solo_io_v1alpha1.MeshService) error
}

type MeshServiceEventHandlerFuncs struct {
	OnCreate  func(obj *discovery_smh_solo_io_v1alpha1.MeshService) error
	OnUpdate  func(old, new *discovery_smh_solo_io_v1alpha1.MeshService) error
	OnDelete  func(obj *discovery_smh_solo_io_v1alpha1.MeshService) error
	OnGeneric func(obj *discovery_smh_solo_io_v1alpha1.MeshService) error
}

func (f *MeshServiceEventHandlerFuncs) CreateMeshService(obj *discovery_smh_solo_io_v1alpha1.MeshService) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *MeshServiceEventHandlerFuncs) DeleteMeshService(obj *discovery_smh_solo_io_v1alpha1.MeshService) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *MeshServiceEventHandlerFuncs) UpdateMeshService(objOld, objNew *discovery_smh_solo_io_v1alpha1.MeshService) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *MeshServiceEventHandlerFuncs) GenericMeshService(obj *discovery_smh_solo_io_v1alpha1.MeshService) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type MeshServiceEventWatcher interface {
	AddEventHandler(ctx context.Context, h MeshServiceEventHandler, predicates ...predicate.Predicate) error
}

type meshServiceEventWatcher struct {
	watcher events.EventWatcher
}

func NewMeshServiceEventWatcher(name string, mgr manager.Manager) MeshServiceEventWatcher {
	return &meshServiceEventWatcher{
		watcher: events.NewWatcher(name, mgr, &discovery_smh_solo_io_v1alpha1.MeshService{}),
	}
}

func (c *meshServiceEventWatcher) AddEventHandler(ctx context.Context, h MeshServiceEventHandler, predicates ...predicate.Predicate) error {
	handler := genericMeshServiceHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericMeshServiceHandler implements a generic events.EventHandler
type genericMeshServiceHandler struct {
	handler MeshServiceEventHandler
}

func (h genericMeshServiceHandler) Create(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha1.MeshService)
	if !ok {
		return errors.Errorf("internal error: MeshService handler received event for %T", object)
	}
	return h.handler.CreateMeshService(obj)
}

func (h genericMeshServiceHandler) Delete(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha1.MeshService)
	if !ok {
		return errors.Errorf("internal error: MeshService handler received event for %T", object)
	}
	return h.handler.DeleteMeshService(obj)
}

func (h genericMeshServiceHandler) Update(old, new runtime.Object) error {
	objOld, ok := old.(*discovery_smh_solo_io_v1alpha1.MeshService)
	if !ok {
		return errors.Errorf("internal error: MeshService handler received event for %T", old)
	}
	objNew, ok := new.(*discovery_smh_solo_io_v1alpha1.MeshService)
	if !ok {
		return errors.Errorf("internal error: MeshService handler received event for %T", new)
	}
	return h.handler.UpdateMeshService(objOld, objNew)
}

func (h genericMeshServiceHandler) Generic(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha1.MeshService)
	if !ok {
		return errors.Errorf("internal error: MeshService handler received event for %T", object)
	}
	return h.handler.GenericMeshService(obj)
}

// Handle events for the MeshWorkload Resource
// DEPRECATED: Prefer reconciler pattern.
type MeshWorkloadEventHandler interface {
	CreateMeshWorkload(obj *discovery_smh_solo_io_v1alpha1.MeshWorkload) error
	UpdateMeshWorkload(old, new *discovery_smh_solo_io_v1alpha1.MeshWorkload) error
	DeleteMeshWorkload(obj *discovery_smh_solo_io_v1alpha1.MeshWorkload) error
	GenericMeshWorkload(obj *discovery_smh_solo_io_v1alpha1.MeshWorkload) error
}

type MeshWorkloadEventHandlerFuncs struct {
	OnCreate  func(obj *discovery_smh_solo_io_v1alpha1.MeshWorkload) error
	OnUpdate  func(old, new *discovery_smh_solo_io_v1alpha1.MeshWorkload) error
	OnDelete  func(obj *discovery_smh_solo_io_v1alpha1.MeshWorkload) error
	OnGeneric func(obj *discovery_smh_solo_io_v1alpha1.MeshWorkload) error
}

func (f *MeshWorkloadEventHandlerFuncs) CreateMeshWorkload(obj *discovery_smh_solo_io_v1alpha1.MeshWorkload) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *MeshWorkloadEventHandlerFuncs) DeleteMeshWorkload(obj *discovery_smh_solo_io_v1alpha1.MeshWorkload) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *MeshWorkloadEventHandlerFuncs) UpdateMeshWorkload(objOld, objNew *discovery_smh_solo_io_v1alpha1.MeshWorkload) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *MeshWorkloadEventHandlerFuncs) GenericMeshWorkload(obj *discovery_smh_solo_io_v1alpha1.MeshWorkload) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type MeshWorkloadEventWatcher interface {
	AddEventHandler(ctx context.Context, h MeshWorkloadEventHandler, predicates ...predicate.Predicate) error
}

type meshWorkloadEventWatcher struct {
	watcher events.EventWatcher
}

func NewMeshWorkloadEventWatcher(name string, mgr manager.Manager) MeshWorkloadEventWatcher {
	return &meshWorkloadEventWatcher{
		watcher: events.NewWatcher(name, mgr, &discovery_smh_solo_io_v1alpha1.MeshWorkload{}),
	}
}

func (c *meshWorkloadEventWatcher) AddEventHandler(ctx context.Context, h MeshWorkloadEventHandler, predicates ...predicate.Predicate) error {
	handler := genericMeshWorkloadHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericMeshWorkloadHandler implements a generic events.EventHandler
type genericMeshWorkloadHandler struct {
	handler MeshWorkloadEventHandler
}

func (h genericMeshWorkloadHandler) Create(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha1.MeshWorkload)
	if !ok {
		return errors.Errorf("internal error: MeshWorkload handler received event for %T", object)
	}
	return h.handler.CreateMeshWorkload(obj)
}

func (h genericMeshWorkloadHandler) Delete(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha1.MeshWorkload)
	if !ok {
		return errors.Errorf("internal error: MeshWorkload handler received event for %T", object)
	}
	return h.handler.DeleteMeshWorkload(obj)
}

func (h genericMeshWorkloadHandler) Update(old, new runtime.Object) error {
	objOld, ok := old.(*discovery_smh_solo_io_v1alpha1.MeshWorkload)
	if !ok {
		return errors.Errorf("internal error: MeshWorkload handler received event for %T", old)
	}
	objNew, ok := new.(*discovery_smh_solo_io_v1alpha1.MeshWorkload)
	if !ok {
		return errors.Errorf("internal error: MeshWorkload handler received event for %T", new)
	}
	return h.handler.UpdateMeshWorkload(objOld, objNew)
}

func (h genericMeshWorkloadHandler) Generic(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha1.MeshWorkload)
	if !ok {
		return errors.Errorf("internal error: MeshWorkload handler received event for %T", object)
	}
	return h.handler.GenericMeshWorkload(obj)
}

// Handle events for the Mesh Resource
// DEPRECATED: Prefer reconciler pattern.
type MeshEventHandler interface {
	CreateMesh(obj *discovery_smh_solo_io_v1alpha1.Mesh) error
	UpdateMesh(old, new *discovery_smh_solo_io_v1alpha1.Mesh) error
	DeleteMesh(obj *discovery_smh_solo_io_v1alpha1.Mesh) error
	GenericMesh(obj *discovery_smh_solo_io_v1alpha1.Mesh) error
}

type MeshEventHandlerFuncs struct {
	OnCreate  func(obj *discovery_smh_solo_io_v1alpha1.Mesh) error
	OnUpdate  func(old, new *discovery_smh_solo_io_v1alpha1.Mesh) error
	OnDelete  func(obj *discovery_smh_solo_io_v1alpha1.Mesh) error
	OnGeneric func(obj *discovery_smh_solo_io_v1alpha1.Mesh) error
}

func (f *MeshEventHandlerFuncs) CreateMesh(obj *discovery_smh_solo_io_v1alpha1.Mesh) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *MeshEventHandlerFuncs) DeleteMesh(obj *discovery_smh_solo_io_v1alpha1.Mesh) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *MeshEventHandlerFuncs) UpdateMesh(objOld, objNew *discovery_smh_solo_io_v1alpha1.Mesh) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *MeshEventHandlerFuncs) GenericMesh(obj *discovery_smh_solo_io_v1alpha1.Mesh) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type MeshEventWatcher interface {
	AddEventHandler(ctx context.Context, h MeshEventHandler, predicates ...predicate.Predicate) error
}

type meshEventWatcher struct {
	watcher events.EventWatcher
}

func NewMeshEventWatcher(name string, mgr manager.Manager) MeshEventWatcher {
	return &meshEventWatcher{
		watcher: events.NewWatcher(name, mgr, &discovery_smh_solo_io_v1alpha1.Mesh{}),
	}
}

func (c *meshEventWatcher) AddEventHandler(ctx context.Context, h MeshEventHandler, predicates ...predicate.Predicate) error {
	handler := genericMeshHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericMeshHandler implements a generic events.EventHandler
type genericMeshHandler struct {
	handler MeshEventHandler
}

func (h genericMeshHandler) Create(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha1.Mesh)
	if !ok {
		return errors.Errorf("internal error: Mesh handler received event for %T", object)
	}
	return h.handler.CreateMesh(obj)
}

func (h genericMeshHandler) Delete(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha1.Mesh)
	if !ok {
		return errors.Errorf("internal error: Mesh handler received event for %T", object)
	}
	return h.handler.DeleteMesh(obj)
}

func (h genericMeshHandler) Update(old, new runtime.Object) error {
	objOld, ok := old.(*discovery_smh_solo_io_v1alpha1.Mesh)
	if !ok {
		return errors.Errorf("internal error: Mesh handler received event for %T", old)
	}
	objNew, ok := new.(*discovery_smh_solo_io_v1alpha1.Mesh)
	if !ok {
		return errors.Errorf("internal error: Mesh handler received event for %T", new)
	}
	return h.handler.UpdateMesh(objOld, objNew)
}

func (h genericMeshHandler) Generic(object runtime.Object) error {
	obj, ok := object.(*discovery_smh_solo_io_v1alpha1.Mesh)
	if !ok {
		return errors.Errorf("internal error: Mesh handler received event for %T", object)
	}
	return h.handler.GenericMesh(obj)
}
