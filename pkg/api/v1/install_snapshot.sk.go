// Code generated by protoc-gen-solo-kit. DO NOT EDIT.

package v1

import (
	"github.com/mitchellh/hashstructure"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"go.uber.org/zap"
)

type InstallSnapshot struct {
	Installs InstallsByNamespace
}

func (s InstallSnapshot) Clone() InstallSnapshot {
	return InstallSnapshot{
		Installs: s.Installs.Clone(),
	}
}

func (s InstallSnapshot) snapshotToHash() InstallSnapshot {
	snapshotForHashing := s.Clone()
	for _, install := range snapshotForHashing.Installs.List() {
		resources.UpdateMetadata(install, func(meta *core.Metadata) {
			meta.ResourceVersion = ""
		})
		install.SetStatus(core.Status{})
	}

	return snapshotForHashing
}

func (s InstallSnapshot) Hash() uint64 {
	return s.hashStruct(s.snapshotToHash())
}

func (s InstallSnapshot) HashFields() []zap.Field {
	snapshotForHashing := s.snapshotToHash()
	var fields []zap.Field
	installs := s.hashStruct(snapshotForHashing.Installs.List())
	fields = append(fields, zap.Uint64("installs", installs))

	return append(fields, zap.Uint64("snapshotHash", s.hashStruct(snapshotForHashing)))
}

func (s InstallSnapshot) hashStruct(v interface{}) uint64 {
	h, err := hashstructure.Hash(v, nil)
	if err != nil {
		panic(err)
	}
	return h
}
