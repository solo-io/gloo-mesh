// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/supergloo/api/v1/mesh.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
//Meshes represent a currently registered service mesh.
type Mesh struct {
	// Status indicates the validation status of this resource.
	// Status is read-only by clients, and set by supergloo during validation
	Status core.Status `protobuf:"bytes,100,opt,name=status,proto3" json:"status" testdiff:"ignore"`
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,101,opt,name=metadata,proto3" json:"metadata"`
	// Types that are valid to be assigned to MeshType:
	//	*Mesh_Istio
	MeshType isMesh_MeshType `protobuf_oneof:"mesh_type"`
	// mtls config specifies configuration options for enabling mutual
	// tls between pods in this mesh
	MtlsConfig           *MtlsConfig `protobuf:"bytes,2,opt,name=mtls_config,json=mtlsConfig,proto3" json:"mtls_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Mesh) Reset()         { *m = Mesh{} }
func (m *Mesh) String() string { return proto.CompactTextString(m) }
func (*Mesh) ProtoMessage()    {}
func (*Mesh) Descriptor() ([]byte, []int) {
	return fileDescriptor_713281dd1a237b0d, []int{0}
}
func (m *Mesh) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mesh.Unmarshal(m, b)
}
func (m *Mesh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mesh.Marshal(b, m, deterministic)
}
func (m *Mesh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mesh.Merge(m, src)
}
func (m *Mesh) XXX_Size() int {
	return xxx_messageInfo_Mesh.Size(m)
}
func (m *Mesh) XXX_DiscardUnknown() {
	xxx_messageInfo_Mesh.DiscardUnknown(m)
}

var xxx_messageInfo_Mesh proto.InternalMessageInfo

type isMesh_MeshType interface {
	isMesh_MeshType()
	Equal(interface{}) bool
}

type Mesh_Istio struct {
	Istio *IstioMesh `protobuf:"bytes,1,opt,name=istio,proto3,oneof"`
}

func (*Mesh_Istio) isMesh_MeshType() {}

func (m *Mesh) GetMeshType() isMesh_MeshType {
	if m != nil {
		return m.MeshType
	}
	return nil
}

func (m *Mesh) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *Mesh) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *Mesh) GetIstio() *IstioMesh {
	if x, ok := m.GetMeshType().(*Mesh_Istio); ok {
		return x.Istio
	}
	return nil
}

func (m *Mesh) GetMtlsConfig() *MtlsConfig {
	if m != nil {
		return m.MtlsConfig
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Mesh) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Mesh_OneofMarshaler, _Mesh_OneofUnmarshaler, _Mesh_OneofSizer, []interface{}{
		(*Mesh_Istio)(nil),
	}
}

func _Mesh_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Mesh)
	// mesh_type
	switch x := m.MeshType.(type) {
	case *Mesh_Istio:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Istio); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Mesh.MeshType has unexpected type %T", x)
	}
	return nil
}

func _Mesh_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Mesh)
	switch tag {
	case 1: // mesh_type.istio
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IstioMesh)
		err := b.DecodeMessage(msg)
		m.MeshType = &Mesh_Istio{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Mesh_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Mesh)
	// mesh_type
	switch x := m.MeshType.(type) {
	case *Mesh_Istio:
		s := proto.Size(x.Istio)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Mesh object representing istio
type IstioMesh struct {
	// where the istio control plane has been installed
	InstallationNamespace string   `protobuf:"bytes,1,opt,name=installation_namespace,json=installationNamespace,proto3" json:"installation_namespace,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *IstioMesh) Reset()         { *m = IstioMesh{} }
func (m *IstioMesh) String() string { return proto.CompactTextString(m) }
func (*IstioMesh) ProtoMessage()    {}
func (*IstioMesh) Descriptor() ([]byte, []int) {
	return fileDescriptor_713281dd1a237b0d, []int{1}
}
func (m *IstioMesh) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IstioMesh.Unmarshal(m, b)
}
func (m *IstioMesh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IstioMesh.Marshal(b, m, deterministic)
}
func (m *IstioMesh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IstioMesh.Merge(m, src)
}
func (m *IstioMesh) XXX_Size() int {
	return xxx_messageInfo_IstioMesh.Size(m)
}
func (m *IstioMesh) XXX_DiscardUnknown() {
	xxx_messageInfo_IstioMesh.DiscardUnknown(m)
}

var xxx_messageInfo_IstioMesh proto.InternalMessageInfo

func (m *IstioMesh) GetInstallationNamespace() string {
	if m != nil {
		return m.InstallationNamespace
	}
	return ""
}

// the encryption configuration that will be applied by the role
type MtlsConfig struct {
	// whether or not mutual TLS should be enabled between pods in this mesh
	MtlsEnabled bool `protobuf:"varint,1,opt,name=mtls_enabled,json=mtlsEnabled,proto3" json:"mtls_enabled,omitempty"`
	// if set, rootCertificate will override the root certificate used by the mesh
	// to encrypt mtls connections.
	//
	// The structure of the secret must be a standard kubernetes TLS secret
	// such as can be created via `kubectl create secret tls`
	//
	// if mtlsEnabled is false, this field is ignored
	// If deploying to Consul, Consul Connect requires that the cert and key are generated using ec, not rsa.
	RootCertificate      *core.ResourceRef `protobuf:"bytes,2,opt,name=root_certificate,json=rootCertificate,proto3" json:"root_certificate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MtlsConfig) Reset()         { *m = MtlsConfig{} }
func (m *MtlsConfig) String() string { return proto.CompactTextString(m) }
func (*MtlsConfig) ProtoMessage()    {}
func (*MtlsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_713281dd1a237b0d, []int{2}
}
func (m *MtlsConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MtlsConfig.Unmarshal(m, b)
}
func (m *MtlsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MtlsConfig.Marshal(b, m, deterministic)
}
func (m *MtlsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MtlsConfig.Merge(m, src)
}
func (m *MtlsConfig) XXX_Size() int {
	return xxx_messageInfo_MtlsConfig.Size(m)
}
func (m *MtlsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MtlsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MtlsConfig proto.InternalMessageInfo

func (m *MtlsConfig) GetMtlsEnabled() bool {
	if m != nil {
		return m.MtlsEnabled
	}
	return false
}

func (m *MtlsConfig) GetRootCertificate() *core.ResourceRef {
	if m != nil {
		return m.RootCertificate
	}
	return nil
}

type MeshGroup struct {
	// Status indicates the validation status of this resource.
	// Status is read-only by clients, and set by supergloo during validation
	Status core.Status `protobuf:"bytes,100,opt,name=status,proto3" json:"status" testdiff:"ignore"`
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,101,opt,name=metadata,proto3" json:"metadata"`
	// the meshes contained in this group
	Meshes               []*core.ResourceRef `protobuf:"bytes,3,rep,name=meshes,proto3" json:"meshes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MeshGroup) Reset()         { *m = MeshGroup{} }
func (m *MeshGroup) String() string { return proto.CompactTextString(m) }
func (*MeshGroup) ProtoMessage()    {}
func (*MeshGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_713281dd1a237b0d, []int{3}
}
func (m *MeshGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshGroup.Unmarshal(m, b)
}
func (m *MeshGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshGroup.Marshal(b, m, deterministic)
}
func (m *MeshGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshGroup.Merge(m, src)
}
func (m *MeshGroup) XXX_Size() int {
	return xxx_messageInfo_MeshGroup.Size(m)
}
func (m *MeshGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshGroup.DiscardUnknown(m)
}

var xxx_messageInfo_MeshGroup proto.InternalMessageInfo

func (m *MeshGroup) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *MeshGroup) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *MeshGroup) GetMeshes() []*core.ResourceRef {
	if m != nil {
		return m.Meshes
	}
	return nil
}

func init() {
	proto.RegisterType((*Mesh)(nil), "supergloo.solo.io.Mesh")
	proto.RegisterType((*IstioMesh)(nil), "supergloo.solo.io.IstioMesh")
	proto.RegisterType((*MtlsConfig)(nil), "supergloo.solo.io.MtlsConfig")
	proto.RegisterType((*MeshGroup)(nil), "supergloo.solo.io.MeshGroup")
}

func init() {
	proto.RegisterFile("github.com/solo-io/supergloo/api/v1/mesh.proto", fileDescriptor_713281dd1a237b0d)
}

var fileDescriptor_713281dd1a237b0d = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0x6e, 0x12, 0xff, 0xa2, 0x64, 0x53, 0xe9, 0x47, 0x97, 0x52, 0xb9, 0x15, 0xb4, 0xc5, 0x17,
	0x38, 0x50, 0x5b, 0xe1, 0x8f, 0x84, 0x72, 0xe0, 0xe0, 0x82, 0x0a, 0x87, 0x70, 0x30, 0x37, 0x2e,
	0xd1, 0xc6, 0x1e, 0x6f, 0x56, 0xb5, 0x3d, 0xd6, 0xee, 0x1a, 0xc4, 0x35, 0x6f, 0xc2, 0x8d, 0x47,
	0xe1, 0x1d, 0x90, 0x7a, 0xe0, 0x0d, 0xc2, 0x13, 0xa0, 0x5d, 0xdb, 0x09, 0x15, 0xa5, 0x2a, 0x37,
	0x4e, 0x9e, 0xdd, 0xef, 0xfb, 0x66, 0xbe, 0x99, 0x1d, 0x99, 0xf8, 0x5c, 0xe8, 0x45, 0x35, 0xf7,
	0x63, 0xcc, 0x03, 0x85, 0x19, 0x9e, 0x08, 0x0c, 0x54, 0x55, 0x82, 0xe4, 0x19, 0x62, 0xc0, 0x4a,
	0x11, 0x7c, 0x18, 0x07, 0x39, 0xa8, 0x85, 0x5f, 0x4a, 0xd4, 0x48, 0x77, 0xd6, 0xa0, 0x6f, 0xe8,
	0xbe, 0xc0, 0x83, 0x5d, 0x8e, 0x1c, 0x2d, 0x1a, 0x98, 0xa8, 0x26, 0x1e, 0x1c, 0x72, 0x44, 0x9e,
	0x41, 0x60, 0x4f, 0xf3, 0x2a, 0x0d, 0x92, 0x4a, 0x32, 0x2d, 0xb0, 0xf8, 0x13, 0xfe, 0x51, 0xb2,
	0xb2, 0x04, 0xa9, 0x1a, 0x7c, 0x7c, 0x95, 0x31, 0xf3, 0x3d, 0x17, 0x7a, 0xe3, 0x4b, 0xb3, 0x84,
	0x69, 0xd6, 0x48, 0x82, 0x1b, 0x48, 0x94, 0x66, 0xba, 0x6a, 0x6b, 0x3c, 0xba, 0x81, 0x40, 0x42,
	0xfa, 0x17, 0x8e, 0xda, 0x73, 0x2d, 0xf1, 0x3e, 0x77, 0x89, 0x33, 0x05, 0xb5, 0xa0, 0x67, 0xa4,
	0x5f, 0x57, 0x76, 0x93, 0xe3, 0xce, 0xc3, 0xd1, 0xe3, 0x5d, 0x3f, 0x46, 0x09, 0xed, 0x08, 0xfd,
	0x77, 0x16, 0x0b, 0xf7, 0xbf, 0x5e, 0x1c, 0x6d, 0xfd, 0xb8, 0x38, 0xda, 0xd1, 0xa0, 0x74, 0x22,
	0xd2, 0x74, 0xe2, 0x09, 0x5e, 0xa0, 0x04, 0x2f, 0x6a, 0xe4, 0xf4, 0x39, 0x19, 0xb4, 0x5d, 0xbb,
	0x60, 0x53, 0xed, 0x5d, 0x4e, 0x35, 0x6d, 0xd0, 0xd0, 0x31, 0xc9, 0xa2, 0x35, 0x9b, 0x3e, 0x25,
	0xff, 0x09, 0xa5, 0x05, 0xba, 0x1d, 0x2b, 0xbb, 0xeb, 0xff, 0xf6, 0x92, 0xfe, 0x1b, 0x83, 0x1b,
	0xbf, 0xaf, 0xb7, 0xa2, 0x9a, 0x4c, 0x5f, 0x90, 0x51, 0xae, 0x33, 0x35, 0x8b, 0xb1, 0x48, 0x05,
	0x77, 0xbb, 0x56, 0x7b, 0xef, 0x0a, 0xed, 0x54, 0x67, 0xea, 0xd4, 0x92, 0x22, 0x92, 0xaf, 0xe3,
	0xc9, 0xed, 0xe5, 0xca, 0xe9, 0x91, 0x4e, 0xbe, 0x5c, 0x39, 0x03, 0xda, 0x37, 0x8b, 0x04, 0x2a,
	0x1c, 0x91, 0xa1, 0x89, 0x66, 0xfa, 0x53, 0x09, 0x5e, 0x48, 0x86, 0xeb, 0xba, 0xf4, 0x19, 0xd9,
	0x13, 0x85, 0xd2, 0x2c, 0xcb, 0xec, 0xae, 0xcc, 0x0a, 0x96, 0x83, 0x2a, 0x59, 0x0c, 0xd6, 0xf5,
	0x30, 0xba, 0xf3, 0x2b, 0xfa, 0xb6, 0x05, 0xbd, 0x8a, 0x90, 0x4d, 0x7d, 0x7a, 0x9f, 0x6c, 0x5b,
	0xcf, 0x50, 0xb0, 0x79, 0x06, 0x89, 0x95, 0x0e, 0x22, 0xdb, 0xc7, 0xab, 0xfa, 0x8a, 0xbe, 0x24,
	0xb7, 0x24, 0xa2, 0x9e, 0xc5, 0x20, 0xb5, 0x48, 0x45, 0xcc, 0x34, 0x34, 0xbd, 0xed, 0x5f, 0x1e,
	0x67, 0x04, 0x0a, 0x2b, 0x19, 0x43, 0x04, 0x69, 0xf4, 0xbf, 0x91, 0x9c, 0x6e, 0x14, 0xde, 0xb7,
	0x0e, 0x19, 0x1a, 0xdb, 0x67, 0x12, 0xab, 0xf2, 0x5f, 0x78, 0xe3, 0x31, 0x69, 0x46, 0xec, 0xf6,
	0x8e, 0x7b, 0xd7, 0x37, 0xd3, 0x10, 0x27, 0xee, 0x72, 0xe5, 0x38, 0xa4, 0x9b, 0xf3, 0xe5, 0xca,
	0xd9, 0xa6, 0xc4, 0xdc, 0x72, 0xd3, 0x8e, 0x0a, 0x4f, 0xbe, 0x7c, 0x3f, 0xec, 0xbc, 0x7f, 0x70,
	0xed, 0x0f, 0xa2, 0x3c, 0xe7, 0xcd, 0xea, 0xcf, 0xfb, 0x76, 0xe5, 0x9f, 0xfc, 0x0c, 0x00, 0x00,
	0xff, 0xff, 0x5f, 0x87, 0xe7, 0x74, 0x52, 0x04, 0x00, 0x00,
}

func (this *Mesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mesh)
	if !ok {
		that2, ok := that.(Mesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if that1.MeshType == nil {
		if this.MeshType != nil {
			return false
		}
	} else if this.MeshType == nil {
		return false
	} else if !this.MeshType.Equal(that1.MeshType) {
		return false
	}
	if !this.MtlsConfig.Equal(that1.MtlsConfig) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Mesh_Istio) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mesh_Istio)
	if !ok {
		that2, ok := that.(Mesh_Istio)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Istio.Equal(that1.Istio) {
		return false
	}
	return true
}
func (this *IstioMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IstioMesh)
	if !ok {
		that2, ok := that.(IstioMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InstallationNamespace != that1.InstallationNamespace {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MtlsConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MtlsConfig)
	if !ok {
		that2, ok := that.(MtlsConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MtlsEnabled != that1.MtlsEnabled {
		return false
	}
	if !this.RootCertificate.Equal(that1.RootCertificate) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshGroup)
	if !ok {
		that2, ok := that.(MeshGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if len(this.Meshes) != len(that1.Meshes) {
		return false
	}
	for i := range this.Meshes {
		if !this.Meshes[i].Equal(that1.Meshes[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
