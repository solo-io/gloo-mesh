// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/v1/linkerd_discovery_snapshot_simple_emitter.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/supergloo/pkg/api/v1"
)

// MockLinkerdDiscoverySimpleEmitter is a mock of LinkerdDiscoverySimpleEmitter interface
type MockLinkerdDiscoverySimpleEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockLinkerdDiscoverySimpleEmitterMockRecorder
}

// MockLinkerdDiscoverySimpleEmitterMockRecorder is the mock recorder for MockLinkerdDiscoverySimpleEmitter
type MockLinkerdDiscoverySimpleEmitterMockRecorder struct {
	mock *MockLinkerdDiscoverySimpleEmitter
}

// NewMockLinkerdDiscoverySimpleEmitter creates a new mock instance
func NewMockLinkerdDiscoverySimpleEmitter(ctrl *gomock.Controller) *MockLinkerdDiscoverySimpleEmitter {
	mock := &MockLinkerdDiscoverySimpleEmitter{ctrl: ctrl}
	mock.recorder = &MockLinkerdDiscoverySimpleEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLinkerdDiscoverySimpleEmitter) EXPECT() *MockLinkerdDiscoverySimpleEmitterMockRecorder {
	return m.recorder
}

// Snapshots mocks base method
func (m *MockLinkerdDiscoverySimpleEmitter) Snapshots(ctx context.Context) (<-chan *v1.LinkerdDiscoverySnapshot, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", ctx)
	ret0, _ := ret[0].(<-chan *v1.LinkerdDiscoverySnapshot)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Snapshots indicates an expected call of Snapshots
func (mr *MockLinkerdDiscoverySimpleEmitterMockRecorder) Snapshots(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockLinkerdDiscoverySimpleEmitter)(nil).Snapshots), ctx)
}
