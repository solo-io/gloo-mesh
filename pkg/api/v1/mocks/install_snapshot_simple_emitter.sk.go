// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/v1/install_snapshot_simple_emitter.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/supergloo/pkg/api/v1"
)

// MockInstallSimpleEmitter is a mock of InstallSimpleEmitter interface
type MockInstallSimpleEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockInstallSimpleEmitterMockRecorder
}

// MockInstallSimpleEmitterMockRecorder is the mock recorder for MockInstallSimpleEmitter
type MockInstallSimpleEmitterMockRecorder struct {
	mock *MockInstallSimpleEmitter
}

// NewMockInstallSimpleEmitter creates a new mock instance
func NewMockInstallSimpleEmitter(ctrl *gomock.Controller) *MockInstallSimpleEmitter {
	mock := &MockInstallSimpleEmitter{ctrl: ctrl}
	mock.recorder = &MockInstallSimpleEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstallSimpleEmitter) EXPECT() *MockInstallSimpleEmitterMockRecorder {
	return m.recorder
}

// Snapshots mocks base method
func (m *MockInstallSimpleEmitter) Snapshots(ctx context.Context) (<-chan *v1.InstallSnapshot, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", ctx)
	ret0, _ := ret[0].(<-chan *v1.InstallSnapshot)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Snapshots indicates an expected call of Snapshots
func (mr *MockInstallSimpleEmitterMockRecorder) Snapshots(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockInstallSimpleEmitter)(nil).Snapshots), ctx)
}
