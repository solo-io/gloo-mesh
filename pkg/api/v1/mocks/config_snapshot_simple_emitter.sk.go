// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/v1/config_snapshot_simple_emitter.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/supergloo/pkg/api/v1"
)

// MockConfigSimpleEmitter is a mock of ConfigSimpleEmitter interface
type MockConfigSimpleEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigSimpleEmitterMockRecorder
}

// MockConfigSimpleEmitterMockRecorder is the mock recorder for MockConfigSimpleEmitter
type MockConfigSimpleEmitterMockRecorder struct {
	mock *MockConfigSimpleEmitter
}

// NewMockConfigSimpleEmitter creates a new mock instance
func NewMockConfigSimpleEmitter(ctrl *gomock.Controller) *MockConfigSimpleEmitter {
	mock := &MockConfigSimpleEmitter{ctrl: ctrl}
	mock.recorder = &MockConfigSimpleEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigSimpleEmitter) EXPECT() *MockConfigSimpleEmitterMockRecorder {
	return m.recorder
}

// Snapshots mocks base method
func (m *MockConfigSimpleEmitter) Snapshots(ctx context.Context) (<-chan *v1.ConfigSnapshot, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", ctx)
	ret0, _ := ret[0].(<-chan *v1.ConfigSnapshot)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Snapshots indicates an expected call of Snapshots
func (mr *MockConfigSimpleEmitterMockRecorder) Snapshots(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockConfigSimpleEmitter)(nil).Snapshots), ctx)
}
