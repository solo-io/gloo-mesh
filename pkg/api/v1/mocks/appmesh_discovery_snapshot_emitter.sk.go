// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/v1/appmesh_discovery_snapshot_emitter.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	kubernetes "github.com/solo-io/solo-kit/pkg/api/v1/resources/common/kubernetes"
	v10 "github.com/solo-io/supergloo/pkg/api/v1"
)

// MockAppmeshDiscoveryEmitter is a mock of AppmeshDiscoveryEmitter interface
type MockAppmeshDiscoveryEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockAppmeshDiscoveryEmitterMockRecorder
}

// MockAppmeshDiscoveryEmitterMockRecorder is the mock recorder for MockAppmeshDiscoveryEmitter
type MockAppmeshDiscoveryEmitterMockRecorder struct {
	mock *MockAppmeshDiscoveryEmitter
}

// NewMockAppmeshDiscoveryEmitter creates a new mock instance
func NewMockAppmeshDiscoveryEmitter(ctrl *gomock.Controller) *MockAppmeshDiscoveryEmitter {
	mock := &MockAppmeshDiscoveryEmitter{ctrl: ctrl}
	mock.recorder = &MockAppmeshDiscoveryEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppmeshDiscoveryEmitter) EXPECT() *MockAppmeshDiscoveryEmitterMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockAppmeshDiscoveryEmitter) Register() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockAppmeshDiscoveryEmitterMockRecorder) Register() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAppmeshDiscoveryEmitter)(nil).Register))
}

// Mesh mocks base method
func (m *MockAppmeshDiscoveryEmitter) Mesh() v10.MeshClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mesh")
	ret0, _ := ret[0].(v10.MeshClient)
	return ret0
}

// Mesh indicates an expected call of Mesh
func (mr *MockAppmeshDiscoveryEmitterMockRecorder) Mesh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mesh", reflect.TypeOf((*MockAppmeshDiscoveryEmitter)(nil).Mesh))
}

// Pod mocks base method
func (m *MockAppmeshDiscoveryEmitter) Pod() kubernetes.PodClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pod")
	ret0, _ := ret[0].(kubernetes.PodClient)
	return ret0
}

// Pod indicates an expected call of Pod
func (mr *MockAppmeshDiscoveryEmitterMockRecorder) Pod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pod", reflect.TypeOf((*MockAppmeshDiscoveryEmitter)(nil).Pod))
}

// Upstream mocks base method
func (m *MockAppmeshDiscoveryEmitter) Upstream() v1.UpstreamClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upstream")
	ret0, _ := ret[0].(v1.UpstreamClient)
	return ret0
}

// Upstream indicates an expected call of Upstream
func (mr *MockAppmeshDiscoveryEmitterMockRecorder) Upstream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upstream", reflect.TypeOf((*MockAppmeshDiscoveryEmitter)(nil).Upstream))
}

// Snapshots mocks base method
func (m *MockAppmeshDiscoveryEmitter) Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *v10.AppmeshDiscoverySnapshot, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", watchNamespaces, opts)
	ret0, _ := ret[0].(<-chan *v10.AppmeshDiscoverySnapshot)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Snapshots indicates an expected call of Snapshots
func (mr *MockAppmeshDiscoveryEmitterMockRecorder) Snapshots(watchNamespaces, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockAppmeshDiscoveryEmitter)(nil).Snapshots), watchNamespaces, opts)
}
