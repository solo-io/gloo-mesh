// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/v1/config_snapshot_emitter.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	kubernetes "github.com/solo-io/solo-kit/pkg/api/v1/resources/common/kubernetes"
	v10 "github.com/solo-io/supergloo/pkg/api/v1"
)

// MockConfigEmitter is a mock of ConfigEmitter interface
type MockConfigEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigEmitterMockRecorder
}

// MockConfigEmitterMockRecorder is the mock recorder for MockConfigEmitter
type MockConfigEmitterMockRecorder struct {
	mock *MockConfigEmitter
}

// NewMockConfigEmitter creates a new mock instance
func NewMockConfigEmitter(ctrl *gomock.Controller) *MockConfigEmitter {
	mock := &MockConfigEmitter{ctrl: ctrl}
	mock.recorder = &MockConfigEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigEmitter) EXPECT() *MockConfigEmitterMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockConfigEmitter) Register() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockConfigEmitterMockRecorder) Register() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockConfigEmitter)(nil).Register))
}

// Mesh mocks base method
func (m *MockConfigEmitter) Mesh() v10.MeshClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mesh")
	ret0, _ := ret[0].(v10.MeshClient)
	return ret0
}

// Mesh indicates an expected call of Mesh
func (mr *MockConfigEmitterMockRecorder) Mesh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mesh", reflect.TypeOf((*MockConfigEmitter)(nil).Mesh))
}

// MeshIngress mocks base method
func (m *MockConfigEmitter) MeshIngress() v10.MeshIngressClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeshIngress")
	ret0, _ := ret[0].(v10.MeshIngressClient)
	return ret0
}

// MeshIngress indicates an expected call of MeshIngress
func (mr *MockConfigEmitterMockRecorder) MeshIngress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeshIngress", reflect.TypeOf((*MockConfigEmitter)(nil).MeshIngress))
}

// MeshGroup mocks base method
func (m *MockConfigEmitter) MeshGroup() v10.MeshGroupClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeshGroup")
	ret0, _ := ret[0].(v10.MeshGroupClient)
	return ret0
}

// MeshGroup indicates an expected call of MeshGroup
func (mr *MockConfigEmitterMockRecorder) MeshGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeshGroup", reflect.TypeOf((*MockConfigEmitter)(nil).MeshGroup))
}

// RoutingRule mocks base method
func (m *MockConfigEmitter) RoutingRule() v10.RoutingRuleClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoutingRule")
	ret0, _ := ret[0].(v10.RoutingRuleClient)
	return ret0
}

// RoutingRule indicates an expected call of RoutingRule
func (mr *MockConfigEmitterMockRecorder) RoutingRule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoutingRule", reflect.TypeOf((*MockConfigEmitter)(nil).RoutingRule))
}

// SecurityRule mocks base method
func (m *MockConfigEmitter) SecurityRule() v10.SecurityRuleClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecurityRule")
	ret0, _ := ret[0].(v10.SecurityRuleClient)
	return ret0
}

// SecurityRule indicates an expected call of SecurityRule
func (mr *MockConfigEmitterMockRecorder) SecurityRule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecurityRule", reflect.TypeOf((*MockConfigEmitter)(nil).SecurityRule))
}

// TlsSecret mocks base method
func (m *MockConfigEmitter) TlsSecret() v10.TlsSecretClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TlsSecret")
	ret0, _ := ret[0].(v10.TlsSecretClient)
	return ret0
}

// TlsSecret indicates an expected call of TlsSecret
func (mr *MockConfigEmitterMockRecorder) TlsSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsSecret", reflect.TypeOf((*MockConfigEmitter)(nil).TlsSecret))
}

// Upstream mocks base method
func (m *MockConfigEmitter) Upstream() v1.UpstreamClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upstream")
	ret0, _ := ret[0].(v1.UpstreamClient)
	return ret0
}

// Upstream indicates an expected call of Upstream
func (mr *MockConfigEmitterMockRecorder) Upstream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upstream", reflect.TypeOf((*MockConfigEmitter)(nil).Upstream))
}

// Pod mocks base method
func (m *MockConfigEmitter) Pod() kubernetes.PodClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pod")
	ret0, _ := ret[0].(kubernetes.PodClient)
	return ret0
}

// Pod indicates an expected call of Pod
func (mr *MockConfigEmitterMockRecorder) Pod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pod", reflect.TypeOf((*MockConfigEmitter)(nil).Pod))
}

// Snapshots mocks base method
func (m *MockConfigEmitter) Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *v10.ConfigSnapshot, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", watchNamespaces, opts)
	ret0, _ := ret[0].(<-chan *v10.ConfigSnapshot)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Snapshots indicates an expected call of Snapshots
func (mr *MockConfigEmitterMockRecorder) Snapshots(watchNamespaces, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockConfigEmitter)(nil).Snapshots), watchNamespaces, opts)
}
