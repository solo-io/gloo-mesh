// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/v1/registration_snapshot_emitter.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	v1 "github.com/solo-io/supergloo/pkg/api/v1"
)

// MockRegistrationEmitter is a mock of RegistrationEmitter interface
type MockRegistrationEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationEmitterMockRecorder
}

// MockRegistrationEmitterMockRecorder is the mock recorder for MockRegistrationEmitter
type MockRegistrationEmitterMockRecorder struct {
	mock *MockRegistrationEmitter
}

// NewMockRegistrationEmitter creates a new mock instance
func NewMockRegistrationEmitter(ctrl *gomock.Controller) *MockRegistrationEmitter {
	mock := &MockRegistrationEmitter{ctrl: ctrl}
	mock.recorder = &MockRegistrationEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistrationEmitter) EXPECT() *MockRegistrationEmitterMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockRegistrationEmitter) Register() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockRegistrationEmitterMockRecorder) Register() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistrationEmitter)(nil).Register))
}

// Mesh mocks base method
func (m *MockRegistrationEmitter) Mesh() v1.MeshClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mesh")
	ret0, _ := ret[0].(v1.MeshClient)
	return ret0
}

// Mesh indicates an expected call of Mesh
func (mr *MockRegistrationEmitterMockRecorder) Mesh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mesh", reflect.TypeOf((*MockRegistrationEmitter)(nil).Mesh))
}

// MeshIngress mocks base method
func (m *MockRegistrationEmitter) MeshIngress() v1.MeshIngressClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeshIngress")
	ret0, _ := ret[0].(v1.MeshIngressClient)
	return ret0
}

// MeshIngress indicates an expected call of MeshIngress
func (mr *MockRegistrationEmitterMockRecorder) MeshIngress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeshIngress", reflect.TypeOf((*MockRegistrationEmitter)(nil).MeshIngress))
}

// Snapshots mocks base method
func (m *MockRegistrationEmitter) Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *v1.RegistrationSnapshot, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", watchNamespaces, opts)
	ret0, _ := ret[0].(<-chan *v1.RegistrationSnapshot)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Snapshots indicates an expected call of Snapshots
func (mr *MockRegistrationEmitterMockRecorder) Snapshots(watchNamespaces, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockRegistrationEmitter)(nil).Snapshots), watchNamespaces, opts)
}
