// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/v1/routing_rule_reconciler.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	v1 "github.com/solo-io/supergloo/pkg/api/v1"
)

// MockRoutingRuleReconciler is a mock of RoutingRuleReconciler interface
type MockRoutingRuleReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRoutingRuleReconcilerMockRecorder
}

// MockRoutingRuleReconcilerMockRecorder is the mock recorder for MockRoutingRuleReconciler
type MockRoutingRuleReconcilerMockRecorder struct {
	mock *MockRoutingRuleReconciler
}

// NewMockRoutingRuleReconciler creates a new mock instance
func NewMockRoutingRuleReconciler(ctrl *gomock.Controller) *MockRoutingRuleReconciler {
	mock := &MockRoutingRuleReconciler{ctrl: ctrl}
	mock.recorder = &MockRoutingRuleReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoutingRuleReconciler) EXPECT() *MockRoutingRuleReconcilerMockRecorder {
	return m.recorder
}

// Reconcile mocks base method
func (m *MockRoutingRuleReconciler) Reconcile(namespace string, desiredResources v1.RoutingRuleList, transition v1.TransitionRoutingRuleFunc, opts clients.ListOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", namespace, desiredResources, transition, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile
func (mr *MockRoutingRuleReconcilerMockRecorder) Reconcile(namespace, desiredResources, transition, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockRoutingRuleReconciler)(nil).Reconcile), namespace, desiredResources, transition, opts)
}
