// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/v1/mesh_ingress_reconciler.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	v1 "github.com/solo-io/supergloo/pkg/api/v1"
)

// MockMeshIngressReconciler is a mock of MeshIngressReconciler interface
type MockMeshIngressReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMeshIngressReconcilerMockRecorder
}

// MockMeshIngressReconcilerMockRecorder is the mock recorder for MockMeshIngressReconciler
type MockMeshIngressReconcilerMockRecorder struct {
	mock *MockMeshIngressReconciler
}

// NewMockMeshIngressReconciler creates a new mock instance
func NewMockMeshIngressReconciler(ctrl *gomock.Controller) *MockMeshIngressReconciler {
	mock := &MockMeshIngressReconciler{ctrl: ctrl}
	mock.recorder = &MockMeshIngressReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshIngressReconciler) EXPECT() *MockMeshIngressReconcilerMockRecorder {
	return m.recorder
}

// Reconcile mocks base method
func (m *MockMeshIngressReconciler) Reconcile(namespace string, desiredResources v1.MeshIngressList, transition v1.TransitionMeshIngressFunc, opts clients.ListOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", namespace, desiredResources, transition, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile
func (mr *MockMeshIngressReconcilerMockRecorder) Reconcile(namespace, desiredResources, transition, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockMeshIngressReconciler)(nil).Reconcile), namespace, desiredResources, transition, opts)
}
