// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"sort"

	"github.com/gogo/protobuf/proto"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"github.com/solo-io/solo-kit/pkg/utils/hashutils"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// TODO: modify as needed to populate additional fields
func NewInstall(namespace, name string) *Install {
	return &Install{
		Metadata: core.Metadata{
			Name:      name,
			Namespace: namespace,
		},
	}
}

func (r *Install) SetStatus(status core.Status) {
	r.Status = status
}

func (r *Install) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *Install) Hash() uint64 {
	metaCopy := r.GetMetadata()
	metaCopy.ResourceVersion = ""
	return hashutils.HashAll(
		metaCopy,
		r.Disabled,
		r.InstallationNamespace,
		r.InstallType,
	)
}

type InstallList []*Install
type InstallsByNamespace map[string]InstallList

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list InstallList) Find(namespace, name string) (*Install, error) {
	for _, install := range list {
		if install.Metadata.Name == name {
			if namespace == "" || install.Metadata.Namespace == namespace {
				return install, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find install %v.%v", namespace, name)
}

func (list InstallList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, install := range list {
		ress = append(ress, install)
	}
	return ress
}

func (list InstallList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, install := range list {
		ress = append(ress, install)
	}
	return ress
}

func (list InstallList) Names() []string {
	var names []string
	for _, install := range list {
		names = append(names, install.Metadata.Name)
	}
	return names
}

func (list InstallList) NamespacesDotNames() []string {
	var names []string
	for _, install := range list {
		names = append(names, install.Metadata.Namespace+"."+install.Metadata.Name)
	}
	return names
}

func (list InstallList) Sort() InstallList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].Metadata.Less(list[j].Metadata)
	})
	return list
}

func (list InstallList) Clone() InstallList {
	var installList InstallList
	for _, install := range list {
		installList = append(installList, proto.Clone(install).(*Install))
	}
	return installList
}

func (list InstallList) Each(f func(element *Install)) {
	for _, install := range list {
		f(install)
	}
}

func (list InstallList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *Install) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

func (byNamespace InstallsByNamespace) Add(install ...*Install) {
	for _, item := range install {
		byNamespace[item.Metadata.Namespace] = append(byNamespace[item.Metadata.Namespace], item)
	}
}

func (byNamespace InstallsByNamespace) Clear(namespace string) {
	delete(byNamespace, namespace)
}

func (byNamespace InstallsByNamespace) List() InstallList {
	var list InstallList
	for _, installList := range byNamespace {
		list = append(list, installList...)
	}
	return list.Sort()
}

func (byNamespace InstallsByNamespace) Clone() InstallsByNamespace {
	cloned := make(InstallsByNamespace)
	for ns, list := range byNamespace {
		cloned[ns] = list.Clone()
	}
	return cloned
}

var _ resources.Resource = &Install{}

// Kubernetes Adapter for Install

func (o *Install) GetObjectKind() schema.ObjectKind {
	t := InstallCrd.TypeMeta()
	return &t
}

func (o *Install) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*Install)
}

var InstallCrd = crd.NewCrd("supergloo.solo.io",
	"installs",
	"supergloo.solo.io",
	"v1",
	"Install",
	"i",
	false,
	&Install{})
