// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"sort"

	"github.com/solo-io/go-utils/hashutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewMeshIngress(namespace, name string) *MeshIngress {
	meshingress := &MeshIngress{}
	meshingress.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return meshingress
}

func (r *MeshIngress) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *MeshIngress) SetStatus(status core.Status) {
	r.Status = status
}

func (r *MeshIngress) Hash() uint64 {
	metaCopy := r.GetMetadata()
	metaCopy.ResourceVersion = ""
	return hashutils.HashAll(
		metaCopy,
		r.InstallationNamespace,
		r.Meshes,
		r.MeshIngressType,
	)
}

type MeshIngressList []*MeshIngress
type MeshingressesByNamespace map[string]MeshIngressList

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list MeshIngressList) Find(namespace, name string) (*MeshIngress, error) {
	for _, meshIngress := range list {
		if meshIngress.GetMetadata().Name == name {
			if namespace == "" || meshIngress.GetMetadata().Namespace == namespace {
				return meshIngress, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find meshIngress %v.%v", namespace, name)
}

func (list MeshIngressList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, meshIngress := range list {
		ress = append(ress, meshIngress)
	}
	return ress
}

func (list MeshIngressList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, meshIngress := range list {
		ress = append(ress, meshIngress)
	}
	return ress
}

func (list MeshIngressList) Names() []string {
	var names []string
	for _, meshIngress := range list {
		names = append(names, meshIngress.GetMetadata().Name)
	}
	return names
}

func (list MeshIngressList) NamespacesDotNames() []string {
	var names []string
	for _, meshIngress := range list {
		names = append(names, meshIngress.GetMetadata().Namespace+"."+meshIngress.GetMetadata().Name)
	}
	return names
}

func (list MeshIngressList) Sort() MeshIngressList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list MeshIngressList) Clone() MeshIngressList {
	var meshIngressList MeshIngressList
	for _, meshIngress := range list {
		meshIngressList = append(meshIngressList, resources.Clone(meshIngress).(*MeshIngress))
	}
	return meshIngressList
}

func (list MeshIngressList) Each(f func(element *MeshIngress)) {
	for _, meshIngress := range list {
		f(meshIngress)
	}
}

func (list MeshIngressList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *MeshIngress) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

func (byNamespace MeshingressesByNamespace) Add(meshIngress ...*MeshIngress) {
	for _, item := range meshIngress {
		byNamespace[item.GetMetadata().Namespace] = append(byNamespace[item.GetMetadata().Namespace], item)
	}
}

func (byNamespace MeshingressesByNamespace) Clear(namespace string) {
	delete(byNamespace, namespace)
}

func (byNamespace MeshingressesByNamespace) List() MeshIngressList {
	var list MeshIngressList
	for _, meshIngressList := range byNamespace {
		list = append(list, meshIngressList...)
	}
	return list.Sort()
}

func (byNamespace MeshingressesByNamespace) Clone() MeshingressesByNamespace {
	cloned := make(MeshingressesByNamespace)
	for ns, list := range byNamespace {
		cloned[ns] = list.Clone()
	}
	return cloned
}

var _ resources.Resource = &MeshIngress{}

// Kubernetes Adapter for MeshIngress

func (o *MeshIngress) GetObjectKind() schema.ObjectKind {
	t := MeshIngressCrd.TypeMeta()
	return &t
}

func (o *MeshIngress) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*MeshIngress)
}

var MeshIngressCrd = crd.NewCrd("supergloo.solo.io",
	"meshingresses",
	"supergloo.solo.io",
	"v1",
	"MeshIngress",
	"mi",
	false,
	&MeshIngress{})
