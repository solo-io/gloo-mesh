// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"

	"github.com/solo-io/solo-kit/pkg/utils/hashutils"
	"go.uber.org/zap"
)

type MeshdiscoverySnapshot struct {
	Pods   PodsByNamespace
	Meshes MeshesByNamespace
}

func (s MeshdiscoverySnapshot) Clone() MeshdiscoverySnapshot {
	return MeshdiscoverySnapshot{
		Pods:   s.Pods.Clone(),
		Meshes: s.Meshes.Clone(),
	}
}

func (s MeshdiscoverySnapshot) Hash() uint64 {
	return hashutils.HashAll(
		s.hashPods(),
		s.hashMeshes(),
	)
}

func (s MeshdiscoverySnapshot) hashPods() uint64 {
	return hashutils.HashAll(s.Pods.List().AsInterfaces()...)
}

func (s MeshdiscoverySnapshot) hashMeshes() uint64 {
	return hashutils.HashAll(s.Meshes.List().AsInterfaces()...)
}

func (s MeshdiscoverySnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	fields = append(fields, zap.Uint64("pods", s.hashPods()))
	fields = append(fields, zap.Uint64("meshes", s.hashMeshes()))

	return append(fields, zap.Uint64("snapshotHash", s.Hash()))
}

type MeshdiscoverySnapshotStringer struct {
	Version uint64
	Pods    []string
	Meshes  []string
}

func (ss MeshdiscoverySnapshotStringer) String() string {
	s := fmt.Sprintf("MeshdiscoverySnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Pods %v\n", len(ss.Pods))
	for _, name := range ss.Pods {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Meshes %v\n", len(ss.Meshes))
	for _, name := range ss.Meshes {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s MeshdiscoverySnapshot) Stringer() MeshdiscoverySnapshotStringer {
	return MeshdiscoverySnapshotStringer{
		Version: s.Hash(),
		Pods:    s.Pods.List().NamespacesDotNames(),
		Meshes:  s.Meshes.List().NamespacesDotNames(),
	}
}
