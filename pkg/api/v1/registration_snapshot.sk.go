// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"

	"github.com/solo-io/solo-kit/pkg/utils/hashutils"
	"go.uber.org/zap"
)

type RegistrationSnapshot struct {
	Meshes MeshesByNamespace
}

func (s RegistrationSnapshot) Clone() RegistrationSnapshot {
	return RegistrationSnapshot{
		Meshes: s.Meshes.Clone(),
	}
}

func (s RegistrationSnapshot) Hash() uint64 {
	return hashutils.HashAll(
		s.hashMeshes(),
	)
}

func (s RegistrationSnapshot) hashMeshes() uint64 {
	return hashutils.HashAll(s.Meshes.List().AsInterfaces()...)
}

func (s RegistrationSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	fields = append(fields, zap.Uint64("meshes", s.hashMeshes()))

	return append(fields, zap.Uint64("snapshotHash", s.Hash()))
}

type RegistrationSnapshotStringer struct {
	Version uint64
	Meshes  []string
}

func (ss RegistrationSnapshotStringer) String() string {
	s := fmt.Sprintf("RegistrationSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Meshes %v\n", len(ss.Meshes))
	for _, name := range ss.Meshes {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s RegistrationSnapshot) Stringer() RegistrationSnapshotStringer {
	return RegistrationSnapshotStringer{
		Version: s.Hash(),
		Meshes:  s.Meshes.List().NamespacesDotNames(),
	}
}
