// Code generated by solo-kit. DO NOT EDIT.

// +build solokit

package v1

import (
	"context"
	"os"
	"time"

	gloo_solo_io "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	core_kubernetes_io "github.com/solo-io/supergloo/pkg/api/external/kubernetes/core/v1"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/solo-io/go-utils/kubeutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	kuberc "github.com/solo-io/solo-kit/pkg/api/v1/clients/kube"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/memory"
	"github.com/solo-io/solo-kit/pkg/utils/log"
	"github.com/solo-io/solo-kit/test/helpers"
	"github.com/solo-io/solo-kit/test/setup"
	"k8s.io/client-go/rest"

	// Needed to run tests in GKE
	_ "k8s.io/client-go/plugin/pkg/client/auth/gcp"

	// From https://github.com/kubernetes/client-go/blob/53c7adfd0294caa142d961e1f780f74081d5b15f/examples/out-of-cluster-client-configuration/main.go#L31
	_ "k8s.io/client-go/plugin/pkg/client/auth/gcp"
)

var _ = Describe("V1Emitter", func() {
	if os.Getenv("RUN_KUBE_TESTS") != "1" {
		log.Printf("This test creates kubernetes resources and is disabled by default. To enable, set RUN_KUBE_TESTS=1 in your env.")
		return
	}
	var (
		namespace1         string
		namespace2         string
		name1, name2       = "angela" + helpers.RandString(3), "bob" + helpers.RandString(3)
		cfg                *rest.Config
		emitter            ConfigEmitter
		meshClient         MeshClient
		meshIngressClient  MeshIngressClient
		meshGroupClient    MeshGroupClient
		routingRuleClient  RoutingRuleClient
		securityRuleClient SecurityRuleClient
		tlsSecretClient    TlsSecretClient
		upstreamClient     gloo_solo_io.UpstreamClient
		podClient          core_kubernetes_io.PodClient
	)

	BeforeEach(func() {
		namespace1 = helpers.RandString(8)
		namespace2 = helpers.RandString(8)
		var err error
		cfg, err = kubeutils.GetConfig("", "")
		Expect(err).NotTo(HaveOccurred())
		err = setup.SetupKubeForTest(namespace1)
		Expect(err).NotTo(HaveOccurred())
		err = setup.SetupKubeForTest(namespace2)
		Expect(err).NotTo(HaveOccurred())
		// Mesh Constructor
		meshClientFactory := &factory.KubeResourceClientFactory{
			Crd:         MeshCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(context.TODO()),
		}

		meshClient, err = NewMeshClient(meshClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// MeshIngress Constructor
		meshIngressClientFactory := &factory.KubeResourceClientFactory{
			Crd:         MeshIngressCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(context.TODO()),
		}

		meshIngressClient, err = NewMeshIngressClient(meshIngressClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// MeshGroup Constructor
		meshGroupClientFactory := &factory.KubeResourceClientFactory{
			Crd:         MeshGroupCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(context.TODO()),
		}

		meshGroupClient, err = NewMeshGroupClient(meshGroupClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// RoutingRule Constructor
		routingRuleClientFactory := &factory.KubeResourceClientFactory{
			Crd:         RoutingRuleCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(context.TODO()),
		}

		routingRuleClient, err = NewRoutingRuleClient(routingRuleClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// SecurityRule Constructor
		securityRuleClientFactory := &factory.KubeResourceClientFactory{
			Crd:         SecurityRuleCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(context.TODO()),
		}

		securityRuleClient, err = NewSecurityRuleClient(securityRuleClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// TlsSecret Constructor
		tlsSecretClientFactory := &factory.MemoryResourceClientFactory{
			Cache: memory.NewInMemoryResourceCache(),
		}

		tlsSecretClient, err = NewTlsSecretClient(tlsSecretClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// Upstream Constructor
		upstreamClientFactory := &factory.KubeResourceClientFactory{
			Crd:         gloo_solo_io.UpstreamCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(context.TODO()),
		}

		upstreamClient, err = gloo_solo_io.NewUpstreamClient(upstreamClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// Pod Constructor
		podClientFactory := &factory.MemoryResourceClientFactory{
			Cache: memory.NewInMemoryResourceCache(),
		}

		podClient, err = core_kubernetes_io.NewPodClient(podClientFactory)
		Expect(err).NotTo(HaveOccurred())
		emitter = NewConfigEmitter(meshClient, meshIngressClient, meshGroupClient, routingRuleClient, securityRuleClient, tlsSecretClient, upstreamClient, podClient)
	})
	AfterEach(func() {
		setup.TeardownKube(namespace1)
		setup.TeardownKube(namespace2)
	})
	It("tracks snapshots on changes to any resource", func() {
		ctx := context.Background()
		err := emitter.Register()
		Expect(err).NotTo(HaveOccurred())

		snapshots, errs, err := emitter.Snapshots([]string{namespace1, namespace2}, clients.WatchOpts{
			Ctx:         ctx,
			RefreshRate: time.Second,
		})
		Expect(err).NotTo(HaveOccurred())

		var snap *ConfigSnapshot

		/*
			Mesh
		*/

		assertSnapshotMeshes := func(expectMeshes MeshList, unexpectMeshes MeshList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectMeshes {
						if _, err := snap.Meshes.List().Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectMeshes {
						if _, err := snap.Meshes.List().Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := meshClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := meshClient.List(namespace2, clients.ListOpts{})
					combined := MeshesByNamespace{
						namespace1: nsList1,
						namespace2: nsList2,
					}
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		mesh1a, err := meshClient.Write(NewMesh(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mesh1b, err := meshClient.Write(NewMesh(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshes(MeshList{mesh1a, mesh1b}, nil)
		mesh2a, err := meshClient.Write(NewMesh(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mesh2b, err := meshClient.Write(NewMesh(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshes(MeshList{mesh1a, mesh1b, mesh2a, mesh2b}, nil)

		err = meshClient.Delete(mesh2a.GetMetadata().Namespace, mesh2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = meshClient.Delete(mesh2b.GetMetadata().Namespace, mesh2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshes(MeshList{mesh1a, mesh1b}, MeshList{mesh2a, mesh2b})

		err = meshClient.Delete(mesh1a.GetMetadata().Namespace, mesh1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = meshClient.Delete(mesh1b.GetMetadata().Namespace, mesh1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshes(nil, MeshList{mesh1a, mesh1b, mesh2a, mesh2b})

		/*
			MeshIngress
		*/

		assertSnapshotMeshingresses := func(expectMeshingresses MeshIngressList, unexpectMeshingresses MeshIngressList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectMeshingresses {
						if _, err := snap.Meshingresses.List().Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectMeshingresses {
						if _, err := snap.Meshingresses.List().Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := meshIngressClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := meshIngressClient.List(namespace2, clients.ListOpts{})
					combined := MeshingressesByNamespace{
						namespace1: nsList1,
						namespace2: nsList2,
					}
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		meshIngress1a, err := meshIngressClient.Write(NewMeshIngress(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		meshIngress1b, err := meshIngressClient.Write(NewMeshIngress(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshingresses(MeshIngressList{meshIngress1a, meshIngress1b}, nil)
		meshIngress2a, err := meshIngressClient.Write(NewMeshIngress(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		meshIngress2b, err := meshIngressClient.Write(NewMeshIngress(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshingresses(MeshIngressList{meshIngress1a, meshIngress1b, meshIngress2a, meshIngress2b}, nil)

		err = meshIngressClient.Delete(meshIngress2a.GetMetadata().Namespace, meshIngress2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = meshIngressClient.Delete(meshIngress2b.GetMetadata().Namespace, meshIngress2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshingresses(MeshIngressList{meshIngress1a, meshIngress1b}, MeshIngressList{meshIngress2a, meshIngress2b})

		err = meshIngressClient.Delete(meshIngress1a.GetMetadata().Namespace, meshIngress1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = meshIngressClient.Delete(meshIngress1b.GetMetadata().Namespace, meshIngress1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshingresses(nil, MeshIngressList{meshIngress1a, meshIngress1b, meshIngress2a, meshIngress2b})

		/*
			MeshGroup
		*/

		assertSnapshotMeshgroups := func(expectMeshgroups MeshGroupList, unexpectMeshgroups MeshGroupList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectMeshgroups {
						if _, err := snap.Meshgroups.List().Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectMeshgroups {
						if _, err := snap.Meshgroups.List().Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := meshGroupClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := meshGroupClient.List(namespace2, clients.ListOpts{})
					combined := MeshgroupsByNamespace{
						namespace1: nsList1,
						namespace2: nsList2,
					}
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		meshGroup1a, err := meshGroupClient.Write(NewMeshGroup(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		meshGroup1b, err := meshGroupClient.Write(NewMeshGroup(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshgroups(MeshGroupList{meshGroup1a, meshGroup1b}, nil)
		meshGroup2a, err := meshGroupClient.Write(NewMeshGroup(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		meshGroup2b, err := meshGroupClient.Write(NewMeshGroup(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshgroups(MeshGroupList{meshGroup1a, meshGroup1b, meshGroup2a, meshGroup2b}, nil)

		err = meshGroupClient.Delete(meshGroup2a.GetMetadata().Namespace, meshGroup2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = meshGroupClient.Delete(meshGroup2b.GetMetadata().Namespace, meshGroup2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshgroups(MeshGroupList{meshGroup1a, meshGroup1b}, MeshGroupList{meshGroup2a, meshGroup2b})

		err = meshGroupClient.Delete(meshGroup1a.GetMetadata().Namespace, meshGroup1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = meshGroupClient.Delete(meshGroup1b.GetMetadata().Namespace, meshGroup1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshgroups(nil, MeshGroupList{meshGroup1a, meshGroup1b, meshGroup2a, meshGroup2b})

		/*
			RoutingRule
		*/

		assertSnapshotRoutingrules := func(expectRoutingrules RoutingRuleList, unexpectRoutingrules RoutingRuleList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectRoutingrules {
						if _, err := snap.Routingrules.List().Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectRoutingrules {
						if _, err := snap.Routingrules.List().Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := routingRuleClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := routingRuleClient.List(namespace2, clients.ListOpts{})
					combined := RoutingrulesByNamespace{
						namespace1: nsList1,
						namespace2: nsList2,
					}
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		routingRule1a, err := routingRuleClient.Write(NewRoutingRule(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		routingRule1b, err := routingRuleClient.Write(NewRoutingRule(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotRoutingrules(RoutingRuleList{routingRule1a, routingRule1b}, nil)
		routingRule2a, err := routingRuleClient.Write(NewRoutingRule(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		routingRule2b, err := routingRuleClient.Write(NewRoutingRule(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotRoutingrules(RoutingRuleList{routingRule1a, routingRule1b, routingRule2a, routingRule2b}, nil)

		err = routingRuleClient.Delete(routingRule2a.GetMetadata().Namespace, routingRule2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = routingRuleClient.Delete(routingRule2b.GetMetadata().Namespace, routingRule2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotRoutingrules(RoutingRuleList{routingRule1a, routingRule1b}, RoutingRuleList{routingRule2a, routingRule2b})

		err = routingRuleClient.Delete(routingRule1a.GetMetadata().Namespace, routingRule1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = routingRuleClient.Delete(routingRule1b.GetMetadata().Namespace, routingRule1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotRoutingrules(nil, RoutingRuleList{routingRule1a, routingRule1b, routingRule2a, routingRule2b})

		/*
			SecurityRule
		*/

		assertSnapshotSecurityrules := func(expectSecurityrules SecurityRuleList, unexpectSecurityrules SecurityRuleList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectSecurityrules {
						if _, err := snap.Securityrules.List().Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectSecurityrules {
						if _, err := snap.Securityrules.List().Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := securityRuleClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := securityRuleClient.List(namespace2, clients.ListOpts{})
					combined := SecurityrulesByNamespace{
						namespace1: nsList1,
						namespace2: nsList2,
					}
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		securityRule1a, err := securityRuleClient.Write(NewSecurityRule(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		securityRule1b, err := securityRuleClient.Write(NewSecurityRule(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotSecurityrules(SecurityRuleList{securityRule1a, securityRule1b}, nil)
		securityRule2a, err := securityRuleClient.Write(NewSecurityRule(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		securityRule2b, err := securityRuleClient.Write(NewSecurityRule(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotSecurityrules(SecurityRuleList{securityRule1a, securityRule1b, securityRule2a, securityRule2b}, nil)

		err = securityRuleClient.Delete(securityRule2a.GetMetadata().Namespace, securityRule2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = securityRuleClient.Delete(securityRule2b.GetMetadata().Namespace, securityRule2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotSecurityrules(SecurityRuleList{securityRule1a, securityRule1b}, SecurityRuleList{securityRule2a, securityRule2b})

		err = securityRuleClient.Delete(securityRule1a.GetMetadata().Namespace, securityRule1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = securityRuleClient.Delete(securityRule1b.GetMetadata().Namespace, securityRule1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotSecurityrules(nil, SecurityRuleList{securityRule1a, securityRule1b, securityRule2a, securityRule2b})

		/*
			TlsSecret
		*/

		assertSnapshotTlssecrets := func(expectTlssecrets TlsSecretList, unexpectTlssecrets TlsSecretList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectTlssecrets {
						if _, err := snap.Tlssecrets.List().Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectTlssecrets {
						if _, err := snap.Tlssecrets.List().Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := tlsSecretClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := tlsSecretClient.List(namespace2, clients.ListOpts{})
					combined := TlssecretsByNamespace{
						namespace1: nsList1,
						namespace2: nsList2,
					}
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		tlsSecret1a, err := tlsSecretClient.Write(NewTlsSecret(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		tlsSecret1b, err := tlsSecretClient.Write(NewTlsSecret(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotTlssecrets(TlsSecretList{tlsSecret1a, tlsSecret1b}, nil)
		tlsSecret2a, err := tlsSecretClient.Write(NewTlsSecret(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		tlsSecret2b, err := tlsSecretClient.Write(NewTlsSecret(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotTlssecrets(TlsSecretList{tlsSecret1a, tlsSecret1b, tlsSecret2a, tlsSecret2b}, nil)

		err = tlsSecretClient.Delete(tlsSecret2a.GetMetadata().Namespace, tlsSecret2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = tlsSecretClient.Delete(tlsSecret2b.GetMetadata().Namespace, tlsSecret2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotTlssecrets(TlsSecretList{tlsSecret1a, tlsSecret1b}, TlsSecretList{tlsSecret2a, tlsSecret2b})

		err = tlsSecretClient.Delete(tlsSecret1a.GetMetadata().Namespace, tlsSecret1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = tlsSecretClient.Delete(tlsSecret1b.GetMetadata().Namespace, tlsSecret1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotTlssecrets(nil, TlsSecretList{tlsSecret1a, tlsSecret1b, tlsSecret2a, tlsSecret2b})

		/*
			Upstream
		*/

		assertSnapshotUpstreams := func(expectUpstreams gloo_solo_io.UpstreamList, unexpectUpstreams gloo_solo_io.UpstreamList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectUpstreams {
						if _, err := snap.Upstreams.List().Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectUpstreams {
						if _, err := snap.Upstreams.List().Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := upstreamClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := upstreamClient.List(namespace2, clients.ListOpts{})
					combined := gloo_solo_io.UpstreamsByNamespace{
						namespace1: nsList1,
						namespace2: nsList2,
					}
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		upstream1a, err := upstreamClient.Write(gloo_solo_io.NewUpstream(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		upstream1b, err := upstreamClient.Write(gloo_solo_io.NewUpstream(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotUpstreams(gloo_solo_io.UpstreamList{upstream1a, upstream1b}, nil)
		upstream2a, err := upstreamClient.Write(gloo_solo_io.NewUpstream(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		upstream2b, err := upstreamClient.Write(gloo_solo_io.NewUpstream(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotUpstreams(gloo_solo_io.UpstreamList{upstream1a, upstream1b, upstream2a, upstream2b}, nil)

		err = upstreamClient.Delete(upstream2a.GetMetadata().Namespace, upstream2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = upstreamClient.Delete(upstream2b.GetMetadata().Namespace, upstream2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotUpstreams(gloo_solo_io.UpstreamList{upstream1a, upstream1b}, gloo_solo_io.UpstreamList{upstream2a, upstream2b})

		err = upstreamClient.Delete(upstream1a.GetMetadata().Namespace, upstream1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = upstreamClient.Delete(upstream1b.GetMetadata().Namespace, upstream1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotUpstreams(nil, gloo_solo_io.UpstreamList{upstream1a, upstream1b, upstream2a, upstream2b})

		/*
			Pod
		*/

		assertSnapshotPods := func(expectPods core_kubernetes_io.PodList, unexpectPods core_kubernetes_io.PodList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectPods {
						if _, err := snap.Pods.List().Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectPods {
						if _, err := snap.Pods.List().Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := podClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := podClient.List(namespace2, clients.ListOpts{})
					combined := core_kubernetes_io.PodsByNamespace{
						namespace1: nsList1,
						namespace2: nsList2,
					}
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		pod1a, err := podClient.Write(core_kubernetes_io.NewPod(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		pod1b, err := podClient.Write(core_kubernetes_io.NewPod(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotPods(core_kubernetes_io.PodList{pod1a, pod1b}, nil)
		pod2a, err := podClient.Write(core_kubernetes_io.NewPod(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		pod2b, err := podClient.Write(core_kubernetes_io.NewPod(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotPods(core_kubernetes_io.PodList{pod1a, pod1b, pod2a, pod2b}, nil)

		err = podClient.Delete(pod2a.GetMetadata().Namespace, pod2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = podClient.Delete(pod2b.GetMetadata().Namespace, pod2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotPods(core_kubernetes_io.PodList{pod1a, pod1b}, core_kubernetes_io.PodList{pod2a, pod2b})

		err = podClient.Delete(pod1a.GetMetadata().Namespace, pod1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = podClient.Delete(pod1b.GetMetadata().Namespace, pod1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotPods(nil, core_kubernetes_io.PodList{pod1a, pod1b, pod2a, pod2b})
	})
	It("tracks snapshots on changes to any resource using AllNamespace", func() {
		ctx := context.Background()
		err := emitter.Register()
		Expect(err).NotTo(HaveOccurred())

		snapshots, errs, err := emitter.Snapshots([]string{""}, clients.WatchOpts{
			Ctx:         ctx,
			RefreshRate: time.Second,
		})
		Expect(err).NotTo(HaveOccurred())

		var snap *ConfigSnapshot

		/*
			Mesh
		*/

		assertSnapshotMeshes := func(expectMeshes MeshList, unexpectMeshes MeshList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectMeshes {
						if _, err := snap.Meshes.List().Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectMeshes {
						if _, err := snap.Meshes.List().Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := meshClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := meshClient.List(namespace2, clients.ListOpts{})
					combined := MeshesByNamespace{
						namespace1: nsList1,
						namespace2: nsList2,
					}
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		mesh1a, err := meshClient.Write(NewMesh(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mesh1b, err := meshClient.Write(NewMesh(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshes(MeshList{mesh1a, mesh1b}, nil)
		mesh2a, err := meshClient.Write(NewMesh(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mesh2b, err := meshClient.Write(NewMesh(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshes(MeshList{mesh1a, mesh1b, mesh2a, mesh2b}, nil)

		err = meshClient.Delete(mesh2a.GetMetadata().Namespace, mesh2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = meshClient.Delete(mesh2b.GetMetadata().Namespace, mesh2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshes(MeshList{mesh1a, mesh1b}, MeshList{mesh2a, mesh2b})

		err = meshClient.Delete(mesh1a.GetMetadata().Namespace, mesh1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = meshClient.Delete(mesh1b.GetMetadata().Namespace, mesh1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshes(nil, MeshList{mesh1a, mesh1b, mesh2a, mesh2b})

		/*
			MeshIngress
		*/

		assertSnapshotMeshingresses := func(expectMeshingresses MeshIngressList, unexpectMeshingresses MeshIngressList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectMeshingresses {
						if _, err := snap.Meshingresses.List().Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectMeshingresses {
						if _, err := snap.Meshingresses.List().Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := meshIngressClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := meshIngressClient.List(namespace2, clients.ListOpts{})
					combined := MeshingressesByNamespace{
						namespace1: nsList1,
						namespace2: nsList2,
					}
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		meshIngress1a, err := meshIngressClient.Write(NewMeshIngress(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		meshIngress1b, err := meshIngressClient.Write(NewMeshIngress(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshingresses(MeshIngressList{meshIngress1a, meshIngress1b}, nil)
		meshIngress2a, err := meshIngressClient.Write(NewMeshIngress(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		meshIngress2b, err := meshIngressClient.Write(NewMeshIngress(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshingresses(MeshIngressList{meshIngress1a, meshIngress1b, meshIngress2a, meshIngress2b}, nil)

		err = meshIngressClient.Delete(meshIngress2a.GetMetadata().Namespace, meshIngress2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = meshIngressClient.Delete(meshIngress2b.GetMetadata().Namespace, meshIngress2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshingresses(MeshIngressList{meshIngress1a, meshIngress1b}, MeshIngressList{meshIngress2a, meshIngress2b})

		err = meshIngressClient.Delete(meshIngress1a.GetMetadata().Namespace, meshIngress1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = meshIngressClient.Delete(meshIngress1b.GetMetadata().Namespace, meshIngress1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshingresses(nil, MeshIngressList{meshIngress1a, meshIngress1b, meshIngress2a, meshIngress2b})

		/*
			MeshGroup
		*/

		assertSnapshotMeshgroups := func(expectMeshgroups MeshGroupList, unexpectMeshgroups MeshGroupList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectMeshgroups {
						if _, err := snap.Meshgroups.List().Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectMeshgroups {
						if _, err := snap.Meshgroups.List().Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := meshGroupClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := meshGroupClient.List(namespace2, clients.ListOpts{})
					combined := MeshgroupsByNamespace{
						namespace1: nsList1,
						namespace2: nsList2,
					}
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		meshGroup1a, err := meshGroupClient.Write(NewMeshGroup(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		meshGroup1b, err := meshGroupClient.Write(NewMeshGroup(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshgroups(MeshGroupList{meshGroup1a, meshGroup1b}, nil)
		meshGroup2a, err := meshGroupClient.Write(NewMeshGroup(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		meshGroup2b, err := meshGroupClient.Write(NewMeshGroup(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshgroups(MeshGroupList{meshGroup1a, meshGroup1b, meshGroup2a, meshGroup2b}, nil)

		err = meshGroupClient.Delete(meshGroup2a.GetMetadata().Namespace, meshGroup2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = meshGroupClient.Delete(meshGroup2b.GetMetadata().Namespace, meshGroup2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshgroups(MeshGroupList{meshGroup1a, meshGroup1b}, MeshGroupList{meshGroup2a, meshGroup2b})

		err = meshGroupClient.Delete(meshGroup1a.GetMetadata().Namespace, meshGroup1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = meshGroupClient.Delete(meshGroup1b.GetMetadata().Namespace, meshGroup1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshgroups(nil, MeshGroupList{meshGroup1a, meshGroup1b, meshGroup2a, meshGroup2b})

		/*
			RoutingRule
		*/

		assertSnapshotRoutingrules := func(expectRoutingrules RoutingRuleList, unexpectRoutingrules RoutingRuleList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectRoutingrules {
						if _, err := snap.Routingrules.List().Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectRoutingrules {
						if _, err := snap.Routingrules.List().Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := routingRuleClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := routingRuleClient.List(namespace2, clients.ListOpts{})
					combined := RoutingrulesByNamespace{
						namespace1: nsList1,
						namespace2: nsList2,
					}
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		routingRule1a, err := routingRuleClient.Write(NewRoutingRule(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		routingRule1b, err := routingRuleClient.Write(NewRoutingRule(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotRoutingrules(RoutingRuleList{routingRule1a, routingRule1b}, nil)
		routingRule2a, err := routingRuleClient.Write(NewRoutingRule(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		routingRule2b, err := routingRuleClient.Write(NewRoutingRule(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotRoutingrules(RoutingRuleList{routingRule1a, routingRule1b, routingRule2a, routingRule2b}, nil)

		err = routingRuleClient.Delete(routingRule2a.GetMetadata().Namespace, routingRule2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = routingRuleClient.Delete(routingRule2b.GetMetadata().Namespace, routingRule2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotRoutingrules(RoutingRuleList{routingRule1a, routingRule1b}, RoutingRuleList{routingRule2a, routingRule2b})

		err = routingRuleClient.Delete(routingRule1a.GetMetadata().Namespace, routingRule1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = routingRuleClient.Delete(routingRule1b.GetMetadata().Namespace, routingRule1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotRoutingrules(nil, RoutingRuleList{routingRule1a, routingRule1b, routingRule2a, routingRule2b})

		/*
			SecurityRule
		*/

		assertSnapshotSecurityrules := func(expectSecurityrules SecurityRuleList, unexpectSecurityrules SecurityRuleList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectSecurityrules {
						if _, err := snap.Securityrules.List().Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectSecurityrules {
						if _, err := snap.Securityrules.List().Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := securityRuleClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := securityRuleClient.List(namespace2, clients.ListOpts{})
					combined := SecurityrulesByNamespace{
						namespace1: nsList1,
						namespace2: nsList2,
					}
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		securityRule1a, err := securityRuleClient.Write(NewSecurityRule(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		securityRule1b, err := securityRuleClient.Write(NewSecurityRule(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotSecurityrules(SecurityRuleList{securityRule1a, securityRule1b}, nil)
		securityRule2a, err := securityRuleClient.Write(NewSecurityRule(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		securityRule2b, err := securityRuleClient.Write(NewSecurityRule(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotSecurityrules(SecurityRuleList{securityRule1a, securityRule1b, securityRule2a, securityRule2b}, nil)

		err = securityRuleClient.Delete(securityRule2a.GetMetadata().Namespace, securityRule2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = securityRuleClient.Delete(securityRule2b.GetMetadata().Namespace, securityRule2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotSecurityrules(SecurityRuleList{securityRule1a, securityRule1b}, SecurityRuleList{securityRule2a, securityRule2b})

		err = securityRuleClient.Delete(securityRule1a.GetMetadata().Namespace, securityRule1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = securityRuleClient.Delete(securityRule1b.GetMetadata().Namespace, securityRule1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotSecurityrules(nil, SecurityRuleList{securityRule1a, securityRule1b, securityRule2a, securityRule2b})

		/*
			TlsSecret
		*/

		assertSnapshotTlssecrets := func(expectTlssecrets TlsSecretList, unexpectTlssecrets TlsSecretList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectTlssecrets {
						if _, err := snap.Tlssecrets.List().Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectTlssecrets {
						if _, err := snap.Tlssecrets.List().Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := tlsSecretClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := tlsSecretClient.List(namespace2, clients.ListOpts{})
					combined := TlssecretsByNamespace{
						namespace1: nsList1,
						namespace2: nsList2,
					}
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		tlsSecret1a, err := tlsSecretClient.Write(NewTlsSecret(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		tlsSecret1b, err := tlsSecretClient.Write(NewTlsSecret(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotTlssecrets(TlsSecretList{tlsSecret1a, tlsSecret1b}, nil)
		tlsSecret2a, err := tlsSecretClient.Write(NewTlsSecret(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		tlsSecret2b, err := tlsSecretClient.Write(NewTlsSecret(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotTlssecrets(TlsSecretList{tlsSecret1a, tlsSecret1b, tlsSecret2a, tlsSecret2b}, nil)

		err = tlsSecretClient.Delete(tlsSecret2a.GetMetadata().Namespace, tlsSecret2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = tlsSecretClient.Delete(tlsSecret2b.GetMetadata().Namespace, tlsSecret2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotTlssecrets(TlsSecretList{tlsSecret1a, tlsSecret1b}, TlsSecretList{tlsSecret2a, tlsSecret2b})

		err = tlsSecretClient.Delete(tlsSecret1a.GetMetadata().Namespace, tlsSecret1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = tlsSecretClient.Delete(tlsSecret1b.GetMetadata().Namespace, tlsSecret1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotTlssecrets(nil, TlsSecretList{tlsSecret1a, tlsSecret1b, tlsSecret2a, tlsSecret2b})

		/*
			Upstream
		*/

		assertSnapshotUpstreams := func(expectUpstreams gloo_solo_io.UpstreamList, unexpectUpstreams gloo_solo_io.UpstreamList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectUpstreams {
						if _, err := snap.Upstreams.List().Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectUpstreams {
						if _, err := snap.Upstreams.List().Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := upstreamClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := upstreamClient.List(namespace2, clients.ListOpts{})
					combined := gloo_solo_io.UpstreamsByNamespace{
						namespace1: nsList1,
						namespace2: nsList2,
					}
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		upstream1a, err := upstreamClient.Write(gloo_solo_io.NewUpstream(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		upstream1b, err := upstreamClient.Write(gloo_solo_io.NewUpstream(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotUpstreams(gloo_solo_io.UpstreamList{upstream1a, upstream1b}, nil)
		upstream2a, err := upstreamClient.Write(gloo_solo_io.NewUpstream(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		upstream2b, err := upstreamClient.Write(gloo_solo_io.NewUpstream(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotUpstreams(gloo_solo_io.UpstreamList{upstream1a, upstream1b, upstream2a, upstream2b}, nil)

		err = upstreamClient.Delete(upstream2a.GetMetadata().Namespace, upstream2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = upstreamClient.Delete(upstream2b.GetMetadata().Namespace, upstream2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotUpstreams(gloo_solo_io.UpstreamList{upstream1a, upstream1b}, gloo_solo_io.UpstreamList{upstream2a, upstream2b})

		err = upstreamClient.Delete(upstream1a.GetMetadata().Namespace, upstream1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = upstreamClient.Delete(upstream1b.GetMetadata().Namespace, upstream1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotUpstreams(nil, gloo_solo_io.UpstreamList{upstream1a, upstream1b, upstream2a, upstream2b})

		/*
			Pod
		*/

		assertSnapshotPods := func(expectPods core_kubernetes_io.PodList, unexpectPods core_kubernetes_io.PodList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectPods {
						if _, err := snap.Pods.List().Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectPods {
						if _, err := snap.Pods.List().Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := podClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := podClient.List(namespace2, clients.ListOpts{})
					combined := core_kubernetes_io.PodsByNamespace{
						namespace1: nsList1,
						namespace2: nsList2,
					}
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		pod1a, err := podClient.Write(core_kubernetes_io.NewPod(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		pod1b, err := podClient.Write(core_kubernetes_io.NewPod(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotPods(core_kubernetes_io.PodList{pod1a, pod1b}, nil)
		pod2a, err := podClient.Write(core_kubernetes_io.NewPod(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		pod2b, err := podClient.Write(core_kubernetes_io.NewPod(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotPods(core_kubernetes_io.PodList{pod1a, pod1b, pod2a, pod2b}, nil)

		err = podClient.Delete(pod2a.GetMetadata().Namespace, pod2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = podClient.Delete(pod2b.GetMetadata().Namespace, pod2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotPods(core_kubernetes_io.PodList{pod1a, pod1b}, core_kubernetes_io.PodList{pod2a, pod2b})

		err = podClient.Delete(pod1a.GetMetadata().Namespace, pod1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = podClient.Delete(pod1b.GetMetadata().Namespace, pod1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotPods(nil, core_kubernetes_io.PodList{pod1a, pod1b, pod2a, pod2b})
	})
})
