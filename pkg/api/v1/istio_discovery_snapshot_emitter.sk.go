// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"sync"
	"time"

	gloo_solo_io "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes "github.com/solo-io/solo-kit/pkg/api/v1/resources/common/kubernetes"
	istio_authentication_v1alpha1 "github.com/solo-io/supergloo/pkg/api/external/istio/authorization/v1alpha1"

	"go.opencensus.io/stats"
	"go.opencensus.io/stats/view"
	"go.opencensus.io/tag"

	"github.com/solo-io/go-utils/errutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/errors"
)

var (
	mIstioDiscoverySnapshotIn  = stats.Int64("istioDiscovery.supergloo.solo.io/snap_emitter/snap_in", "The number of snapshots in", "1")
	mIstioDiscoverySnapshotOut = stats.Int64("istioDiscovery.supergloo.solo.io/snap_emitter/snap_out", "The number of snapshots out", "1")

	istioDiscoverysnapshotInView = &view.View{
		Name:        "istioDiscovery.supergloo.solo.io_snap_emitter/snap_in",
		Measure:     mIstioDiscoverySnapshotIn,
		Description: "The number of snapshots updates coming in",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
	istioDiscoverysnapshotOutView = &view.View{
		Name:        "istioDiscovery.supergloo.solo.io/snap_emitter/snap_out",
		Measure:     mIstioDiscoverySnapshotOut,
		Description: "The number of snapshots updates going out",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
)

func init() {
	view.Register(istioDiscoverysnapshotInView, istioDiscoverysnapshotOutView)
}

type IstioDiscoveryEmitter interface {
	Register() error
	Mesh() MeshClient
	Install() InstallClient
	Pod() github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodClient
	Upstream() gloo_solo_io.UpstreamClient
	MeshPolicy() istio_authentication_v1alpha1.MeshPolicyClient
	Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *IstioDiscoverySnapshot, <-chan error, error)
}

func NewIstioDiscoveryEmitter(meshClient MeshClient, installClient InstallClient, podClient github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodClient, upstreamClient gloo_solo_io.UpstreamClient, meshPolicyClient istio_authentication_v1alpha1.MeshPolicyClient) IstioDiscoveryEmitter {
	return NewIstioDiscoveryEmitterWithEmit(meshClient, installClient, podClient, upstreamClient, meshPolicyClient, make(chan struct{}))
}

func NewIstioDiscoveryEmitterWithEmit(meshClient MeshClient, installClient InstallClient, podClient github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodClient, upstreamClient gloo_solo_io.UpstreamClient, meshPolicyClient istio_authentication_v1alpha1.MeshPolicyClient, emit <-chan struct{}) IstioDiscoveryEmitter {
	return &istioDiscoveryEmitter{
		mesh:       meshClient,
		install:    installClient,
		pod:        podClient,
		upstream:   upstreamClient,
		meshPolicy: meshPolicyClient,
		forceEmit:  emit,
	}
}

type istioDiscoveryEmitter struct {
	forceEmit  <-chan struct{}
	mesh       MeshClient
	install    InstallClient
	pod        github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodClient
	upstream   gloo_solo_io.UpstreamClient
	meshPolicy istio_authentication_v1alpha1.MeshPolicyClient
}

func (c *istioDiscoveryEmitter) Register() error {
	if err := c.mesh.Register(); err != nil {
		return err
	}
	if err := c.install.Register(); err != nil {
		return err
	}
	if err := c.pod.Register(); err != nil {
		return err
	}
	if err := c.upstream.Register(); err != nil {
		return err
	}
	if err := c.meshPolicy.Register(); err != nil {
		return err
	}
	return nil
}

func (c *istioDiscoveryEmitter) Mesh() MeshClient {
	return c.mesh
}

func (c *istioDiscoveryEmitter) Install() InstallClient {
	return c.install
}

func (c *istioDiscoveryEmitter) Pod() github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodClient {
	return c.pod
}

func (c *istioDiscoveryEmitter) Upstream() gloo_solo_io.UpstreamClient {
	return c.upstream
}

func (c *istioDiscoveryEmitter) MeshPolicy() istio_authentication_v1alpha1.MeshPolicyClient {
	return c.meshPolicy
}

func (c *istioDiscoveryEmitter) Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *IstioDiscoverySnapshot, <-chan error, error) {

	if len(watchNamespaces) == 0 {
		watchNamespaces = []string{""}
	}

	for _, ns := range watchNamespaces {
		if ns == "" && len(watchNamespaces) > 1 {
			return nil, nil, errors.Errorf("the \"\" namespace is used to watch all namespaces. Snapshots can either be tracked for " +
				"specific namespaces or \"\" AllNamespaces, but not both.")
		}
	}

	errs := make(chan error)
	var done sync.WaitGroup
	ctx := opts.Ctx
	/* Create channel for Mesh */
	type meshListWithNamespace struct {
		list      MeshList
		namespace string
	}
	meshChan := make(chan meshListWithNamespace)
	/* Create channel for Install */
	type installListWithNamespace struct {
		list      InstallList
		namespace string
	}
	installChan := make(chan installListWithNamespace)
	/* Create channel for Pod */
	type podListWithNamespace struct {
		list      github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList
		namespace string
	}
	podChan := make(chan podListWithNamespace)
	/* Create channel for Upstream */
	type upstreamListWithNamespace struct {
		list      gloo_solo_io.UpstreamList
		namespace string
	}
	upstreamChan := make(chan upstreamListWithNamespace)
	/* Create channel for MeshPolicy */

	for _, namespace := range watchNamespaces {
		/* Setup namespaced watch for Mesh */
		meshNamespacesChan, meshErrs, err := c.mesh.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting Mesh watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, meshErrs, namespace+"-meshes")
		}(namespace)
		/* Setup namespaced watch for Install */
		installNamespacesChan, installErrs, err := c.install.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting Install watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, installErrs, namespace+"-installs")
		}(namespace)
		/* Setup namespaced watch for Pod */
		podNamespacesChan, podErrs, err := c.pod.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting Pod watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, podErrs, namespace+"-pods")
		}(namespace)
		/* Setup namespaced watch for Upstream */
		upstreamNamespacesChan, upstreamErrs, err := c.upstream.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting Upstream watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, upstreamErrs, namespace+"-upstreams")
		}(namespace)

		/* Watch for changes and update snapshot */
		go func(namespace string) {
			for {
				select {
				case <-ctx.Done():
					return
				case meshList := <-meshNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case meshChan <- meshListWithNamespace{list: meshList, namespace: namespace}:
					}
				case installList := <-installNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case installChan <- installListWithNamespace{list: installList, namespace: namespace}:
					}
				case podList := <-podNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case podChan <- podListWithNamespace{list: podList, namespace: namespace}:
					}
				case upstreamList := <-upstreamNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case upstreamChan <- upstreamListWithNamespace{list: upstreamList, namespace: namespace}:
					}
				}
			}
		}(namespace)
	}
	/* Setup cluster-wide watch for MeshPolicy */

	meshPolicyChan, meshPolicyErrs, err := c.meshPolicy.Watch(opts)
	if err != nil {
		return nil, nil, errors.Wrapf(err, "starting MeshPolicy watch")
	}
	done.Add(1)
	go func() {
		defer done.Done()
		errutils.AggregateErrs(ctx, errs, meshPolicyErrs, "meshpolicies")
	}()

	snapshots := make(chan *IstioDiscoverySnapshot)
	go func() {
		originalSnapshot := IstioDiscoverySnapshot{}
		currentSnapshot := originalSnapshot.Clone()
		timer := time.NewTicker(time.Second * 1)
		sync := func() {
			if originalSnapshot.Hash() == currentSnapshot.Hash() {
				return
			}

			stats.Record(ctx, mIstioDiscoverySnapshotOut.M(1))
			originalSnapshot = currentSnapshot.Clone()
			sentSnapshot := currentSnapshot.Clone()
			snapshots <- &sentSnapshot
		}
		meshesByNamespace := make(map[string]MeshList)
		installsByNamespace := make(map[string]InstallList)
		podsByNamespace := make(map[string]github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList)
		upstreamsByNamespace := make(map[string]gloo_solo_io.UpstreamList)

		for {
			record := func() { stats.Record(ctx, mIstioDiscoverySnapshotIn.M(1)) }

			select {
			case <-timer.C:
				sync()
			case <-ctx.Done():
				close(snapshots)
				done.Wait()
				close(errs)
				return
			case <-c.forceEmit:
				sentSnapshot := currentSnapshot.Clone()
				snapshots <- &sentSnapshot
			case meshNamespacedList := <-meshChan:
				record()

				namespace := meshNamespacedList.namespace

				// merge lists by namespace
				meshesByNamespace[namespace] = meshNamespacedList.list
				var meshList MeshList
				for _, meshes := range meshesByNamespace {
					meshList = append(meshList, meshes...)
				}
				currentSnapshot.Meshes = meshList.Sort()
			case installNamespacedList := <-installChan:
				record()

				namespace := installNamespacedList.namespace

				// merge lists by namespace
				installsByNamespace[namespace] = installNamespacedList.list
				var installList InstallList
				for _, installs := range installsByNamespace {
					installList = append(installList, installs...)
				}
				currentSnapshot.Installs = installList.Sort()
			case podNamespacedList := <-podChan:
				record()

				namespace := podNamespacedList.namespace

				// merge lists by namespace
				podsByNamespace[namespace] = podNamespacedList.list
				var podList github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList
				for _, pods := range podsByNamespace {
					podList = append(podList, pods...)
				}
				currentSnapshot.Pods = podList.Sort()
			case upstreamNamespacedList := <-upstreamChan:
				record()

				namespace := upstreamNamespacedList.namespace

				// merge lists by namespace
				upstreamsByNamespace[namespace] = upstreamNamespacedList.list
				var upstreamList gloo_solo_io.UpstreamList
				for _, upstreams := range upstreamsByNamespace {
					upstreamList = append(upstreamList, upstreams...)
				}
				currentSnapshot.Upstreams = upstreamList.Sort()
			case meshPolicyList := <-meshPolicyChan:
				record()
				currentSnapshot.Meshpolicies = meshPolicyList
			}
		}
	}()
	return snapshots, errs, nil
}
