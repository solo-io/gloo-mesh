// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type MeshGroupWatcher interface {
	// watch namespace-scoped Meshgroups
	Watch(namespace string, opts clients.WatchOpts) (<-chan MeshGroupList, <-chan error, error)
}

type MeshGroupClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*MeshGroup, error)
	Write(resource *MeshGroup, opts clients.WriteOpts) (*MeshGroup, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (MeshGroupList, error)
	MeshGroupWatcher
}

type meshGroupClient struct {
	rc clients.ResourceClient
}

func NewMeshGroupClient(rcFactory factory.ResourceClientFactory) (MeshGroupClient, error) {
	return NewMeshGroupClientWithToken(rcFactory, "")
}

func NewMeshGroupClientWithToken(rcFactory factory.ResourceClientFactory, token string) (MeshGroupClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &MeshGroup{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base MeshGroup resource client")
	}
	return NewMeshGroupClientWithBase(rc), nil
}

func NewMeshGroupClientWithBase(rc clients.ResourceClient) MeshGroupClient {
	return &meshGroupClient{
		rc: rc,
	}
}

func (client *meshGroupClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *meshGroupClient) Register() error {
	return client.rc.Register()
}

func (client *meshGroupClient) Read(namespace, name string, opts clients.ReadOpts) (*MeshGroup, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*MeshGroup), nil
}

func (client *meshGroupClient) Write(meshGroup *MeshGroup, opts clients.WriteOpts) (*MeshGroup, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(meshGroup, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*MeshGroup), nil
}

func (client *meshGroupClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *meshGroupClient) List(namespace string, opts clients.ListOpts) (MeshGroupList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToMeshGroup(resourceList), nil
}

func (client *meshGroupClient) Watch(namespace string, opts clients.WatchOpts) (<-chan MeshGroupList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	meshgroupsChan := make(chan MeshGroupList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				meshgroupsChan <- convertToMeshGroup(resourceList)
			case <-opts.Ctx.Done():
				close(meshgroupsChan)
				return
			}
		}
	}()
	return meshgroupsChan, errs, nil
}

func convertToMeshGroup(resources resources.ResourceList) MeshGroupList {
	var meshGroupList MeshGroupList
	for _, resource := range resources {
		meshGroupList = append(meshGroupList, resource.(*MeshGroup))
	}
	return meshGroupList
}
