// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type RoutingRuleWatcher interface {
	// watch namespace-scoped Routingrules
	Watch(namespace string, opts clients.WatchOpts) (<-chan RoutingRuleList, <-chan error, error)
}

type RoutingRuleClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*RoutingRule, error)
	Write(resource *RoutingRule, opts clients.WriteOpts) (*RoutingRule, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (RoutingRuleList, error)
	RoutingRuleWatcher
}

type routingRuleClient struct {
	rc clients.ResourceClient
}

func NewRoutingRuleClient(rcFactory factory.ResourceClientFactory) (RoutingRuleClient, error) {
	return NewRoutingRuleClientWithToken(rcFactory, "")
}

func NewRoutingRuleClientWithToken(rcFactory factory.ResourceClientFactory, token string) (RoutingRuleClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &RoutingRule{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base RoutingRule resource client")
	}
	return NewRoutingRuleClientWithBase(rc), nil
}

func NewRoutingRuleClientWithBase(rc clients.ResourceClient) RoutingRuleClient {
	return &routingRuleClient{
		rc: rc,
	}
}

func (client *routingRuleClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *routingRuleClient) Register() error {
	return client.rc.Register()
}

func (client *routingRuleClient) Read(namespace, name string, opts clients.ReadOpts) (*RoutingRule, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*RoutingRule), nil
}

func (client *routingRuleClient) Write(routingRule *RoutingRule, opts clients.WriteOpts) (*RoutingRule, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(routingRule, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*RoutingRule), nil
}

func (client *routingRuleClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *routingRuleClient) List(namespace string, opts clients.ListOpts) (RoutingRuleList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToRoutingRule(resourceList), nil
}

func (client *routingRuleClient) Watch(namespace string, opts clients.WatchOpts) (<-chan RoutingRuleList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	routingrulesChan := make(chan RoutingRuleList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				routingrulesChan <- convertToRoutingRule(resourceList)
			case <-opts.Ctx.Done():
				close(routingrulesChan)
				return
			}
		}
	}()
	return routingrulesChan, errs, nil
}

func convertToRoutingRule(resources resources.ResourceList) RoutingRuleList {
	var routingRuleList RoutingRuleList
	for _, resource := range resources {
		routingRuleList = append(routingRuleList, resource.(*RoutingRule))
	}
	return routingRuleList
}
