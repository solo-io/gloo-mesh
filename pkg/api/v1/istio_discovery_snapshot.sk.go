// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"

	gloo_solo_io "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes "github.com/solo-io/solo-kit/pkg/api/v1/resources/common/kubernetes"
	istio_authentication_v1alpha1 "github.com/solo-io/supergloo/pkg/api/external/istio/authorization/v1alpha1"

	"github.com/solo-io/go-utils/hashutils"
	"go.uber.org/zap"
)

type IstioDiscoverySnapshot struct {
	Meshes       MeshList
	Installs     InstallList
	Pods         github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList
	Upstreams    gloo_solo_io.UpstreamList
	Meshpolicies istio_authentication_v1alpha1.MeshPolicyList
}

func (s IstioDiscoverySnapshot) Clone() IstioDiscoverySnapshot {
	return IstioDiscoverySnapshot{
		Meshes:       s.Meshes.Clone(),
		Installs:     s.Installs.Clone(),
		Pods:         s.Pods.Clone(),
		Upstreams:    s.Upstreams.Clone(),
		Meshpolicies: s.Meshpolicies.Clone(),
	}
}

func (s IstioDiscoverySnapshot) Hash() uint64 {
	return hashutils.HashAll(
		s.hashMeshes(),
		s.hashInstalls(),
		s.hashPods(),
		s.hashUpstreams(),
		s.hashMeshpolicies(),
	)
}

func (s IstioDiscoverySnapshot) hashMeshes() uint64 {
	return hashutils.HashAll(s.Meshes.AsInterfaces()...)
}

func (s IstioDiscoverySnapshot) hashInstalls() uint64 {
	return hashutils.HashAll(s.Installs.AsInterfaces()...)
}

func (s IstioDiscoverySnapshot) hashPods() uint64 {
	return hashutils.HashAll(s.Pods.AsInterfaces()...)
}

func (s IstioDiscoverySnapshot) hashUpstreams() uint64 {
	return hashutils.HashAll(s.Upstreams.AsInterfaces()...)
}

func (s IstioDiscoverySnapshot) hashMeshpolicies() uint64 {
	return hashutils.HashAll(s.Meshpolicies.AsInterfaces()...)
}

func (s IstioDiscoverySnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	fields = append(fields, zap.Uint64("meshes", s.hashMeshes()))
	fields = append(fields, zap.Uint64("installs", s.hashInstalls()))
	fields = append(fields, zap.Uint64("pods", s.hashPods()))
	fields = append(fields, zap.Uint64("upstreams", s.hashUpstreams()))
	fields = append(fields, zap.Uint64("meshpolicies", s.hashMeshpolicies()))

	return append(fields, zap.Uint64("snapshotHash", s.Hash()))
}

type IstioDiscoverySnapshotStringer struct {
	Version      uint64
	Meshes       []string
	Installs     []string
	Pods         []string
	Upstreams    []string
	Meshpolicies []string
}

func (ss IstioDiscoverySnapshotStringer) String() string {
	s := fmt.Sprintf("IstioDiscoverySnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Meshes %v\n", len(ss.Meshes))
	for _, name := range ss.Meshes {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Installs %v\n", len(ss.Installs))
	for _, name := range ss.Installs {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Pods %v\n", len(ss.Pods))
	for _, name := range ss.Pods {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Upstreams %v\n", len(ss.Upstreams))
	for _, name := range ss.Upstreams {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Meshpolicies %v\n", len(ss.Meshpolicies))
	for _, name := range ss.Meshpolicies {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s IstioDiscoverySnapshot) Stringer() IstioDiscoverySnapshotStringer {
	return IstioDiscoverySnapshotStringer{
		Version:      s.Hash(),
		Meshes:       s.Meshes.NamespacesDotNames(),
		Installs:     s.Installs.NamespacesDotNames(),
		Pods:         s.Pods.NamespacesDotNames(),
		Upstreams:    s.Upstreams.NamespacesDotNames(),
		Meshpolicies: s.Meshpolicies.Names(),
	}
}
