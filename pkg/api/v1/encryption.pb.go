// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: encryption.proto

package v1 // import "github.com/solo-io/supergloo/pkg/api/v1"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"

import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Encryption struct {
	// If set to true, TLS is enabled across the entire mesh.
	TlsEnabled bool `protobuf:"varint,1,opt,name=tlsEnabled,proto3" json:"tlsEnabled,omitempty"`
	// If TLS is enabled, this is the name of the secret containing the certs.
	// When using Istio, this should either be "istio.default", meaning Istio is using the default Citadel cert
	// generation, or "cacert", which is a custom-uploaded Kubernetes secret containing all the cert files.
	// When using Linkerd, this is the name of a secret that will be mounted into the linkerd Kubernetes DaemonSet.
	Secret               *core.ResourceRef `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Encryption) Reset()         { *m = Encryption{} }
func (m *Encryption) String() string { return proto.CompactTextString(m) }
func (*Encryption) ProtoMessage()    {}
func (*Encryption) Descriptor() ([]byte, []int) {
	return fileDescriptor_encryption_a7694e9b58c73bec, []int{0}
}
func (m *Encryption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Encryption.Unmarshal(m, b)
}
func (m *Encryption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Encryption.Marshal(b, m, deterministic)
}
func (dst *Encryption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Encryption.Merge(dst, src)
}
func (m *Encryption) XXX_Size() int {
	return xxx_messageInfo_Encryption.Size(m)
}
func (m *Encryption) XXX_DiscardUnknown() {
	xxx_messageInfo_Encryption.DiscardUnknown(m)
}

var xxx_messageInfo_Encryption proto.InternalMessageInfo

func (m *Encryption) GetTlsEnabled() bool {
	if m != nil {
		return m.TlsEnabled
	}
	return false
}

func (m *Encryption) GetSecret() *core.ResourceRef {
	if m != nil {
		return m.Secret
	}
	return nil
}

func init() {
	proto.RegisterType((*Encryption)(nil), "supergloo.solo.io.Encryption")
}
func (this *Encryption) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Encryption)
	if !ok {
		that2, ok := that.(Encryption)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TlsEnabled != that1.TlsEnabled {
		return false
	}
	if !this.Secret.Equal(that1.Secret) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("encryption.proto", fileDescriptor_encryption_a7694e9b58c73bec) }

var fileDescriptor_encryption_a7694e9b58c73bec = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xcd, 0x4b, 0x2e,
	0xaa, 0x2c, 0x28, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x2c, 0x2e,
	0x2d, 0x48, 0x2d, 0x4a, 0xcf, 0xc9, 0xcf, 0xd7, 0x2b, 0xce, 0xcf, 0xc9, 0xd7, 0xcb, 0xcc, 0x97,
	0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0xcb, 0xea, 0x83, 0x58, 0x10, 0x85, 0x52, 0x3a, 0xe9, 0x99,
	0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x20, 0x95, 0xba, 0x99, 0xf9, 0x10, 0x3a,
	0x3b, 0xb3, 0x44, 0x3f, 0xb1, 0x20, 0x53, 0xbf, 0xcc, 0x50, 0xbf, 0x28, 0x35, 0x0d, 0xa2, 0x5a,
	0x29, 0x9e, 0x8b, 0xcb, 0x15, 0x6e, 0x95, 0x90, 0x1c, 0x17, 0x57, 0x49, 0x4e, 0xb1, 0x6b, 0x5e,
	0x62, 0x52, 0x4e, 0x6a, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x47, 0x10, 0x92, 0x88, 0x90, 0x21,
	0x17, 0x5b, 0x71, 0x6a, 0x72, 0x51, 0x6a, 0x89, 0x04, 0x93, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0xa4,
	0x5e, 0x72, 0x7e, 0x51, 0x2a, 0xcc, 0x41, 0x7a, 0x41, 0xa9, 0xc5, 0xf9, 0xa5, 0x45, 0xc9, 0xa9,
	0x41, 0xa9, 0x69, 0x41, 0x50, 0x85, 0x4e, 0xba, 0x2b, 0x1e, 0xc9, 0x31, 0x46, 0xa9, 0x63, 0x73,
	0x14, 0xcc, 0x43, 0xfa, 0x05, 0xd9, 0xe9, 0x50, 0x97, 0x25, 0xb1, 0x81, 0x9d, 0x65, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x7d, 0xd1, 0x7c, 0x57, 0x01, 0x01, 0x00, 0x00,
}
