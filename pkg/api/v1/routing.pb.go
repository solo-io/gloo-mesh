// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routing.proto

package v1 // import "github.com/solo-io/supergloo/pkg/api/v1"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
import v1 "github.com/solo-io/supergloo/pkg/api/external/gloo/v1"

import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// @solo-kit:resource.short_name=rr
// @solo-kit:resource.plural_name=routingrules
// @solo-kit:resource.resource_groups=translator.supergloo.solo.io
// rules to add features such as Fault Injection and Retries to a mesh
type RoutingRule struct {
	// Status indicates the validation status of this resource.
	// Status is read-only by clients, and set by gloo during validation
	Status core.Status `protobuf:"bytes,100,opt,name=status" json:"status" testdiff:"ignore"`
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,99,opt,name=metadata" json:"metadata"`
	// target where we apply this rule
	TargetMesh *core.ResourceRef `protobuf:"bytes,1,opt,name=target_mesh,json=targetMesh" json:"target_mesh,omitempty"`
	// source pods to apply the rule to. if empty, applies to all sources
	SourceSelector map[string]string `protobuf:"bytes,2,rep,name=source_selector,json=sourceSelector" json:"source_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// destinations for which this rule applies. if empty, applies to all destinations
	DestinationSelector map[string]string `protobuf:"bytes,3,rep,name=destination_selector,json=destinationSelector" json:"destination_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// if specified, this rule will only apply to http requests in the mesh matching these parameters
	RequestMatchers []*v1.Matcher `protobuf:"bytes,4,rep,name=request_matchers,json=requestMatchers" json:"request_matchers,omitempty"`
	// configuration to enable traffic splitting, e.g. by percentage, for this rule
	TrafficSplitting *TrafficSplitting `protobuf:"bytes,5,opt,name=traffic_splitting,json=trafficSplitting" json:"traffic_splitting,omitempty"`
	// configuration to enable fault injection for this rule
	FaultInjection *FaultInjection `protobuf:"bytes,6,opt,name=fault_injection,json=faultInjection" json:"fault_injection,omitempty"`
	// Timeout for this rule
	Timeout *types.Duration `protobuf:"bytes,7,opt,name=timeout" json:"timeout,omitempty"`
	// Retry policy for for this rule
	Retries *HTTPRetry `protobuf:"bytes,8,opt,name=retries" json:"retries,omitempty"`
	// Cross-Origin Resource Sharing policy (CORS) for this rule. Refer to
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
	// for further details about cross origin resource sharing.
	CorsPolicy *CorsPolicy `protobuf:"bytes,10,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	// Mirror HTTP traffic to a another destination for this rule. Traffic will still be sent
	// to its original destination as normal.
	Mirror *v1.Destination `protobuf:"bytes,9,opt,name=mirror" json:"mirror,omitempty"`
	// manipulate request and response headers for this rule
	HeaderManipulaition  *HeaderManipulation `protobuf:"bytes,12,opt,name=header_manipulaition,json=headerManipulaition" json:"header_manipulaition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RoutingRule) Reset()         { *m = RoutingRule{} }
func (m *RoutingRule) String() string { return proto.CompactTextString(m) }
func (*RoutingRule) ProtoMessage()    {}
func (*RoutingRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_2170a435cfc8c4f7, []int{0}
}
func (m *RoutingRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingRule.Unmarshal(m, b)
}
func (m *RoutingRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingRule.Marshal(b, m, deterministic)
}
func (dst *RoutingRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingRule.Merge(dst, src)
}
func (m *RoutingRule) XXX_Size() int {
	return xxx_messageInfo_RoutingRule.Size(m)
}
func (m *RoutingRule) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingRule.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingRule proto.InternalMessageInfo

func (m *RoutingRule) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *RoutingRule) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *RoutingRule) GetTargetMesh() *core.ResourceRef {
	if m != nil {
		return m.TargetMesh
	}
	return nil
}

func (m *RoutingRule) GetSourceSelector() map[string]string {
	if m != nil {
		return m.SourceSelector
	}
	return nil
}

func (m *RoutingRule) GetDestinationSelector() map[string]string {
	if m != nil {
		return m.DestinationSelector
	}
	return nil
}

func (m *RoutingRule) GetRequestMatchers() []*v1.Matcher {
	if m != nil {
		return m.RequestMatchers
	}
	return nil
}

func (m *RoutingRule) GetTrafficSplitting() *TrafficSplitting {
	if m != nil {
		return m.TrafficSplitting
	}
	return nil
}

func (m *RoutingRule) GetFaultInjection() *FaultInjection {
	if m != nil {
		return m.FaultInjection
	}
	return nil
}

func (m *RoutingRule) GetTimeout() *types.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *RoutingRule) GetRetries() *HTTPRetry {
	if m != nil {
		return m.Retries
	}
	return nil
}

func (m *RoutingRule) GetCorsPolicy() *CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *RoutingRule) GetMirror() *v1.Destination {
	if m != nil {
		return m.Mirror
	}
	return nil
}

func (m *RoutingRule) GetHeaderManipulaition() *HeaderManipulation {
	if m != nil {
		return m.HeaderManipulaition
	}
	return nil
}

// configure traffic splitting for any http requests sent to one of the destination pods
type TrafficSplitting struct {
	// split traffic between these subsets based on their weights
	// weights should add to 100
	Subsets              []*Subset `protobuf:"bytes,1,rep,name=subsets" json:"subsets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TrafficSplitting) Reset()         { *m = TrafficSplitting{} }
func (m *TrafficSplitting) String() string { return proto.CompactTextString(m) }
func (*TrafficSplitting) ProtoMessage()    {}
func (*TrafficSplitting) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_2170a435cfc8c4f7, []int{1}
}
func (m *TrafficSplitting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficSplitting.Unmarshal(m, b)
}
func (m *TrafficSplitting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficSplitting.Marshal(b, m, deterministic)
}
func (dst *TrafficSplitting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficSplitting.Merge(dst, src)
}
func (m *TrafficSplitting) XXX_Size() int {
	return xxx_messageInfo_TrafficSplitting.Size(m)
}
func (m *TrafficSplitting) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficSplitting.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficSplitting proto.InternalMessageInfo

func (m *TrafficSplitting) GetSubsets() []*Subset {
	if m != nil {
		return m.Subsets
	}
	return nil
}

// a subset of the pods the comprise an application in the mesh
type Subset struct {
	// The proportion of traffic to be forwarded to the subset. (0-100).
	Weight *Percent `protobuf:"bytes,1,opt,name=weight" json:"weight,omitempty"`
	// Selector for the labels on the pods that will constitute this subset
	Selector             map[string]string `protobuf:"bytes,2,rep,name=selector" json:"selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Subset) Reset()         { *m = Subset{} }
func (m *Subset) String() string { return proto.CompactTextString(m) }
func (*Subset) ProtoMessage()    {}
func (*Subset) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_2170a435cfc8c4f7, []int{2}
}
func (m *Subset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subset.Unmarshal(m, b)
}
func (m *Subset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subset.Marshal(b, m, deterministic)
}
func (dst *Subset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subset.Merge(dst, src)
}
func (m *Subset) XXX_Size() int {
	return xxx_messageInfo_Subset.Size(m)
}
func (m *Subset) XXX_DiscardUnknown() {
	xxx_messageInfo_Subset.DiscardUnknown(m)
}

var xxx_messageInfo_Subset proto.InternalMessageInfo

func (m *Subset) GetWeight() *Percent {
	if m != nil {
		return m.Weight
	}
	return nil
}

func (m *Subset) GetSelector() map[string]string {
	if m != nil {
		return m.Selector
	}
	return nil
}

type FaultInjection struct {
	// Delay requests before forwarding, emulating various failures such as
	// network issues, overloaded upstream service, etc.
	Delay *FaultInjection_Delay `protobuf:"bytes,1,opt,name=delay" json:"delay,omitempty"`
	// Abort Http request attempts and return error codes back to downstream
	// service, giving the impression that the upstream service is faulty.
	Abort                *FaultInjection_Abort `protobuf:"bytes,2,opt,name=abort" json:"abort,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FaultInjection) Reset()         { *m = FaultInjection{} }
func (m *FaultInjection) String() string { return proto.CompactTextString(m) }
func (*FaultInjection) ProtoMessage()    {}
func (*FaultInjection) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_2170a435cfc8c4f7, []int{3}
}
func (m *FaultInjection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaultInjection.Unmarshal(m, b)
}
func (m *FaultInjection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaultInjection.Marshal(b, m, deterministic)
}
func (dst *FaultInjection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultInjection.Merge(dst, src)
}
func (m *FaultInjection) XXX_Size() int {
	return xxx_messageInfo_FaultInjection.Size(m)
}
func (m *FaultInjection) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultInjection.DiscardUnknown(m)
}

var xxx_messageInfo_FaultInjection proto.InternalMessageInfo

func (m *FaultInjection) GetDelay() *FaultInjection_Delay {
	if m != nil {
		return m.Delay
	}
	return nil
}

func (m *FaultInjection) GetAbort() *FaultInjection_Abort {
	if m != nil {
		return m.Abort
	}
	return nil
}

// Delay specification is used to inject latency into the request
// forwarding path. The following example will introduce a 5 second delay
// in 1 out of every 1000 requests to the "v1" version of the "reviews"
// service from all pods with label env: prod
// The _fixedDelay_ field is used to indicate the amount of delay in seconds.
// The optional _percentage_ field can be used to only delay a certain
// percentage of requests. If left unspecified, all request will be delayed.
type FaultInjection_Delay struct {
	// Percentage of requests on which the delay will be injected (0-100).
	// Use of integer `percent` value is deprecated. Use the double `percentage`
	// field instead.
	Percent int32 `protobuf:"varint,1,opt,name=percent,proto3" json:"percent,omitempty"` // Deprecated: Do not use.
	// Types that are valid to be assigned to HttpDelayType:
	//	*FaultInjection_Delay_FixedDelay
	//	*FaultInjection_Delay_ExponentialDelay
	HttpDelayType isFaultInjection_Delay_HttpDelayType `protobuf_oneof:"http_delay_type"`
	// Percentage of requests on which the delay will be injected.
	Percentage           *Percent `protobuf:"bytes,5,opt,name=percentage" json:"percentage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FaultInjection_Delay) Reset()         { *m = FaultInjection_Delay{} }
func (m *FaultInjection_Delay) String() string { return proto.CompactTextString(m) }
func (*FaultInjection_Delay) ProtoMessage()    {}
func (*FaultInjection_Delay) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_2170a435cfc8c4f7, []int{3, 0}
}
func (m *FaultInjection_Delay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaultInjection_Delay.Unmarshal(m, b)
}
func (m *FaultInjection_Delay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaultInjection_Delay.Marshal(b, m, deterministic)
}
func (dst *FaultInjection_Delay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultInjection_Delay.Merge(dst, src)
}
func (m *FaultInjection_Delay) XXX_Size() int {
	return xxx_messageInfo_FaultInjection_Delay.Size(m)
}
func (m *FaultInjection_Delay) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultInjection_Delay.DiscardUnknown(m)
}

var xxx_messageInfo_FaultInjection_Delay proto.InternalMessageInfo

type isFaultInjection_Delay_HttpDelayType interface {
	isFaultInjection_Delay_HttpDelayType()
	Equal(interface{}) bool
}

type FaultInjection_Delay_FixedDelay struct {
	FixedDelay *types.Duration `protobuf:"bytes,2,opt,name=fixed_delay,json=fixedDelay,oneof"`
}
type FaultInjection_Delay_ExponentialDelay struct {
	ExponentialDelay *types.Duration `protobuf:"bytes,3,opt,name=exponential_delay,json=exponentialDelay,oneof"`
}

func (*FaultInjection_Delay_FixedDelay) isFaultInjection_Delay_HttpDelayType()       {}
func (*FaultInjection_Delay_ExponentialDelay) isFaultInjection_Delay_HttpDelayType() {}

func (m *FaultInjection_Delay) GetHttpDelayType() isFaultInjection_Delay_HttpDelayType {
	if m != nil {
		return m.HttpDelayType
	}
	return nil
}

// Deprecated: Do not use.
func (m *FaultInjection_Delay) GetPercent() int32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *FaultInjection_Delay) GetFixedDelay() *types.Duration {
	if x, ok := m.GetHttpDelayType().(*FaultInjection_Delay_FixedDelay); ok {
		return x.FixedDelay
	}
	return nil
}

func (m *FaultInjection_Delay) GetExponentialDelay() *types.Duration {
	if x, ok := m.GetHttpDelayType().(*FaultInjection_Delay_ExponentialDelay); ok {
		return x.ExponentialDelay
	}
	return nil
}

func (m *FaultInjection_Delay) GetPercentage() *Percent {
	if m != nil {
		return m.Percentage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FaultInjection_Delay) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FaultInjection_Delay_OneofMarshaler, _FaultInjection_Delay_OneofUnmarshaler, _FaultInjection_Delay_OneofSizer, []interface{}{
		(*FaultInjection_Delay_FixedDelay)(nil),
		(*FaultInjection_Delay_ExponentialDelay)(nil),
	}
}

func _FaultInjection_Delay_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FaultInjection_Delay)
	// http_delay_type
	switch x := m.HttpDelayType.(type) {
	case *FaultInjection_Delay_FixedDelay:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FixedDelay); err != nil {
			return err
		}
	case *FaultInjection_Delay_ExponentialDelay:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExponentialDelay); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FaultInjection_Delay.HttpDelayType has unexpected type %T", x)
	}
	return nil
}

func _FaultInjection_Delay_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FaultInjection_Delay)
	switch tag {
	case 2: // http_delay_type.fixed_delay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.Duration)
		err := b.DecodeMessage(msg)
		m.HttpDelayType = &FaultInjection_Delay_FixedDelay{msg}
		return true, err
	case 3: // http_delay_type.exponential_delay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.Duration)
		err := b.DecodeMessage(msg)
		m.HttpDelayType = &FaultInjection_Delay_ExponentialDelay{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FaultInjection_Delay_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FaultInjection_Delay)
	// http_delay_type
	switch x := m.HttpDelayType.(type) {
	case *FaultInjection_Delay_FixedDelay:
		s := proto.Size(x.FixedDelay)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FaultInjection_Delay_ExponentialDelay:
		s := proto.Size(x.ExponentialDelay)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FaultInjection_Abort struct {
	// Percentage of requests to be aborted with the error code provided (0-100).
	// Use of integer `percent` value is deprecated. Use the double `percentage`
	// field instead.
	Percent int32 `protobuf:"varint,1,opt,name=percent,proto3" json:"percent,omitempty"` // Deprecated: Do not use.
	// Types that are valid to be assigned to ErrorType:
	//	*FaultInjection_Abort_HttpStatus
	//	*FaultInjection_Abort_GrpcStatus
	//	*FaultInjection_Abort_Http2Error
	ErrorType isFaultInjection_Abort_ErrorType `protobuf_oneof:"error_type"`
	// Percentage of requests to be aborted with the error code provided.
	Percentage           *Percent `protobuf:"bytes,5,opt,name=percentage" json:"percentage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FaultInjection_Abort) Reset()         { *m = FaultInjection_Abort{} }
func (m *FaultInjection_Abort) String() string { return proto.CompactTextString(m) }
func (*FaultInjection_Abort) ProtoMessage()    {}
func (*FaultInjection_Abort) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_2170a435cfc8c4f7, []int{3, 1}
}
func (m *FaultInjection_Abort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaultInjection_Abort.Unmarshal(m, b)
}
func (m *FaultInjection_Abort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaultInjection_Abort.Marshal(b, m, deterministic)
}
func (dst *FaultInjection_Abort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultInjection_Abort.Merge(dst, src)
}
func (m *FaultInjection_Abort) XXX_Size() int {
	return xxx_messageInfo_FaultInjection_Abort.Size(m)
}
func (m *FaultInjection_Abort) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultInjection_Abort.DiscardUnknown(m)
}

var xxx_messageInfo_FaultInjection_Abort proto.InternalMessageInfo

type isFaultInjection_Abort_ErrorType interface {
	isFaultInjection_Abort_ErrorType()
	Equal(interface{}) bool
}

type FaultInjection_Abort_HttpStatus struct {
	HttpStatus int32 `protobuf:"varint,2,opt,name=http_status,json=httpStatus,proto3,oneof"`
}
type FaultInjection_Abort_GrpcStatus struct {
	GrpcStatus string `protobuf:"bytes,3,opt,name=grpc_status,json=grpcStatus,proto3,oneof"`
}
type FaultInjection_Abort_Http2Error struct {
	Http2Error string `protobuf:"bytes,4,opt,name=http2_error,json=http2Error,proto3,oneof"`
}

func (*FaultInjection_Abort_HttpStatus) isFaultInjection_Abort_ErrorType() {}
func (*FaultInjection_Abort_GrpcStatus) isFaultInjection_Abort_ErrorType() {}
func (*FaultInjection_Abort_Http2Error) isFaultInjection_Abort_ErrorType() {}

func (m *FaultInjection_Abort) GetErrorType() isFaultInjection_Abort_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return nil
}

// Deprecated: Do not use.
func (m *FaultInjection_Abort) GetPercent() int32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *FaultInjection_Abort) GetHttpStatus() int32 {
	if x, ok := m.GetErrorType().(*FaultInjection_Abort_HttpStatus); ok {
		return x.HttpStatus
	}
	return 0
}

func (m *FaultInjection_Abort) GetGrpcStatus() string {
	if x, ok := m.GetErrorType().(*FaultInjection_Abort_GrpcStatus); ok {
		return x.GrpcStatus
	}
	return ""
}

func (m *FaultInjection_Abort) GetHttp2Error() string {
	if x, ok := m.GetErrorType().(*FaultInjection_Abort_Http2Error); ok {
		return x.Http2Error
	}
	return ""
}

func (m *FaultInjection_Abort) GetPercentage() *Percent {
	if m != nil {
		return m.Percentage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FaultInjection_Abort) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FaultInjection_Abort_OneofMarshaler, _FaultInjection_Abort_OneofUnmarshaler, _FaultInjection_Abort_OneofSizer, []interface{}{
		(*FaultInjection_Abort_HttpStatus)(nil),
		(*FaultInjection_Abort_GrpcStatus)(nil),
		(*FaultInjection_Abort_Http2Error)(nil),
	}
}

func _FaultInjection_Abort_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FaultInjection_Abort)
	// error_type
	switch x := m.ErrorType.(type) {
	case *FaultInjection_Abort_HttpStatus:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.HttpStatus))
	case *FaultInjection_Abort_GrpcStatus:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.GrpcStatus)
	case *FaultInjection_Abort_Http2Error:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Http2Error)
	case nil:
	default:
		return fmt.Errorf("FaultInjection_Abort.ErrorType has unexpected type %T", x)
	}
	return nil
}

func _FaultInjection_Abort_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FaultInjection_Abort)
	switch tag {
	case 2: // error_type.http_status
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ErrorType = &FaultInjection_Abort_HttpStatus{int32(x)}
		return true, err
	case 3: // error_type.grpc_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ErrorType = &FaultInjection_Abort_GrpcStatus{x}
		return true, err
	case 4: // error_type.http2_error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ErrorType = &FaultInjection_Abort_Http2Error{x}
		return true, err
	default:
		return false, nil
	}
}

func _FaultInjection_Abort_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FaultInjection_Abort)
	// error_type
	switch x := m.ErrorType.(type) {
	case *FaultInjection_Abort_HttpStatus:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.HttpStatus))
	case *FaultInjection_Abort_GrpcStatus:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.GrpcStatus)))
		n += len(x.GrpcStatus)
	case *FaultInjection_Abort_Http2Error:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Http2Error)))
		n += len(x.Http2Error)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// manipulate request and response headers
type HeaderManipulation struct {
	// HTTP headers to remove before returning a response to the caller.
	RemoveResponseHeaders []string `protobuf:"bytes,12,rep,name=remove_response_headers,json=removeResponseHeaders" json:"remove_response_headers,omitempty"`
	// Additional HTTP headers to add before returning a response to the
	// caller.
	AppendResponseHeaders map[string]string `protobuf:"bytes,13,rep,name=append_response_headers,json=appendResponseHeaders" json:"append_response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// HTTP headers to remove before forwarding a request to the
	// destination service.
	RemoveRequestHeaders []string `protobuf:"bytes,14,rep,name=remove_request_headers,json=removeRequestHeaders" json:"remove_request_headers,omitempty"`
	// Additional HTTP headers to add before forwarding a request to the
	// destination service.
	AppendRequestHeaders map[string]string `protobuf:"bytes,15,rep,name=append_request_headers,json=appendRequestHeaders" json:"append_request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HeaderManipulation) Reset()         { *m = HeaderManipulation{} }
func (m *HeaderManipulation) String() string { return proto.CompactTextString(m) }
func (*HeaderManipulation) ProtoMessage()    {}
func (*HeaderManipulation) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_2170a435cfc8c4f7, []int{4}
}
func (m *HeaderManipulation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeaderManipulation.Unmarshal(m, b)
}
func (m *HeaderManipulation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeaderManipulation.Marshal(b, m, deterministic)
}
func (dst *HeaderManipulation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderManipulation.Merge(dst, src)
}
func (m *HeaderManipulation) XXX_Size() int {
	return xxx_messageInfo_HeaderManipulation.Size(m)
}
func (m *HeaderManipulation) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderManipulation.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderManipulation proto.InternalMessageInfo

func (m *HeaderManipulation) GetRemoveResponseHeaders() []string {
	if m != nil {
		return m.RemoveResponseHeaders
	}
	return nil
}

func (m *HeaderManipulation) GetAppendResponseHeaders() map[string]string {
	if m != nil {
		return m.AppendResponseHeaders
	}
	return nil
}

func (m *HeaderManipulation) GetRemoveRequestHeaders() []string {
	if m != nil {
		return m.RemoveRequestHeaders
	}
	return nil
}

func (m *HeaderManipulation) GetAppendRequestHeaders() map[string]string {
	if m != nil {
		return m.AppendRequestHeaders
	}
	return nil
}

// Describes the retry policy to use when a HTTP request fails. For
// example, the following rule sets the maximum number of retries to 3 when
// calling ratings:v1 service, with a 2s timeout per retry attempt.
type HTTPRetry struct {
	// REQUIRED. Number of retries for a given request. The interval
	// between retries will be determined automatically (25ms+). Actual
	// number of retries attempted depends on the httpReqTimeout.
	Attempts int32 `protobuf:"varint,1,opt,name=attempts,proto3" json:"attempts,omitempty"`
	// Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE >=1ms.
	PerTryTimeout        *types.Duration `protobuf:"bytes,2,opt,name=per_try_timeout,json=perTryTimeout" json:"per_try_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HTTPRetry) Reset()         { *m = HTTPRetry{} }
func (m *HTTPRetry) String() string { return proto.CompactTextString(m) }
func (*HTTPRetry) ProtoMessage()    {}
func (*HTTPRetry) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_2170a435cfc8c4f7, []int{5}
}
func (m *HTTPRetry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPRetry.Unmarshal(m, b)
}
func (m *HTTPRetry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPRetry.Marshal(b, m, deterministic)
}
func (dst *HTTPRetry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPRetry.Merge(dst, src)
}
func (m *HTTPRetry) XXX_Size() int {
	return xxx_messageInfo_HTTPRetry.Size(m)
}
func (m *HTTPRetry) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPRetry.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPRetry proto.InternalMessageInfo

func (m *HTTPRetry) GetAttempts() int32 {
	if m != nil {
		return m.Attempts
	}
	return 0
}

func (m *HTTPRetry) GetPerTryTimeout() *types.Duration {
	if m != nil {
		return m.PerTryTimeout
	}
	return nil
}

// Describes the Cross-Origin Resource Sharing (CORS) policy, for a given
// service. Refer to
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
// for further details about cross origin resource sharing. For example,
// the following rule restricts cross origin requests to those originating
// from example.com domain using HTTP POST/GET, and sets the
// Access-Control-Allow-Credentials header to false. In addition, it only
// exposes X-Foo-bar header and sets an expiry period of 1 day.
type CorsPolicy struct {
	// The list of origins that are allowed to perform CORS requests. The
	// content will be serialized into the Access-Control-Allow-Origin
	// header. Wildcard * will allow all origins.
	AllowOrigin []string `protobuf:"bytes,1,rep,name=allow_origin,json=allowOrigin" json:"allow_origin,omitempty"`
	// List of HTTP methods allowed to access the resource. The content will
	// be serialized into the Access-Control-Allow-Methods header.
	AllowMethods []string `protobuf:"bytes,2,rep,name=allow_methods,json=allowMethods" json:"allow_methods,omitempty"`
	// List of HTTP headers that can be used when requesting the
	// resource. Serialized to Access-Control-Allow-Headers header.
	AllowHeaders []string `protobuf:"bytes,3,rep,name=allow_headers,json=allowHeaders" json:"allow_headers,omitempty"`
	// A white list of HTTP headers that the browsers are allowed to
	// access. Serialized into Access-Control-Expose-Headers header.
	ExposeHeaders []string `protobuf:"bytes,4,rep,name=expose_headers,json=exposeHeaders" json:"expose_headers,omitempty"`
	// Specifies how long the the results of a preflight request can be
	// cached. Translates to the Access-Control-Max-Age header.
	MaxAge *types.Duration `protobuf:"bytes,5,opt,name=max_age,json=maxAge" json:"max_age,omitempty"`
	// Indicates whether the caller is allowed to send the actual request
	// (not the preflight) using credentials. Translates to
	// Access-Control-Allow-Credentials header.
	AllowCredentials     *types.BoolValue `protobuf:"bytes,6,opt,name=allow_credentials,json=allowCredentials" json:"allow_credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CorsPolicy) Reset()         { *m = CorsPolicy{} }
func (m *CorsPolicy) String() string { return proto.CompactTextString(m) }
func (*CorsPolicy) ProtoMessage()    {}
func (*CorsPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_2170a435cfc8c4f7, []int{6}
}
func (m *CorsPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorsPolicy.Unmarshal(m, b)
}
func (m *CorsPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorsPolicy.Marshal(b, m, deterministic)
}
func (dst *CorsPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorsPolicy.Merge(dst, src)
}
func (m *CorsPolicy) XXX_Size() int {
	return xxx_messageInfo_CorsPolicy.Size(m)
}
func (m *CorsPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_CorsPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_CorsPolicy proto.InternalMessageInfo

func (m *CorsPolicy) GetAllowOrigin() []string {
	if m != nil {
		return m.AllowOrigin
	}
	return nil
}

func (m *CorsPolicy) GetAllowMethods() []string {
	if m != nil {
		return m.AllowMethods
	}
	return nil
}

func (m *CorsPolicy) GetAllowHeaders() []string {
	if m != nil {
		return m.AllowHeaders
	}
	return nil
}

func (m *CorsPolicy) GetExposeHeaders() []string {
	if m != nil {
		return m.ExposeHeaders
	}
	return nil
}

func (m *CorsPolicy) GetMaxAge() *types.Duration {
	if m != nil {
		return m.MaxAge
	}
	return nil
}

func (m *CorsPolicy) GetAllowCredentials() *types.BoolValue {
	if m != nil {
		return m.AllowCredentials
	}
	return nil
}

// Percent specifies a percentage in the range of [0.0, 100.0].
type Percent struct {
	Value                float64  `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Percent) Reset()         { *m = Percent{} }
func (m *Percent) String() string { return proto.CompactTextString(m) }
func (*Percent) ProtoMessage()    {}
func (*Percent) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_2170a435cfc8c4f7, []int{7}
}
func (m *Percent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Percent.Unmarshal(m, b)
}
func (m *Percent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Percent.Marshal(b, m, deterministic)
}
func (dst *Percent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Percent.Merge(dst, src)
}
func (m *Percent) XXX_Size() int {
	return xxx_messageInfo_Percent.Size(m)
}
func (m *Percent) XXX_DiscardUnknown() {
	xxx_messageInfo_Percent.DiscardUnknown(m)
}

var xxx_messageInfo_Percent proto.InternalMessageInfo

func (m *Percent) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*RoutingRule)(nil), "supergloo.solo.io.RoutingRule")
	proto.RegisterMapType((map[string]string)(nil), "supergloo.solo.io.RoutingRule.DestinationSelectorEntry")
	proto.RegisterMapType((map[string]string)(nil), "supergloo.solo.io.RoutingRule.SourceSelectorEntry")
	proto.RegisterType((*TrafficSplitting)(nil), "supergloo.solo.io.TrafficSplitting")
	proto.RegisterType((*Subset)(nil), "supergloo.solo.io.Subset")
	proto.RegisterMapType((map[string]string)(nil), "supergloo.solo.io.Subset.SelectorEntry")
	proto.RegisterType((*FaultInjection)(nil), "supergloo.solo.io.FaultInjection")
	proto.RegisterType((*FaultInjection_Delay)(nil), "supergloo.solo.io.FaultInjection.Delay")
	proto.RegisterType((*FaultInjection_Abort)(nil), "supergloo.solo.io.FaultInjection.Abort")
	proto.RegisterType((*HeaderManipulation)(nil), "supergloo.solo.io.HeaderManipulation")
	proto.RegisterMapType((map[string]string)(nil), "supergloo.solo.io.HeaderManipulation.AppendRequestHeadersEntry")
	proto.RegisterMapType((map[string]string)(nil), "supergloo.solo.io.HeaderManipulation.AppendResponseHeadersEntry")
	proto.RegisterType((*HTTPRetry)(nil), "supergloo.solo.io.HTTPRetry")
	proto.RegisterType((*CorsPolicy)(nil), "supergloo.solo.io.CorsPolicy")
	proto.RegisterType((*Percent)(nil), "supergloo.solo.io.Percent")
}
func (this *RoutingRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoutingRule)
	if !ok {
		that2, ok := that.(RoutingRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.TargetMesh.Equal(that1.TargetMesh) {
		return false
	}
	if len(this.SourceSelector) != len(that1.SourceSelector) {
		return false
	}
	for i := range this.SourceSelector {
		if this.SourceSelector[i] != that1.SourceSelector[i] {
			return false
		}
	}
	if len(this.DestinationSelector) != len(that1.DestinationSelector) {
		return false
	}
	for i := range this.DestinationSelector {
		if this.DestinationSelector[i] != that1.DestinationSelector[i] {
			return false
		}
	}
	if len(this.RequestMatchers) != len(that1.RequestMatchers) {
		return false
	}
	for i := range this.RequestMatchers {
		if !this.RequestMatchers[i].Equal(that1.RequestMatchers[i]) {
			return false
		}
	}
	if !this.TrafficSplitting.Equal(that1.TrafficSplitting) {
		return false
	}
	if !this.FaultInjection.Equal(that1.FaultInjection) {
		return false
	}
	if !this.Timeout.Equal(that1.Timeout) {
		return false
	}
	if !this.Retries.Equal(that1.Retries) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if !this.Mirror.Equal(that1.Mirror) {
		return false
	}
	if !this.HeaderManipulaition.Equal(that1.HeaderManipulaition) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficSplitting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficSplitting)
	if !ok {
		that2, ok := that.(TrafficSplitting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Subsets) != len(that1.Subsets) {
		return false
	}
	for i := range this.Subsets {
		if !this.Subsets[i].Equal(that1.Subsets[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Subset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Subset)
	if !ok {
		that2, ok := that.(Subset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Weight.Equal(that1.Weight) {
		return false
	}
	if len(this.Selector) != len(that1.Selector) {
		return false
	}
	for i := range this.Selector {
		if this.Selector[i] != that1.Selector[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FaultInjection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaultInjection)
	if !ok {
		that2, ok := that.(FaultInjection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Delay.Equal(that1.Delay) {
		return false
	}
	if !this.Abort.Equal(that1.Abort) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FaultInjection_Delay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaultInjection_Delay)
	if !ok {
		that2, ok := that.(FaultInjection_Delay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Percent != that1.Percent {
		return false
	}
	if that1.HttpDelayType == nil {
		if this.HttpDelayType != nil {
			return false
		}
	} else if this.HttpDelayType == nil {
		return false
	} else if !this.HttpDelayType.Equal(that1.HttpDelayType) {
		return false
	}
	if !this.Percentage.Equal(that1.Percentage) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FaultInjection_Delay_FixedDelay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaultInjection_Delay_FixedDelay)
	if !ok {
		that2, ok := that.(FaultInjection_Delay_FixedDelay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FixedDelay.Equal(that1.FixedDelay) {
		return false
	}
	return true
}
func (this *FaultInjection_Delay_ExponentialDelay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaultInjection_Delay_ExponentialDelay)
	if !ok {
		that2, ok := that.(FaultInjection_Delay_ExponentialDelay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExponentialDelay.Equal(that1.ExponentialDelay) {
		return false
	}
	return true
}
func (this *FaultInjection_Abort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaultInjection_Abort)
	if !ok {
		that2, ok := that.(FaultInjection_Abort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Percent != that1.Percent {
		return false
	}
	if that1.ErrorType == nil {
		if this.ErrorType != nil {
			return false
		}
	} else if this.ErrorType == nil {
		return false
	} else if !this.ErrorType.Equal(that1.ErrorType) {
		return false
	}
	if !this.Percentage.Equal(that1.Percentage) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FaultInjection_Abort_HttpStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaultInjection_Abort_HttpStatus)
	if !ok {
		that2, ok := that.(FaultInjection_Abort_HttpStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpStatus != that1.HttpStatus {
		return false
	}
	return true
}
func (this *FaultInjection_Abort_GrpcStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaultInjection_Abort_GrpcStatus)
	if !ok {
		that2, ok := that.(FaultInjection_Abort_GrpcStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GrpcStatus != that1.GrpcStatus {
		return false
	}
	return true
}
func (this *FaultInjection_Abort_Http2Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FaultInjection_Abort_Http2Error)
	if !ok {
		that2, ok := that.(FaultInjection_Abort_Http2Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Http2Error != that1.Http2Error {
		return false
	}
	return true
}
func (this *HeaderManipulation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderManipulation)
	if !ok {
		that2, ok := that.(HeaderManipulation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RemoveResponseHeaders) != len(that1.RemoveResponseHeaders) {
		return false
	}
	for i := range this.RemoveResponseHeaders {
		if this.RemoveResponseHeaders[i] != that1.RemoveResponseHeaders[i] {
			return false
		}
	}
	if len(this.AppendResponseHeaders) != len(that1.AppendResponseHeaders) {
		return false
	}
	for i := range this.AppendResponseHeaders {
		if this.AppendResponseHeaders[i] != that1.AppendResponseHeaders[i] {
			return false
		}
	}
	if len(this.RemoveRequestHeaders) != len(that1.RemoveRequestHeaders) {
		return false
	}
	for i := range this.RemoveRequestHeaders {
		if this.RemoveRequestHeaders[i] != that1.RemoveRequestHeaders[i] {
			return false
		}
	}
	if len(this.AppendRequestHeaders) != len(that1.AppendRequestHeaders) {
		return false
	}
	for i := range this.AppendRequestHeaders {
		if this.AppendRequestHeaders[i] != that1.AppendRequestHeaders[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HTTPRetry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPRetry)
	if !ok {
		that2, ok := that.(HTTPRetry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Attempts != that1.Attempts {
		return false
	}
	if !this.PerTryTimeout.Equal(that1.PerTryTimeout) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CorsPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CorsPolicy)
	if !ok {
		that2, ok := that.(CorsPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AllowOrigin) != len(that1.AllowOrigin) {
		return false
	}
	for i := range this.AllowOrigin {
		if this.AllowOrigin[i] != that1.AllowOrigin[i] {
			return false
		}
	}
	if len(this.AllowMethods) != len(that1.AllowMethods) {
		return false
	}
	for i := range this.AllowMethods {
		if this.AllowMethods[i] != that1.AllowMethods[i] {
			return false
		}
	}
	if len(this.AllowHeaders) != len(that1.AllowHeaders) {
		return false
	}
	for i := range this.AllowHeaders {
		if this.AllowHeaders[i] != that1.AllowHeaders[i] {
			return false
		}
	}
	if len(this.ExposeHeaders) != len(that1.ExposeHeaders) {
		return false
	}
	for i := range this.ExposeHeaders {
		if this.ExposeHeaders[i] != that1.ExposeHeaders[i] {
			return false
		}
	}
	if !this.MaxAge.Equal(that1.MaxAge) {
		return false
	}
	if !this.AllowCredentials.Equal(that1.AllowCredentials) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Percent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Percent)
	if !ok {
		that2, ok := that.(Percent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("routing.proto", fileDescriptor_routing_2170a435cfc8c4f7) }

var fileDescriptor_routing_2170a435cfc8c4f7 = []byte{
	// 1223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xc9, 0x6e, 0x1b, 0x47,
	0x13, 0x36, 0x25, 0x91, 0x12, 0x8b, 0x5a, 0x5b, 0xb4, 0x3d, 0x22, 0xfc, 0x7b, 0xa1, 0x61, 0x58,
	0x87, 0xdf, 0x43, 0x58, 0x0e, 0x1c, 0x43, 0xd9, 0x2c, 0x79, 0x53, 0x02, 0x08, 0x11, 0x5a, 0x42,
	0x10, 0x24, 0x87, 0x41, 0x6b, 0x58, 0x1c, 0x8e, 0x3d, 0x9c, 0x9e, 0x74, 0xf7, 0xd8, 0xe2, 0x0b,
	0xe4, 0x2d, 0x72, 0xcf, 0x33, 0xe4, 0x90, 0x73, 0x1e, 0x21, 0x27, 0x1f, 0x72, 0xca, 0x39, 0xe7,
	0x1c, 0x82, 0x5e, 0x86, 0x8b, 0x44, 0x99, 0x52, 0x72, 0x22, 0xa7, 0xea, 0xfb, 0xbe, 0xaa, 0xea,
	0xee, 0xaa, 0x6e, 0x58, 0x12, 0x3c, 0x57, 0x71, 0x1a, 0xf9, 0x99, 0xe0, 0x8a, 0x93, 0x35, 0x99,
	0x67, 0x28, 0xa2, 0x84, 0x73, 0x5f, 0xf2, 0x84, 0xfb, 0x31, 0x6f, 0xd4, 0x23, 0x1e, 0x71, 0xe3,
	0x6d, 0xe9, 0x7f, 0x16, 0xd8, 0xb8, 0x19, 0x71, 0x1e, 0x25, 0xd8, 0x32, 0x5f, 0xc7, 0x79, 0xa7,
	0xd5, 0xce, 0x05, 0x53, 0x31, 0x4f, 0xcf, 0xf3, 0xbf, 0x13, 0x2c, 0xcb, 0x50, 0x48, 0xe7, 0x5f,
	0xd7, 0x31, 0x5a, 0x6f, 0x1f, 0x6a, 0xc0, 0x49, 0xdf, 0x19, 0x1f, 0x46, 0xb1, 0xea, 0xe6, 0xc7,
	0x7e, 0xc8, 0x7b, 0x2d, 0x1d, 0xfe, 0x41, 0xcc, 0xed, 0xef, 0x9b, 0x58, 0xb5, 0x58, 0x16, 0x6b,
	0x7c, 0x0f, 0x15, 0x6b, 0x33, 0xc5, 0x1c, 0xa5, 0x75, 0x01, 0x8a, 0x54, 0x4c, 0xe5, 0x45, 0xe0,
	0xff, 0x5f, 0x80, 0x20, 0xb0, 0x63, 0xd1, 0xcd, 0x5f, 0x16, 0xa0, 0x46, 0xed, 0x0a, 0xd1, 0x3c,
	0x41, 0xf2, 0x0a, 0x2a, 0x56, 0xcd, 0x6b, 0xdf, 0x2e, 0x6d, 0xd6, 0xb6, 0xea, 0x7e, 0xc8, 0x05,
	0x16, 0x6b, 0xe5, 0x1f, 0x1a, 0xdf, 0xee, 0xc6, 0x6f, 0xef, 0x6f, 0x5d, 0xf9, 0xeb, 0xfd, 0xad,
	0x35, 0x85, 0x52, 0xb5, 0xe3, 0x4e, 0x67, 0xbb, 0x19, 0x47, 0x29, 0x17, 0xd8, 0xa4, 0x8e, 0x4e,
	0x9e, 0xc0, 0x42, 0x51, 0x89, 0x17, 0x1a, 0xa9, 0x6b, 0xe3, 0x52, 0xfb, 0xce, 0xbb, 0x3b, 0xa7,
	0xc5, 0xe8, 0x00, 0x4d, 0xb6, 0xa1, 0xa6, 0x98, 0x88, 0x50, 0x05, 0x3d, 0x94, 0x5d, 0xaf, 0x64,
	0xc8, 0x1b, 0xe3, 0x64, 0x8a, 0x92, 0xe7, 0x22, 0x44, 0x8a, 0x1d, 0x0a, 0x16, 0xbd, 0x8f, 0xb2,
	0x4b, 0xbe, 0x87, 0x15, 0xeb, 0x08, 0x24, 0x26, 0x18, 0x2a, 0x2e, 0xbc, 0x99, 0xdb, 0xb3, 0x9b,
	0xb5, 0xad, 0x2d, 0xff, 0xcc, 0xc6, 0xfb, 0x23, 0x75, 0xfb, 0x87, 0x86, 0x75, 0xe8, 0x48, 0x2f,
	0x52, 0x25, 0xfa, 0x74, 0x59, 0x8e, 0x19, 0xc9, 0x6b, 0xa8, 0xb7, 0x51, 0xaa, 0x38, 0x35, 0xe7,
	0x60, 0x18, 0x61, 0xd6, 0x44, 0xf8, 0x78, 0x4a, 0x84, 0xe7, 0x43, 0xea, 0x78, 0x98, 0xf5, 0xf6,
	0x59, 0x0f, 0x79, 0x0a, 0xab, 0x02, 0x7f, 0xc8, 0x51, 0xaa, 0xa0, 0xc7, 0x54, 0xd8, 0x45, 0x21,
	0xbd, 0x39, 0x13, 0xe7, 0xaa, 0x3f, 0x16, 0x62, 0xdf, 0x7a, 0xe9, 0x8a, 0x83, 0xbb, 0x6f, 0x49,
	0x0e, 0x60, 0x4d, 0x09, 0xd6, 0xe9, 0xc4, 0x61, 0x20, 0xb3, 0x24, 0x56, 0x3a, 0x11, 0xaf, 0x6c,
	0x16, 0xf3, 0xee, 0x84, 0x54, 0x8f, 0x2c, 0xf6, 0xb0, 0x80, 0xd2, 0x55, 0x75, 0xca, 0x42, 0xbe,
	0x82, 0x95, 0x0e, 0xcb, 0x13, 0x15, 0xc4, 0xe9, 0x6b, 0x0c, 0x75, 0xba, 0x5e, 0xc5, 0xe8, 0xdd,
	0x99, 0xa0, 0xf7, 0x52, 0x23, 0xbf, 0x2c, 0x80, 0x74, 0xb9, 0x33, 0xf6, 0x4d, 0x1e, 0xc1, 0xbc,
	0x8a, 0x7b, 0xc8, 0x73, 0xe5, 0xcd, 0xbb, 0x0d, 0xb6, 0x0d, 0xe5, 0x17, 0x0d, 0xe5, 0x3f, 0x77,
	0x0d, 0x47, 0x0b, 0x24, 0x79, 0x0c, 0xf3, 0x02, 0x95, 0x88, 0x51, 0x7a, 0x0b, 0x86, 0x74, 0x63,
	0x42, 0xe0, 0xbd, 0xa3, 0xa3, 0x03, 0x8a, 0x7a, 0x61, 0x0b, 0x30, 0xf9, 0x1c, 0x6a, 0x21, 0x17,
	0x32, 0xc8, 0x78, 0x12, 0x87, 0x7d, 0x0f, 0x0c, 0xf7, 0x7f, 0x13, 0xb8, 0xcf, 0xb8, 0x90, 0x07,
	0x06, 0x44, 0x21, 0x1c, 0xfc, 0x27, 0x0f, 0xa1, 0xd2, 0x8b, 0x85, 0xe0, 0xc2, 0xab, 0x16, 0xb9,
	0x8e, 0xb2, 0x46, 0x76, 0x96, 0x3a, 0x20, 0xf9, 0x16, 0xea, 0x5d, 0x64, 0x6d, 0x14, 0x41, 0x8f,
	0xa5, 0x71, 0x96, 0x27, 0x2c, 0x36, 0x0b, 0xb6, 0x68, 0x04, 0xee, 0x4d, 0xca, 0xdb, 0xc0, 0xf7,
	0x1d, 0xda, 0x88, 0xad, 0x77, 0xc7, 0x6c, 0x46, 0xa1, 0xb1, 0x03, 0xeb, 0x13, 0x0e, 0x2b, 0x59,
	0x85, 0xd9, 0x37, 0xd8, 0x37, 0xdd, 0x52, 0xa5, 0xfa, 0x2f, 0xa9, 0x43, 0xf9, 0x2d, 0x4b, 0x72,
	0xf4, 0x66, 0x8c, 0xcd, 0x7e, 0x6c, 0xcf, 0x3c, 0x29, 0x35, 0x5e, 0x82, 0x77, 0xde, 0x69, 0xbc,
	0x8c, 0x4e, 0xf3, 0x15, 0xac, 0x9e, 0x3e, 0x36, 0x7a, 0x63, 0x65, 0x7e, 0x2c, 0x51, 0x49, 0xaf,
	0x64, 0xce, 0xeb, 0xc6, 0x84, 0x5a, 0x0f, 0x0d, 0x82, 0x16, 0xc8, 0xe6, 0xaf, 0x25, 0xa8, 0x58,
	0x1b, 0xd9, 0x82, 0xca, 0x3b, 0x8c, 0xa3, 0xae, 0x72, 0x8d, 0xdf, 0x98, 0x40, 0x3f, 0x40, 0x11,
	0x62, 0xaa, 0xa8, 0x43, 0x92, 0x67, 0xb0, 0x70, 0xaa, 0xdd, 0xef, 0x9f, 0x1b, 0xd4, 0x1f, 0x6f,
	0xbe, 0x01, 0xb1, 0xf1, 0x09, 0x2c, 0xfd, 0xfb, 0x95, 0xf8, 0x73, 0x0e, 0x96, 0xc7, 0x4f, 0x3c,
	0xf9, 0x0c, 0xca, 0x6d, 0x4c, 0x58, 0xdf, 0xd5, 0x71, 0x7f, 0x6a, 0x8f, 0xf8, 0xcf, 0x35, 0x9c,
	0x5a, 0x96, 0xa6, 0xb3, 0x63, 0x2e, 0x94, 0x89, 0x75, 0x21, 0xfa, 0x8e, 0x86, 0x53, 0xcb, 0x6a,
	0xfc, 0x5d, 0x82, 0xb2, 0xd1, 0x23, 0x37, 0x60, 0x3e, 0xb3, 0xeb, 0x65, 0x32, 0x29, 0xef, 0xce,
	0x78, 0x25, 0x5a, 0x98, 0xc8, 0xa7, 0x50, 0xeb, 0xc4, 0x27, 0xd8, 0x0e, 0x6c, 0xae, 0x33, 0x53,
	0x7a, 0x71, 0xef, 0x0a, 0x05, 0x83, 0xb7, 0xda, 0x7b, 0xb0, 0x86, 0x27, 0x19, 0x4f, 0x31, 0x55,
	0x31, 0x4b, 0x9c, 0xc6, 0xec, 0x74, 0x8d, 0xd5, 0x11, 0x96, 0x55, 0xda, 0x06, 0x70, 0x29, 0xb1,
	0x08, 0xdd, 0x98, 0xfa, 0xd0, 0xd6, 0x8f, 0xa0, 0x77, 0xd7, 0x60, 0xa5, 0xab, 0x54, 0x66, 0xc3,
	0x07, 0xaa, 0x9f, 0x61, 0xe3, 0xf7, 0x12, 0x94, 0xcd, 0x7a, 0x4c, 0x29, 0xff, 0x0e, 0xd4, 0x0c,
	0xd5, 0xdd, 0x79, 0xba, 0xfc, 0xb2, 0xae, 0x51, 0x1b, 0xed, 0x5d, 0xa7, 0x21, 0x91, 0xc8, 0xc2,
	0x02, 0xa2, 0xab, 0xab, 0x6a, 0x88, 0x36, 0x0e, 0x21, 0x9a, 0xb0, 0x15, 0xa0, 0x19, 0x12, 0x73,
	0x05, 0xc4, 0x18, 0x5f, 0x98, 0x79, 0xf0, 0x5f, 0xea, 0x5b, 0x04, 0x30, 0xc2, 0xa6, 0xb4, 0xe6,
	0x8f, 0x73, 0x40, 0xce, 0xce, 0x0a, 0xf2, 0x18, 0xae, 0x0b, 0xec, 0xf1, 0xb7, 0x18, 0x08, 0x94,
	0x19, 0x4f, 0x25, 0x06, 0x76, 0x7a, 0x48, 0x6f, 0xf1, 0xf6, 0xec, 0x66, 0x95, 0x5e, 0xb5, 0x6e,
	0xea, 0xbc, 0x56, 0x42, 0x92, 0x13, 0xb8, 0xae, 0xdf, 0x2d, 0x69, 0xfb, 0x2c, 0x6f, 0xc9, 0xb4,
	0xd2, 0xd3, 0x0b, 0xcd, 0x2a, 0x7f, 0xc7, 0x88, 0x9c, 0x52, 0xb7, 0x3d, 0x76, 0x95, 0x4d, 0xf2,
	0x91, 0x8f, 0xe0, 0xda, 0x20, 0x63, 0x7b, 0xd3, 0x15, 0x81, 0x97, 0x4d, 0xc2, 0xf5, 0x22, 0x61,
	0xe3, 0x2c, 0x58, 0x39, 0x5c, 0x1b, 0xe4, 0x3b, 0xce, 0x5a, 0x31, 0xe9, 0x7e, 0x71, 0xb9, 0x74,
	0x47, 0xb5, 0x6d, 0xb6, 0x75, 0x36, 0xc1, 0xd5, 0xd8, 0x83, 0xc6, 0xf9, 0x15, 0x5e, 0x6a, 0xf8,
	0xbe, 0x82, 0x8d, 0x73, 0x83, 0x5f, 0x6a, 0xe6, 0xbc, 0x86, 0xea, 0xe0, 0xae, 0x23, 0x0d, 0x58,
	0x60, 0x4a, 0x61, 0x2f, 0x33, 0x73, 0xb7, 0xb4, 0x59, 0xa6, 0x83, 0x6f, 0xb2, 0x03, 0x2b, 0x19,
	0x8a, 0x40, 0x89, 0x7e, 0x50, 0xdc, 0xb9, 0xd3, 0xfa, 0x9c, 0x2e, 0x65, 0x28, 0x8e, 0x44, 0xff,
	0xc8, 0xe2, 0x9b, 0x3f, 0xcd, 0x00, 0x0c, 0x2f, 0x47, 0x72, 0x07, 0x16, 0x59, 0x92, 0xf0, 0x77,
	0x01, 0x17, 0x71, 0x14, 0xa7, 0x66, 0xd2, 0x57, 0x69, 0xcd, 0xd8, 0xbe, 0x36, 0x26, 0x72, 0x17,
	0x96, 0x2c, 0xa4, 0x87, 0xaa, 0xcb, 0xdb, 0xd2, 0x0c, 0xe6, 0x2a, 0xb5, 0xbc, 0x7d, 0x6b, 0x1b,
	0x82, 0x8a, 0x3d, 0x9c, 0x1d, 0x01, 0x15, 0x3b, 0x7e, 0x0f, 0x96, 0xf5, 0xb8, 0x18, 0x39, 0x98,
	0x73, 0x06, 0xb5, 0x64, 0xad, 0x05, 0x6c, 0x0b, 0xe6, 0x7b, 0xec, 0x24, 0x18, 0xb6, 0xd7, 0x07,
	0xaa, 0xab, 0xf4, 0xd8, 0xc9, 0x4e, 0xa4, 0x5f, 0xbb, 0x6b, 0x36, 0x7e, 0x28, 0xb0, 0x6d, 0xc7,
	0x91, 0x74, 0x6f, 0x9a, 0xc6, 0x19, 0xf6, 0x2e, 0xe7, 0xc9, 0x37, 0x7a, 0xf5, 0xe9, 0xaa, 0x21,
	0x3d, 0x1b, 0x72, 0x9a, 0xb7, 0x60, 0xde, 0x75, 0xee, 0x70, 0xc3, 0xf4, 0x36, 0x94, 0xdc, 0x86,
	0xed, 0x3e, 0xf8, 0xf9, 0x8f, 0x9b, 0xa5, 0xef, 0xee, 0x4f, 0x7a, 0x9b, 0x17, 0xc7, 0xb5, 0x95,
	0xbd, 0x89, 0xdc, 0x03, 0xfd, 0xb8, 0x62, 0xa2, 0x3e, 0xfa, 0x27, 0x00, 0x00, 0xff, 0xff, 0x94,
	0xaf, 0x12, 0x88, 0xbe, 0x0c, 0x00, 0x00,
}
