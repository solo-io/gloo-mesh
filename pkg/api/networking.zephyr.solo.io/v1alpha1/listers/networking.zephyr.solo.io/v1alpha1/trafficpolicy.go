/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/networking.zephyr.solo.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TrafficPolicyLister helps list TrafficPolicies.
type TrafficPolicyLister interface {
	// List lists all TrafficPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficPolicy, err error)
	// TrafficPolicies returns an object that can list and get TrafficPolicies.
	TrafficPolicies(namespace string) TrafficPolicyNamespaceLister
	TrafficPolicyListerExpansion
}

// trafficPolicyLister implements the TrafficPolicyLister interface.
type trafficPolicyLister struct {
	indexer cache.Indexer
}

// NewTrafficPolicyLister returns a new TrafficPolicyLister.
func NewTrafficPolicyLister(indexer cache.Indexer) TrafficPolicyLister {
	return &trafficPolicyLister{indexer: indexer}
}

// List lists all TrafficPolicies in the indexer.
func (s *trafficPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficPolicy))
	})
	return ret, err
}

// TrafficPolicies returns an object that can list and get TrafficPolicies.
func (s *trafficPolicyLister) TrafficPolicies(namespace string) TrafficPolicyNamespaceLister {
	return trafficPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TrafficPolicyNamespaceLister helps list and get TrafficPolicies.
type TrafficPolicyNamespaceLister interface {
	// List lists all TrafficPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficPolicy, err error)
	// Get retrieves the TrafficPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.TrafficPolicy, error)
	TrafficPolicyNamespaceListerExpansion
}

// trafficPolicyNamespaceLister implements the TrafficPolicyNamespaceLister
// interface.
type trafficPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TrafficPolicies in the indexer for a given namespace.
func (s trafficPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficPolicy))
	})
	return ret, err
}

// Get retrieves the TrafficPolicy from the indexer for a given namespace and name.
func (s trafficPolicyNamespaceLister) Get(name string) (*v1alpha1.TrafficPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("trafficpolicy"), name)
	}
	return obj.(*v1alpha1.TrafficPolicy), nil
}
