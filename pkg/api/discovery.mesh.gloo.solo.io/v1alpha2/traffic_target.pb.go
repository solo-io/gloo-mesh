// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo-mesh/api/discovery/v1alpha2/traffic_target.proto

package v1alpha2

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1alpha2"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//*
//The TrafficTarget is an abstraction for a traffic target which we have discovered to be part of a
//given mesh.
type TrafficTargetSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of traffic target backing the TrafficTarget.
	//
	// Types that are assignable to Type:
	//	*TrafficTargetSpec_KubeService_
	Type isTrafficTargetSpec_Type `protobuf_oneof:"type"`
	// The mesh with which this traffic target is associated.
	Mesh *v1.ObjectRef `protobuf:"bytes,2,opt,name=mesh,proto3" json:"mesh,omitempty"`
}

func (x *TrafficTargetSpec) Reset() {
	*x = TrafficTargetSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficTargetSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficTargetSpec) ProtoMessage() {}

func (x *TrafficTargetSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficTargetSpec.ProtoReflect.Descriptor instead.
func (*TrafficTargetSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescGZIP(), []int{0}
}

func (m *TrafficTargetSpec) GetType() isTrafficTargetSpec_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TrafficTargetSpec) GetKubeService() *TrafficTargetSpec_KubeService {
	if x, ok := x.GetType().(*TrafficTargetSpec_KubeService_); ok {
		return x.KubeService
	}
	return nil
}

func (x *TrafficTargetSpec) GetMesh() *v1.ObjectRef {
	if x != nil {
		return x.Mesh
	}
	return nil
}

type isTrafficTargetSpec_Type interface {
	isTrafficTargetSpec_Type()
}

type TrafficTargetSpec_KubeService_ struct {
	// Metadata about the kube-native traffic target backing this TrafficTarget.
	KubeService *TrafficTargetSpec_KubeService `protobuf:"bytes,1,opt,name=kube_service,json=kubeService,proto3,oneof"`
}

func (*TrafficTargetSpec_KubeService_) isTrafficTargetSpec_Type() {}

// A subdivision of a region representing a set of physically colocated compute resources.
type SubLocality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zone    string `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty"`
	SubZone string `protobuf:"bytes,2,opt,name=sub_zone,json=subZone,proto3" json:"sub_zone,omitempty"`
}

func (x *SubLocality) Reset() {
	*x = SubLocality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubLocality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubLocality) ProtoMessage() {}

func (x *SubLocality) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubLocality.ProtoReflect.Descriptor instead.
func (*SubLocality) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescGZIP(), []int{1}
}

func (x *SubLocality) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *SubLocality) GetSubZone() string {
	if x != nil {
		return x.SubZone
	}
	return ""
}

type TrafficTargetStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The most recent generation observed in the the TrafficPolicy metadata.
	// if the observedGeneration does not match generation, the controller has not received the most
	// recent version of this resource.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// The set of Traffic Policies that have been applied to this TrafficTarget
	AppliedTrafficPolicies []*TrafficTargetStatus_AppliedTrafficPolicy `protobuf:"bytes,3,rep,name=applied_traffic_policies,json=appliedTrafficPolicies,proto3" json:"applied_traffic_policies,omitempty"`
	// The set of Access Policies that have been applied to this TrafficTarget
	AppliedAccessPolicies []*TrafficTargetStatus_AppliedAccessPolicy `protobuf:"bytes,4,rep,name=applied_access_policies,json=appliedAccessPolicies,proto3" json:"applied_access_policies,omitempty"`
	// The local fully qualified domain
	LocalFqdn string `protobuf:"bytes,5,opt,name=local_fqdn,json=localFqdn,proto3" json:"local_fqdn,omitempty"`
	// Federation metadata. Only populated if this traffic target is federated through a VirtualMesh.
	AppliedFederation *TrafficTargetStatus_AppliedFederation `protobuf:"bytes,6,opt,name=applied_federation,json=appliedFederation,proto3" json:"applied_federation,omitempty"`
}

func (x *TrafficTargetStatus) Reset() {
	*x = TrafficTargetStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficTargetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficTargetStatus) ProtoMessage() {}

func (x *TrafficTargetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficTargetStatus.ProtoReflect.Descriptor instead.
func (*TrafficTargetStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescGZIP(), []int{2}
}

func (x *TrafficTargetStatus) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *TrafficTargetStatus) GetAppliedTrafficPolicies() []*TrafficTargetStatus_AppliedTrafficPolicy {
	if x != nil {
		return x.AppliedTrafficPolicies
	}
	return nil
}

func (x *TrafficTargetStatus) GetAppliedAccessPolicies() []*TrafficTargetStatus_AppliedAccessPolicy {
	if x != nil {
		return x.AppliedAccessPolicies
	}
	return nil
}

func (x *TrafficTargetStatus) GetLocalFqdn() string {
	if x != nil {
		return x.LocalFqdn
	}
	return ""
}

func (x *TrafficTargetStatus) GetAppliedFederation() *TrafficTargetStatus_AppliedFederation {
	if x != nil {
		return x.AppliedFederation
	}
	return nil
}

type TrafficTargetSpec_KubeService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A reference to the kube-native traffic target that this TrafficTarget represents.
	Ref *v1.ClusterObjectRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// Selectors for the set of pods targeted by the k8s Service.
	WorkloadSelectorLabels map[string]string `protobuf:"bytes,2,rep,name=workload_selector_labels,json=workloadSelectorLabels,proto3" json:"workload_selector_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Labels on the underlying k8s Service itself.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The ports exposed by the underlying service.
	Ports []*TrafficTargetSpec_KubeService_KubeServicePort `protobuf:"bytes,4,rep,name=ports,proto3" json:"ports,omitempty"`
	// Subsets for routing, based on labels.
	Subsets map[string]*TrafficTargetSpec_KubeService_Subset `protobuf:"bytes,5,rep,name=subsets,proto3" json:"subsets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The region the service resides in, typically representing a large geographic area.
	// All of the service's endpoints will be in this region.
	Region string `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	// Each endpoints subset is a group of endpoints arranged in terms of IP/port pairs.
	// This API mirrors the [Kubernetes Endpoints API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#endpoints-v1-core).
	EndpointSubsets []*TrafficTargetSpec_KubeService_EndpointsSubset `protobuf:"bytes,7,rep,name=endpoint_subsets,json=endpointSubsets,proto3" json:"endpoint_subsets,omitempty"`
}

func (x *TrafficTargetSpec_KubeService) Reset() {
	*x = TrafficTargetSpec_KubeService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficTargetSpec_KubeService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficTargetSpec_KubeService) ProtoMessage() {}

func (x *TrafficTargetSpec_KubeService) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficTargetSpec_KubeService.ProtoReflect.Descriptor instead.
func (*TrafficTargetSpec_KubeService) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TrafficTargetSpec_KubeService) GetRef() *v1.ClusterObjectRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *TrafficTargetSpec_KubeService) GetWorkloadSelectorLabels() map[string]string {
	if x != nil {
		return x.WorkloadSelectorLabels
	}
	return nil
}

func (x *TrafficTargetSpec_KubeService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TrafficTargetSpec_KubeService) GetPorts() []*TrafficTargetSpec_KubeService_KubeServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *TrafficTargetSpec_KubeService) GetSubsets() map[string]*TrafficTargetSpec_KubeService_Subset {
	if x != nil {
		return x.Subsets
	}
	return nil
}

func (x *TrafficTargetSpec_KubeService) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *TrafficTargetSpec_KubeService) GetEndpointSubsets() []*TrafficTargetSpec_KubeService_EndpointsSubset {
	if x != nil {
		return x.EndpointSubsets
	}
	return nil
}

type TrafficTargetSpec_KubeService_KubeServicePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// External-facing port for this k8s service (NOT the service's target port on the backing pods).
	Port     uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Available in k8s 1.18+, specifies the application protocol.
	AppProtocol string `protobuf:"bytes,4,opt,name=app_protocol,json=appProtocol,proto3" json:"app_protocol,omitempty"`
}

func (x *TrafficTargetSpec_KubeService_KubeServicePort) Reset() {
	*x = TrafficTargetSpec_KubeService_KubeServicePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficTargetSpec_KubeService_KubeServicePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficTargetSpec_KubeService_KubeServicePort) ProtoMessage() {}

func (x *TrafficTargetSpec_KubeService_KubeServicePort) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficTargetSpec_KubeService_KubeServicePort.ProtoReflect.Descriptor instead.
func (*TrafficTargetSpec_KubeService_KubeServicePort) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *TrafficTargetSpec_KubeService_KubeServicePort) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TrafficTargetSpec_KubeService_KubeServicePort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrafficTargetSpec_KubeService_KubeServicePort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TrafficTargetSpec_KubeService_KubeServicePort) GetAppProtocol() string {
	if x != nil {
		return x.AppProtocol
	}
	return ""
}

// Subsets for routing, based on labels.
type TrafficTargetSpec_KubeService_Subset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TrafficTargetSpec_KubeService_Subset) Reset() {
	*x = TrafficTargetSpec_KubeService_Subset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficTargetSpec_KubeService_Subset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficTargetSpec_KubeService_Subset) ProtoMessage() {}

func (x *TrafficTargetSpec_KubeService_Subset) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficTargetSpec_KubeService_Subset.ProtoReflect.Descriptor instead.
func (*TrafficTargetSpec_KubeService_Subset) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *TrafficTargetSpec_KubeService_Subset) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// A series of IP addresses and their associated ports.
// The list of IP + port pairs is the cartesian product of the two lists.
type TrafficTargetSpec_KubeService_EndpointsSubset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoints []*TrafficTargetSpec_KubeService_EndpointsSubset_Endpoint `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	Ports     []*TrafficTargetSpec_KubeService_KubeServicePort          `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *TrafficTargetSpec_KubeService_EndpointsSubset) Reset() {
	*x = TrafficTargetSpec_KubeService_EndpointsSubset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficTargetSpec_KubeService_EndpointsSubset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficTargetSpec_KubeService_EndpointsSubset) ProtoMessage() {}

func (x *TrafficTargetSpec_KubeService_EndpointsSubset) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficTargetSpec_KubeService_EndpointsSubset.ProtoReflect.Descriptor instead.
func (*TrafficTargetSpec_KubeService_EndpointsSubset) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescGZIP(), []int{0, 0, 5}
}

func (x *TrafficTargetSpec_KubeService_EndpointsSubset) GetEndpoints() []*TrafficTargetSpec_KubeService_EndpointsSubset_Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *TrafficTargetSpec_KubeService_EndpointsSubset) GetPorts() []*TrafficTargetSpec_KubeService_KubeServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

// An endpoint exposed by the service
type TrafficTargetSpec_KubeService_EndpointsSubset_Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP address
	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Labels which belong to this IP. These are taken from the backing workload instance.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The zone/sub-zone of the endpoint.
	SubLocality *SubLocality `protobuf:"bytes,3,opt,name=sub_locality,json=subLocality,proto3" json:"sub_locality,omitempty"`
}

func (x *TrafficTargetSpec_KubeService_EndpointsSubset_Endpoint) Reset() {
	*x = TrafficTargetSpec_KubeService_EndpointsSubset_Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficTargetSpec_KubeService_EndpointsSubset_Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficTargetSpec_KubeService_EndpointsSubset_Endpoint) ProtoMessage() {}

func (x *TrafficTargetSpec_KubeService_EndpointsSubset_Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficTargetSpec_KubeService_EndpointsSubset_Endpoint.ProtoReflect.Descriptor instead.
func (*TrafficTargetSpec_KubeService_EndpointsSubset_Endpoint) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescGZIP(), []int{0, 0, 5, 0}
}

func (x *TrafficTargetSpec_KubeService_EndpointsSubset_Endpoint) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *TrafficTargetSpec_KubeService_EndpointsSubset_Endpoint) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TrafficTargetSpec_KubeService_EndpointsSubset_Endpoint) GetSubLocality() *SubLocality {
	if x != nil {
		return x.SubLocality
	}
	return nil
}

// AppliedTrafficPolicy represents a traffic policy that has been applied to the TrafficTarget.
// if an existing Traffic Policy becomes invalid, the last applied policy will be used
type TrafficTargetStatus_AppliedTrafficPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// reference to the traffic policy
	Ref *v1.ObjectRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// the observed generation of the accepted traffic policy
	ObservedGeneration int64 `protobuf:"varint,2,opt,name=observedGeneration,proto3" json:"observedGeneration,omitempty"`
	// the last known valid spec of the traffic policy
	Spec *v1alpha2.TrafficPolicySpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *TrafficTargetStatus_AppliedTrafficPolicy) Reset() {
	*x = TrafficTargetStatus_AppliedTrafficPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficTargetStatus_AppliedTrafficPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficTargetStatus_AppliedTrafficPolicy) ProtoMessage() {}

func (x *TrafficTargetStatus_AppliedTrafficPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficTargetStatus_AppliedTrafficPolicy.ProtoReflect.Descriptor instead.
func (*TrafficTargetStatus_AppliedTrafficPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescGZIP(), []int{2, 0}
}

func (x *TrafficTargetStatus_AppliedTrafficPolicy) GetRef() *v1.ObjectRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *TrafficTargetStatus_AppliedTrafficPolicy) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *TrafficTargetStatus_AppliedTrafficPolicy) GetSpec() *v1alpha2.TrafficPolicySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// AppliedAccessPolicy represents a access policy that has been applied to the TrafficTarget.
// if an existing Access Policy becomes invalid, the last applied policy will be used
type TrafficTargetStatus_AppliedAccessPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// reference to the access policy
	Ref *v1.ObjectRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// the observed generation of the accepted access policy
	ObservedGeneration int64 `protobuf:"varint,2,opt,name=observedGeneration,proto3" json:"observedGeneration,omitempty"`
	// the last known valid spec of the access policy
	Spec *v1alpha2.AccessPolicySpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *TrafficTargetStatus_AppliedAccessPolicy) Reset() {
	*x = TrafficTargetStatus_AppliedAccessPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficTargetStatus_AppliedAccessPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficTargetStatus_AppliedAccessPolicy) ProtoMessage() {}

func (x *TrafficTargetStatus_AppliedAccessPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficTargetStatus_AppliedAccessPolicy.ProtoReflect.Descriptor instead.
func (*TrafficTargetStatus_AppliedAccessPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescGZIP(), []int{2, 1}
}

func (x *TrafficTargetStatus_AppliedAccessPolicy) GetRef() *v1.ObjectRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *TrafficTargetStatus_AppliedAccessPolicy) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *TrafficTargetStatus_AppliedAccessPolicy) GetSpec() *v1alpha2.AccessPolicySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Federation policy applied to this TrafficTarget, allowing access
// to the traffic target from other meshes/clusters.
type TrafficTargetStatus_AppliedFederation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//For any workload that this traffic target has federated to (i.e., any Workload controlled by a mesh whose ref appears in `federated_to_meshes`),
	//a client in that workload will be able to reach this traffic target at this DNS name. This includes workloads on clusters other than
	//the one hosting this service.
	FederatedHostname string `protobuf:"bytes,1,opt,name=federated_hostname,json=federatedHostname,proto3" json:"federated_hostname,omitempty"`
	// The list of Meshes which are able to resolve this service's `multicluster_dns_name`.
	FederatedToMeshes []*v1.ObjectRef `protobuf:"bytes,2,rep,name=federated_to_meshes,json=federatedToMeshes,proto3" json:"federated_to_meshes,omitempty"`
	// Whether or not the TrafficTarget has been federated via a flat-network to the given meshes.
	FlatNetwork bool `protobuf:"varint,3,opt,name=flat_network,json=flatNetwork,proto3" json:"flat_network,omitempty"`
}

func (x *TrafficTargetStatus_AppliedFederation) Reset() {
	*x = TrafficTargetStatus_AppliedFederation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficTargetStatus_AppliedFederation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficTargetStatus_AppliedFederation) ProtoMessage() {}

func (x *TrafficTargetStatus_AppliedFederation) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficTargetStatus_AppliedFederation.ProtoReflect.Descriptor instead.
func (*TrafficTargetStatus_AppliedFederation) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescGZIP(), []int{2, 2}
}

func (x *TrafficTargetStatus_AppliedFederation) GetFederatedHostname() string {
	if x != nil {
		return x.FederatedHostname
	}
	return ""
}

func (x *TrafficTargetStatus_AppliedFederation) GetFederatedToMeshes() []*v1.ObjectRef {
	if x != nil {
		return x.FederatedToMeshes
	}
	return nil
}

func (x *TrafficTargetStatus_AppliedFederation) GetFlatNetwork() bool {
	if x != nil {
		return x.FlatNetwork
	}
	return false
}

var File_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDesc = []byte{
	0x0a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6b, 0x76, 0x32,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f,
	0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x78,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf3, 0x0d, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5f, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76,
	0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x66, 0x52, 0x04, 0x6d, 0x65, 0x73, 0x68, 0x1a, 0xc2, 0x0c, 0x0a, 0x0b, 0x4b, 0x75,
	0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b,
	0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x03, 0x72, 0x65, 0x66,
	0x12, 0x90, 0x01, 0x0a, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x60, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x75, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x49, 0x0a, 0x1b, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x78, 0x0a,
	0x0f, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x7d, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x57, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x20, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x93, 0x04, 0x0a, 0x0f, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x12, 0x71, 0x0a, 0x09,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x53, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x60, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x1a, 0xaa, 0x02, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x77, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x87, 0x08, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a,
	0x18, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x7c,
	0x0a, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x71, 0x64, 0x6e, 0x12, 0x71, 0x0a, 0x12, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xbb,
	0x01, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x66, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x1a, 0xb9, 0x01, 0x0a,
	0x13, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52,
	0x03, 0x72, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x1a, 0xb3, 0x01, 0x0a, 0x11, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x12, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x13, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65,
	0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x11, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x68, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x6c, 0x61, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x53,
	0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0xc0, 0xf5, 0x04, 0x01, 0xb8,
	0xf5, 0x04, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescData = file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_goTypes = []interface{}{
	(*TrafficTargetSpec)(nil),             // 0: discovery.mesh.gloo.solo.io.TrafficTargetSpec
	(*SubLocality)(nil),                   // 1: discovery.mesh.gloo.solo.io.SubLocality
	(*TrafficTargetStatus)(nil),           // 2: discovery.mesh.gloo.solo.io.TrafficTargetStatus
	(*TrafficTargetSpec_KubeService)(nil), // 3: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService
	nil,                                   // 4: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.WorkloadSelectorLabelsEntry
	nil,                                   // 5: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.LabelsEntry
	(*TrafficTargetSpec_KubeService_KubeServicePort)(nil), // 6: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.KubeServicePort
	nil, // 7: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.SubsetsEntry
	(*TrafficTargetSpec_KubeService_Subset)(nil),                   // 8: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.Subset
	(*TrafficTargetSpec_KubeService_EndpointsSubset)(nil),          // 9: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.EndpointsSubset
	(*TrafficTargetSpec_KubeService_EndpointsSubset_Endpoint)(nil), // 10: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.EndpointsSubset.Endpoint
	nil, // 11: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.EndpointsSubset.Endpoint.LabelsEntry
	(*TrafficTargetStatus_AppliedTrafficPolicy)(nil), // 12: discovery.mesh.gloo.solo.io.TrafficTargetStatus.AppliedTrafficPolicy
	(*TrafficTargetStatus_AppliedAccessPolicy)(nil),  // 13: discovery.mesh.gloo.solo.io.TrafficTargetStatus.AppliedAccessPolicy
	(*TrafficTargetStatus_AppliedFederation)(nil),    // 14: discovery.mesh.gloo.solo.io.TrafficTargetStatus.AppliedFederation
	(*v1.ObjectRef)(nil),                             // 15: core.skv2.solo.io.ObjectRef
	(*v1.ClusterObjectRef)(nil),                      // 16: core.skv2.solo.io.ClusterObjectRef
	(*v1alpha2.TrafficPolicySpec)(nil),               // 17: networking.mesh.gloo.solo.io.TrafficPolicySpec
	(*v1alpha2.AccessPolicySpec)(nil),                // 18: networking.mesh.gloo.solo.io.AccessPolicySpec
}
var file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_depIdxs = []int32{
	3,  // 0: discovery.mesh.gloo.solo.io.TrafficTargetSpec.kube_service:type_name -> discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService
	15, // 1: discovery.mesh.gloo.solo.io.TrafficTargetSpec.mesh:type_name -> core.skv2.solo.io.ObjectRef
	12, // 2: discovery.mesh.gloo.solo.io.TrafficTargetStatus.applied_traffic_policies:type_name -> discovery.mesh.gloo.solo.io.TrafficTargetStatus.AppliedTrafficPolicy
	13, // 3: discovery.mesh.gloo.solo.io.TrafficTargetStatus.applied_access_policies:type_name -> discovery.mesh.gloo.solo.io.TrafficTargetStatus.AppliedAccessPolicy
	14, // 4: discovery.mesh.gloo.solo.io.TrafficTargetStatus.applied_federation:type_name -> discovery.mesh.gloo.solo.io.TrafficTargetStatus.AppliedFederation
	16, // 5: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.ref:type_name -> core.skv2.solo.io.ClusterObjectRef
	4,  // 6: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.workload_selector_labels:type_name -> discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.WorkloadSelectorLabelsEntry
	5,  // 7: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.labels:type_name -> discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.LabelsEntry
	6,  // 8: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.ports:type_name -> discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.KubeServicePort
	7,  // 9: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.subsets:type_name -> discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.SubsetsEntry
	9,  // 10: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.endpoint_subsets:type_name -> discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.EndpointsSubset
	8,  // 11: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.SubsetsEntry.value:type_name -> discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.Subset
	10, // 12: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.EndpointsSubset.endpoints:type_name -> discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.EndpointsSubset.Endpoint
	6,  // 13: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.EndpointsSubset.ports:type_name -> discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.KubeServicePort
	11, // 14: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.EndpointsSubset.Endpoint.labels:type_name -> discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.EndpointsSubset.Endpoint.LabelsEntry
	1,  // 15: discovery.mesh.gloo.solo.io.TrafficTargetSpec.KubeService.EndpointsSubset.Endpoint.sub_locality:type_name -> discovery.mesh.gloo.solo.io.SubLocality
	15, // 16: discovery.mesh.gloo.solo.io.TrafficTargetStatus.AppliedTrafficPolicy.ref:type_name -> core.skv2.solo.io.ObjectRef
	17, // 17: discovery.mesh.gloo.solo.io.TrafficTargetStatus.AppliedTrafficPolicy.spec:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec
	15, // 18: discovery.mesh.gloo.solo.io.TrafficTargetStatus.AppliedAccessPolicy.ref:type_name -> core.skv2.solo.io.ObjectRef
	18, // 19: discovery.mesh.gloo.solo.io.TrafficTargetStatus.AppliedAccessPolicy.spec:type_name -> networking.mesh.gloo.solo.io.AccessPolicySpec
	15, // 20: discovery.mesh.gloo.solo.io.TrafficTargetStatus.AppliedFederation.federated_to_meshes:type_name -> core.skv2.solo.io.ObjectRef
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_init() }
func file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_init() {
	if File_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficTargetSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubLocality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficTargetStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficTargetSpec_KubeService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficTargetSpec_KubeService_KubeServicePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficTargetSpec_KubeService_Subset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficTargetSpec_KubeService_EndpointsSubset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficTargetSpec_KubeService_EndpointsSubset_Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficTargetStatus_AppliedTrafficPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficTargetStatus_AppliedAccessPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficTargetStatus_AppliedFederation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TrafficTargetSpec_KubeService_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto = out.File
	file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_api_discovery_v1alpha2_traffic_target_proto_depIdxs = nil
}
