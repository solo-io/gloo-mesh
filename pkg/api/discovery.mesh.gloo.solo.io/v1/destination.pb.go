// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo-mesh/api/discovery/v1/destination.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	_ "cuelang.org/go/encoding/protobuf/cue"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	v12 "github.com/solo-io/gloo-mesh/pkg/api/common.mesh.gloo.solo.io/v1"
	v11 "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Describes the Kubernetes Service type.
type DestinationSpec_KubeService_ServiceType int32

const (
	// A ClusterIP Service.
	DestinationSpec_KubeService_CLUSTER_IP DestinationSpec_KubeService_ServiceType = 0
	// A NodePort Service.
	DestinationSpec_KubeService_NODE_PORT DestinationSpec_KubeService_ServiceType = 1
	// A LoadBalancer Service.
	DestinationSpec_KubeService_LOAD_BALANCER DestinationSpec_KubeService_ServiceType = 2
	// An ExternalName Service.
	DestinationSpec_KubeService_EXTERNAL_NAME DestinationSpec_KubeService_ServiceType = 3
)

// Enum value maps for DestinationSpec_KubeService_ServiceType.
var (
	DestinationSpec_KubeService_ServiceType_name = map[int32]string{
		0: "CLUSTER_IP",
		1: "NODE_PORT",
		2: "LOAD_BALANCER",
		3: "EXTERNAL_NAME",
	}
	DestinationSpec_KubeService_ServiceType_value = map[string]int32{
		"CLUSTER_IP":    0,
		"NODE_PORT":     1,
		"LOAD_BALANCER": 2,
		"EXTERNAL_NAME": 3,
	}
)

func (x DestinationSpec_KubeService_ServiceType) Enum() *DestinationSpec_KubeService_ServiceType {
	p := new(DestinationSpec_KubeService_ServiceType)
	*p = x
	return p
}

func (x DestinationSpec_KubeService_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DestinationSpec_KubeService_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_enumTypes[0].Descriptor()
}

func (DestinationSpec_KubeService_ServiceType) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_enumTypes[0]
}

func (x DestinationSpec_KubeService_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DestinationSpec_KubeService_ServiceType.Descriptor instead.
func (DestinationSpec_KubeService_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{0, 0, 0}
}

// The Destination is an abstraction for any entity capable of receiving networking requests.
type DestinationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the platform-specific Destination.
	//
	// Types that are assignable to Type:
	//	*DestinationSpec_KubeService_
	//	*DestinationSpec_ExternalService_
	Type isDestinationSpec_Type `protobuf_oneof:"type"`
	// The mesh that controls this Destination. Can be omitted if the
	// Destination isn't associated with any particular mesh, eg for External Services.
	Mesh *v1.ObjectRef `protobuf:"bytes,2,opt,name=mesh,proto3" json:"mesh,omitempty"`
}

func (x *DestinationSpec) Reset() {
	*x = DestinationSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationSpec) ProtoMessage() {}

func (x *DestinationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationSpec.ProtoReflect.Descriptor instead.
func (*DestinationSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{0}
}

func (m *DestinationSpec) GetType() isDestinationSpec_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *DestinationSpec) GetKubeService() *DestinationSpec_KubeService {
	if x, ok := x.GetType().(*DestinationSpec_KubeService_); ok {
		return x.KubeService
	}
	return nil
}

func (x *DestinationSpec) GetExternalService() *DestinationSpec_ExternalService {
	if x, ok := x.GetType().(*DestinationSpec_ExternalService_); ok {
		return x.ExternalService
	}
	return nil
}

func (x *DestinationSpec) GetMesh() *v1.ObjectRef {
	if x != nil {
		return x.Mesh
	}
	return nil
}

type isDestinationSpec_Type interface {
	isDestinationSpec_Type()
}

type DestinationSpec_KubeService_ struct {
	// KubeService is a kube-native Destination representing a kubernetes
	// service running inside of a kubernetes cluster.
	KubeService *DestinationSpec_KubeService `protobuf:"bytes,1,opt,name=kube_service,json=kubeService,proto3,oneof"`
}

type DestinationSpec_ExternalService_ struct {
	// ExternalService is a Destination representing a service
	// external to the Mesh. It can be used to expose a given hostname
	// or IP address to all clusters in the Virtual Mesh.
	ExternalService *DestinationSpec_ExternalService `protobuf:"bytes,3,opt,name=external_service,json=externalService,proto3,oneof"`
}

func (*DestinationSpec_KubeService_) isDestinationSpec_Type() {}

func (*DestinationSpec_ExternalService_) isDestinationSpec_Type() {}

type DestinationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The most recent generation observed in the the TrafficPolicy metadata.
	// If the `observedGeneration` does not match `metadata.generation`, Gloo Mesh has not processed the most
	// recent version of this resource.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// The set of TrafficPolicies that have been applied to this Destination.
	// {{/* Note: validation of this field disabled because it slows down cue tremendously*/}}
	AppliedTrafficPolicies []*v11.AppliedTrafficPolicy `protobuf:"bytes,3,rep,name=applied_traffic_policies,json=appliedTrafficPolicies,proto3" json:"applied_traffic_policies,omitempty"`
	// The set of AccessPolicies that have been applied to this Destination.
	AppliedAccessPolicies []*DestinationStatus_AppliedAccessPolicy `protobuf:"bytes,4,rep,name=applied_access_policies,json=appliedAccessPolicies,proto3" json:"applied_access_policies,omitempty"`
	// The fully qualified domain name for requests originating from a source *coloated* with this Destination.
	// For Kubernetes services, "colocated" means within the same Kubernetes cluster.
	LocalFqdn string `protobuf:"bytes,5,opt,name=local_fqdn,json=localFqdn,proto3" json:"local_fqdn,omitempty"`
	// Federation metadata. Only populated if this Destination is federated through a VirtualMesh.
	AppliedFederation *DestinationStatus_AppliedFederation `protobuf:"bytes,6,opt,name=applied_federation,json=appliedFederation,proto3" json:"applied_federation,omitempty"`
	// The set of TrafficPolicy traffic shifts that reference subsets on this Destination.
	RequiredSubsets []*RequiredSubsets `protobuf:"bytes,7,rep,name=required_subsets,json=requiredSubsets,proto3" json:"required_subsets,omitempty"`
}

func (x *DestinationStatus) Reset() {
	*x = DestinationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationStatus) ProtoMessage() {}

func (x *DestinationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationStatus.ProtoReflect.Descriptor instead.
func (*DestinationStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{1}
}

func (x *DestinationStatus) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *DestinationStatus) GetAppliedTrafficPolicies() []*v11.AppliedTrafficPolicy {
	if x != nil {
		return x.AppliedTrafficPolicies
	}
	return nil
}

func (x *DestinationStatus) GetAppliedAccessPolicies() []*DestinationStatus_AppliedAccessPolicy {
	if x != nil {
		return x.AppliedAccessPolicies
	}
	return nil
}

func (x *DestinationStatus) GetLocalFqdn() string {
	if x != nil {
		return x.LocalFqdn
	}
	return ""
}

func (x *DestinationStatus) GetAppliedFederation() *DestinationStatus_AppliedFederation {
	if x != nil {
		return x.AppliedFederation
	}
	return nil
}

func (x *DestinationStatus) GetRequiredSubsets() []*RequiredSubsets {
	if x != nil {
		return x.RequiredSubsets
	}
	return nil
}

// Describes a [TrafficPolicy]({{< versioned_link_path fromRoot="/reference/api/github.com.solo-io.gloo-mesh.api.networking.v1.traffic_policy" >}})
// that references subsets on this Destination in a traffic shift.
// Note: this is an Istio-specific feature.
type RequiredSubsets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the TrafficPolicy object.
	TrafficPolicyRef *v1.ObjectRef `protobuf:"bytes,1,opt,name=traffic_policy_ref,json=trafficPolicyRef,proto3" json:"traffic_policy_ref,omitempty"`
	// The observed generation of the TrafficPolicy.
	ObservedGeneration int64 `protobuf:"varint,2,opt,name=observedGeneration,proto3" json:"observedGeneration,omitempty"`
	// The applied traffic shift.
	TrafficShift *v11.TrafficPolicySpec_Policy_MultiDestination `protobuf:"bytes,3,opt,name=traffic_shift,json=trafficShift,proto3" json:"traffic_shift,omitempty"`
}

func (x *RequiredSubsets) Reset() {
	*x = RequiredSubsets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequiredSubsets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredSubsets) ProtoMessage() {}

func (x *RequiredSubsets) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredSubsets.ProtoReflect.Descriptor instead.
func (*RequiredSubsets) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{2}
}

func (x *RequiredSubsets) GetTrafficPolicyRef() *v1.ObjectRef {
	if x != nil {
		return x.TrafficPolicyRef
	}
	return nil
}

func (x *RequiredSubsets) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *RequiredSubsets) GetTrafficShift() *v11.TrafficPolicySpec_Policy_MultiDestination {
	if x != nil {
		return x.TrafficShift
	}
	return nil
}

// Describes a Kubernetes service.
type DestinationSpec_KubeService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the Kubernetes service object.
	Ref *v1.ClusterObjectRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// Selectors for the set of pods targeted by the Kubernetes service.
	WorkloadSelectorLabels map[string]string `protobuf:"bytes,2,rep,name=workload_selector_labels,json=workloadSelectorLabels,proto3" json:"workload_selector_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Labels on the Kubernetes service.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The ports exposed by the underlying service.
	Ports []*DestinationSpec_KubeService_KubeServicePort `protobuf:"bytes,4,rep,name=ports,proto3" json:"ports,omitempty"`
	// Subsets for routing, based on labels.
	Subsets map[string]*DestinationSpec_KubeService_Subset `protobuf:"bytes,5,rep,name=subsets,proto3" json:"subsets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The region the service resides in, typically representing a large geographic area.
	Region string `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	// Each endpoints subset is a group of endpoints arranged in terms of IP/port pairs.
	// This API mirrors the [Kubernetes Endpoints API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#endpoints-v1-core).
	EndpointSubsets []*DestinationSpec_KubeService_EndpointsSubset `protobuf:"bytes,7,rep,name=endpoint_subsets,json=endpointSubsets,proto3" json:"endpoint_subsets,omitempty"`
	// Describes the address data for Kubernetes Services exposed to external traffic (i.e. for non ClusterIP type Services).
	ExternalAddresses []*DestinationSpec_KubeService_ExternalAddress `protobuf:"bytes,8,rep,name=external_addresses,json=externalAddresses,proto3" json:"external_addresses,omitempty"`
	// Describes the Kubernetes Service type.
	ServiceType DestinationSpec_KubeService_ServiceType `protobuf:"varint,9,opt,name=service_type,json=serviceType,proto3,enum=discovery.mesh.gloo.solo.io.DestinationSpec_KubeService_ServiceType" json:"service_type,omitempty"`
}

func (x *DestinationSpec_KubeService) Reset() {
	*x = DestinationSpec_KubeService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationSpec_KubeService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationSpec_KubeService) ProtoMessage() {}

func (x *DestinationSpec_KubeService) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationSpec_KubeService.ProtoReflect.Descriptor instead.
func (*DestinationSpec_KubeService) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DestinationSpec_KubeService) GetRef() *v1.ClusterObjectRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *DestinationSpec_KubeService) GetWorkloadSelectorLabels() map[string]string {
	if x != nil {
		return x.WorkloadSelectorLabels
	}
	return nil
}

func (x *DestinationSpec_KubeService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DestinationSpec_KubeService) GetPorts() []*DestinationSpec_KubeService_KubeServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *DestinationSpec_KubeService) GetSubsets() map[string]*DestinationSpec_KubeService_Subset {
	if x != nil {
		return x.Subsets
	}
	return nil
}

func (x *DestinationSpec_KubeService) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *DestinationSpec_KubeService) GetEndpointSubsets() []*DestinationSpec_KubeService_EndpointsSubset {
	if x != nil {
		return x.EndpointSubsets
	}
	return nil
}

func (x *DestinationSpec_KubeService) GetExternalAddresses() []*DestinationSpec_KubeService_ExternalAddress {
	if x != nil {
		return x.ExternalAddresses
	}
	return nil
}

func (x *DestinationSpec_KubeService) GetServiceType() DestinationSpec_KubeService_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return DestinationSpec_KubeService_CLUSTER_IP
}

// Describes a service external to the mesh
type DestinationSpec_ExternalService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The list of hosts which will resolve to this Destination for
	// services within the Virtual Mesh.
	Hosts []string `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// The List of addresses which will resolve to this service for
	// services within the Virtual Mesh.
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// The associated ports of the external service
	Ports []*DestinationSpec_ExternalService_ServicePort `protobuf:"bytes,4,rep,name=ports,proto3" json:"ports,omitempty"`
	// List of endpoints, to which any requests to this Destionation
	// will be load balanced across.
	Endpoints []*DestinationSpec_ExternalService_ExternalEndpoint `protobuf:"bytes,5,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *DestinationSpec_ExternalService) Reset() {
	*x = DestinationSpec_ExternalService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationSpec_ExternalService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationSpec_ExternalService) ProtoMessage() {}

func (x *DestinationSpec_ExternalService) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationSpec_ExternalService.ProtoReflect.Descriptor instead.
func (*DestinationSpec_ExternalService) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{0, 1}
}

func (x *DestinationSpec_ExternalService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DestinationSpec_ExternalService) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *DestinationSpec_ExternalService) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *DestinationSpec_ExternalService) GetPorts() []*DestinationSpec_ExternalService_ServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *DestinationSpec_ExternalService) GetEndpoints() []*DestinationSpec_ExternalService_ExternalEndpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

// Describes the address data for Kubernetes Services exposed to external traffic (i.e. for non ClusterIP type Services).
type DestinationSpec_KubeService_ExternalAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The externally-reachable address for this Kubernetes Service, either an IP address or DNS name.
	//
	// Types that are assignable to ExternalAddressType:
	//	*DestinationSpec_KubeService_ExternalAddress_DnsName
	//	*DestinationSpec_KubeService_ExternalAddress_Ip
	ExternalAddressType isDestinationSpec_KubeService_ExternalAddress_ExternalAddressType `protobuf_oneof:"external_address_type"`
}

func (x *DestinationSpec_KubeService_ExternalAddress) Reset() {
	*x = DestinationSpec_KubeService_ExternalAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationSpec_KubeService_ExternalAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationSpec_KubeService_ExternalAddress) ProtoMessage() {}

func (x *DestinationSpec_KubeService_ExternalAddress) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationSpec_KubeService_ExternalAddress.ProtoReflect.Descriptor instead.
func (*DestinationSpec_KubeService_ExternalAddress) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (m *DestinationSpec_KubeService_ExternalAddress) GetExternalAddressType() isDestinationSpec_KubeService_ExternalAddress_ExternalAddressType {
	if m != nil {
		return m.ExternalAddressType
	}
	return nil
}

func (x *DestinationSpec_KubeService_ExternalAddress) GetDnsName() string {
	if x, ok := x.GetExternalAddressType().(*DestinationSpec_KubeService_ExternalAddress_DnsName); ok {
		return x.DnsName
	}
	return ""
}

func (x *DestinationSpec_KubeService_ExternalAddress) GetIp() string {
	if x, ok := x.GetExternalAddressType().(*DestinationSpec_KubeService_ExternalAddress_Ip); ok {
		return x.Ip
	}
	return ""
}

type isDestinationSpec_KubeService_ExternalAddress_ExternalAddressType interface {
	isDestinationSpec_KubeService_ExternalAddress_ExternalAddressType()
}

type DestinationSpec_KubeService_ExternalAddress_DnsName struct {
	// An externally accessible DNS name.
	DnsName string `protobuf:"bytes,5,opt,name=dns_name,json=dnsName,proto3,oneof"`
}

type DestinationSpec_KubeService_ExternalAddress_Ip struct {
	// An externally accessible IP address.
	Ip string `protobuf:"bytes,6,opt,name=ip,proto3,oneof"`
}

func (*DestinationSpec_KubeService_ExternalAddress_DnsName) isDestinationSpec_KubeService_ExternalAddress_ExternalAddressType() {
}

func (*DestinationSpec_KubeService_ExternalAddress_Ip) isDestinationSpec_KubeService_ExternalAddress_ExternalAddressType() {
}

// Describes the service's ports. See [here](https://kubernetes.io/docs/concepts/services-networking/service/#multi-port-services) for more information.
type DestinationSpec_KubeService_KubeServicePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// External-facing port for this Kubernetes service (*not* the service's target port on the targeted pods).
	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the port
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Protocol on which this port serves traffic (HTTP, TCP, UDP, etc...)
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Available in Kubernetes 1.18+, describes the application protocol.
	AppProtocol string `protobuf:"bytes,4,opt,name=app_protocol,json=appProtocol,proto3" json:"app_protocol,omitempty"`
	// A Kubernetes Service's spec.targetPort can either be a string referring to the port name, or a number referring to the number. See [this reference](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/#ServiceSpec).
	//
	// Types that are assignable to TargetPort:
	//	*DestinationSpec_KubeService_KubeServicePort_TargetPortName
	//	*DestinationSpec_KubeService_KubeServicePort_TargetPortNumber
	TargetPort isDestinationSpec_KubeService_KubeServicePort_TargetPort `protobuf_oneof:"target_port"`
	// Populated for NodePort or LoadBalancer Services.
	NodePort uint32 `protobuf:"varint,7,opt,name=node_port,json=nodePort,proto3" json:"node_port,omitempty"`
}

func (x *DestinationSpec_KubeService_KubeServicePort) Reset() {
	*x = DestinationSpec_KubeService_KubeServicePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationSpec_KubeService_KubeServicePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationSpec_KubeService_KubeServicePort) ProtoMessage() {}

func (x *DestinationSpec_KubeService_KubeServicePort) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationSpec_KubeService_KubeServicePort.ProtoReflect.Descriptor instead.
func (*DestinationSpec_KubeService_KubeServicePort) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *DestinationSpec_KubeService_KubeServicePort) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DestinationSpec_KubeService_KubeServicePort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DestinationSpec_KubeService_KubeServicePort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *DestinationSpec_KubeService_KubeServicePort) GetAppProtocol() string {
	if x != nil {
		return x.AppProtocol
	}
	return ""
}

func (m *DestinationSpec_KubeService_KubeServicePort) GetTargetPort() isDestinationSpec_KubeService_KubeServicePort_TargetPort {
	if m != nil {
		return m.TargetPort
	}
	return nil
}

func (x *DestinationSpec_KubeService_KubeServicePort) GetTargetPortName() string {
	if x, ok := x.GetTargetPort().(*DestinationSpec_KubeService_KubeServicePort_TargetPortName); ok {
		return x.TargetPortName
	}
	return ""
}

func (x *DestinationSpec_KubeService_KubeServicePort) GetTargetPortNumber() uint32 {
	if x, ok := x.GetTargetPort().(*DestinationSpec_KubeService_KubeServicePort_TargetPortNumber); ok {
		return x.TargetPortNumber
	}
	return 0
}

func (x *DestinationSpec_KubeService_KubeServicePort) GetNodePort() uint32 {
	if x != nil {
		return x.NodePort
	}
	return 0
}

type isDestinationSpec_KubeService_KubeServicePort_TargetPort interface {
	isDestinationSpec_KubeService_KubeServicePort_TargetPort()
}

type DestinationSpec_KubeService_KubeServicePort_TargetPortName struct {
	// Name of the target port
	TargetPortName string `protobuf:"bytes,5,opt,name=target_port_name,json=targetPortName,proto3,oneof"`
}

type DestinationSpec_KubeService_KubeServicePort_TargetPortNumber struct {
	// Number of the target port
	TargetPortNumber uint32 `protobuf:"varint,6,opt,name=target_port_number,json=targetPortNumber,proto3,oneof"`
}

func (*DestinationSpec_KubeService_KubeServicePort_TargetPortName) isDestinationSpec_KubeService_KubeServicePort_TargetPort() {
}

func (*DestinationSpec_KubeService_KubeServicePort_TargetPortNumber) isDestinationSpec_KubeService_KubeServicePort_TargetPort() {
}

// Subsets for routing, based on labels.
type DestinationSpec_KubeService_Subset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *DestinationSpec_KubeService_Subset) Reset() {
	*x = DestinationSpec_KubeService_Subset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationSpec_KubeService_Subset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationSpec_KubeService_Subset) ProtoMessage() {}

func (x *DestinationSpec_KubeService_Subset) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationSpec_KubeService_Subset.ProtoReflect.Descriptor instead.
func (*DestinationSpec_KubeService_Subset) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{0, 0, 5}
}

func (x *DestinationSpec_KubeService_Subset) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// A series of IP addresses and their associated ports.
// The list of IP and port pairs is the cartesian product of the endpoint and port lists.
type DestinationSpec_KubeService_EndpointsSubset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoints []*DestinationSpec_KubeService_EndpointsSubset_Endpoint `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	Ports     []*DestinationSpec_KubeService_EndpointPort             `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *DestinationSpec_KubeService_EndpointsSubset) Reset() {
	*x = DestinationSpec_KubeService_EndpointsSubset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationSpec_KubeService_EndpointsSubset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationSpec_KubeService_EndpointsSubset) ProtoMessage() {}

func (x *DestinationSpec_KubeService_EndpointsSubset) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationSpec_KubeService_EndpointsSubset.ProtoReflect.Descriptor instead.
func (*DestinationSpec_KubeService_EndpointsSubset) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{0, 0, 6}
}

func (x *DestinationSpec_KubeService_EndpointsSubset) GetEndpoints() []*DestinationSpec_KubeService_EndpointsSubset_Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *DestinationSpec_KubeService_EndpointsSubset) GetPorts() []*DestinationSpec_KubeService_EndpointPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

// Describes the endpoints's ports. See [here](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/endpoints-v1/) for more information.
type DestinationSpec_KubeService_EndpointPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port on which the endpoints can be reached
	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the port
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Protocol on which this port serves traffic (HTTP, TCP, UDP, etc...)
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Available in Kubernetes 1.18+, describes the application protocol.
	AppProtocol string `protobuf:"bytes,4,opt,name=app_protocol,json=appProtocol,proto3" json:"app_protocol,omitempty"`
}

func (x *DestinationSpec_KubeService_EndpointPort) Reset() {
	*x = DestinationSpec_KubeService_EndpointPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationSpec_KubeService_EndpointPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationSpec_KubeService_EndpointPort) ProtoMessage() {}

func (x *DestinationSpec_KubeService_EndpointPort) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationSpec_KubeService_EndpointPort.ProtoReflect.Descriptor instead.
func (*DestinationSpec_KubeService_EndpointPort) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{0, 0, 7}
}

func (x *DestinationSpec_KubeService_EndpointPort) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DestinationSpec_KubeService_EndpointPort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DestinationSpec_KubeService_EndpointPort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *DestinationSpec_KubeService_EndpointPort) GetAppProtocol() string {
	if x != nil {
		return x.AppProtocol
	}
	return ""
}

// An endpoint exposed by this service.
type DestinationSpec_KubeService_EndpointsSubset_Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Labels which belong to this IP. These are taken from the backing workload instance.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The zone and sub-zone (if controlled by Istio) of the endpoint.
	SubLocality *DestinationSpec_KubeService_EndpointsSubset_Endpoint_SubLocality `protobuf:"bytes,3,opt,name=sub_locality,json=subLocality,proto3" json:"sub_locality,omitempty"`
}

func (x *DestinationSpec_KubeService_EndpointsSubset_Endpoint) Reset() {
	*x = DestinationSpec_KubeService_EndpointsSubset_Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationSpec_KubeService_EndpointsSubset_Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationSpec_KubeService_EndpointsSubset_Endpoint) ProtoMessage() {}

func (x *DestinationSpec_KubeService_EndpointsSubset_Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationSpec_KubeService_EndpointsSubset_Endpoint.ProtoReflect.Descriptor instead.
func (*DestinationSpec_KubeService_EndpointsSubset_Endpoint) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{0, 0, 6, 0}
}

func (x *DestinationSpec_KubeService_EndpointsSubset_Endpoint) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *DestinationSpec_KubeService_EndpointsSubset_Endpoint) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DestinationSpec_KubeService_EndpointsSubset_Endpoint) GetSubLocality() *DestinationSpec_KubeService_EndpointsSubset_Endpoint_SubLocality {
	if x != nil {
		return x.SubLocality
	}
	return nil
}

// A subdivision of a region representing a set of physically colocated compute resources.
type DestinationSpec_KubeService_EndpointsSubset_Endpoint_SubLocality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A subdivision of a geographical region, see [here](https://kubernetes.io/docs/reference/labels-annotations-taints/#topologykubernetesiozone) for more information.
	Zone string `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty"`
	// A subdivision of zone. Only applies to Istio-controlled Destinations, see [here](https://istio.io/latest/docs/tasks/traffic-management/locality-load-balancing/) for more information.
	SubZone string `protobuf:"bytes,2,opt,name=sub_zone,json=subZone,proto3" json:"sub_zone,omitempty"`
}

func (x *DestinationSpec_KubeService_EndpointsSubset_Endpoint_SubLocality) Reset() {
	*x = DestinationSpec_KubeService_EndpointsSubset_Endpoint_SubLocality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationSpec_KubeService_EndpointsSubset_Endpoint_SubLocality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationSpec_KubeService_EndpointsSubset_Endpoint_SubLocality) ProtoMessage() {}

func (x *DestinationSpec_KubeService_EndpointsSubset_Endpoint_SubLocality) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationSpec_KubeService_EndpointsSubset_Endpoint_SubLocality.ProtoReflect.Descriptor instead.
func (*DestinationSpec_KubeService_EndpointsSubset_Endpoint_SubLocality) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{0, 0, 6, 0, 1}
}

func (x *DestinationSpec_KubeService_EndpointsSubset_Endpoint_SubLocality) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *DestinationSpec_KubeService_EndpointsSubset_Endpoint_SubLocality) GetSubZone() string {
	if x != nil {
		return x.SubZone
	}
	return ""
}

// ExternalEndpoint represents the address/port(s) of the external service
// which will receive requests sent to this Destination.
type DestinationSpec_ExternalService_ExternalEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the external service. Can be a domain or an IP.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The port(s) of the external endpoint. Eg: `https: 443`
	Ports map[string]uint32 `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DestinationSpec_ExternalService_ExternalEndpoint) Reset() {
	*x = DestinationSpec_ExternalService_ExternalEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationSpec_ExternalService_ExternalEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationSpec_ExternalService_ExternalEndpoint) ProtoMessage() {}

func (x *DestinationSpec_ExternalService_ExternalEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationSpec_ExternalService_ExternalEndpoint.ProtoReflect.Descriptor instead.
func (*DestinationSpec_ExternalService_ExternalEndpoint) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *DestinationSpec_ExternalService_ExternalEndpoint) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DestinationSpec_ExternalService_ExternalEndpoint) GetPorts() map[string]uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

// ServicePort describes a port accessible on this Destination
type DestinationSpec_ExternalService_ServicePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The port number. Must be a valid, non-negative integer port number.
	Number uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// A label for the port, eg "http"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The protocol used in communications with this Destination
	// MUST BE one of HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP|TLS.
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *DestinationSpec_ExternalService_ServicePort) Reset() {
	*x = DestinationSpec_ExternalService_ServicePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationSpec_ExternalService_ServicePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationSpec_ExternalService_ServicePort) ProtoMessage() {}

func (x *DestinationSpec_ExternalService_ServicePort) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationSpec_ExternalService_ServicePort.ProtoReflect.Descriptor instead.
func (*DestinationSpec_ExternalService_ServicePort) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *DestinationSpec_ExternalService_ServicePort) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *DestinationSpec_ExternalService_ServicePort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DestinationSpec_ExternalService_ServicePort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

// Describes an [AccessPolicy]({{< versioned_link_path fromRoot="/reference/api/github.com.solo-io.gloo-mesh.api.networking.v1.access_policy" >}})
// that applies to this Destination.
// If an existing AccessPolicy becomes invalid, the last valid applied policy will be used.
type DestinationStatus_AppliedAccessPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the AccessPolicy object.
	Ref *v1.ObjectRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// The observed generation of the accepted AccessPolicy.
	ObservedGeneration int64 `protobuf:"varint,2,opt,name=observedGeneration,proto3" json:"observedGeneration,omitempty"`
	// The spec of the last known valid AccessPolicy.
	Spec *v11.AccessPolicySpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *DestinationStatus_AppliedAccessPolicy) Reset() {
	*x = DestinationStatus_AppliedAccessPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationStatus_AppliedAccessPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationStatus_AppliedAccessPolicy) ProtoMessage() {}

func (x *DestinationStatus_AppliedAccessPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationStatus_AppliedAccessPolicy.ProtoReflect.Descriptor instead.
func (*DestinationStatus_AppliedAccessPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{1, 0}
}

func (x *DestinationStatus_AppliedAccessPolicy) GetRef() *v1.ObjectRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *DestinationStatus_AppliedAccessPolicy) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *DestinationStatus_AppliedAccessPolicy) GetSpec() *v11.AccessPolicySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Describes the federation configuration applied to this Destination through a [VirtualMesh]({{< versioned_link_path fromRoot="/reference/api/github.com.solo-io.gloo-mesh.api.networking.v1.virtual_mesh" >}}).
// Federation allows access to the Destination from other meshes/clusters.
type DestinationStatus_AppliedFederation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//For any Workload that this Destination has been federated to (i.e., any Workload controlled by a Mesh whose reference appears in `federated_to_meshes`),
	//that Workload will be able to reach this Destination using this DNS name.
	//For Kubernetes Destinations this includes Workloads on clusters other than the one hosting this Destination.
	FederatedHostname string `protobuf:"bytes,1,opt,name=federated_hostname,json=federatedHostname,proto3" json:"federated_hostname,omitempty"`
	// The list of Meshes which are able to resolve this Destination's `federated_hostname`.
	FederatedToMeshes []*v1.ObjectRef `protobuf:"bytes,2,rep,name=federated_to_meshes,json=federatedToMeshes,proto3" json:"federated_to_meshes,omitempty"`
	// Whether the Destination has been federated to the given meshes using a VirtualMesh where
	// [Federation.FlatNetwork]({{< versioned_link_path fromRoot="/reference/api/github.com.solo-io.gloo-mesh.api.networking.v1.virtual_mesh/#virtualmeshspecfederation" >}})
	// is true.
	FlatNetwork bool `protobuf:"varint,3,opt,name=flat_network,json=flatNetwork,proto3" json:"flat_network,omitempty"`
	// Reference to the VirtualMesh object.
	VirtualMeshRef *v1.ObjectRef `protobuf:"bytes,4,opt,name=virtual_mesh_ref,json=virtualMeshRef,proto3" json:"virtual_mesh_ref,omitempty"`
	// Specify a keepalive rule for all requests made within the VirtualMesh which cross clusters within that VirtualMesh,
	// as well as any requests to externalService type destinations.
	TcpKeepalive *v12.TCPKeepalive `protobuf:"bytes,5,opt,name=tcp_keepalive,json=tcpKeepalive,proto3" json:"tcp_keepalive,omitempty"`
}

func (x *DestinationStatus_AppliedFederation) Reset() {
	*x = DestinationStatus_AppliedFederation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationStatus_AppliedFederation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationStatus_AppliedFederation) ProtoMessage() {}

func (x *DestinationStatus_AppliedFederation) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationStatus_AppliedFederation.ProtoReflect.Descriptor instead.
func (*DestinationStatus_AppliedFederation) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP(), []int{1, 1}
}

func (x *DestinationStatus_AppliedFederation) GetFederatedHostname() string {
	if x != nil {
		return x.FederatedHostname
	}
	return ""
}

func (x *DestinationStatus_AppliedFederation) GetFederatedToMeshes() []*v1.ObjectRef {
	if x != nil {
		return x.FederatedToMeshes
	}
	return nil
}

func (x *DestinationStatus_AppliedFederation) GetFlatNetwork() bool {
	if x != nil {
		return x.FlatNetwork
	}
	return false
}

func (x *DestinationStatus_AppliedFederation) GetVirtualMeshRef() *v1.ObjectRef {
	if x != nil {
		return x.VirtualMeshRef
	}
	return nil
}

func (x *DestinationStatus_AppliedFederation) GetTcpKeepalive() *v12.TCPKeepalive {
	if x != nil {
		return x.TcpKeepalive
	}
	return nil
}

var File_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d,
	0x69, 0x6f, 0x2f, 0x73, 0x6b, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d,
	0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x65, 0x65, 0x70, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x43, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67,
	0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f,
	0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x75,
	0x65, 0x2f, 0x63, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa3, 0x19, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x5d, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x69, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x6d, 0x65, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x04, 0x6d, 0x65, 0x73, 0x68, 0x1a,
	0xb2, 0x12, 0x0a, 0x0b, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x35, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x8e, 0x01, 0x0a, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x16, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x73, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x73,
	0x0a, 0x10, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73,
	0x65, 0x74, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x77, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x44, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x49, 0x0a, 0x1b, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7b, 0x0a, 0x0c, 0x53,
	0x75, 0x62, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x55, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x08, 0x64,
	0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70, 0x42, 0x17, 0x0a, 0x15, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0x80, 0x02, 0x0a, 0x0f, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2a,
	0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x20, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0xfe, 0x04, 0x0a, 0x0f, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x12, 0x6f, 0x0a, 0x09,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x51, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x5b, 0x0a,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x9c, 0x03, 0x0a, 0x08, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x75, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74,
	0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x80, 0x01,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0b, 0x53,
	0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x5a, 0x6f, 0x6e, 0x65, 0x1a, 0x75, 0x0a, 0x0c, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x22, 0x52, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x50, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x03, 0x1a, 0xd6, 0x04, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x5e, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x6b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0xd6, 0x01,
	0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x6e, 0x0a, 0x05,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x38, 0x0a, 0x0a,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x08, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x18,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x42, 0x05, 0xea, 0x42, 0x02, 0x10, 0x01, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x7a, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x71, 0x64, 0x6e, 0x12, 0x6f, 0x0a, 0x12,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x75,
	0x62, 0x73, 0x65, 0x74, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x75, 0x62, 0x73, 0x65, 0x74, 0x73, 0x1a, 0xb9, 0x01, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e,
	0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x2e,
	0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x1a, 0xc8, 0x02, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x66, 0x52, 0x11, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x4d,
	0x65, 0x73, 0x68, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6c, 0x61,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x46, 0x0a, 0x10, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x68, 0x52, 0x65, 0x66,
	0x12, 0x4b, 0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x54, 0x43, 0x50, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x52,
	0x0c, 0x74, 0x63, 0x70, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x22, 0xfb, 0x01,
	0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x4a, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x10, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a,
	0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x68, 0x69, 0x66, 0x74, 0x42, 0x4d, 0x5a, 0x43, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69,
	0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f,
	0x76, 0x31, 0xc0, 0xf5, 0x04, 0x01, 0xb8, 0xf5, 0x04, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescData = file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_goTypes = []interface{}{
	(DestinationSpec_KubeService_ServiceType)(0), // 0: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.ServiceType
	(*DestinationSpec)(nil),                      // 1: discovery.mesh.gloo.solo.io.DestinationSpec
	(*DestinationStatus)(nil),                    // 2: discovery.mesh.gloo.solo.io.DestinationStatus
	(*RequiredSubsets)(nil),                      // 3: discovery.mesh.gloo.solo.io.RequiredSubsets
	(*DestinationSpec_KubeService)(nil),          // 4: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService
	(*DestinationSpec_ExternalService)(nil),      // 5: discovery.mesh.gloo.solo.io.DestinationSpec.ExternalService
	nil,                                          // 6: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.WorkloadSelectorLabelsEntry
	nil,                                          // 7: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.LabelsEntry
	nil,                                          // 8: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.SubsetsEntry
	(*DestinationSpec_KubeService_ExternalAddress)(nil),          // 9: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.ExternalAddress
	(*DestinationSpec_KubeService_KubeServicePort)(nil),          // 10: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.KubeServicePort
	(*DestinationSpec_KubeService_Subset)(nil),                   // 11: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.Subset
	(*DestinationSpec_KubeService_EndpointsSubset)(nil),          // 12: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.EndpointsSubset
	(*DestinationSpec_KubeService_EndpointPort)(nil),             // 13: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.EndpointPort
	(*DestinationSpec_KubeService_EndpointsSubset_Endpoint)(nil), // 14: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.EndpointsSubset.Endpoint
	nil, // 15: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.EndpointsSubset.Endpoint.LabelsEntry
	(*DestinationSpec_KubeService_EndpointsSubset_Endpoint_SubLocality)(nil), // 16: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.EndpointsSubset.Endpoint.SubLocality
	(*DestinationSpec_ExternalService_ExternalEndpoint)(nil),                 // 17: discovery.mesh.gloo.solo.io.DestinationSpec.ExternalService.ExternalEndpoint
	(*DestinationSpec_ExternalService_ServicePort)(nil),                      // 18: discovery.mesh.gloo.solo.io.DestinationSpec.ExternalService.ServicePort
	nil, // 19: discovery.mesh.gloo.solo.io.DestinationSpec.ExternalService.ExternalEndpoint.PortsEntry
	(*DestinationStatus_AppliedAccessPolicy)(nil),         // 20: discovery.mesh.gloo.solo.io.DestinationStatus.AppliedAccessPolicy
	(*DestinationStatus_AppliedFederation)(nil),           // 21: discovery.mesh.gloo.solo.io.DestinationStatus.AppliedFederation
	(*v1.ObjectRef)(nil),                                  // 22: core.skv2.solo.io.ObjectRef
	(*v11.AppliedTrafficPolicy)(nil),                      // 23: networking.mesh.gloo.solo.io.AppliedTrafficPolicy
	(*v11.TrafficPolicySpec_Policy_MultiDestination)(nil), // 24: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.MultiDestination
	(*v1.ClusterObjectRef)(nil),                           // 25: core.skv2.solo.io.ClusterObjectRef
	(*v11.AccessPolicySpec)(nil),                          // 26: networking.mesh.gloo.solo.io.AccessPolicySpec
	(*v12.TCPKeepalive)(nil),                              // 27: common.mesh.gloo.solo.io.TCPKeepalive
}
var file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_depIdxs = []int32{
	4,  // 0: discovery.mesh.gloo.solo.io.DestinationSpec.kube_service:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.KubeService
	5,  // 1: discovery.mesh.gloo.solo.io.DestinationSpec.external_service:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.ExternalService
	22, // 2: discovery.mesh.gloo.solo.io.DestinationSpec.mesh:type_name -> core.skv2.solo.io.ObjectRef
	23, // 3: discovery.mesh.gloo.solo.io.DestinationStatus.applied_traffic_policies:type_name -> networking.mesh.gloo.solo.io.AppliedTrafficPolicy
	20, // 4: discovery.mesh.gloo.solo.io.DestinationStatus.applied_access_policies:type_name -> discovery.mesh.gloo.solo.io.DestinationStatus.AppliedAccessPolicy
	21, // 5: discovery.mesh.gloo.solo.io.DestinationStatus.applied_federation:type_name -> discovery.mesh.gloo.solo.io.DestinationStatus.AppliedFederation
	3,  // 6: discovery.mesh.gloo.solo.io.DestinationStatus.required_subsets:type_name -> discovery.mesh.gloo.solo.io.RequiredSubsets
	22, // 7: discovery.mesh.gloo.solo.io.RequiredSubsets.traffic_policy_ref:type_name -> core.skv2.solo.io.ObjectRef
	24, // 8: discovery.mesh.gloo.solo.io.RequiredSubsets.traffic_shift:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.MultiDestination
	25, // 9: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.ref:type_name -> core.skv2.solo.io.ClusterObjectRef
	6,  // 10: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.workload_selector_labels:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.WorkloadSelectorLabelsEntry
	7,  // 11: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.labels:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.LabelsEntry
	10, // 12: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.ports:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.KubeServicePort
	8,  // 13: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.subsets:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.SubsetsEntry
	12, // 14: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.endpoint_subsets:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.EndpointsSubset
	9,  // 15: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.external_addresses:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.ExternalAddress
	0,  // 16: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.service_type:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.ServiceType
	18, // 17: discovery.mesh.gloo.solo.io.DestinationSpec.ExternalService.ports:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.ExternalService.ServicePort
	17, // 18: discovery.mesh.gloo.solo.io.DestinationSpec.ExternalService.endpoints:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.ExternalService.ExternalEndpoint
	11, // 19: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.SubsetsEntry.value:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.Subset
	14, // 20: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.EndpointsSubset.endpoints:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.EndpointsSubset.Endpoint
	13, // 21: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.EndpointsSubset.ports:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.EndpointPort
	15, // 22: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.EndpointsSubset.Endpoint.labels:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.EndpointsSubset.Endpoint.LabelsEntry
	16, // 23: discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.EndpointsSubset.Endpoint.sub_locality:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.KubeService.EndpointsSubset.Endpoint.SubLocality
	19, // 24: discovery.mesh.gloo.solo.io.DestinationSpec.ExternalService.ExternalEndpoint.ports:type_name -> discovery.mesh.gloo.solo.io.DestinationSpec.ExternalService.ExternalEndpoint.PortsEntry
	22, // 25: discovery.mesh.gloo.solo.io.DestinationStatus.AppliedAccessPolicy.ref:type_name -> core.skv2.solo.io.ObjectRef
	26, // 26: discovery.mesh.gloo.solo.io.DestinationStatus.AppliedAccessPolicy.spec:type_name -> networking.mesh.gloo.solo.io.AccessPolicySpec
	22, // 27: discovery.mesh.gloo.solo.io.DestinationStatus.AppliedFederation.federated_to_meshes:type_name -> core.skv2.solo.io.ObjectRef
	22, // 28: discovery.mesh.gloo.solo.io.DestinationStatus.AppliedFederation.virtual_mesh_ref:type_name -> core.skv2.solo.io.ObjectRef
	27, // 29: discovery.mesh.gloo.solo.io.DestinationStatus.AppliedFederation.tcp_keepalive:type_name -> common.mesh.gloo.solo.io.TCPKeepalive
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_init() }
func file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_init() {
	if File_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequiredSubsets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationSpec_KubeService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationSpec_ExternalService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationSpec_KubeService_ExternalAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationSpec_KubeService_KubeServicePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationSpec_KubeService_Subset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationSpec_KubeService_EndpointsSubset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationSpec_KubeService_EndpointPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationSpec_KubeService_EndpointsSubset_Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationSpec_KubeService_EndpointsSubset_Endpoint_SubLocality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationSpec_ExternalService_ExternalEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationSpec_ExternalService_ServicePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationStatus_AppliedAccessPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationStatus_AppliedFederation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DestinationSpec_KubeService_)(nil),
		(*DestinationSpec_ExternalService_)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*DestinationSpec_KubeService_ExternalAddress_DnsName)(nil),
		(*DestinationSpec_KubeService_ExternalAddress_Ip)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*DestinationSpec_KubeService_KubeServicePort_TargetPortName)(nil),
		(*DestinationSpec_KubeService_KubeServicePort_TargetPortNumber)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto = out.File
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_depIdxs = nil
}
