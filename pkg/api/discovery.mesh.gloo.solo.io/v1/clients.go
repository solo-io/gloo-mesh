// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the discovery.mesh.gloo.solo.io/v1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the discovery.mesh.gloo.solo.io/v1 APIs
type Clientset interface {
	// clienset for the discovery.mesh.gloo.solo.io/v1/v1 APIs
	Destinations() DestinationClient
	// clienset for the discovery.mesh.gloo.solo.io/v1/v1 APIs
	Workloads() WorkloadClient
	// clienset for the discovery.mesh.gloo.solo.io/v1/v1 APIs
	Meshes() MeshClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the discovery.mesh.gloo.solo.io/v1/v1 APIs
func (c *clientSet) Destinations() DestinationClient {
	return NewDestinationClient(c.client)
}

// clienset for the discovery.mesh.gloo.solo.io/v1/v1 APIs
func (c *clientSet) Workloads() WorkloadClient {
	return NewWorkloadClient(c.client)
}

// clienset for the discovery.mesh.gloo.solo.io/v1/v1 APIs
func (c *clientSet) Meshes() MeshClient {
	return NewMeshClient(c.client)
}

// Reader knows how to read and list Destinations.
type DestinationReader interface {
	// Get retrieves a Destination for the given object key
	GetDestination(ctx context.Context, key client.ObjectKey) (*Destination, error)

	// List retrieves list of Destinations for a given namespace and list options.
	ListDestination(ctx context.Context, opts ...client.ListOption) (*DestinationList, error)
}

// DestinationTransitionFunction instructs the DestinationWriter how to transition between an existing
// Destination object and a desired on an Upsert
type DestinationTransitionFunction func(existing, desired *Destination) error

// Writer knows how to create, delete, and update Destinations.
type DestinationWriter interface {
	// Create saves the Destination object.
	CreateDestination(ctx context.Context, obj *Destination, opts ...client.CreateOption) error

	// Delete deletes the Destination object.
	DeleteDestination(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given Destination object.
	UpdateDestination(ctx context.Context, obj *Destination, opts ...client.UpdateOption) error

	// Patch patches the given Destination object.
	PatchDestination(ctx context.Context, obj *Destination, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all Destination objects matching the given options.
	DeleteAllOfDestination(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the Destination object.
	UpsertDestination(ctx context.Context, obj *Destination, transitionFuncs ...DestinationTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a Destination object.
type DestinationStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given Destination object.
	UpdateDestinationStatus(ctx context.Context, obj *Destination, opts ...client.UpdateOption) error

	// Patch patches the given Destination object's subresource.
	PatchDestinationStatus(ctx context.Context, obj *Destination, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on Destinations.
type DestinationClient interface {
	DestinationReader
	DestinationWriter
	DestinationStatusWriter
}

type destinationClient struct {
	client client.Client
}

func NewDestinationClient(client client.Client) *destinationClient {
	return &destinationClient{client: client}
}

func (c *destinationClient) GetDestination(ctx context.Context, key client.ObjectKey) (*Destination, error) {
	obj := &Destination{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *destinationClient) ListDestination(ctx context.Context, opts ...client.ListOption) (*DestinationList, error) {
	list := &DestinationList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *destinationClient) CreateDestination(ctx context.Context, obj *Destination, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *destinationClient) DeleteDestination(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &Destination{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *destinationClient) UpdateDestination(ctx context.Context, obj *Destination, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *destinationClient) PatchDestination(ctx context.Context, obj *Destination, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *destinationClient) DeleteAllOfDestination(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &Destination{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *destinationClient) UpsertDestination(ctx context.Context, obj *Destination, transitionFuncs ...DestinationTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*Destination), desired.(*Destination)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *destinationClient) UpdateDestinationStatus(ctx context.Context, obj *Destination, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *destinationClient) PatchDestinationStatus(ctx context.Context, obj *Destination, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides DestinationClients for multiple clusters.
type MulticlusterDestinationClient interface {
	// Cluster returns a DestinationClient for the given cluster
	Cluster(cluster string) (DestinationClient, error)
}

type multiclusterDestinationClient struct {
	client multicluster.Client
}

func NewMulticlusterDestinationClient(client multicluster.Client) MulticlusterDestinationClient {
	return &multiclusterDestinationClient{client: client}
}

func (m *multiclusterDestinationClient) Cluster(cluster string) (DestinationClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewDestinationClient(client), nil
}

// Reader knows how to read and list Workloads.
type WorkloadReader interface {
	// Get retrieves a Workload for the given object key
	GetWorkload(ctx context.Context, key client.ObjectKey) (*Workload, error)

	// List retrieves list of Workloads for a given namespace and list options.
	ListWorkload(ctx context.Context, opts ...client.ListOption) (*WorkloadList, error)
}

// WorkloadTransitionFunction instructs the WorkloadWriter how to transition between an existing
// Workload object and a desired on an Upsert
type WorkloadTransitionFunction func(existing, desired *Workload) error

// Writer knows how to create, delete, and update Workloads.
type WorkloadWriter interface {
	// Create saves the Workload object.
	CreateWorkload(ctx context.Context, obj *Workload, opts ...client.CreateOption) error

	// Delete deletes the Workload object.
	DeleteWorkload(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given Workload object.
	UpdateWorkload(ctx context.Context, obj *Workload, opts ...client.UpdateOption) error

	// Patch patches the given Workload object.
	PatchWorkload(ctx context.Context, obj *Workload, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all Workload objects matching the given options.
	DeleteAllOfWorkload(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the Workload object.
	UpsertWorkload(ctx context.Context, obj *Workload, transitionFuncs ...WorkloadTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a Workload object.
type WorkloadStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given Workload object.
	UpdateWorkloadStatus(ctx context.Context, obj *Workload, opts ...client.UpdateOption) error

	// Patch patches the given Workload object's subresource.
	PatchWorkloadStatus(ctx context.Context, obj *Workload, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on Workloads.
type WorkloadClient interface {
	WorkloadReader
	WorkloadWriter
	WorkloadStatusWriter
}

type workloadClient struct {
	client client.Client
}

func NewWorkloadClient(client client.Client) *workloadClient {
	return &workloadClient{client: client}
}

func (c *workloadClient) GetWorkload(ctx context.Context, key client.ObjectKey) (*Workload, error) {
	obj := &Workload{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *workloadClient) ListWorkload(ctx context.Context, opts ...client.ListOption) (*WorkloadList, error) {
	list := &WorkloadList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *workloadClient) CreateWorkload(ctx context.Context, obj *Workload, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *workloadClient) DeleteWorkload(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &Workload{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *workloadClient) UpdateWorkload(ctx context.Context, obj *Workload, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *workloadClient) PatchWorkload(ctx context.Context, obj *Workload, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *workloadClient) DeleteAllOfWorkload(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &Workload{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *workloadClient) UpsertWorkload(ctx context.Context, obj *Workload, transitionFuncs ...WorkloadTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*Workload), desired.(*Workload)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *workloadClient) UpdateWorkloadStatus(ctx context.Context, obj *Workload, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *workloadClient) PatchWorkloadStatus(ctx context.Context, obj *Workload, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides WorkloadClients for multiple clusters.
type MulticlusterWorkloadClient interface {
	// Cluster returns a WorkloadClient for the given cluster
	Cluster(cluster string) (WorkloadClient, error)
}

type multiclusterWorkloadClient struct {
	client multicluster.Client
}

func NewMulticlusterWorkloadClient(client multicluster.Client) MulticlusterWorkloadClient {
	return &multiclusterWorkloadClient{client: client}
}

func (m *multiclusterWorkloadClient) Cluster(cluster string) (WorkloadClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewWorkloadClient(client), nil
}

// Reader knows how to read and list Meshs.
type MeshReader interface {
	// Get retrieves a Mesh for the given object key
	GetMesh(ctx context.Context, key client.ObjectKey) (*Mesh, error)

	// List retrieves list of Meshs for a given namespace and list options.
	ListMesh(ctx context.Context, opts ...client.ListOption) (*MeshList, error)
}

// MeshTransitionFunction instructs the MeshWriter how to transition between an existing
// Mesh object and a desired on an Upsert
type MeshTransitionFunction func(existing, desired *Mesh) error

// Writer knows how to create, delete, and update Meshs.
type MeshWriter interface {
	// Create saves the Mesh object.
	CreateMesh(ctx context.Context, obj *Mesh, opts ...client.CreateOption) error

	// Delete deletes the Mesh object.
	DeleteMesh(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given Mesh object.
	UpdateMesh(ctx context.Context, obj *Mesh, opts ...client.UpdateOption) error

	// Patch patches the given Mesh object.
	PatchMesh(ctx context.Context, obj *Mesh, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all Mesh objects matching the given options.
	DeleteAllOfMesh(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the Mesh object.
	UpsertMesh(ctx context.Context, obj *Mesh, transitionFuncs ...MeshTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a Mesh object.
type MeshStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given Mesh object.
	UpdateMeshStatus(ctx context.Context, obj *Mesh, opts ...client.UpdateOption) error

	// Patch patches the given Mesh object's subresource.
	PatchMeshStatus(ctx context.Context, obj *Mesh, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on Meshs.
type MeshClient interface {
	MeshReader
	MeshWriter
	MeshStatusWriter
}

type meshClient struct {
	client client.Client
}

func NewMeshClient(client client.Client) *meshClient {
	return &meshClient{client: client}
}

func (c *meshClient) GetMesh(ctx context.Context, key client.ObjectKey) (*Mesh, error) {
	obj := &Mesh{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *meshClient) ListMesh(ctx context.Context, opts ...client.ListOption) (*MeshList, error) {
	list := &MeshList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *meshClient) CreateMesh(ctx context.Context, obj *Mesh, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *meshClient) DeleteMesh(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &Mesh{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *meshClient) UpdateMesh(ctx context.Context, obj *Mesh, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *meshClient) PatchMesh(ctx context.Context, obj *Mesh, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *meshClient) DeleteAllOfMesh(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &Mesh{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *meshClient) UpsertMesh(ctx context.Context, obj *Mesh, transitionFuncs ...MeshTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*Mesh), desired.(*Mesh)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *meshClient) UpdateMeshStatus(ctx context.Context, obj *Mesh, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *meshClient) PatchMeshStatus(ctx context.Context, obj *Mesh, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides MeshClients for multiple clusters.
type MulticlusterMeshClient interface {
	// Cluster returns a MeshClient for the given cluster
	Cluster(cluster string) (MeshClient, error)
}

type multiclusterMeshClient struct {
	client multicluster.Client
}

func NewMulticlusterMeshClient(client multicluster.Client) MulticlusterMeshClient {
	return &multiclusterMeshClient{client: client}
}

func (m *multiclusterMeshClient) Cluster(cluster string) (MeshClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewMeshClient(client), nil
}
