// Code generated by MockGen. DO NOT EDIT.
// Source: ./remote_snapshot.go

// Package mock_input is a generated GoMock package.
package mock_input

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta2sets "github.com/solo-io/external-apis/pkg/api/appmesh/appmesh.k8s.aws/v1beta2/sets"
	v1sets "github.com/solo-io/external-apis/pkg/api/k8s/apps/v1/sets"
	v1sets0 "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/sets"
	input "github.com/solo-io/gloo-mesh/pkg/api/discovery.mesh.gloo.solo.io/input"
)

// MockRemoteSnapshot is a mock of RemoteSnapshot interface
type MockRemoteSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteSnapshotMockRecorder
}

// MockRemoteSnapshotMockRecorder is the mock recorder for MockRemoteSnapshot
type MockRemoteSnapshotMockRecorder struct {
	mock *MockRemoteSnapshot
}

// NewMockRemoteSnapshot creates a new mock instance
func NewMockRemoteSnapshot(ctrl *gomock.Controller) *MockRemoteSnapshot {
	mock := &MockRemoteSnapshot{ctrl: ctrl}
	mock.recorder = &MockRemoteSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteSnapshot) EXPECT() *MockRemoteSnapshotMockRecorder {
	return m.recorder
}

// Meshes mocks base method
func (m *MockRemoteSnapshot) Meshes() v1beta2sets.MeshSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meshes")
	ret0, _ := ret[0].(v1beta2sets.MeshSet)
	return ret0
}

// Meshes indicates an expected call of Meshes
func (mr *MockRemoteSnapshotMockRecorder) Meshes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meshes", reflect.TypeOf((*MockRemoteSnapshot)(nil).Meshes))
}

// ConfigMaps mocks base method
func (m *MockRemoteSnapshot) ConfigMaps() v1sets0.ConfigMapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigMaps")
	ret0, _ := ret[0].(v1sets0.ConfigMapSet)
	return ret0
}

// ConfigMaps indicates an expected call of ConfigMaps
func (mr *MockRemoteSnapshotMockRecorder) ConfigMaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigMaps", reflect.TypeOf((*MockRemoteSnapshot)(nil).ConfigMaps))
}

// Services mocks base method
func (m *MockRemoteSnapshot) Services() v1sets0.ServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Services")
	ret0, _ := ret[0].(v1sets0.ServiceSet)
	return ret0
}

// Services indicates an expected call of Services
func (mr *MockRemoteSnapshotMockRecorder) Services() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockRemoteSnapshot)(nil).Services))
}

// Pods mocks base method
func (m *MockRemoteSnapshot) Pods() v1sets0.PodSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pods")
	ret0, _ := ret[0].(v1sets0.PodSet)
	return ret0
}

// Pods indicates an expected call of Pods
func (mr *MockRemoteSnapshotMockRecorder) Pods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pods", reflect.TypeOf((*MockRemoteSnapshot)(nil).Pods))
}

// Nodes mocks base method
func (m *MockRemoteSnapshot) Nodes() v1sets0.NodeSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes")
	ret0, _ := ret[0].(v1sets0.NodeSet)
	return ret0
}

// Nodes indicates an expected call of Nodes
func (mr *MockRemoteSnapshotMockRecorder) Nodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockRemoteSnapshot)(nil).Nodes))
}

// Deployments mocks base method
func (m *MockRemoteSnapshot) Deployments() v1sets.DeploymentSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deployments")
	ret0, _ := ret[0].(v1sets.DeploymentSet)
	return ret0
}

// Deployments indicates an expected call of Deployments
func (mr *MockRemoteSnapshotMockRecorder) Deployments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deployments", reflect.TypeOf((*MockRemoteSnapshot)(nil).Deployments))
}

// ReplicaSets mocks base method
func (m *MockRemoteSnapshot) ReplicaSets() v1sets.ReplicaSetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicaSets")
	ret0, _ := ret[0].(v1sets.ReplicaSetSet)
	return ret0
}

// ReplicaSets indicates an expected call of ReplicaSets
func (mr *MockRemoteSnapshotMockRecorder) ReplicaSets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicaSets", reflect.TypeOf((*MockRemoteSnapshot)(nil).ReplicaSets))
}

// DaemonSets mocks base method
func (m *MockRemoteSnapshot) DaemonSets() v1sets.DaemonSetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DaemonSets")
	ret0, _ := ret[0].(v1sets.DaemonSetSet)
	return ret0
}

// DaemonSets indicates an expected call of DaemonSets
func (mr *MockRemoteSnapshotMockRecorder) DaemonSets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DaemonSets", reflect.TypeOf((*MockRemoteSnapshot)(nil).DaemonSets))
}

// StatefulSets mocks base method
func (m *MockRemoteSnapshot) StatefulSets() v1sets.StatefulSetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatefulSets")
	ret0, _ := ret[0].(v1sets.StatefulSetSet)
	return ret0
}

// StatefulSets indicates an expected call of StatefulSets
func (mr *MockRemoteSnapshotMockRecorder) StatefulSets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatefulSets", reflect.TypeOf((*MockRemoteSnapshot)(nil).StatefulSets))
}

// MarshalJSON mocks base method
func (m *MockRemoteSnapshot) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockRemoteSnapshotMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockRemoteSnapshot)(nil).MarshalJSON))
}

// MockRemoteBuilder is a mock of RemoteBuilder interface
type MockRemoteBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteBuilderMockRecorder
}

// MockRemoteBuilderMockRecorder is the mock recorder for MockRemoteBuilder
type MockRemoteBuilderMockRecorder struct {
	mock *MockRemoteBuilder
}

// NewMockRemoteBuilder creates a new mock instance
func NewMockRemoteBuilder(ctrl *gomock.Controller) *MockRemoteBuilder {
	mock := &MockRemoteBuilder{ctrl: ctrl}
	mock.recorder = &MockRemoteBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteBuilder) EXPECT() *MockRemoteBuilderMockRecorder {
	return m.recorder
}

// BuildSnapshot mocks base method
func (m *MockRemoteBuilder) BuildSnapshot(ctx context.Context, name string, opts input.RemoteBuildOptions) (input.RemoteSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSnapshot", ctx, name, opts)
	ret0, _ := ret[0].(input.RemoteSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSnapshot indicates an expected call of BuildSnapshot
func (mr *MockRemoteBuilderMockRecorder) BuildSnapshot(ctx, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSnapshot", reflect.TypeOf((*MockRemoteBuilder)(nil).BuildSnapshot), ctx, name, opts)
}
