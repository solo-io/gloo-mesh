/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/security.zephyr.solo.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualMeshCertificateSigningRequestLister helps list VirtualMeshCertificateSigningRequests.
type VirtualMeshCertificateSigningRequestLister interface {
	// List lists all VirtualMeshCertificateSigningRequests in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMeshCertificateSigningRequest, err error)
	// VirtualMeshCertificateSigningRequests returns an object that can list and get VirtualMeshCertificateSigningRequests.
	VirtualMeshCertificateSigningRequests(namespace string) VirtualMeshCertificateSigningRequestNamespaceLister
	VirtualMeshCertificateSigningRequestListerExpansion
}

// virtualMeshCertificateSigningRequestLister implements the VirtualMeshCertificateSigningRequestLister interface.
type virtualMeshCertificateSigningRequestLister struct {
	indexer cache.Indexer
}

// NewVirtualMeshCertificateSigningRequestLister returns a new VirtualMeshCertificateSigningRequestLister.
func NewVirtualMeshCertificateSigningRequestLister(indexer cache.Indexer) VirtualMeshCertificateSigningRequestLister {
	return &virtualMeshCertificateSigningRequestLister{indexer: indexer}
}

// List lists all VirtualMeshCertificateSigningRequests in the indexer.
func (s *virtualMeshCertificateSigningRequestLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMeshCertificateSigningRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMeshCertificateSigningRequest))
	})
	return ret, err
}

// VirtualMeshCertificateSigningRequests returns an object that can list and get VirtualMeshCertificateSigningRequests.
func (s *virtualMeshCertificateSigningRequestLister) VirtualMeshCertificateSigningRequests(namespace string) VirtualMeshCertificateSigningRequestNamespaceLister {
	return virtualMeshCertificateSigningRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMeshCertificateSigningRequestNamespaceLister helps list and get VirtualMeshCertificateSigningRequests.
type VirtualMeshCertificateSigningRequestNamespaceLister interface {
	// List lists all VirtualMeshCertificateSigningRequests in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMeshCertificateSigningRequest, err error)
	// Get retrieves the VirtualMeshCertificateSigningRequest from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VirtualMeshCertificateSigningRequest, error)
	VirtualMeshCertificateSigningRequestNamespaceListerExpansion
}

// virtualMeshCertificateSigningRequestNamespaceLister implements the VirtualMeshCertificateSigningRequestNamespaceLister
// interface.
type virtualMeshCertificateSigningRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMeshCertificateSigningRequests in the indexer for a given namespace.
func (s virtualMeshCertificateSigningRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMeshCertificateSigningRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMeshCertificateSigningRequest))
	})
	return ret, err
}

// Get retrieves the VirtualMeshCertificateSigningRequest from the indexer for a given namespace and name.
func (s virtualMeshCertificateSigningRequestNamespaceLister) Get(name string) (*v1alpha1.VirtualMeshCertificateSigningRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("virtualmeshcertificatesigningrequest"), name)
	}
	return obj.(*v1alpha1.VirtualMeshCertificateSigningRequest), nil
}
