// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the istio.enterprise.mesh.gloo.solo.io/v1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the istio.enterprise.mesh.gloo.solo.io/v1 APIs
type Clientset interface {
	// clienset for the istio.enterprise.mesh.gloo.solo.io/v1/v1 APIs
	IstioInstallations() IstioInstallationClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the istio.enterprise.mesh.gloo.solo.io/v1/v1 APIs
func (c *clientSet) IstioInstallations() IstioInstallationClient {
	return NewIstioInstallationClient(c.client)
}

// Reader knows how to read and list IstioInstallations.
type IstioInstallationReader interface {
	// Get retrieves a IstioInstallation for the given object key
	GetIstioInstallation(ctx context.Context, key client.ObjectKey) (*IstioInstallation, error)

	// List retrieves list of IstioInstallations for a given namespace and list options.
	ListIstioInstallation(ctx context.Context, opts ...client.ListOption) (*IstioInstallationList, error)
}

// IstioInstallationTransitionFunction instructs the IstioInstallationWriter how to transition between an existing
// IstioInstallation object and a desired on an Upsert
type IstioInstallationTransitionFunction func(existing, desired *IstioInstallation) error

// Writer knows how to create, delete, and update IstioInstallations.
type IstioInstallationWriter interface {
	// Create saves the IstioInstallation object.
	CreateIstioInstallation(ctx context.Context, obj *IstioInstallation, opts ...client.CreateOption) error

	// Delete deletes the IstioInstallation object.
	DeleteIstioInstallation(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given IstioInstallation object.
	UpdateIstioInstallation(ctx context.Context, obj *IstioInstallation, opts ...client.UpdateOption) error

	// Patch patches the given IstioInstallation object.
	PatchIstioInstallation(ctx context.Context, obj *IstioInstallation, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all IstioInstallation objects matching the given options.
	DeleteAllOfIstioInstallation(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the IstioInstallation object.
	UpsertIstioInstallation(ctx context.Context, obj *IstioInstallation, transitionFuncs ...IstioInstallationTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a IstioInstallation object.
type IstioInstallationStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given IstioInstallation object.
	UpdateIstioInstallationStatus(ctx context.Context, obj *IstioInstallation, opts ...client.UpdateOption) error

	// Patch patches the given IstioInstallation object's subresource.
	PatchIstioInstallationStatus(ctx context.Context, obj *IstioInstallation, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on IstioInstallations.
type IstioInstallationClient interface {
	IstioInstallationReader
	IstioInstallationWriter
	IstioInstallationStatusWriter
}

type istioInstallationClient struct {
	client client.Client
}

func NewIstioInstallationClient(client client.Client) *istioInstallationClient {
	return &istioInstallationClient{client: client}
}

func (c *istioInstallationClient) GetIstioInstallation(ctx context.Context, key client.ObjectKey) (*IstioInstallation, error) {
	obj := &IstioInstallation{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *istioInstallationClient) ListIstioInstallation(ctx context.Context, opts ...client.ListOption) (*IstioInstallationList, error) {
	list := &IstioInstallationList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *istioInstallationClient) CreateIstioInstallation(ctx context.Context, obj *IstioInstallation, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *istioInstallationClient) DeleteIstioInstallation(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &IstioInstallation{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *istioInstallationClient) UpdateIstioInstallation(ctx context.Context, obj *IstioInstallation, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *istioInstallationClient) PatchIstioInstallation(ctx context.Context, obj *IstioInstallation, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *istioInstallationClient) DeleteAllOfIstioInstallation(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &IstioInstallation{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *istioInstallationClient) UpsertIstioInstallation(ctx context.Context, obj *IstioInstallation, transitionFuncs ...IstioInstallationTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*IstioInstallation), desired.(*IstioInstallation)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *istioInstallationClient) UpdateIstioInstallationStatus(ctx context.Context, obj *IstioInstallation, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *istioInstallationClient) PatchIstioInstallationStatus(ctx context.Context, obj *IstioInstallation, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides IstioInstallationClients for multiple clusters.
type MulticlusterIstioInstallationClient interface {
	// Cluster returns a IstioInstallationClient for the given cluster
	Cluster(cluster string) (IstioInstallationClient, error)
}

type multiclusterIstioInstallationClient struct {
	client multicluster.Client
}

func NewMulticlusterIstioInstallationClient(client multicluster.Client) MulticlusterIstioInstallationClient {
	return &multiclusterIstioInstallationClient{client: client}
}

func (m *multiclusterIstioInstallationClient) Cluster(cluster string) (IstioInstallationClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewIstioInstallationClient(client), nil
}
