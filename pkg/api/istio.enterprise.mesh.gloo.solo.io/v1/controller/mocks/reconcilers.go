// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/gloo-mesh/pkg/api/istio.enterprise.mesh.gloo.solo.io/v1"
	controller "github.com/solo-io/gloo-mesh/pkg/api/istio.enterprise.mesh.gloo.solo.io/v1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockIstioInstallationReconciler is a mock of IstioInstallationReconciler interface.
type MockIstioInstallationReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockIstioInstallationReconcilerMockRecorder
}

// MockIstioInstallationReconcilerMockRecorder is the mock recorder for MockIstioInstallationReconciler.
type MockIstioInstallationReconcilerMockRecorder struct {
	mock *MockIstioInstallationReconciler
}

// NewMockIstioInstallationReconciler creates a new mock instance.
func NewMockIstioInstallationReconciler(ctrl *gomock.Controller) *MockIstioInstallationReconciler {
	mock := &MockIstioInstallationReconciler{ctrl: ctrl}
	mock.recorder = &MockIstioInstallationReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIstioInstallationReconciler) EXPECT() *MockIstioInstallationReconcilerMockRecorder {
	return m.recorder
}

// ReconcileIstioInstallation mocks base method.
func (m *MockIstioInstallationReconciler) ReconcileIstioInstallation(obj *v1.IstioInstallation) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileIstioInstallation", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileIstioInstallation indicates an expected call of ReconcileIstioInstallation.
func (mr *MockIstioInstallationReconcilerMockRecorder) ReconcileIstioInstallation(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileIstioInstallation", reflect.TypeOf((*MockIstioInstallationReconciler)(nil).ReconcileIstioInstallation), obj)
}

// MockIstioInstallationDeletionReconciler is a mock of IstioInstallationDeletionReconciler interface.
type MockIstioInstallationDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockIstioInstallationDeletionReconcilerMockRecorder
}

// MockIstioInstallationDeletionReconcilerMockRecorder is the mock recorder for MockIstioInstallationDeletionReconciler.
type MockIstioInstallationDeletionReconcilerMockRecorder struct {
	mock *MockIstioInstallationDeletionReconciler
}

// NewMockIstioInstallationDeletionReconciler creates a new mock instance.
func NewMockIstioInstallationDeletionReconciler(ctrl *gomock.Controller) *MockIstioInstallationDeletionReconciler {
	mock := &MockIstioInstallationDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockIstioInstallationDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIstioInstallationDeletionReconciler) EXPECT() *MockIstioInstallationDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileIstioInstallationDeletion mocks base method.
func (m *MockIstioInstallationDeletionReconciler) ReconcileIstioInstallationDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileIstioInstallationDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileIstioInstallationDeletion indicates an expected call of ReconcileIstioInstallationDeletion.
func (mr *MockIstioInstallationDeletionReconcilerMockRecorder) ReconcileIstioInstallationDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileIstioInstallationDeletion", reflect.TypeOf((*MockIstioInstallationDeletionReconciler)(nil).ReconcileIstioInstallationDeletion), req)
}

// MockIstioInstallationFinalizer is a mock of IstioInstallationFinalizer interface.
type MockIstioInstallationFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockIstioInstallationFinalizerMockRecorder
}

// MockIstioInstallationFinalizerMockRecorder is the mock recorder for MockIstioInstallationFinalizer.
type MockIstioInstallationFinalizerMockRecorder struct {
	mock *MockIstioInstallationFinalizer
}

// NewMockIstioInstallationFinalizer creates a new mock instance.
func NewMockIstioInstallationFinalizer(ctrl *gomock.Controller) *MockIstioInstallationFinalizer {
	mock := &MockIstioInstallationFinalizer{ctrl: ctrl}
	mock.recorder = &MockIstioInstallationFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIstioInstallationFinalizer) EXPECT() *MockIstioInstallationFinalizerMockRecorder {
	return m.recorder
}

// FinalizeIstioInstallation mocks base method.
func (m *MockIstioInstallationFinalizer) FinalizeIstioInstallation(obj *v1.IstioInstallation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeIstioInstallation", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeIstioInstallation indicates an expected call of FinalizeIstioInstallation.
func (mr *MockIstioInstallationFinalizerMockRecorder) FinalizeIstioInstallation(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeIstioInstallation", reflect.TypeOf((*MockIstioInstallationFinalizer)(nil).FinalizeIstioInstallation), obj)
}

// IstioInstallationFinalizerName mocks base method.
func (m *MockIstioInstallationFinalizer) IstioInstallationFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IstioInstallationFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// IstioInstallationFinalizerName indicates an expected call of IstioInstallationFinalizerName.
func (mr *MockIstioInstallationFinalizerMockRecorder) IstioInstallationFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IstioInstallationFinalizerName", reflect.TypeOf((*MockIstioInstallationFinalizer)(nil).IstioInstallationFinalizerName))
}

// ReconcileIstioInstallation mocks base method.
func (m *MockIstioInstallationFinalizer) ReconcileIstioInstallation(obj *v1.IstioInstallation) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileIstioInstallation", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileIstioInstallation indicates an expected call of ReconcileIstioInstallation.
func (mr *MockIstioInstallationFinalizerMockRecorder) ReconcileIstioInstallation(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileIstioInstallation", reflect.TypeOf((*MockIstioInstallationFinalizer)(nil).ReconcileIstioInstallation), obj)
}

// MockIstioInstallationReconcileLoop is a mock of IstioInstallationReconcileLoop interface.
type MockIstioInstallationReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockIstioInstallationReconcileLoopMockRecorder
}

// MockIstioInstallationReconcileLoopMockRecorder is the mock recorder for MockIstioInstallationReconcileLoop.
type MockIstioInstallationReconcileLoopMockRecorder struct {
	mock *MockIstioInstallationReconcileLoop
}

// NewMockIstioInstallationReconcileLoop creates a new mock instance.
func NewMockIstioInstallationReconcileLoop(ctrl *gomock.Controller) *MockIstioInstallationReconcileLoop {
	mock := &MockIstioInstallationReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockIstioInstallationReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIstioInstallationReconcileLoop) EXPECT() *MockIstioInstallationReconcileLoopMockRecorder {
	return m.recorder
}

// RunIstioInstallationReconciler mocks base method.
func (m *MockIstioInstallationReconcileLoop) RunIstioInstallationReconciler(ctx context.Context, rec controller.IstioInstallationReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunIstioInstallationReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunIstioInstallationReconciler indicates an expected call of RunIstioInstallationReconciler.
func (mr *MockIstioInstallationReconcileLoopMockRecorder) RunIstioInstallationReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunIstioInstallationReconciler", reflect.TypeOf((*MockIstioInstallationReconcileLoop)(nil).RunIstioInstallationReconciler), varargs...)
}
