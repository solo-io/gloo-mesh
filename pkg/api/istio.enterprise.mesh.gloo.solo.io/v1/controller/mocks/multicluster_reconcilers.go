// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/gloo-mesh/pkg/api/istio.enterprise.mesh.gloo.solo.io/v1"
	controller "github.com/solo-io/gloo-mesh/pkg/api/istio.enterprise.mesh.gloo.solo.io/v1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterIstioInstallationReconciler is a mock of MulticlusterIstioInstallationReconciler interface.
type MockMulticlusterIstioInstallationReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterIstioInstallationReconcilerMockRecorder
}

// MockMulticlusterIstioInstallationReconcilerMockRecorder is the mock recorder for MockMulticlusterIstioInstallationReconciler.
type MockMulticlusterIstioInstallationReconcilerMockRecorder struct {
	mock *MockMulticlusterIstioInstallationReconciler
}

// NewMockMulticlusterIstioInstallationReconciler creates a new mock instance.
func NewMockMulticlusterIstioInstallationReconciler(ctrl *gomock.Controller) *MockMulticlusterIstioInstallationReconciler {
	mock := &MockMulticlusterIstioInstallationReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterIstioInstallationReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterIstioInstallationReconciler) EXPECT() *MockMulticlusterIstioInstallationReconcilerMockRecorder {
	return m.recorder
}

// ReconcileIstioInstallation mocks base method.
func (m *MockMulticlusterIstioInstallationReconciler) ReconcileIstioInstallation(clusterName string, obj *v1.IstioInstallation) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileIstioInstallation", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileIstioInstallation indicates an expected call of ReconcileIstioInstallation.
func (mr *MockMulticlusterIstioInstallationReconcilerMockRecorder) ReconcileIstioInstallation(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileIstioInstallation", reflect.TypeOf((*MockMulticlusterIstioInstallationReconciler)(nil).ReconcileIstioInstallation), clusterName, obj)
}

// MockMulticlusterIstioInstallationDeletionReconciler is a mock of MulticlusterIstioInstallationDeletionReconciler interface.
type MockMulticlusterIstioInstallationDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterIstioInstallationDeletionReconcilerMockRecorder
}

// MockMulticlusterIstioInstallationDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterIstioInstallationDeletionReconciler.
type MockMulticlusterIstioInstallationDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterIstioInstallationDeletionReconciler
}

// NewMockMulticlusterIstioInstallationDeletionReconciler creates a new mock instance.
func NewMockMulticlusterIstioInstallationDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterIstioInstallationDeletionReconciler {
	mock := &MockMulticlusterIstioInstallationDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterIstioInstallationDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterIstioInstallationDeletionReconciler) EXPECT() *MockMulticlusterIstioInstallationDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileIstioInstallationDeletion mocks base method.
func (m *MockMulticlusterIstioInstallationDeletionReconciler) ReconcileIstioInstallationDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileIstioInstallationDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileIstioInstallationDeletion indicates an expected call of ReconcileIstioInstallationDeletion.
func (mr *MockMulticlusterIstioInstallationDeletionReconcilerMockRecorder) ReconcileIstioInstallationDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileIstioInstallationDeletion", reflect.TypeOf((*MockMulticlusterIstioInstallationDeletionReconciler)(nil).ReconcileIstioInstallationDeletion), clusterName, req)
}

// MockMulticlusterIstioInstallationReconcileLoop is a mock of MulticlusterIstioInstallationReconcileLoop interface.
type MockMulticlusterIstioInstallationReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterIstioInstallationReconcileLoopMockRecorder
}

// MockMulticlusterIstioInstallationReconcileLoopMockRecorder is the mock recorder for MockMulticlusterIstioInstallationReconcileLoop.
type MockMulticlusterIstioInstallationReconcileLoopMockRecorder struct {
	mock *MockMulticlusterIstioInstallationReconcileLoop
}

// NewMockMulticlusterIstioInstallationReconcileLoop creates a new mock instance.
func NewMockMulticlusterIstioInstallationReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterIstioInstallationReconcileLoop {
	mock := &MockMulticlusterIstioInstallationReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterIstioInstallationReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterIstioInstallationReconcileLoop) EXPECT() *MockMulticlusterIstioInstallationReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterIstioInstallationReconciler mocks base method.
func (m *MockMulticlusterIstioInstallationReconcileLoop) AddMulticlusterIstioInstallationReconciler(ctx context.Context, rec controller.MulticlusterIstioInstallationReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterIstioInstallationReconciler", varargs...)
}

// AddMulticlusterIstioInstallationReconciler indicates an expected call of AddMulticlusterIstioInstallationReconciler.
func (mr *MockMulticlusterIstioInstallationReconcileLoopMockRecorder) AddMulticlusterIstioInstallationReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterIstioInstallationReconciler", reflect.TypeOf((*MockMulticlusterIstioInstallationReconcileLoop)(nil).AddMulticlusterIstioInstallationReconciler), varargs...)
}
