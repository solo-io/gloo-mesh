// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	istio_enterprise_mesh_gloo_solo_io_v1 "github.com/solo-io/gloo-mesh/pkg/api/istio.enterprise.mesh.gloo.solo.io/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the IstioInstallation Resource across clusters.
// implemented by the user
type MulticlusterIstioInstallationReconciler interface {
	ReconcileIstioInstallation(clusterName string, obj *istio_enterprise_mesh_gloo_solo_io_v1.IstioInstallation) (reconcile.Result, error)
}

// Reconcile deletion events for the IstioInstallation Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterIstioInstallationDeletionReconciler interface {
	ReconcileIstioInstallationDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterIstioInstallationReconcilerFuncs struct {
	OnReconcileIstioInstallation         func(clusterName string, obj *istio_enterprise_mesh_gloo_solo_io_v1.IstioInstallation) (reconcile.Result, error)
	OnReconcileIstioInstallationDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterIstioInstallationReconcilerFuncs) ReconcileIstioInstallation(clusterName string, obj *istio_enterprise_mesh_gloo_solo_io_v1.IstioInstallation) (reconcile.Result, error) {
	if f.OnReconcileIstioInstallation == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileIstioInstallation(clusterName, obj)
}

func (f *MulticlusterIstioInstallationReconcilerFuncs) ReconcileIstioInstallationDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileIstioInstallationDeletion == nil {
		return nil
	}
	return f.OnReconcileIstioInstallationDeletion(clusterName, req)
}

type MulticlusterIstioInstallationReconcileLoop interface {
	// AddMulticlusterIstioInstallationReconciler adds a MulticlusterIstioInstallationReconciler to the MulticlusterIstioInstallationReconcileLoop.
	AddMulticlusterIstioInstallationReconciler(ctx context.Context, rec MulticlusterIstioInstallationReconciler, predicates ...predicate.Predicate)
}

type multiclusterIstioInstallationReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterIstioInstallationReconcileLoop) AddMulticlusterIstioInstallationReconciler(ctx context.Context, rec MulticlusterIstioInstallationReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericIstioInstallationMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterIstioInstallationReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterIstioInstallationReconcileLoop {
	return &multiclusterIstioInstallationReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &istio_enterprise_mesh_gloo_solo_io_v1.IstioInstallation{}, options)}
}

type genericIstioInstallationMulticlusterReconciler struct {
	reconciler MulticlusterIstioInstallationReconciler
}

func (g genericIstioInstallationMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterIstioInstallationDeletionReconciler); ok {
		return deletionReconciler.ReconcileIstioInstallationDeletion(cluster, req)
	}
	return nil
}

func (g genericIstioInstallationMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*istio_enterprise_mesh_gloo_solo_io_v1.IstioInstallation)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: IstioInstallation handler received event for %T", object)
	}
	return g.reconciler.ReconcileIstioInstallation(cluster, obj)
}
