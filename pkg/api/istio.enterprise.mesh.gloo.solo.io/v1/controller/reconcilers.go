// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	istio_enterprise_mesh_gloo_solo_io_v1 "github.com/solo-io/gloo-mesh/pkg/api/istio.enterprise.mesh.gloo.solo.io/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the IstioInstallation Resource.
// implemented by the user
type IstioInstallationReconciler interface {
	ReconcileIstioInstallation(obj *istio_enterprise_mesh_gloo_solo_io_v1.IstioInstallation) (reconcile.Result, error)
}

// Reconcile deletion events for the IstioInstallation Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type IstioInstallationDeletionReconciler interface {
	ReconcileIstioInstallationDeletion(req reconcile.Request) error
}

type IstioInstallationReconcilerFuncs struct {
	OnReconcileIstioInstallation         func(obj *istio_enterprise_mesh_gloo_solo_io_v1.IstioInstallation) (reconcile.Result, error)
	OnReconcileIstioInstallationDeletion func(req reconcile.Request) error
}

func (f *IstioInstallationReconcilerFuncs) ReconcileIstioInstallation(obj *istio_enterprise_mesh_gloo_solo_io_v1.IstioInstallation) (reconcile.Result, error) {
	if f.OnReconcileIstioInstallation == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileIstioInstallation(obj)
}

func (f *IstioInstallationReconcilerFuncs) ReconcileIstioInstallationDeletion(req reconcile.Request) error {
	if f.OnReconcileIstioInstallationDeletion == nil {
		return nil
	}
	return f.OnReconcileIstioInstallationDeletion(req)
}

// Reconcile and finalize the IstioInstallation Resource
// implemented by the user
type IstioInstallationFinalizer interface {
	IstioInstallationReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	IstioInstallationFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeIstioInstallation(obj *istio_enterprise_mesh_gloo_solo_io_v1.IstioInstallation) error
}

type IstioInstallationReconcileLoop interface {
	RunIstioInstallationReconciler(ctx context.Context, rec IstioInstallationReconciler, predicates ...predicate.Predicate) error
}

type istioInstallationReconcileLoop struct {
	loop reconcile.Loop
}

func NewIstioInstallationReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) IstioInstallationReconcileLoop {
	return &istioInstallationReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &istio_enterprise_mesh_gloo_solo_io_v1.IstioInstallation{}, options),
	}
}

func (c *istioInstallationReconcileLoop) RunIstioInstallationReconciler(ctx context.Context, reconciler IstioInstallationReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericIstioInstallationReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(IstioInstallationFinalizer); ok {
		reconcilerWrapper = genericIstioInstallationFinalizer{
			genericIstioInstallationReconciler: genericReconciler,
			finalizingReconciler:               finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericIstioInstallationHandler implements a generic reconcile.Reconciler
type genericIstioInstallationReconciler struct {
	reconciler IstioInstallationReconciler
}

func (r genericIstioInstallationReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*istio_enterprise_mesh_gloo_solo_io_v1.IstioInstallation)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: IstioInstallation handler received event for %T", object)
	}
	return r.reconciler.ReconcileIstioInstallation(obj)
}

func (r genericIstioInstallationReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(IstioInstallationDeletionReconciler); ok {
		return deletionReconciler.ReconcileIstioInstallationDeletion(request)
	}
	return nil
}

// genericIstioInstallationFinalizer implements a generic reconcile.FinalizingReconciler
type genericIstioInstallationFinalizer struct {
	genericIstioInstallationReconciler
	finalizingReconciler IstioInstallationFinalizer
}

func (r genericIstioInstallationFinalizer) FinalizerName() string {
	return r.finalizingReconciler.IstioInstallationFinalizerName()
}

func (r genericIstioInstallationFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*istio_enterprise_mesh_gloo_solo_io_v1.IstioInstallation)
	if !ok {
		return errors.Errorf("internal error: IstioInstallation handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeIstioInstallation(obj)
}
