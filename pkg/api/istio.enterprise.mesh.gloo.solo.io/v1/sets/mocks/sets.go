// Code generated by MockGen. DO NOT EDIT.
// Source: ./sets.go

// Package mock_v1sets is a generated GoMock package.
package mock_v1sets

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/gloo-mesh/pkg/api/istio.enterprise.mesh.gloo.solo.io/v1"
	v1sets "github.com/solo-io/gloo-mesh/pkg/api/istio.enterprise.mesh.gloo.solo.io/v1/sets"
	sets "github.com/solo-io/skv2/contrib/pkg/sets"
	ezkube "github.com/solo-io/skv2/pkg/ezkube"
	sets0 "k8s.io/apimachinery/pkg/util/sets"
)

// MockIstioInstallationSet is a mock of IstioInstallationSet interface.
type MockIstioInstallationSet struct {
	ctrl     *gomock.Controller
	recorder *MockIstioInstallationSetMockRecorder
}

// MockIstioInstallationSetMockRecorder is the mock recorder for MockIstioInstallationSet.
type MockIstioInstallationSetMockRecorder struct {
	mock *MockIstioInstallationSet
}

// NewMockIstioInstallationSet creates a new mock instance.
func NewMockIstioInstallationSet(ctrl *gomock.Controller) *MockIstioInstallationSet {
	mock := &MockIstioInstallationSet{ctrl: ctrl}
	mock.recorder = &MockIstioInstallationSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIstioInstallationSet) EXPECT() *MockIstioInstallationSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockIstioInstallationSet) Clone() v1sets.IstioInstallationSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v1sets.IstioInstallationSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockIstioInstallationSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockIstioInstallationSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockIstioInstallationSet) Delete(istioInstallation ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", istioInstallation)
}

// Delete indicates an expected call of Delete.
func (mr *MockIstioInstallationSetMockRecorder) Delete(istioInstallation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIstioInstallationSet)(nil).Delete), istioInstallation)
}

// Delta mocks base method.
func (m *MockIstioInstallationSet) Delta(newSet v1sets.IstioInstallationSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockIstioInstallationSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockIstioInstallationSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockIstioInstallationSet) Difference(set v1sets.IstioInstallationSet) v1sets.IstioInstallationSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1sets.IstioInstallationSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockIstioInstallationSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockIstioInstallationSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockIstioInstallationSet) Equal(istioInstallationSet v1sets.IstioInstallationSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", istioInstallationSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockIstioInstallationSetMockRecorder) Equal(istioInstallationSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockIstioInstallationSet)(nil).Equal), istioInstallationSet)
}

// Find mocks base method.
func (m *MockIstioInstallationSet) Find(id ezkube.ResourceId) (*v1.IstioInstallation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1.IstioInstallation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIstioInstallationSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIstioInstallationSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockIstioInstallationSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockIstioInstallationSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockIstioInstallationSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockIstioInstallationSet) Has(istioInstallation ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", istioInstallation)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockIstioInstallationSetMockRecorder) Has(istioInstallation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockIstioInstallationSet)(nil).Has), istioInstallation)
}

// Insert mocks base method.
func (m *MockIstioInstallationSet) Insert(istioInstallation ...*v1.IstioInstallation) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range istioInstallation {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockIstioInstallationSetMockRecorder) Insert(istioInstallation ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIstioInstallationSet)(nil).Insert), istioInstallation...)
}

// Intersection mocks base method.
func (m *MockIstioInstallationSet) Intersection(set v1sets.IstioInstallationSet) v1sets.IstioInstallationSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1sets.IstioInstallationSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockIstioInstallationSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockIstioInstallationSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockIstioInstallationSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockIstioInstallationSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockIstioInstallationSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockIstioInstallationSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockIstioInstallationSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockIstioInstallationSet)(nil).Length))
}

// List mocks base method.
func (m *MockIstioInstallationSet) List(filterResource ...func(*v1.IstioInstallation) bool) []*v1.IstioInstallation {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1.IstioInstallation)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockIstioInstallationSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIstioInstallationSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockIstioInstallationSet) Map() map[string]*v1.IstioInstallation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1.IstioInstallation)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockIstioInstallationSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockIstioInstallationSet)(nil).Map))
}

// Union mocks base method.
func (m *MockIstioInstallationSet) Union(set v1sets.IstioInstallationSet) v1sets.IstioInstallationSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1sets.IstioInstallationSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockIstioInstallationSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockIstioInstallationSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockIstioInstallationSet) UnsortedList(filterResource ...func(*v1.IstioInstallation) bool) []*v1.IstioInstallation {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v1.IstioInstallation)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockIstioInstallationSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockIstioInstallationSet)(nil).UnsortedList), filterResource...)
}
