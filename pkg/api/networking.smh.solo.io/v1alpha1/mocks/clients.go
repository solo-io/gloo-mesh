// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1alpha1 is a generated GoMock package.
package mock_v1alpha1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1alpha1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// TrafficPolicies mocks base method.
func (m *MockClientset) TrafficPolicies() v1alpha1.TrafficPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrafficPolicies")
	ret0, _ := ret[0].(v1alpha1.TrafficPolicyClient)
	return ret0
}

// TrafficPolicies indicates an expected call of TrafficPolicies.
func (mr *MockClientsetMockRecorder) TrafficPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrafficPolicies", reflect.TypeOf((*MockClientset)(nil).TrafficPolicies))
}

// AccessControlPolicies mocks base method.
func (m *MockClientset) AccessControlPolicies() v1alpha1.AccessControlPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessControlPolicies")
	ret0, _ := ret[0].(v1alpha1.AccessControlPolicyClient)
	return ret0
}

// AccessControlPolicies indicates an expected call of AccessControlPolicies.
func (mr *MockClientsetMockRecorder) AccessControlPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessControlPolicies", reflect.TypeOf((*MockClientset)(nil).AccessControlPolicies))
}

// VirtualMeshes mocks base method.
func (m *MockClientset) VirtualMeshes() v1alpha1.VirtualMeshClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMeshes")
	ret0, _ := ret[0].(v1alpha1.VirtualMeshClient)
	return ret0
}

// VirtualMeshes indicates an expected call of VirtualMeshes.
func (mr *MockClientsetMockRecorder) VirtualMeshes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMeshes", reflect.TypeOf((*MockClientset)(nil).VirtualMeshes))
}

// FailoverServices mocks base method.
func (m *MockClientset) FailoverServices() v1alpha1.FailoverServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailoverServices")
	ret0, _ := ret[0].(v1alpha1.FailoverServiceClient)
	return ret0
}

// FailoverServices indicates an expected call of FailoverServices.
func (mr *MockClientsetMockRecorder) FailoverServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailoverServices", reflect.TypeOf((*MockClientset)(nil).FailoverServices))
}

// MockTrafficPolicyReader is a mock of TrafficPolicyReader interface.
type MockTrafficPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficPolicyReaderMockRecorder
}

// MockTrafficPolicyReaderMockRecorder is the mock recorder for MockTrafficPolicyReader.
type MockTrafficPolicyReaderMockRecorder struct {
	mock *MockTrafficPolicyReader
}

// NewMockTrafficPolicyReader creates a new mock instance.
func NewMockTrafficPolicyReader(ctrl *gomock.Controller) *MockTrafficPolicyReader {
	mock := &MockTrafficPolicyReader{ctrl: ctrl}
	mock.recorder = &MockTrafficPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficPolicyReader) EXPECT() *MockTrafficPolicyReaderMockRecorder {
	return m.recorder
}

// GetTrafficPolicy mocks base method.
func (m *MockTrafficPolicyReader) GetTrafficPolicy(ctx context.Context, key client.ObjectKey) (*v1alpha1.TrafficPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrafficPolicy", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.TrafficPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrafficPolicy indicates an expected call of GetTrafficPolicy.
func (mr *MockTrafficPolicyReaderMockRecorder) GetTrafficPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyReader)(nil).GetTrafficPolicy), ctx, key)
}

// ListTrafficPolicy mocks base method.
func (m *MockTrafficPolicyReader) ListTrafficPolicy(ctx context.Context, opts ...client.ListOption) (*v1alpha1.TrafficPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrafficPolicy", varargs...)
	ret0, _ := ret[0].(*v1alpha1.TrafficPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrafficPolicy indicates an expected call of ListTrafficPolicy.
func (mr *MockTrafficPolicyReaderMockRecorder) ListTrafficPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyReader)(nil).ListTrafficPolicy), varargs...)
}

// MockTrafficPolicyWriter is a mock of TrafficPolicyWriter interface.
type MockTrafficPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficPolicyWriterMockRecorder
}

// MockTrafficPolicyWriterMockRecorder is the mock recorder for MockTrafficPolicyWriter.
type MockTrafficPolicyWriterMockRecorder struct {
	mock *MockTrafficPolicyWriter
}

// NewMockTrafficPolicyWriter creates a new mock instance.
func NewMockTrafficPolicyWriter(ctrl *gomock.Controller) *MockTrafficPolicyWriter {
	mock := &MockTrafficPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockTrafficPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficPolicyWriter) EXPECT() *MockTrafficPolicyWriterMockRecorder {
	return m.recorder
}

// CreateTrafficPolicy mocks base method.
func (m *MockTrafficPolicyWriter) CreateTrafficPolicy(ctx context.Context, obj *v1alpha1.TrafficPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrafficPolicy indicates an expected call of CreateTrafficPolicy.
func (mr *MockTrafficPolicyWriterMockRecorder) CreateTrafficPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyWriter)(nil).CreateTrafficPolicy), varargs...)
}

// DeleteTrafficPolicy mocks base method.
func (m *MockTrafficPolicyWriter) DeleteTrafficPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrafficPolicy indicates an expected call of DeleteTrafficPolicy.
func (mr *MockTrafficPolicyWriterMockRecorder) DeleteTrafficPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyWriter)(nil).DeleteTrafficPolicy), varargs...)
}

// UpdateTrafficPolicy mocks base method.
func (m *MockTrafficPolicyWriter) UpdateTrafficPolicy(ctx context.Context, obj *v1alpha1.TrafficPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficPolicy indicates an expected call of UpdateTrafficPolicy.
func (mr *MockTrafficPolicyWriterMockRecorder) UpdateTrafficPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyWriter)(nil).UpdateTrafficPolicy), varargs...)
}

// PatchTrafficPolicy mocks base method.
func (m *MockTrafficPolicyWriter) PatchTrafficPolicy(ctx context.Context, obj *v1alpha1.TrafficPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficPolicy indicates an expected call of PatchTrafficPolicy.
func (mr *MockTrafficPolicyWriterMockRecorder) PatchTrafficPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyWriter)(nil).PatchTrafficPolicy), varargs...)
}

// DeleteAllOfTrafficPolicy mocks base method.
func (m *MockTrafficPolicyWriter) DeleteAllOfTrafficPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTrafficPolicy indicates an expected call of DeleteAllOfTrafficPolicy.
func (mr *MockTrafficPolicyWriterMockRecorder) DeleteAllOfTrafficPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyWriter)(nil).DeleteAllOfTrafficPolicy), varargs...)
}

// UpsertTrafficPolicy mocks base method.
func (m *MockTrafficPolicyWriter) UpsertTrafficPolicy(ctx context.Context, obj *v1alpha1.TrafficPolicy, transitionFuncs ...v1alpha1.TrafficPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTrafficPolicy indicates an expected call of UpsertTrafficPolicy.
func (mr *MockTrafficPolicyWriterMockRecorder) UpsertTrafficPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyWriter)(nil).UpsertTrafficPolicy), varargs...)
}

// MockTrafficPolicyStatusWriter is a mock of TrafficPolicyStatusWriter interface.
type MockTrafficPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficPolicyStatusWriterMockRecorder
}

// MockTrafficPolicyStatusWriterMockRecorder is the mock recorder for MockTrafficPolicyStatusWriter.
type MockTrafficPolicyStatusWriterMockRecorder struct {
	mock *MockTrafficPolicyStatusWriter
}

// NewMockTrafficPolicyStatusWriter creates a new mock instance.
func NewMockTrafficPolicyStatusWriter(ctrl *gomock.Controller) *MockTrafficPolicyStatusWriter {
	mock := &MockTrafficPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockTrafficPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficPolicyStatusWriter) EXPECT() *MockTrafficPolicyStatusWriterMockRecorder {
	return m.recorder
}

// UpdateTrafficPolicyStatus mocks base method.
func (m *MockTrafficPolicyStatusWriter) UpdateTrafficPolicyStatus(ctx context.Context, obj *v1alpha1.TrafficPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficPolicyStatus indicates an expected call of UpdateTrafficPolicyStatus.
func (mr *MockTrafficPolicyStatusWriterMockRecorder) UpdateTrafficPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficPolicyStatus", reflect.TypeOf((*MockTrafficPolicyStatusWriter)(nil).UpdateTrafficPolicyStatus), varargs...)
}

// PatchTrafficPolicyStatus mocks base method.
func (m *MockTrafficPolicyStatusWriter) PatchTrafficPolicyStatus(ctx context.Context, obj *v1alpha1.TrafficPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficPolicyStatus indicates an expected call of PatchTrafficPolicyStatus.
func (mr *MockTrafficPolicyStatusWriterMockRecorder) PatchTrafficPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficPolicyStatus", reflect.TypeOf((*MockTrafficPolicyStatusWriter)(nil).PatchTrafficPolicyStatus), varargs...)
}

// MockTrafficPolicyClient is a mock of TrafficPolicyClient interface.
type MockTrafficPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficPolicyClientMockRecorder
}

// MockTrafficPolicyClientMockRecorder is the mock recorder for MockTrafficPolicyClient.
type MockTrafficPolicyClientMockRecorder struct {
	mock *MockTrafficPolicyClient
}

// NewMockTrafficPolicyClient creates a new mock instance.
func NewMockTrafficPolicyClient(ctrl *gomock.Controller) *MockTrafficPolicyClient {
	mock := &MockTrafficPolicyClient{ctrl: ctrl}
	mock.recorder = &MockTrafficPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficPolicyClient) EXPECT() *MockTrafficPolicyClientMockRecorder {
	return m.recorder
}

// GetTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) GetTrafficPolicy(ctx context.Context, key client.ObjectKey) (*v1alpha1.TrafficPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrafficPolicy", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.TrafficPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrafficPolicy indicates an expected call of GetTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) GetTrafficPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).GetTrafficPolicy), ctx, key)
}

// ListTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) ListTrafficPolicy(ctx context.Context, opts ...client.ListOption) (*v1alpha1.TrafficPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrafficPolicy", varargs...)
	ret0, _ := ret[0].(*v1alpha1.TrafficPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrafficPolicy indicates an expected call of ListTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) ListTrafficPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).ListTrafficPolicy), varargs...)
}

// CreateTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) CreateTrafficPolicy(ctx context.Context, obj *v1alpha1.TrafficPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrafficPolicy indicates an expected call of CreateTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) CreateTrafficPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).CreateTrafficPolicy), varargs...)
}

// DeleteTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) DeleteTrafficPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrafficPolicy indicates an expected call of DeleteTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) DeleteTrafficPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).DeleteTrafficPolicy), varargs...)
}

// UpdateTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) UpdateTrafficPolicy(ctx context.Context, obj *v1alpha1.TrafficPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficPolicy indicates an expected call of UpdateTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) UpdateTrafficPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).UpdateTrafficPolicy), varargs...)
}

// PatchTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) PatchTrafficPolicy(ctx context.Context, obj *v1alpha1.TrafficPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficPolicy indicates an expected call of PatchTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) PatchTrafficPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).PatchTrafficPolicy), varargs...)
}

// DeleteAllOfTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) DeleteAllOfTrafficPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTrafficPolicy indicates an expected call of DeleteAllOfTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) DeleteAllOfTrafficPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).DeleteAllOfTrafficPolicy), varargs...)
}

// UpsertTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) UpsertTrafficPolicy(ctx context.Context, obj *v1alpha1.TrafficPolicy, transitionFuncs ...v1alpha1.TrafficPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTrafficPolicy indicates an expected call of UpsertTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) UpsertTrafficPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).UpsertTrafficPolicy), varargs...)
}

// UpdateTrafficPolicyStatus mocks base method.
func (m *MockTrafficPolicyClient) UpdateTrafficPolicyStatus(ctx context.Context, obj *v1alpha1.TrafficPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficPolicyStatus indicates an expected call of UpdateTrafficPolicyStatus.
func (mr *MockTrafficPolicyClientMockRecorder) UpdateTrafficPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficPolicyStatus", reflect.TypeOf((*MockTrafficPolicyClient)(nil).UpdateTrafficPolicyStatus), varargs...)
}

// PatchTrafficPolicyStatus mocks base method.
func (m *MockTrafficPolicyClient) PatchTrafficPolicyStatus(ctx context.Context, obj *v1alpha1.TrafficPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficPolicyStatus indicates an expected call of PatchTrafficPolicyStatus.
func (mr *MockTrafficPolicyClientMockRecorder) PatchTrafficPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficPolicyStatus", reflect.TypeOf((*MockTrafficPolicyClient)(nil).PatchTrafficPolicyStatus), varargs...)
}

// MockMulticlusterTrafficPolicyClient is a mock of MulticlusterTrafficPolicyClient interface.
type MockMulticlusterTrafficPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTrafficPolicyClientMockRecorder
}

// MockMulticlusterTrafficPolicyClientMockRecorder is the mock recorder for MockMulticlusterTrafficPolicyClient.
type MockMulticlusterTrafficPolicyClientMockRecorder struct {
	mock *MockMulticlusterTrafficPolicyClient
}

// NewMockMulticlusterTrafficPolicyClient creates a new mock instance.
func NewMockMulticlusterTrafficPolicyClient(ctrl *gomock.Controller) *MockMulticlusterTrafficPolicyClient {
	mock := &MockMulticlusterTrafficPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTrafficPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTrafficPolicyClient) EXPECT() *MockMulticlusterTrafficPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterTrafficPolicyClient) Cluster(cluster string) (v1alpha1.TrafficPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.TrafficPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterTrafficPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterTrafficPolicyClient)(nil).Cluster), cluster)
}

// MockAccessControlPolicyReader is a mock of AccessControlPolicyReader interface.
type MockAccessControlPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockAccessControlPolicyReaderMockRecorder
}

// MockAccessControlPolicyReaderMockRecorder is the mock recorder for MockAccessControlPolicyReader.
type MockAccessControlPolicyReaderMockRecorder struct {
	mock *MockAccessControlPolicyReader
}

// NewMockAccessControlPolicyReader creates a new mock instance.
func NewMockAccessControlPolicyReader(ctrl *gomock.Controller) *MockAccessControlPolicyReader {
	mock := &MockAccessControlPolicyReader{ctrl: ctrl}
	mock.recorder = &MockAccessControlPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessControlPolicyReader) EXPECT() *MockAccessControlPolicyReaderMockRecorder {
	return m.recorder
}

// GetAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyReader) GetAccessControlPolicy(ctx context.Context, key client.ObjectKey) (*v1alpha1.AccessControlPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessControlPolicy", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.AccessControlPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessControlPolicy indicates an expected call of GetAccessControlPolicy.
func (mr *MockAccessControlPolicyReaderMockRecorder) GetAccessControlPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyReader)(nil).GetAccessControlPolicy), ctx, key)
}

// ListAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyReader) ListAccessControlPolicy(ctx context.Context, opts ...client.ListOption) (*v1alpha1.AccessControlPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(*v1alpha1.AccessControlPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessControlPolicy indicates an expected call of ListAccessControlPolicy.
func (mr *MockAccessControlPolicyReaderMockRecorder) ListAccessControlPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyReader)(nil).ListAccessControlPolicy), varargs...)
}

// MockAccessControlPolicyWriter is a mock of AccessControlPolicyWriter interface.
type MockAccessControlPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockAccessControlPolicyWriterMockRecorder
}

// MockAccessControlPolicyWriterMockRecorder is the mock recorder for MockAccessControlPolicyWriter.
type MockAccessControlPolicyWriterMockRecorder struct {
	mock *MockAccessControlPolicyWriter
}

// NewMockAccessControlPolicyWriter creates a new mock instance.
func NewMockAccessControlPolicyWriter(ctrl *gomock.Controller) *MockAccessControlPolicyWriter {
	mock := &MockAccessControlPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockAccessControlPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessControlPolicyWriter) EXPECT() *MockAccessControlPolicyWriterMockRecorder {
	return m.recorder
}

// CreateAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyWriter) CreateAccessControlPolicy(ctx context.Context, obj *v1alpha1.AccessControlPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccessControlPolicy indicates an expected call of CreateAccessControlPolicy.
func (mr *MockAccessControlPolicyWriterMockRecorder) CreateAccessControlPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyWriter)(nil).CreateAccessControlPolicy), varargs...)
}

// DeleteAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyWriter) DeleteAccessControlPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessControlPolicy indicates an expected call of DeleteAccessControlPolicy.
func (mr *MockAccessControlPolicyWriterMockRecorder) DeleteAccessControlPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyWriter)(nil).DeleteAccessControlPolicy), varargs...)
}

// UpdateAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyWriter) UpdateAccessControlPolicy(ctx context.Context, obj *v1alpha1.AccessControlPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessControlPolicy indicates an expected call of UpdateAccessControlPolicy.
func (mr *MockAccessControlPolicyWriterMockRecorder) UpdateAccessControlPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyWriter)(nil).UpdateAccessControlPolicy), varargs...)
}

// PatchAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyWriter) PatchAccessControlPolicy(ctx context.Context, obj *v1alpha1.AccessControlPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchAccessControlPolicy indicates an expected call of PatchAccessControlPolicy.
func (mr *MockAccessControlPolicyWriterMockRecorder) PatchAccessControlPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyWriter)(nil).PatchAccessControlPolicy), varargs...)
}

// DeleteAllOfAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyWriter) DeleteAllOfAccessControlPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfAccessControlPolicy indicates an expected call of DeleteAllOfAccessControlPolicy.
func (mr *MockAccessControlPolicyWriterMockRecorder) DeleteAllOfAccessControlPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyWriter)(nil).DeleteAllOfAccessControlPolicy), varargs...)
}

// UpsertAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyWriter) UpsertAccessControlPolicy(ctx context.Context, obj *v1alpha1.AccessControlPolicy, transitionFuncs ...v1alpha1.AccessControlPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAccessControlPolicy indicates an expected call of UpsertAccessControlPolicy.
func (mr *MockAccessControlPolicyWriterMockRecorder) UpsertAccessControlPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyWriter)(nil).UpsertAccessControlPolicy), varargs...)
}

// MockAccessControlPolicyStatusWriter is a mock of AccessControlPolicyStatusWriter interface.
type MockAccessControlPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockAccessControlPolicyStatusWriterMockRecorder
}

// MockAccessControlPolicyStatusWriterMockRecorder is the mock recorder for MockAccessControlPolicyStatusWriter.
type MockAccessControlPolicyStatusWriterMockRecorder struct {
	mock *MockAccessControlPolicyStatusWriter
}

// NewMockAccessControlPolicyStatusWriter creates a new mock instance.
func NewMockAccessControlPolicyStatusWriter(ctrl *gomock.Controller) *MockAccessControlPolicyStatusWriter {
	mock := &MockAccessControlPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockAccessControlPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessControlPolicyStatusWriter) EXPECT() *MockAccessControlPolicyStatusWriterMockRecorder {
	return m.recorder
}

// UpdateAccessControlPolicyStatus mocks base method.
func (m *MockAccessControlPolicyStatusWriter) UpdateAccessControlPolicyStatus(ctx context.Context, obj *v1alpha1.AccessControlPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessControlPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessControlPolicyStatus indicates an expected call of UpdateAccessControlPolicyStatus.
func (mr *MockAccessControlPolicyStatusWriterMockRecorder) UpdateAccessControlPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessControlPolicyStatus", reflect.TypeOf((*MockAccessControlPolicyStatusWriter)(nil).UpdateAccessControlPolicyStatus), varargs...)
}

// PatchAccessControlPolicyStatus mocks base method.
func (m *MockAccessControlPolicyStatusWriter) PatchAccessControlPolicyStatus(ctx context.Context, obj *v1alpha1.AccessControlPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAccessControlPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchAccessControlPolicyStatus indicates an expected call of PatchAccessControlPolicyStatus.
func (mr *MockAccessControlPolicyStatusWriterMockRecorder) PatchAccessControlPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAccessControlPolicyStatus", reflect.TypeOf((*MockAccessControlPolicyStatusWriter)(nil).PatchAccessControlPolicyStatus), varargs...)
}

// MockAccessControlPolicyClient is a mock of AccessControlPolicyClient interface.
type MockAccessControlPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccessControlPolicyClientMockRecorder
}

// MockAccessControlPolicyClientMockRecorder is the mock recorder for MockAccessControlPolicyClient.
type MockAccessControlPolicyClientMockRecorder struct {
	mock *MockAccessControlPolicyClient
}

// NewMockAccessControlPolicyClient creates a new mock instance.
func NewMockAccessControlPolicyClient(ctrl *gomock.Controller) *MockAccessControlPolicyClient {
	mock := &MockAccessControlPolicyClient{ctrl: ctrl}
	mock.recorder = &MockAccessControlPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessControlPolicyClient) EXPECT() *MockAccessControlPolicyClientMockRecorder {
	return m.recorder
}

// GetAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyClient) GetAccessControlPolicy(ctx context.Context, key client.ObjectKey) (*v1alpha1.AccessControlPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessControlPolicy", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.AccessControlPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessControlPolicy indicates an expected call of GetAccessControlPolicy.
func (mr *MockAccessControlPolicyClientMockRecorder) GetAccessControlPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).GetAccessControlPolicy), ctx, key)
}

// ListAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyClient) ListAccessControlPolicy(ctx context.Context, opts ...client.ListOption) (*v1alpha1.AccessControlPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(*v1alpha1.AccessControlPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessControlPolicy indicates an expected call of ListAccessControlPolicy.
func (mr *MockAccessControlPolicyClientMockRecorder) ListAccessControlPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).ListAccessControlPolicy), varargs...)
}

// CreateAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyClient) CreateAccessControlPolicy(ctx context.Context, obj *v1alpha1.AccessControlPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccessControlPolicy indicates an expected call of CreateAccessControlPolicy.
func (mr *MockAccessControlPolicyClientMockRecorder) CreateAccessControlPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).CreateAccessControlPolicy), varargs...)
}

// DeleteAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyClient) DeleteAccessControlPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessControlPolicy indicates an expected call of DeleteAccessControlPolicy.
func (mr *MockAccessControlPolicyClientMockRecorder) DeleteAccessControlPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).DeleteAccessControlPolicy), varargs...)
}

// UpdateAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyClient) UpdateAccessControlPolicy(ctx context.Context, obj *v1alpha1.AccessControlPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessControlPolicy indicates an expected call of UpdateAccessControlPolicy.
func (mr *MockAccessControlPolicyClientMockRecorder) UpdateAccessControlPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).UpdateAccessControlPolicy), varargs...)
}

// PatchAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyClient) PatchAccessControlPolicy(ctx context.Context, obj *v1alpha1.AccessControlPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchAccessControlPolicy indicates an expected call of PatchAccessControlPolicy.
func (mr *MockAccessControlPolicyClientMockRecorder) PatchAccessControlPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).PatchAccessControlPolicy), varargs...)
}

// DeleteAllOfAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyClient) DeleteAllOfAccessControlPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfAccessControlPolicy indicates an expected call of DeleteAllOfAccessControlPolicy.
func (mr *MockAccessControlPolicyClientMockRecorder) DeleteAllOfAccessControlPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).DeleteAllOfAccessControlPolicy), varargs...)
}

// UpsertAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyClient) UpsertAccessControlPolicy(ctx context.Context, obj *v1alpha1.AccessControlPolicy, transitionFuncs ...v1alpha1.AccessControlPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAccessControlPolicy indicates an expected call of UpsertAccessControlPolicy.
func (mr *MockAccessControlPolicyClientMockRecorder) UpsertAccessControlPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).UpsertAccessControlPolicy), varargs...)
}

// UpdateAccessControlPolicyStatus mocks base method.
func (m *MockAccessControlPolicyClient) UpdateAccessControlPolicyStatus(ctx context.Context, obj *v1alpha1.AccessControlPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessControlPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessControlPolicyStatus indicates an expected call of UpdateAccessControlPolicyStatus.
func (mr *MockAccessControlPolicyClientMockRecorder) UpdateAccessControlPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessControlPolicyStatus", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).UpdateAccessControlPolicyStatus), varargs...)
}

// PatchAccessControlPolicyStatus mocks base method.
func (m *MockAccessControlPolicyClient) PatchAccessControlPolicyStatus(ctx context.Context, obj *v1alpha1.AccessControlPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAccessControlPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchAccessControlPolicyStatus indicates an expected call of PatchAccessControlPolicyStatus.
func (mr *MockAccessControlPolicyClientMockRecorder) PatchAccessControlPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAccessControlPolicyStatus", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).PatchAccessControlPolicyStatus), varargs...)
}

// MockMulticlusterAccessControlPolicyClient is a mock of MulticlusterAccessControlPolicyClient interface.
type MockMulticlusterAccessControlPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterAccessControlPolicyClientMockRecorder
}

// MockMulticlusterAccessControlPolicyClientMockRecorder is the mock recorder for MockMulticlusterAccessControlPolicyClient.
type MockMulticlusterAccessControlPolicyClientMockRecorder struct {
	mock *MockMulticlusterAccessControlPolicyClient
}

// NewMockMulticlusterAccessControlPolicyClient creates a new mock instance.
func NewMockMulticlusterAccessControlPolicyClient(ctrl *gomock.Controller) *MockMulticlusterAccessControlPolicyClient {
	mock := &MockMulticlusterAccessControlPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterAccessControlPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterAccessControlPolicyClient) EXPECT() *MockMulticlusterAccessControlPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterAccessControlPolicyClient) Cluster(cluster string) (v1alpha1.AccessControlPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.AccessControlPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterAccessControlPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterAccessControlPolicyClient)(nil).Cluster), cluster)
}

// MockVirtualMeshReader is a mock of VirtualMeshReader interface.
type MockVirtualMeshReader struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshReaderMockRecorder
}

// MockVirtualMeshReaderMockRecorder is the mock recorder for MockVirtualMeshReader.
type MockVirtualMeshReaderMockRecorder struct {
	mock *MockVirtualMeshReader
}

// NewMockVirtualMeshReader creates a new mock instance.
func NewMockVirtualMeshReader(ctrl *gomock.Controller) *MockVirtualMeshReader {
	mock := &MockVirtualMeshReader{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshReader) EXPECT() *MockVirtualMeshReaderMockRecorder {
	return m.recorder
}

// GetVirtualMesh mocks base method.
func (m *MockVirtualMeshReader) GetVirtualMesh(ctx context.Context, key client.ObjectKey) (*v1alpha1.VirtualMesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMesh", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.VirtualMesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMesh indicates an expected call of GetVirtualMesh.
func (mr *MockVirtualMeshReaderMockRecorder) GetVirtualMesh(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMesh", reflect.TypeOf((*MockVirtualMeshReader)(nil).GetVirtualMesh), ctx, key)
}

// ListVirtualMesh mocks base method.
func (m *MockVirtualMeshReader) ListVirtualMesh(ctx context.Context, opts ...client.ListOption) (*v1alpha1.VirtualMeshList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualMesh", varargs...)
	ret0, _ := ret[0].(*v1alpha1.VirtualMeshList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMesh indicates an expected call of ListVirtualMesh.
func (mr *MockVirtualMeshReaderMockRecorder) ListVirtualMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMesh", reflect.TypeOf((*MockVirtualMeshReader)(nil).ListVirtualMesh), varargs...)
}

// MockVirtualMeshWriter is a mock of VirtualMeshWriter interface.
type MockVirtualMeshWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshWriterMockRecorder
}

// MockVirtualMeshWriterMockRecorder is the mock recorder for MockVirtualMeshWriter.
type MockVirtualMeshWriterMockRecorder struct {
	mock *MockVirtualMeshWriter
}

// NewMockVirtualMeshWriter creates a new mock instance.
func NewMockVirtualMeshWriter(ctrl *gomock.Controller) *MockVirtualMeshWriter {
	mock := &MockVirtualMeshWriter{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshWriter) EXPECT() *MockVirtualMeshWriterMockRecorder {
	return m.recorder
}

// CreateVirtualMesh mocks base method.
func (m *MockVirtualMeshWriter) CreateVirtualMesh(ctx context.Context, obj *v1alpha1.VirtualMesh, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualMesh indicates an expected call of CreateVirtualMesh.
func (mr *MockVirtualMeshWriterMockRecorder) CreateVirtualMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMesh", reflect.TypeOf((*MockVirtualMeshWriter)(nil).CreateVirtualMesh), varargs...)
}

// DeleteVirtualMesh mocks base method.
func (m *MockVirtualMeshWriter) DeleteVirtualMesh(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMesh indicates an expected call of DeleteVirtualMesh.
func (mr *MockVirtualMeshWriterMockRecorder) DeleteVirtualMesh(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMesh", reflect.TypeOf((*MockVirtualMeshWriter)(nil).DeleteVirtualMesh), varargs...)
}

// UpdateVirtualMesh mocks base method.
func (m *MockVirtualMeshWriter) UpdateVirtualMesh(ctx context.Context, obj *v1alpha1.VirtualMesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMesh indicates an expected call of UpdateVirtualMesh.
func (mr *MockVirtualMeshWriterMockRecorder) UpdateVirtualMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMesh", reflect.TypeOf((*MockVirtualMeshWriter)(nil).UpdateVirtualMesh), varargs...)
}

// PatchVirtualMesh mocks base method.
func (m *MockVirtualMeshWriter) PatchVirtualMesh(ctx context.Context, obj *v1alpha1.VirtualMesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMesh indicates an expected call of PatchVirtualMesh.
func (mr *MockVirtualMeshWriterMockRecorder) PatchVirtualMesh(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMesh", reflect.TypeOf((*MockVirtualMeshWriter)(nil).PatchVirtualMesh), varargs...)
}

// DeleteAllOfVirtualMesh mocks base method.
func (m *MockVirtualMeshWriter) DeleteAllOfVirtualMesh(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualMesh indicates an expected call of DeleteAllOfVirtualMesh.
func (mr *MockVirtualMeshWriterMockRecorder) DeleteAllOfVirtualMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualMesh", reflect.TypeOf((*MockVirtualMeshWriter)(nil).DeleteAllOfVirtualMesh), varargs...)
}

// UpsertVirtualMesh mocks base method.
func (m *MockVirtualMeshWriter) UpsertVirtualMesh(ctx context.Context, obj *v1alpha1.VirtualMesh, transitionFuncs ...v1alpha1.VirtualMeshTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualMesh indicates an expected call of UpsertVirtualMesh.
func (mr *MockVirtualMeshWriterMockRecorder) UpsertVirtualMesh(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualMesh", reflect.TypeOf((*MockVirtualMeshWriter)(nil).UpsertVirtualMesh), varargs...)
}

// MockVirtualMeshStatusWriter is a mock of VirtualMeshStatusWriter interface.
type MockVirtualMeshStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshStatusWriterMockRecorder
}

// MockVirtualMeshStatusWriterMockRecorder is the mock recorder for MockVirtualMeshStatusWriter.
type MockVirtualMeshStatusWriterMockRecorder struct {
	mock *MockVirtualMeshStatusWriter
}

// NewMockVirtualMeshStatusWriter creates a new mock instance.
func NewMockVirtualMeshStatusWriter(ctrl *gomock.Controller) *MockVirtualMeshStatusWriter {
	mock := &MockVirtualMeshStatusWriter{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshStatusWriter) EXPECT() *MockVirtualMeshStatusWriterMockRecorder {
	return m.recorder
}

// UpdateVirtualMeshStatus mocks base method.
func (m *MockVirtualMeshStatusWriter) UpdateVirtualMeshStatus(ctx context.Context, obj *v1alpha1.VirtualMesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMeshStatus indicates an expected call of UpdateVirtualMeshStatus.
func (mr *MockVirtualMeshStatusWriterMockRecorder) UpdateVirtualMeshStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMeshStatus", reflect.TypeOf((*MockVirtualMeshStatusWriter)(nil).UpdateVirtualMeshStatus), varargs...)
}

// PatchVirtualMeshStatus mocks base method.
func (m *MockVirtualMeshStatusWriter) PatchVirtualMeshStatus(ctx context.Context, obj *v1alpha1.VirtualMesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMeshStatus indicates an expected call of PatchVirtualMeshStatus.
func (mr *MockVirtualMeshStatusWriterMockRecorder) PatchVirtualMeshStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMeshStatus", reflect.TypeOf((*MockVirtualMeshStatusWriter)(nil).PatchVirtualMeshStatus), varargs...)
}

// MockVirtualMeshClient is a mock of VirtualMeshClient interface.
type MockVirtualMeshClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshClientMockRecorder
}

// MockVirtualMeshClientMockRecorder is the mock recorder for MockVirtualMeshClient.
type MockVirtualMeshClientMockRecorder struct {
	mock *MockVirtualMeshClient
}

// NewMockVirtualMeshClient creates a new mock instance.
func NewMockVirtualMeshClient(ctrl *gomock.Controller) *MockVirtualMeshClient {
	mock := &MockVirtualMeshClient{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshClient) EXPECT() *MockVirtualMeshClientMockRecorder {
	return m.recorder
}

// GetVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) GetVirtualMesh(ctx context.Context, key client.ObjectKey) (*v1alpha1.VirtualMesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMesh", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.VirtualMesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMesh indicates an expected call of GetVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) GetVirtualMesh(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).GetVirtualMesh), ctx, key)
}

// ListVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) ListVirtualMesh(ctx context.Context, opts ...client.ListOption) (*v1alpha1.VirtualMeshList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualMesh", varargs...)
	ret0, _ := ret[0].(*v1alpha1.VirtualMeshList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMesh indicates an expected call of ListVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) ListVirtualMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).ListVirtualMesh), varargs...)
}

// CreateVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) CreateVirtualMesh(ctx context.Context, obj *v1alpha1.VirtualMesh, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualMesh indicates an expected call of CreateVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) CreateVirtualMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).CreateVirtualMesh), varargs...)
}

// DeleteVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) DeleteVirtualMesh(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMesh indicates an expected call of DeleteVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) DeleteVirtualMesh(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).DeleteVirtualMesh), varargs...)
}

// UpdateVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) UpdateVirtualMesh(ctx context.Context, obj *v1alpha1.VirtualMesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMesh indicates an expected call of UpdateVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) UpdateVirtualMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).UpdateVirtualMesh), varargs...)
}

// PatchVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) PatchVirtualMesh(ctx context.Context, obj *v1alpha1.VirtualMesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMesh indicates an expected call of PatchVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) PatchVirtualMesh(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).PatchVirtualMesh), varargs...)
}

// DeleteAllOfVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) DeleteAllOfVirtualMesh(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualMesh indicates an expected call of DeleteAllOfVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) DeleteAllOfVirtualMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).DeleteAllOfVirtualMesh), varargs...)
}

// UpsertVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) UpsertVirtualMesh(ctx context.Context, obj *v1alpha1.VirtualMesh, transitionFuncs ...v1alpha1.VirtualMeshTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualMesh indicates an expected call of UpsertVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) UpsertVirtualMesh(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).UpsertVirtualMesh), varargs...)
}

// UpdateVirtualMeshStatus mocks base method.
func (m *MockVirtualMeshClient) UpdateVirtualMeshStatus(ctx context.Context, obj *v1alpha1.VirtualMesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMeshStatus indicates an expected call of UpdateVirtualMeshStatus.
func (mr *MockVirtualMeshClientMockRecorder) UpdateVirtualMeshStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMeshStatus", reflect.TypeOf((*MockVirtualMeshClient)(nil).UpdateVirtualMeshStatus), varargs...)
}

// PatchVirtualMeshStatus mocks base method.
func (m *MockVirtualMeshClient) PatchVirtualMeshStatus(ctx context.Context, obj *v1alpha1.VirtualMesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMeshStatus indicates an expected call of PatchVirtualMeshStatus.
func (mr *MockVirtualMeshClientMockRecorder) PatchVirtualMeshStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMeshStatus", reflect.TypeOf((*MockVirtualMeshClient)(nil).PatchVirtualMeshStatus), varargs...)
}

// MockMulticlusterVirtualMeshClient is a mock of MulticlusterVirtualMeshClient interface.
type MockMulticlusterVirtualMeshClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualMeshClientMockRecorder
}

// MockMulticlusterVirtualMeshClientMockRecorder is the mock recorder for MockMulticlusterVirtualMeshClient.
type MockMulticlusterVirtualMeshClientMockRecorder struct {
	mock *MockMulticlusterVirtualMeshClient
}

// NewMockMulticlusterVirtualMeshClient creates a new mock instance.
func NewMockMulticlusterVirtualMeshClient(ctrl *gomock.Controller) *MockMulticlusterVirtualMeshClient {
	mock := &MockMulticlusterVirtualMeshClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualMeshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualMeshClient) EXPECT() *MockMulticlusterVirtualMeshClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterVirtualMeshClient) Cluster(cluster string) (v1alpha1.VirtualMeshClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.VirtualMeshClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterVirtualMeshClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterVirtualMeshClient)(nil).Cluster), cluster)
}

// MockFailoverServiceReader is a mock of FailoverServiceReader interface.
type MockFailoverServiceReader struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverServiceReaderMockRecorder
}

// MockFailoverServiceReaderMockRecorder is the mock recorder for MockFailoverServiceReader.
type MockFailoverServiceReaderMockRecorder struct {
	mock *MockFailoverServiceReader
}

// NewMockFailoverServiceReader creates a new mock instance.
func NewMockFailoverServiceReader(ctrl *gomock.Controller) *MockFailoverServiceReader {
	mock := &MockFailoverServiceReader{ctrl: ctrl}
	mock.recorder = &MockFailoverServiceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverServiceReader) EXPECT() *MockFailoverServiceReaderMockRecorder {
	return m.recorder
}

// GetFailoverService mocks base method.
func (m *MockFailoverServiceReader) GetFailoverService(ctx context.Context, key client.ObjectKey) (*v1alpha1.FailoverService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailoverService", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.FailoverService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailoverService indicates an expected call of GetFailoverService.
func (mr *MockFailoverServiceReaderMockRecorder) GetFailoverService(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailoverService", reflect.TypeOf((*MockFailoverServiceReader)(nil).GetFailoverService), ctx, key)
}

// ListFailoverService mocks base method.
func (m *MockFailoverServiceReader) ListFailoverService(ctx context.Context, opts ...client.ListOption) (*v1alpha1.FailoverServiceList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFailoverService", varargs...)
	ret0, _ := ret[0].(*v1alpha1.FailoverServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFailoverService indicates an expected call of ListFailoverService.
func (mr *MockFailoverServiceReaderMockRecorder) ListFailoverService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFailoverService", reflect.TypeOf((*MockFailoverServiceReader)(nil).ListFailoverService), varargs...)
}

// MockFailoverServiceWriter is a mock of FailoverServiceWriter interface.
type MockFailoverServiceWriter struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverServiceWriterMockRecorder
}

// MockFailoverServiceWriterMockRecorder is the mock recorder for MockFailoverServiceWriter.
type MockFailoverServiceWriterMockRecorder struct {
	mock *MockFailoverServiceWriter
}

// NewMockFailoverServiceWriter creates a new mock instance.
func NewMockFailoverServiceWriter(ctrl *gomock.Controller) *MockFailoverServiceWriter {
	mock := &MockFailoverServiceWriter{ctrl: ctrl}
	mock.recorder = &MockFailoverServiceWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverServiceWriter) EXPECT() *MockFailoverServiceWriterMockRecorder {
	return m.recorder
}

// CreateFailoverService mocks base method.
func (m *MockFailoverServiceWriter) CreateFailoverService(ctx context.Context, obj *v1alpha1.FailoverService, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFailoverService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFailoverService indicates an expected call of CreateFailoverService.
func (mr *MockFailoverServiceWriterMockRecorder) CreateFailoverService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFailoverService", reflect.TypeOf((*MockFailoverServiceWriter)(nil).CreateFailoverService), varargs...)
}

// DeleteFailoverService mocks base method.
func (m *MockFailoverServiceWriter) DeleteFailoverService(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFailoverService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFailoverService indicates an expected call of DeleteFailoverService.
func (mr *MockFailoverServiceWriterMockRecorder) DeleteFailoverService(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFailoverService", reflect.TypeOf((*MockFailoverServiceWriter)(nil).DeleteFailoverService), varargs...)
}

// UpdateFailoverService mocks base method.
func (m *MockFailoverServiceWriter) UpdateFailoverService(ctx context.Context, obj *v1alpha1.FailoverService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFailoverService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFailoverService indicates an expected call of UpdateFailoverService.
func (mr *MockFailoverServiceWriterMockRecorder) UpdateFailoverService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFailoverService", reflect.TypeOf((*MockFailoverServiceWriter)(nil).UpdateFailoverService), varargs...)
}

// PatchFailoverService mocks base method.
func (m *MockFailoverServiceWriter) PatchFailoverService(ctx context.Context, obj *v1alpha1.FailoverService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchFailoverService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchFailoverService indicates an expected call of PatchFailoverService.
func (mr *MockFailoverServiceWriterMockRecorder) PatchFailoverService(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFailoverService", reflect.TypeOf((*MockFailoverServiceWriter)(nil).PatchFailoverService), varargs...)
}

// DeleteAllOfFailoverService mocks base method.
func (m *MockFailoverServiceWriter) DeleteAllOfFailoverService(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfFailoverService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfFailoverService indicates an expected call of DeleteAllOfFailoverService.
func (mr *MockFailoverServiceWriterMockRecorder) DeleteAllOfFailoverService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfFailoverService", reflect.TypeOf((*MockFailoverServiceWriter)(nil).DeleteAllOfFailoverService), varargs...)
}

// UpsertFailoverService mocks base method.
func (m *MockFailoverServiceWriter) UpsertFailoverService(ctx context.Context, obj *v1alpha1.FailoverService, transitionFuncs ...v1alpha1.FailoverServiceTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertFailoverService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertFailoverService indicates an expected call of UpsertFailoverService.
func (mr *MockFailoverServiceWriterMockRecorder) UpsertFailoverService(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertFailoverService", reflect.TypeOf((*MockFailoverServiceWriter)(nil).UpsertFailoverService), varargs...)
}

// MockFailoverServiceStatusWriter is a mock of FailoverServiceStatusWriter interface.
type MockFailoverServiceStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverServiceStatusWriterMockRecorder
}

// MockFailoverServiceStatusWriterMockRecorder is the mock recorder for MockFailoverServiceStatusWriter.
type MockFailoverServiceStatusWriterMockRecorder struct {
	mock *MockFailoverServiceStatusWriter
}

// NewMockFailoverServiceStatusWriter creates a new mock instance.
func NewMockFailoverServiceStatusWriter(ctrl *gomock.Controller) *MockFailoverServiceStatusWriter {
	mock := &MockFailoverServiceStatusWriter{ctrl: ctrl}
	mock.recorder = &MockFailoverServiceStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverServiceStatusWriter) EXPECT() *MockFailoverServiceStatusWriterMockRecorder {
	return m.recorder
}

// UpdateFailoverServiceStatus mocks base method.
func (m *MockFailoverServiceStatusWriter) UpdateFailoverServiceStatus(ctx context.Context, obj *v1alpha1.FailoverService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFailoverServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFailoverServiceStatus indicates an expected call of UpdateFailoverServiceStatus.
func (mr *MockFailoverServiceStatusWriterMockRecorder) UpdateFailoverServiceStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFailoverServiceStatus", reflect.TypeOf((*MockFailoverServiceStatusWriter)(nil).UpdateFailoverServiceStatus), varargs...)
}

// PatchFailoverServiceStatus mocks base method.
func (m *MockFailoverServiceStatusWriter) PatchFailoverServiceStatus(ctx context.Context, obj *v1alpha1.FailoverService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchFailoverServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchFailoverServiceStatus indicates an expected call of PatchFailoverServiceStatus.
func (mr *MockFailoverServiceStatusWriterMockRecorder) PatchFailoverServiceStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFailoverServiceStatus", reflect.TypeOf((*MockFailoverServiceStatusWriter)(nil).PatchFailoverServiceStatus), varargs...)
}

// MockFailoverServiceClient is a mock of FailoverServiceClient interface.
type MockFailoverServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverServiceClientMockRecorder
}

// MockFailoverServiceClientMockRecorder is the mock recorder for MockFailoverServiceClient.
type MockFailoverServiceClientMockRecorder struct {
	mock *MockFailoverServiceClient
}

// NewMockFailoverServiceClient creates a new mock instance.
func NewMockFailoverServiceClient(ctrl *gomock.Controller) *MockFailoverServiceClient {
	mock := &MockFailoverServiceClient{ctrl: ctrl}
	mock.recorder = &MockFailoverServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverServiceClient) EXPECT() *MockFailoverServiceClientMockRecorder {
	return m.recorder
}

// GetFailoverService mocks base method.
func (m *MockFailoverServiceClient) GetFailoverService(ctx context.Context, key client.ObjectKey) (*v1alpha1.FailoverService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailoverService", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.FailoverService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailoverService indicates an expected call of GetFailoverService.
func (mr *MockFailoverServiceClientMockRecorder) GetFailoverService(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailoverService", reflect.TypeOf((*MockFailoverServiceClient)(nil).GetFailoverService), ctx, key)
}

// ListFailoverService mocks base method.
func (m *MockFailoverServiceClient) ListFailoverService(ctx context.Context, opts ...client.ListOption) (*v1alpha1.FailoverServiceList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFailoverService", varargs...)
	ret0, _ := ret[0].(*v1alpha1.FailoverServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFailoverService indicates an expected call of ListFailoverService.
func (mr *MockFailoverServiceClientMockRecorder) ListFailoverService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFailoverService", reflect.TypeOf((*MockFailoverServiceClient)(nil).ListFailoverService), varargs...)
}

// CreateFailoverService mocks base method.
func (m *MockFailoverServiceClient) CreateFailoverService(ctx context.Context, obj *v1alpha1.FailoverService, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFailoverService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFailoverService indicates an expected call of CreateFailoverService.
func (mr *MockFailoverServiceClientMockRecorder) CreateFailoverService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFailoverService", reflect.TypeOf((*MockFailoverServiceClient)(nil).CreateFailoverService), varargs...)
}

// DeleteFailoverService mocks base method.
func (m *MockFailoverServiceClient) DeleteFailoverService(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFailoverService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFailoverService indicates an expected call of DeleteFailoverService.
func (mr *MockFailoverServiceClientMockRecorder) DeleteFailoverService(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFailoverService", reflect.TypeOf((*MockFailoverServiceClient)(nil).DeleteFailoverService), varargs...)
}

// UpdateFailoverService mocks base method.
func (m *MockFailoverServiceClient) UpdateFailoverService(ctx context.Context, obj *v1alpha1.FailoverService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFailoverService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFailoverService indicates an expected call of UpdateFailoverService.
func (mr *MockFailoverServiceClientMockRecorder) UpdateFailoverService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFailoverService", reflect.TypeOf((*MockFailoverServiceClient)(nil).UpdateFailoverService), varargs...)
}

// PatchFailoverService mocks base method.
func (m *MockFailoverServiceClient) PatchFailoverService(ctx context.Context, obj *v1alpha1.FailoverService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchFailoverService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchFailoverService indicates an expected call of PatchFailoverService.
func (mr *MockFailoverServiceClientMockRecorder) PatchFailoverService(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFailoverService", reflect.TypeOf((*MockFailoverServiceClient)(nil).PatchFailoverService), varargs...)
}

// DeleteAllOfFailoverService mocks base method.
func (m *MockFailoverServiceClient) DeleteAllOfFailoverService(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfFailoverService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfFailoverService indicates an expected call of DeleteAllOfFailoverService.
func (mr *MockFailoverServiceClientMockRecorder) DeleteAllOfFailoverService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfFailoverService", reflect.TypeOf((*MockFailoverServiceClient)(nil).DeleteAllOfFailoverService), varargs...)
}

// UpsertFailoverService mocks base method.
func (m *MockFailoverServiceClient) UpsertFailoverService(ctx context.Context, obj *v1alpha1.FailoverService, transitionFuncs ...v1alpha1.FailoverServiceTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertFailoverService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertFailoverService indicates an expected call of UpsertFailoverService.
func (mr *MockFailoverServiceClientMockRecorder) UpsertFailoverService(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertFailoverService", reflect.TypeOf((*MockFailoverServiceClient)(nil).UpsertFailoverService), varargs...)
}

// UpdateFailoverServiceStatus mocks base method.
func (m *MockFailoverServiceClient) UpdateFailoverServiceStatus(ctx context.Context, obj *v1alpha1.FailoverService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFailoverServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFailoverServiceStatus indicates an expected call of UpdateFailoverServiceStatus.
func (mr *MockFailoverServiceClientMockRecorder) UpdateFailoverServiceStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFailoverServiceStatus", reflect.TypeOf((*MockFailoverServiceClient)(nil).UpdateFailoverServiceStatus), varargs...)
}

// PatchFailoverServiceStatus mocks base method.
func (m *MockFailoverServiceClient) PatchFailoverServiceStatus(ctx context.Context, obj *v1alpha1.FailoverService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchFailoverServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchFailoverServiceStatus indicates an expected call of PatchFailoverServiceStatus.
func (mr *MockFailoverServiceClientMockRecorder) PatchFailoverServiceStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFailoverServiceStatus", reflect.TypeOf((*MockFailoverServiceClient)(nil).PatchFailoverServiceStatus), varargs...)
}

// MockMulticlusterFailoverServiceClient is a mock of MulticlusterFailoverServiceClient interface.
type MockMulticlusterFailoverServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterFailoverServiceClientMockRecorder
}

// MockMulticlusterFailoverServiceClientMockRecorder is the mock recorder for MockMulticlusterFailoverServiceClient.
type MockMulticlusterFailoverServiceClientMockRecorder struct {
	mock *MockMulticlusterFailoverServiceClient
}

// NewMockMulticlusterFailoverServiceClient creates a new mock instance.
func NewMockMulticlusterFailoverServiceClient(ctrl *gomock.Controller) *MockMulticlusterFailoverServiceClient {
	mock := &MockMulticlusterFailoverServiceClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterFailoverServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterFailoverServiceClient) EXPECT() *MockMulticlusterFailoverServiceClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterFailoverServiceClient) Cluster(cluster string) (v1alpha1.FailoverServiceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.FailoverServiceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterFailoverServiceClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterFailoverServiceClient)(nil).Cluster), cluster)
}
