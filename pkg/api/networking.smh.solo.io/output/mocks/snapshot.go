// Code generated by MockGen. DO NOT EDIT.
// Source: ./snapshot.go

// Package mock_output is a generated GoMock package.
package mock_output

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha3sets "github.com/solo-io/external-apis/pkg/api/istio/networking.istio.io/v1alpha3/sets"
	v1beta1sets "github.com/solo-io/external-apis/pkg/api/istio/security.istio.io/v1beta1/sets"
	v1alpha2sets "github.com/solo-io/service-mesh-hub/pkg/api/certificates.smh.solo.io/v1alpha2/sets"
	output "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/output"
	output0 "github.com/solo-io/skv2/contrib/pkg/output"
	multicluster "github.com/solo-io/skv2/pkg/multicluster"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockSnapshot is a mock of Snapshot interface.
type MockSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMockRecorder
}

// MockSnapshotMockRecorder is the mock recorder for MockSnapshot.
type MockSnapshotMockRecorder struct {
	mock *MockSnapshot
}

// NewMockSnapshot creates a new mock instance.
func NewMockSnapshot(ctrl *gomock.Controller) *MockSnapshot {
	mock := &MockSnapshot{ctrl: ctrl}
	mock.recorder = &MockSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshot) EXPECT() *MockSnapshotMockRecorder {
	return m.recorder
}

// IssuedCertificates mocks base method.
func (m *MockSnapshot) IssuedCertificates() []output.LabeledIssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuedCertificates")
	ret0, _ := ret[0].([]output.LabeledIssuedCertificateSet)
	return ret0
}

// IssuedCertificates indicates an expected call of IssuedCertificates.
func (mr *MockSnapshotMockRecorder) IssuedCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuedCertificates", reflect.TypeOf((*MockSnapshot)(nil).IssuedCertificates))
}

// DestinationRules mocks base method.
func (m *MockSnapshot) DestinationRules() []output.LabeledDestinationRuleSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestinationRules")
	ret0, _ := ret[0].([]output.LabeledDestinationRuleSet)
	return ret0
}

// DestinationRules indicates an expected call of DestinationRules.
func (mr *MockSnapshotMockRecorder) DestinationRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestinationRules", reflect.TypeOf((*MockSnapshot)(nil).DestinationRules))
}

// EnvoyFilters mocks base method.
func (m *MockSnapshot) EnvoyFilters() []output.LabeledEnvoyFilterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvoyFilters")
	ret0, _ := ret[0].([]output.LabeledEnvoyFilterSet)
	return ret0
}

// EnvoyFilters indicates an expected call of EnvoyFilters.
func (mr *MockSnapshotMockRecorder) EnvoyFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvoyFilters", reflect.TypeOf((*MockSnapshot)(nil).EnvoyFilters))
}

// Gateways mocks base method.
func (m *MockSnapshot) Gateways() []output.LabeledGatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gateways")
	ret0, _ := ret[0].([]output.LabeledGatewaySet)
	return ret0
}

// Gateways indicates an expected call of Gateways.
func (mr *MockSnapshotMockRecorder) Gateways() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gateways", reflect.TypeOf((*MockSnapshot)(nil).Gateways))
}

// ServiceEntries mocks base method.
func (m *MockSnapshot) ServiceEntries() []output.LabeledServiceEntrySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceEntries")
	ret0, _ := ret[0].([]output.LabeledServiceEntrySet)
	return ret0
}

// ServiceEntries indicates an expected call of ServiceEntries.
func (mr *MockSnapshotMockRecorder) ServiceEntries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceEntries", reflect.TypeOf((*MockSnapshot)(nil).ServiceEntries))
}

// VirtualServices mocks base method.
func (m *MockSnapshot) VirtualServices() []output.LabeledVirtualServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualServices")
	ret0, _ := ret[0].([]output.LabeledVirtualServiceSet)
	return ret0
}

// VirtualServices indicates an expected call of VirtualServices.
func (mr *MockSnapshotMockRecorder) VirtualServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualServices", reflect.TypeOf((*MockSnapshot)(nil).VirtualServices))
}

// AuthorizationPolicies mocks base method.
func (m *MockSnapshot) AuthorizationPolicies() []output.LabeledAuthorizationPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizationPolicies")
	ret0, _ := ret[0].([]output.LabeledAuthorizationPolicySet)
	return ret0
}

// AuthorizationPolicies indicates an expected call of AuthorizationPolicies.
func (mr *MockSnapshotMockRecorder) AuthorizationPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizationPolicies", reflect.TypeOf((*MockSnapshot)(nil).AuthorizationPolicies))
}

// ApplyLocalCluster mocks base method.
func (m *MockSnapshot) ApplyLocalCluster(ctx context.Context, clusterClient client.Client, errHandler output0.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyLocalCluster", ctx, clusterClient, errHandler)
}

// ApplyLocalCluster indicates an expected call of ApplyLocalCluster.
func (mr *MockSnapshotMockRecorder) ApplyLocalCluster(ctx, clusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyLocalCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyLocalCluster), ctx, clusterClient, errHandler)
}

// ApplyMultiCluster mocks base method.
func (m *MockSnapshot) ApplyMultiCluster(ctx context.Context, multiClusterClient multicluster.Client, errHandler output0.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyMultiCluster", ctx, multiClusterClient, errHandler)
}

// ApplyMultiCluster indicates an expected call of ApplyMultiCluster.
func (mr *MockSnapshotMockRecorder) ApplyMultiCluster(ctx, multiClusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyMultiCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyMultiCluster), ctx, multiClusterClient, errHandler)
}

// MarshalJSON mocks base method.
func (m *MockSnapshot) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON.
func (mr *MockSnapshotMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockSnapshot)(nil).MarshalJSON))
}

// MockLabeledIssuedCertificateSet is a mock of LabeledIssuedCertificateSet interface.
type MockLabeledIssuedCertificateSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledIssuedCertificateSetMockRecorder
}

// MockLabeledIssuedCertificateSetMockRecorder is the mock recorder for MockLabeledIssuedCertificateSet.
type MockLabeledIssuedCertificateSetMockRecorder struct {
	mock *MockLabeledIssuedCertificateSet
}

// NewMockLabeledIssuedCertificateSet creates a new mock instance.
func NewMockLabeledIssuedCertificateSet(ctrl *gomock.Controller) *MockLabeledIssuedCertificateSet {
	mock := &MockLabeledIssuedCertificateSet{ctrl: ctrl}
	mock.recorder = &MockLabeledIssuedCertificateSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLabeledIssuedCertificateSet) EXPECT() *MockLabeledIssuedCertificateSetMockRecorder {
	return m.recorder
}

// Labels mocks base method.
func (m *MockLabeledIssuedCertificateSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels.
func (mr *MockLabeledIssuedCertificateSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledIssuedCertificateSet)(nil).Labels))
}

// Set mocks base method.
func (m *MockLabeledIssuedCertificateSet) Set() v1alpha2sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha2sets.IssuedCertificateSet)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockLabeledIssuedCertificateSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledIssuedCertificateSet)(nil).Set))
}

// Generic mocks base method.
func (m *MockLabeledIssuedCertificateSet) Generic() output0.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output0.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockLabeledIssuedCertificateSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledIssuedCertificateSet)(nil).Generic))
}

// MockLabeledDestinationRuleSet is a mock of LabeledDestinationRuleSet interface.
type MockLabeledDestinationRuleSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledDestinationRuleSetMockRecorder
}

// MockLabeledDestinationRuleSetMockRecorder is the mock recorder for MockLabeledDestinationRuleSet.
type MockLabeledDestinationRuleSetMockRecorder struct {
	mock *MockLabeledDestinationRuleSet
}

// NewMockLabeledDestinationRuleSet creates a new mock instance.
func NewMockLabeledDestinationRuleSet(ctrl *gomock.Controller) *MockLabeledDestinationRuleSet {
	mock := &MockLabeledDestinationRuleSet{ctrl: ctrl}
	mock.recorder = &MockLabeledDestinationRuleSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLabeledDestinationRuleSet) EXPECT() *MockLabeledDestinationRuleSetMockRecorder {
	return m.recorder
}

// Labels mocks base method.
func (m *MockLabeledDestinationRuleSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels.
func (mr *MockLabeledDestinationRuleSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledDestinationRuleSet)(nil).Labels))
}

// Set mocks base method.
func (m *MockLabeledDestinationRuleSet) Set() v1alpha3sets.DestinationRuleSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.DestinationRuleSet)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockLabeledDestinationRuleSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledDestinationRuleSet)(nil).Set))
}

// Generic mocks base method.
func (m *MockLabeledDestinationRuleSet) Generic() output0.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output0.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockLabeledDestinationRuleSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledDestinationRuleSet)(nil).Generic))
}

// MockLabeledEnvoyFilterSet is a mock of LabeledEnvoyFilterSet interface.
type MockLabeledEnvoyFilterSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledEnvoyFilterSetMockRecorder
}

// MockLabeledEnvoyFilterSetMockRecorder is the mock recorder for MockLabeledEnvoyFilterSet.
type MockLabeledEnvoyFilterSetMockRecorder struct {
	mock *MockLabeledEnvoyFilterSet
}

// NewMockLabeledEnvoyFilterSet creates a new mock instance.
func NewMockLabeledEnvoyFilterSet(ctrl *gomock.Controller) *MockLabeledEnvoyFilterSet {
	mock := &MockLabeledEnvoyFilterSet{ctrl: ctrl}
	mock.recorder = &MockLabeledEnvoyFilterSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLabeledEnvoyFilterSet) EXPECT() *MockLabeledEnvoyFilterSetMockRecorder {
	return m.recorder
}

// Labels mocks base method.
func (m *MockLabeledEnvoyFilterSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels.
func (mr *MockLabeledEnvoyFilterSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledEnvoyFilterSet)(nil).Labels))
}

// Set mocks base method.
func (m *MockLabeledEnvoyFilterSet) Set() v1alpha3sets.EnvoyFilterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.EnvoyFilterSet)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockLabeledEnvoyFilterSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledEnvoyFilterSet)(nil).Set))
}

// Generic mocks base method.
func (m *MockLabeledEnvoyFilterSet) Generic() output0.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output0.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockLabeledEnvoyFilterSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledEnvoyFilterSet)(nil).Generic))
}

// MockLabeledGatewaySet is a mock of LabeledGatewaySet interface.
type MockLabeledGatewaySet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledGatewaySetMockRecorder
}

// MockLabeledGatewaySetMockRecorder is the mock recorder for MockLabeledGatewaySet.
type MockLabeledGatewaySetMockRecorder struct {
	mock *MockLabeledGatewaySet
}

// NewMockLabeledGatewaySet creates a new mock instance.
func NewMockLabeledGatewaySet(ctrl *gomock.Controller) *MockLabeledGatewaySet {
	mock := &MockLabeledGatewaySet{ctrl: ctrl}
	mock.recorder = &MockLabeledGatewaySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLabeledGatewaySet) EXPECT() *MockLabeledGatewaySetMockRecorder {
	return m.recorder
}

// Labels mocks base method.
func (m *MockLabeledGatewaySet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels.
func (mr *MockLabeledGatewaySetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledGatewaySet)(nil).Labels))
}

// Set mocks base method.
func (m *MockLabeledGatewaySet) Set() v1alpha3sets.GatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.GatewaySet)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockLabeledGatewaySetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledGatewaySet)(nil).Set))
}

// Generic mocks base method.
func (m *MockLabeledGatewaySet) Generic() output0.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output0.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockLabeledGatewaySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledGatewaySet)(nil).Generic))
}

// MockLabeledServiceEntrySet is a mock of LabeledServiceEntrySet interface.
type MockLabeledServiceEntrySet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledServiceEntrySetMockRecorder
}

// MockLabeledServiceEntrySetMockRecorder is the mock recorder for MockLabeledServiceEntrySet.
type MockLabeledServiceEntrySetMockRecorder struct {
	mock *MockLabeledServiceEntrySet
}

// NewMockLabeledServiceEntrySet creates a new mock instance.
func NewMockLabeledServiceEntrySet(ctrl *gomock.Controller) *MockLabeledServiceEntrySet {
	mock := &MockLabeledServiceEntrySet{ctrl: ctrl}
	mock.recorder = &MockLabeledServiceEntrySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLabeledServiceEntrySet) EXPECT() *MockLabeledServiceEntrySetMockRecorder {
	return m.recorder
}

// Labels mocks base method.
func (m *MockLabeledServiceEntrySet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels.
func (mr *MockLabeledServiceEntrySetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledServiceEntrySet)(nil).Labels))
}

// Set mocks base method.
func (m *MockLabeledServiceEntrySet) Set() v1alpha3sets.ServiceEntrySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.ServiceEntrySet)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockLabeledServiceEntrySetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledServiceEntrySet)(nil).Set))
}

// Generic mocks base method.
func (m *MockLabeledServiceEntrySet) Generic() output0.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output0.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockLabeledServiceEntrySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledServiceEntrySet)(nil).Generic))
}

// MockLabeledVirtualServiceSet is a mock of LabeledVirtualServiceSet interface.
type MockLabeledVirtualServiceSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledVirtualServiceSetMockRecorder
}

// MockLabeledVirtualServiceSetMockRecorder is the mock recorder for MockLabeledVirtualServiceSet.
type MockLabeledVirtualServiceSetMockRecorder struct {
	mock *MockLabeledVirtualServiceSet
}

// NewMockLabeledVirtualServiceSet creates a new mock instance.
func NewMockLabeledVirtualServiceSet(ctrl *gomock.Controller) *MockLabeledVirtualServiceSet {
	mock := &MockLabeledVirtualServiceSet{ctrl: ctrl}
	mock.recorder = &MockLabeledVirtualServiceSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLabeledVirtualServiceSet) EXPECT() *MockLabeledVirtualServiceSetMockRecorder {
	return m.recorder
}

// Labels mocks base method.
func (m *MockLabeledVirtualServiceSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels.
func (mr *MockLabeledVirtualServiceSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledVirtualServiceSet)(nil).Labels))
}

// Set mocks base method.
func (m *MockLabeledVirtualServiceSet) Set() v1alpha3sets.VirtualServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.VirtualServiceSet)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockLabeledVirtualServiceSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledVirtualServiceSet)(nil).Set))
}

// Generic mocks base method.
func (m *MockLabeledVirtualServiceSet) Generic() output0.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output0.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockLabeledVirtualServiceSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledVirtualServiceSet)(nil).Generic))
}

// MockLabeledAuthorizationPolicySet is a mock of LabeledAuthorizationPolicySet interface.
type MockLabeledAuthorizationPolicySet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledAuthorizationPolicySetMockRecorder
}

// MockLabeledAuthorizationPolicySetMockRecorder is the mock recorder for MockLabeledAuthorizationPolicySet.
type MockLabeledAuthorizationPolicySetMockRecorder struct {
	mock *MockLabeledAuthorizationPolicySet
}

// NewMockLabeledAuthorizationPolicySet creates a new mock instance.
func NewMockLabeledAuthorizationPolicySet(ctrl *gomock.Controller) *MockLabeledAuthorizationPolicySet {
	mock := &MockLabeledAuthorizationPolicySet{ctrl: ctrl}
	mock.recorder = &MockLabeledAuthorizationPolicySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLabeledAuthorizationPolicySet) EXPECT() *MockLabeledAuthorizationPolicySetMockRecorder {
	return m.recorder
}

// Labels mocks base method.
func (m *MockLabeledAuthorizationPolicySet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels.
func (mr *MockLabeledAuthorizationPolicySetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledAuthorizationPolicySet)(nil).Labels))
}

// Set mocks base method.
func (m *MockLabeledAuthorizationPolicySet) Set() v1beta1sets.AuthorizationPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1beta1sets.AuthorizationPolicySet)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockLabeledAuthorizationPolicySetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledAuthorizationPolicySet)(nil).Set))
}

// Generic mocks base method.
func (m *MockLabeledAuthorizationPolicySet) Generic() output0.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output0.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockLabeledAuthorizationPolicySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledAuthorizationPolicySet)(nil).Generic))
}
