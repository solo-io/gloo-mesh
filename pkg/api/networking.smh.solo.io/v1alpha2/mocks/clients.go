// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1alpha2 is a generated GoMock package.
package mock_v1alpha2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha2"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1alpha2.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// TrafficPolicies mocks base method.
func (m *MockClientset) TrafficPolicies() v1alpha2.TrafficPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrafficPolicies")
	ret0, _ := ret[0].(v1alpha2.TrafficPolicyClient)
	return ret0
}

// TrafficPolicies indicates an expected call of TrafficPolicies.
func (mr *MockClientsetMockRecorder) TrafficPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrafficPolicies", reflect.TypeOf((*MockClientset)(nil).TrafficPolicies))
}

// AccessPolicies mocks base method.
func (m *MockClientset) AccessPolicies() v1alpha2.AccessPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessPolicies")
	ret0, _ := ret[0].(v1alpha2.AccessPolicyClient)
	return ret0
}

// AccessPolicies indicates an expected call of AccessPolicies.
func (mr *MockClientsetMockRecorder) AccessPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessPolicies", reflect.TypeOf((*MockClientset)(nil).AccessPolicies))
}

// VirtualMeshes mocks base method.
func (m *MockClientset) VirtualMeshes() v1alpha2.VirtualMeshClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMeshes")
	ret0, _ := ret[0].(v1alpha2.VirtualMeshClient)
	return ret0
}

// VirtualMeshes indicates an expected call of VirtualMeshes.
func (mr *MockClientsetMockRecorder) VirtualMeshes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMeshes", reflect.TypeOf((*MockClientset)(nil).VirtualMeshes))
}

// MockTrafficPolicyReader is a mock of TrafficPolicyReader interface.
type MockTrafficPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficPolicyReaderMockRecorder
}

// MockTrafficPolicyReaderMockRecorder is the mock recorder for MockTrafficPolicyReader.
type MockTrafficPolicyReaderMockRecorder struct {
	mock *MockTrafficPolicyReader
}

// NewMockTrafficPolicyReader creates a new mock instance.
func NewMockTrafficPolicyReader(ctrl *gomock.Controller) *MockTrafficPolicyReader {
	mock := &MockTrafficPolicyReader{ctrl: ctrl}
	mock.recorder = &MockTrafficPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficPolicyReader) EXPECT() *MockTrafficPolicyReaderMockRecorder {
	return m.recorder
}

// GetTrafficPolicy mocks base method.
func (m *MockTrafficPolicyReader) GetTrafficPolicy(ctx context.Context, key client.ObjectKey) (*v1alpha2.TrafficPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrafficPolicy", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.TrafficPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrafficPolicy indicates an expected call of GetTrafficPolicy.
func (mr *MockTrafficPolicyReaderMockRecorder) GetTrafficPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyReader)(nil).GetTrafficPolicy), ctx, key)
}

// ListTrafficPolicy mocks base method.
func (m *MockTrafficPolicyReader) ListTrafficPolicy(ctx context.Context, opts ...client.ListOption) (*v1alpha2.TrafficPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrafficPolicy", varargs...)
	ret0, _ := ret[0].(*v1alpha2.TrafficPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrafficPolicy indicates an expected call of ListTrafficPolicy.
func (mr *MockTrafficPolicyReaderMockRecorder) ListTrafficPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyReader)(nil).ListTrafficPolicy), varargs...)
}

// MockTrafficPolicyWriter is a mock of TrafficPolicyWriter interface.
type MockTrafficPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficPolicyWriterMockRecorder
}

// MockTrafficPolicyWriterMockRecorder is the mock recorder for MockTrafficPolicyWriter.
type MockTrafficPolicyWriterMockRecorder struct {
	mock *MockTrafficPolicyWriter
}

// NewMockTrafficPolicyWriter creates a new mock instance.
func NewMockTrafficPolicyWriter(ctrl *gomock.Controller) *MockTrafficPolicyWriter {
	mock := &MockTrafficPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockTrafficPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficPolicyWriter) EXPECT() *MockTrafficPolicyWriterMockRecorder {
	return m.recorder
}

// CreateTrafficPolicy mocks base method.
func (m *MockTrafficPolicyWriter) CreateTrafficPolicy(ctx context.Context, obj *v1alpha2.TrafficPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrafficPolicy indicates an expected call of CreateTrafficPolicy.
func (mr *MockTrafficPolicyWriterMockRecorder) CreateTrafficPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyWriter)(nil).CreateTrafficPolicy), varargs...)
}

// DeleteTrafficPolicy mocks base method.
func (m *MockTrafficPolicyWriter) DeleteTrafficPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrafficPolicy indicates an expected call of DeleteTrafficPolicy.
func (mr *MockTrafficPolicyWriterMockRecorder) DeleteTrafficPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyWriter)(nil).DeleteTrafficPolicy), varargs...)
}

// UpdateTrafficPolicy mocks base method.
func (m *MockTrafficPolicyWriter) UpdateTrafficPolicy(ctx context.Context, obj *v1alpha2.TrafficPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficPolicy indicates an expected call of UpdateTrafficPolicy.
func (mr *MockTrafficPolicyWriterMockRecorder) UpdateTrafficPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyWriter)(nil).UpdateTrafficPolicy), varargs...)
}

// PatchTrafficPolicy mocks base method.
func (m *MockTrafficPolicyWriter) PatchTrafficPolicy(ctx context.Context, obj *v1alpha2.TrafficPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficPolicy indicates an expected call of PatchTrafficPolicy.
func (mr *MockTrafficPolicyWriterMockRecorder) PatchTrafficPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyWriter)(nil).PatchTrafficPolicy), varargs...)
}

// DeleteAllOfTrafficPolicy mocks base method.
func (m *MockTrafficPolicyWriter) DeleteAllOfTrafficPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTrafficPolicy indicates an expected call of DeleteAllOfTrafficPolicy.
func (mr *MockTrafficPolicyWriterMockRecorder) DeleteAllOfTrafficPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyWriter)(nil).DeleteAllOfTrafficPolicy), varargs...)
}

// UpsertTrafficPolicy mocks base method.
func (m *MockTrafficPolicyWriter) UpsertTrafficPolicy(ctx context.Context, obj *v1alpha2.TrafficPolicy, transitionFuncs ...v1alpha2.TrafficPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTrafficPolicy indicates an expected call of UpsertTrafficPolicy.
func (mr *MockTrafficPolicyWriterMockRecorder) UpsertTrafficPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyWriter)(nil).UpsertTrafficPolicy), varargs...)
}

// MockTrafficPolicyStatusWriter is a mock of TrafficPolicyStatusWriter interface.
type MockTrafficPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficPolicyStatusWriterMockRecorder
}

// MockTrafficPolicyStatusWriterMockRecorder is the mock recorder for MockTrafficPolicyStatusWriter.
type MockTrafficPolicyStatusWriterMockRecorder struct {
	mock *MockTrafficPolicyStatusWriter
}

// NewMockTrafficPolicyStatusWriter creates a new mock instance.
func NewMockTrafficPolicyStatusWriter(ctrl *gomock.Controller) *MockTrafficPolicyStatusWriter {
	mock := &MockTrafficPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockTrafficPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficPolicyStatusWriter) EXPECT() *MockTrafficPolicyStatusWriterMockRecorder {
	return m.recorder
}

// UpdateTrafficPolicyStatus mocks base method.
func (m *MockTrafficPolicyStatusWriter) UpdateTrafficPolicyStatus(ctx context.Context, obj *v1alpha2.TrafficPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficPolicyStatus indicates an expected call of UpdateTrafficPolicyStatus.
func (mr *MockTrafficPolicyStatusWriterMockRecorder) UpdateTrafficPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficPolicyStatus", reflect.TypeOf((*MockTrafficPolicyStatusWriter)(nil).UpdateTrafficPolicyStatus), varargs...)
}

// PatchTrafficPolicyStatus mocks base method.
func (m *MockTrafficPolicyStatusWriter) PatchTrafficPolicyStatus(ctx context.Context, obj *v1alpha2.TrafficPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficPolicyStatus indicates an expected call of PatchTrafficPolicyStatus.
func (mr *MockTrafficPolicyStatusWriterMockRecorder) PatchTrafficPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficPolicyStatus", reflect.TypeOf((*MockTrafficPolicyStatusWriter)(nil).PatchTrafficPolicyStatus), varargs...)
}

// MockTrafficPolicyClient is a mock of TrafficPolicyClient interface.
type MockTrafficPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficPolicyClientMockRecorder
}

// MockTrafficPolicyClientMockRecorder is the mock recorder for MockTrafficPolicyClient.
type MockTrafficPolicyClientMockRecorder struct {
	mock *MockTrafficPolicyClient
}

// NewMockTrafficPolicyClient creates a new mock instance.
func NewMockTrafficPolicyClient(ctrl *gomock.Controller) *MockTrafficPolicyClient {
	mock := &MockTrafficPolicyClient{ctrl: ctrl}
	mock.recorder = &MockTrafficPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficPolicyClient) EXPECT() *MockTrafficPolicyClientMockRecorder {
	return m.recorder
}

// GetTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) GetTrafficPolicy(ctx context.Context, key client.ObjectKey) (*v1alpha2.TrafficPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrafficPolicy", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.TrafficPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrafficPolicy indicates an expected call of GetTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) GetTrafficPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).GetTrafficPolicy), ctx, key)
}

// ListTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) ListTrafficPolicy(ctx context.Context, opts ...client.ListOption) (*v1alpha2.TrafficPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrafficPolicy", varargs...)
	ret0, _ := ret[0].(*v1alpha2.TrafficPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrafficPolicy indicates an expected call of ListTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) ListTrafficPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).ListTrafficPolicy), varargs...)
}

// CreateTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) CreateTrafficPolicy(ctx context.Context, obj *v1alpha2.TrafficPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrafficPolicy indicates an expected call of CreateTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) CreateTrafficPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).CreateTrafficPolicy), varargs...)
}

// DeleteTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) DeleteTrafficPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrafficPolicy indicates an expected call of DeleteTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) DeleteTrafficPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).DeleteTrafficPolicy), varargs...)
}

// UpdateTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) UpdateTrafficPolicy(ctx context.Context, obj *v1alpha2.TrafficPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficPolicy indicates an expected call of UpdateTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) UpdateTrafficPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).UpdateTrafficPolicy), varargs...)
}

// PatchTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) PatchTrafficPolicy(ctx context.Context, obj *v1alpha2.TrafficPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficPolicy indicates an expected call of PatchTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) PatchTrafficPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).PatchTrafficPolicy), varargs...)
}

// DeleteAllOfTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) DeleteAllOfTrafficPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTrafficPolicy indicates an expected call of DeleteAllOfTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) DeleteAllOfTrafficPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).DeleteAllOfTrafficPolicy), varargs...)
}

// UpsertTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) UpsertTrafficPolicy(ctx context.Context, obj *v1alpha2.TrafficPolicy, transitionFuncs ...v1alpha2.TrafficPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTrafficPolicy indicates an expected call of UpsertTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) UpsertTrafficPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).UpsertTrafficPolicy), varargs...)
}

// UpdateTrafficPolicyStatus mocks base method.
func (m *MockTrafficPolicyClient) UpdateTrafficPolicyStatus(ctx context.Context, obj *v1alpha2.TrafficPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficPolicyStatus indicates an expected call of UpdateTrafficPolicyStatus.
func (mr *MockTrafficPolicyClientMockRecorder) UpdateTrafficPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficPolicyStatus", reflect.TypeOf((*MockTrafficPolicyClient)(nil).UpdateTrafficPolicyStatus), varargs...)
}

// PatchTrafficPolicyStatus mocks base method.
func (m *MockTrafficPolicyClient) PatchTrafficPolicyStatus(ctx context.Context, obj *v1alpha2.TrafficPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficPolicyStatus indicates an expected call of PatchTrafficPolicyStatus.
func (mr *MockTrafficPolicyClientMockRecorder) PatchTrafficPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficPolicyStatus", reflect.TypeOf((*MockTrafficPolicyClient)(nil).PatchTrafficPolicyStatus), varargs...)
}

// MockMulticlusterTrafficPolicyClient is a mock of MulticlusterTrafficPolicyClient interface.
type MockMulticlusterTrafficPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTrafficPolicyClientMockRecorder
}

// MockMulticlusterTrafficPolicyClientMockRecorder is the mock recorder for MockMulticlusterTrafficPolicyClient.
type MockMulticlusterTrafficPolicyClientMockRecorder struct {
	mock *MockMulticlusterTrafficPolicyClient
}

// NewMockMulticlusterTrafficPolicyClient creates a new mock instance.
func NewMockMulticlusterTrafficPolicyClient(ctrl *gomock.Controller) *MockMulticlusterTrafficPolicyClient {
	mock := &MockMulticlusterTrafficPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTrafficPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTrafficPolicyClient) EXPECT() *MockMulticlusterTrafficPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterTrafficPolicyClient) Cluster(cluster string) (v1alpha2.TrafficPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.TrafficPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterTrafficPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterTrafficPolicyClient)(nil).Cluster), cluster)
}

// MockAccessPolicyReader is a mock of AccessPolicyReader interface.
type MockAccessPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockAccessPolicyReaderMockRecorder
}

// MockAccessPolicyReaderMockRecorder is the mock recorder for MockAccessPolicyReader.
type MockAccessPolicyReaderMockRecorder struct {
	mock *MockAccessPolicyReader
}

// NewMockAccessPolicyReader creates a new mock instance.
func NewMockAccessPolicyReader(ctrl *gomock.Controller) *MockAccessPolicyReader {
	mock := &MockAccessPolicyReader{ctrl: ctrl}
	mock.recorder = &MockAccessPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessPolicyReader) EXPECT() *MockAccessPolicyReaderMockRecorder {
	return m.recorder
}

// GetAccessPolicy mocks base method.
func (m *MockAccessPolicyReader) GetAccessPolicy(ctx context.Context, key client.ObjectKey) (*v1alpha2.AccessPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPolicy", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.AccessPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPolicy indicates an expected call of GetAccessPolicy.
func (mr *MockAccessPolicyReaderMockRecorder) GetAccessPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPolicy", reflect.TypeOf((*MockAccessPolicyReader)(nil).GetAccessPolicy), ctx, key)
}

// ListAccessPolicy mocks base method.
func (m *MockAccessPolicyReader) ListAccessPolicy(ctx context.Context, opts ...client.ListOption) (*v1alpha2.AccessPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessPolicy", varargs...)
	ret0, _ := ret[0].(*v1alpha2.AccessPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessPolicy indicates an expected call of ListAccessPolicy.
func (mr *MockAccessPolicyReaderMockRecorder) ListAccessPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPolicy", reflect.TypeOf((*MockAccessPolicyReader)(nil).ListAccessPolicy), varargs...)
}

// MockAccessPolicyWriter is a mock of AccessPolicyWriter interface.
type MockAccessPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockAccessPolicyWriterMockRecorder
}

// MockAccessPolicyWriterMockRecorder is the mock recorder for MockAccessPolicyWriter.
type MockAccessPolicyWriterMockRecorder struct {
	mock *MockAccessPolicyWriter
}

// NewMockAccessPolicyWriter creates a new mock instance.
func NewMockAccessPolicyWriter(ctrl *gomock.Controller) *MockAccessPolicyWriter {
	mock := &MockAccessPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockAccessPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessPolicyWriter) EXPECT() *MockAccessPolicyWriterMockRecorder {
	return m.recorder
}

// CreateAccessPolicy mocks base method.
func (m *MockAccessPolicyWriter) CreateAccessPolicy(ctx context.Context, obj *v1alpha2.AccessPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccessPolicy indicates an expected call of CreateAccessPolicy.
func (mr *MockAccessPolicyWriterMockRecorder) CreateAccessPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPolicy", reflect.TypeOf((*MockAccessPolicyWriter)(nil).CreateAccessPolicy), varargs...)
}

// DeleteAccessPolicy mocks base method.
func (m *MockAccessPolicyWriter) DeleteAccessPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessPolicy indicates an expected call of DeleteAccessPolicy.
func (mr *MockAccessPolicyWriterMockRecorder) DeleteAccessPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPolicy", reflect.TypeOf((*MockAccessPolicyWriter)(nil).DeleteAccessPolicy), varargs...)
}

// UpdateAccessPolicy mocks base method.
func (m *MockAccessPolicyWriter) UpdateAccessPolicy(ctx context.Context, obj *v1alpha2.AccessPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessPolicy indicates an expected call of UpdateAccessPolicy.
func (mr *MockAccessPolicyWriterMockRecorder) UpdateAccessPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessPolicy", reflect.TypeOf((*MockAccessPolicyWriter)(nil).UpdateAccessPolicy), varargs...)
}

// PatchAccessPolicy mocks base method.
func (m *MockAccessPolicyWriter) PatchAccessPolicy(ctx context.Context, obj *v1alpha2.AccessPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchAccessPolicy indicates an expected call of PatchAccessPolicy.
func (mr *MockAccessPolicyWriterMockRecorder) PatchAccessPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAccessPolicy", reflect.TypeOf((*MockAccessPolicyWriter)(nil).PatchAccessPolicy), varargs...)
}

// DeleteAllOfAccessPolicy mocks base method.
func (m *MockAccessPolicyWriter) DeleteAllOfAccessPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfAccessPolicy indicates an expected call of DeleteAllOfAccessPolicy.
func (mr *MockAccessPolicyWriterMockRecorder) DeleteAllOfAccessPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfAccessPolicy", reflect.TypeOf((*MockAccessPolicyWriter)(nil).DeleteAllOfAccessPolicy), varargs...)
}

// UpsertAccessPolicy mocks base method.
func (m *MockAccessPolicyWriter) UpsertAccessPolicy(ctx context.Context, obj *v1alpha2.AccessPolicy, transitionFuncs ...v1alpha2.AccessPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAccessPolicy indicates an expected call of UpsertAccessPolicy.
func (mr *MockAccessPolicyWriterMockRecorder) UpsertAccessPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAccessPolicy", reflect.TypeOf((*MockAccessPolicyWriter)(nil).UpsertAccessPolicy), varargs...)
}

// MockAccessPolicyStatusWriter is a mock of AccessPolicyStatusWriter interface.
type MockAccessPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockAccessPolicyStatusWriterMockRecorder
}

// MockAccessPolicyStatusWriterMockRecorder is the mock recorder for MockAccessPolicyStatusWriter.
type MockAccessPolicyStatusWriterMockRecorder struct {
	mock *MockAccessPolicyStatusWriter
}

// NewMockAccessPolicyStatusWriter creates a new mock instance.
func NewMockAccessPolicyStatusWriter(ctrl *gomock.Controller) *MockAccessPolicyStatusWriter {
	mock := &MockAccessPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockAccessPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessPolicyStatusWriter) EXPECT() *MockAccessPolicyStatusWriterMockRecorder {
	return m.recorder
}

// UpdateAccessPolicyStatus mocks base method.
func (m *MockAccessPolicyStatusWriter) UpdateAccessPolicyStatus(ctx context.Context, obj *v1alpha2.AccessPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessPolicyStatus indicates an expected call of UpdateAccessPolicyStatus.
func (mr *MockAccessPolicyStatusWriterMockRecorder) UpdateAccessPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessPolicyStatus", reflect.TypeOf((*MockAccessPolicyStatusWriter)(nil).UpdateAccessPolicyStatus), varargs...)
}

// PatchAccessPolicyStatus mocks base method.
func (m *MockAccessPolicyStatusWriter) PatchAccessPolicyStatus(ctx context.Context, obj *v1alpha2.AccessPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAccessPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchAccessPolicyStatus indicates an expected call of PatchAccessPolicyStatus.
func (mr *MockAccessPolicyStatusWriterMockRecorder) PatchAccessPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAccessPolicyStatus", reflect.TypeOf((*MockAccessPolicyStatusWriter)(nil).PatchAccessPolicyStatus), varargs...)
}

// MockAccessPolicyClient is a mock of AccessPolicyClient interface.
type MockAccessPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccessPolicyClientMockRecorder
}

// MockAccessPolicyClientMockRecorder is the mock recorder for MockAccessPolicyClient.
type MockAccessPolicyClientMockRecorder struct {
	mock *MockAccessPolicyClient
}

// NewMockAccessPolicyClient creates a new mock instance.
func NewMockAccessPolicyClient(ctrl *gomock.Controller) *MockAccessPolicyClient {
	mock := &MockAccessPolicyClient{ctrl: ctrl}
	mock.recorder = &MockAccessPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessPolicyClient) EXPECT() *MockAccessPolicyClientMockRecorder {
	return m.recorder
}

// GetAccessPolicy mocks base method.
func (m *MockAccessPolicyClient) GetAccessPolicy(ctx context.Context, key client.ObjectKey) (*v1alpha2.AccessPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPolicy", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.AccessPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPolicy indicates an expected call of GetAccessPolicy.
func (mr *MockAccessPolicyClientMockRecorder) GetAccessPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPolicy", reflect.TypeOf((*MockAccessPolicyClient)(nil).GetAccessPolicy), ctx, key)
}

// ListAccessPolicy mocks base method.
func (m *MockAccessPolicyClient) ListAccessPolicy(ctx context.Context, opts ...client.ListOption) (*v1alpha2.AccessPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessPolicy", varargs...)
	ret0, _ := ret[0].(*v1alpha2.AccessPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessPolicy indicates an expected call of ListAccessPolicy.
func (mr *MockAccessPolicyClientMockRecorder) ListAccessPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPolicy", reflect.TypeOf((*MockAccessPolicyClient)(nil).ListAccessPolicy), varargs...)
}

// CreateAccessPolicy mocks base method.
func (m *MockAccessPolicyClient) CreateAccessPolicy(ctx context.Context, obj *v1alpha2.AccessPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccessPolicy indicates an expected call of CreateAccessPolicy.
func (mr *MockAccessPolicyClientMockRecorder) CreateAccessPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPolicy", reflect.TypeOf((*MockAccessPolicyClient)(nil).CreateAccessPolicy), varargs...)
}

// DeleteAccessPolicy mocks base method.
func (m *MockAccessPolicyClient) DeleteAccessPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessPolicy indicates an expected call of DeleteAccessPolicy.
func (mr *MockAccessPolicyClientMockRecorder) DeleteAccessPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPolicy", reflect.TypeOf((*MockAccessPolicyClient)(nil).DeleteAccessPolicy), varargs...)
}

// UpdateAccessPolicy mocks base method.
func (m *MockAccessPolicyClient) UpdateAccessPolicy(ctx context.Context, obj *v1alpha2.AccessPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessPolicy indicates an expected call of UpdateAccessPolicy.
func (mr *MockAccessPolicyClientMockRecorder) UpdateAccessPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessPolicy", reflect.TypeOf((*MockAccessPolicyClient)(nil).UpdateAccessPolicy), varargs...)
}

// PatchAccessPolicy mocks base method.
func (m *MockAccessPolicyClient) PatchAccessPolicy(ctx context.Context, obj *v1alpha2.AccessPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchAccessPolicy indicates an expected call of PatchAccessPolicy.
func (mr *MockAccessPolicyClientMockRecorder) PatchAccessPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAccessPolicy", reflect.TypeOf((*MockAccessPolicyClient)(nil).PatchAccessPolicy), varargs...)
}

// DeleteAllOfAccessPolicy mocks base method.
func (m *MockAccessPolicyClient) DeleteAllOfAccessPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfAccessPolicy indicates an expected call of DeleteAllOfAccessPolicy.
func (mr *MockAccessPolicyClientMockRecorder) DeleteAllOfAccessPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfAccessPolicy", reflect.TypeOf((*MockAccessPolicyClient)(nil).DeleteAllOfAccessPolicy), varargs...)
}

// UpsertAccessPolicy mocks base method.
func (m *MockAccessPolicyClient) UpsertAccessPolicy(ctx context.Context, obj *v1alpha2.AccessPolicy, transitionFuncs ...v1alpha2.AccessPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAccessPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAccessPolicy indicates an expected call of UpsertAccessPolicy.
func (mr *MockAccessPolicyClientMockRecorder) UpsertAccessPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAccessPolicy", reflect.TypeOf((*MockAccessPolicyClient)(nil).UpsertAccessPolicy), varargs...)
}

// UpdateAccessPolicyStatus mocks base method.
func (m *MockAccessPolicyClient) UpdateAccessPolicyStatus(ctx context.Context, obj *v1alpha2.AccessPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessPolicyStatus indicates an expected call of UpdateAccessPolicyStatus.
func (mr *MockAccessPolicyClientMockRecorder) UpdateAccessPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessPolicyStatus", reflect.TypeOf((*MockAccessPolicyClient)(nil).UpdateAccessPolicyStatus), varargs...)
}

// PatchAccessPolicyStatus mocks base method.
func (m *MockAccessPolicyClient) PatchAccessPolicyStatus(ctx context.Context, obj *v1alpha2.AccessPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAccessPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchAccessPolicyStatus indicates an expected call of PatchAccessPolicyStatus.
func (mr *MockAccessPolicyClientMockRecorder) PatchAccessPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAccessPolicyStatus", reflect.TypeOf((*MockAccessPolicyClient)(nil).PatchAccessPolicyStatus), varargs...)
}

// MockMulticlusterAccessPolicyClient is a mock of MulticlusterAccessPolicyClient interface.
type MockMulticlusterAccessPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterAccessPolicyClientMockRecorder
}

// MockMulticlusterAccessPolicyClientMockRecorder is the mock recorder for MockMulticlusterAccessPolicyClient.
type MockMulticlusterAccessPolicyClientMockRecorder struct {
	mock *MockMulticlusterAccessPolicyClient
}

// NewMockMulticlusterAccessPolicyClient creates a new mock instance.
func NewMockMulticlusterAccessPolicyClient(ctrl *gomock.Controller) *MockMulticlusterAccessPolicyClient {
	mock := &MockMulticlusterAccessPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterAccessPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterAccessPolicyClient) EXPECT() *MockMulticlusterAccessPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterAccessPolicyClient) Cluster(cluster string) (v1alpha2.AccessPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.AccessPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterAccessPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterAccessPolicyClient)(nil).Cluster), cluster)
}

// MockVirtualMeshReader is a mock of VirtualMeshReader interface.
type MockVirtualMeshReader struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshReaderMockRecorder
}

// MockVirtualMeshReaderMockRecorder is the mock recorder for MockVirtualMeshReader.
type MockVirtualMeshReaderMockRecorder struct {
	mock *MockVirtualMeshReader
}

// NewMockVirtualMeshReader creates a new mock instance.
func NewMockVirtualMeshReader(ctrl *gomock.Controller) *MockVirtualMeshReader {
	mock := &MockVirtualMeshReader{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshReader) EXPECT() *MockVirtualMeshReaderMockRecorder {
	return m.recorder
}

// GetVirtualMesh mocks base method.
func (m *MockVirtualMeshReader) GetVirtualMesh(ctx context.Context, key client.ObjectKey) (*v1alpha2.VirtualMesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMesh", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.VirtualMesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMesh indicates an expected call of GetVirtualMesh.
func (mr *MockVirtualMeshReaderMockRecorder) GetVirtualMesh(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMesh", reflect.TypeOf((*MockVirtualMeshReader)(nil).GetVirtualMesh), ctx, key)
}

// ListVirtualMesh mocks base method.
func (m *MockVirtualMeshReader) ListVirtualMesh(ctx context.Context, opts ...client.ListOption) (*v1alpha2.VirtualMeshList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualMesh", varargs...)
	ret0, _ := ret[0].(*v1alpha2.VirtualMeshList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMesh indicates an expected call of ListVirtualMesh.
func (mr *MockVirtualMeshReaderMockRecorder) ListVirtualMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMesh", reflect.TypeOf((*MockVirtualMeshReader)(nil).ListVirtualMesh), varargs...)
}

// MockVirtualMeshWriter is a mock of VirtualMeshWriter interface.
type MockVirtualMeshWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshWriterMockRecorder
}

// MockVirtualMeshWriterMockRecorder is the mock recorder for MockVirtualMeshWriter.
type MockVirtualMeshWriterMockRecorder struct {
	mock *MockVirtualMeshWriter
}

// NewMockVirtualMeshWriter creates a new mock instance.
func NewMockVirtualMeshWriter(ctrl *gomock.Controller) *MockVirtualMeshWriter {
	mock := &MockVirtualMeshWriter{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshWriter) EXPECT() *MockVirtualMeshWriterMockRecorder {
	return m.recorder
}

// CreateVirtualMesh mocks base method.
func (m *MockVirtualMeshWriter) CreateVirtualMesh(ctx context.Context, obj *v1alpha2.VirtualMesh, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualMesh indicates an expected call of CreateVirtualMesh.
func (mr *MockVirtualMeshWriterMockRecorder) CreateVirtualMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMesh", reflect.TypeOf((*MockVirtualMeshWriter)(nil).CreateVirtualMesh), varargs...)
}

// DeleteVirtualMesh mocks base method.
func (m *MockVirtualMeshWriter) DeleteVirtualMesh(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMesh indicates an expected call of DeleteVirtualMesh.
func (mr *MockVirtualMeshWriterMockRecorder) DeleteVirtualMesh(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMesh", reflect.TypeOf((*MockVirtualMeshWriter)(nil).DeleteVirtualMesh), varargs...)
}

// UpdateVirtualMesh mocks base method.
func (m *MockVirtualMeshWriter) UpdateVirtualMesh(ctx context.Context, obj *v1alpha2.VirtualMesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMesh indicates an expected call of UpdateVirtualMesh.
func (mr *MockVirtualMeshWriterMockRecorder) UpdateVirtualMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMesh", reflect.TypeOf((*MockVirtualMeshWriter)(nil).UpdateVirtualMesh), varargs...)
}

// PatchVirtualMesh mocks base method.
func (m *MockVirtualMeshWriter) PatchVirtualMesh(ctx context.Context, obj *v1alpha2.VirtualMesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMesh indicates an expected call of PatchVirtualMesh.
func (mr *MockVirtualMeshWriterMockRecorder) PatchVirtualMesh(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMesh", reflect.TypeOf((*MockVirtualMeshWriter)(nil).PatchVirtualMesh), varargs...)
}

// DeleteAllOfVirtualMesh mocks base method.
func (m *MockVirtualMeshWriter) DeleteAllOfVirtualMesh(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualMesh indicates an expected call of DeleteAllOfVirtualMesh.
func (mr *MockVirtualMeshWriterMockRecorder) DeleteAllOfVirtualMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualMesh", reflect.TypeOf((*MockVirtualMeshWriter)(nil).DeleteAllOfVirtualMesh), varargs...)
}

// UpsertVirtualMesh mocks base method.
func (m *MockVirtualMeshWriter) UpsertVirtualMesh(ctx context.Context, obj *v1alpha2.VirtualMesh, transitionFuncs ...v1alpha2.VirtualMeshTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualMesh indicates an expected call of UpsertVirtualMesh.
func (mr *MockVirtualMeshWriterMockRecorder) UpsertVirtualMesh(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualMesh", reflect.TypeOf((*MockVirtualMeshWriter)(nil).UpsertVirtualMesh), varargs...)
}

// MockVirtualMeshStatusWriter is a mock of VirtualMeshStatusWriter interface.
type MockVirtualMeshStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshStatusWriterMockRecorder
}

// MockVirtualMeshStatusWriterMockRecorder is the mock recorder for MockVirtualMeshStatusWriter.
type MockVirtualMeshStatusWriterMockRecorder struct {
	mock *MockVirtualMeshStatusWriter
}

// NewMockVirtualMeshStatusWriter creates a new mock instance.
func NewMockVirtualMeshStatusWriter(ctrl *gomock.Controller) *MockVirtualMeshStatusWriter {
	mock := &MockVirtualMeshStatusWriter{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshStatusWriter) EXPECT() *MockVirtualMeshStatusWriterMockRecorder {
	return m.recorder
}

// UpdateVirtualMeshStatus mocks base method.
func (m *MockVirtualMeshStatusWriter) UpdateVirtualMeshStatus(ctx context.Context, obj *v1alpha2.VirtualMesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMeshStatus indicates an expected call of UpdateVirtualMeshStatus.
func (mr *MockVirtualMeshStatusWriterMockRecorder) UpdateVirtualMeshStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMeshStatus", reflect.TypeOf((*MockVirtualMeshStatusWriter)(nil).UpdateVirtualMeshStatus), varargs...)
}

// PatchVirtualMeshStatus mocks base method.
func (m *MockVirtualMeshStatusWriter) PatchVirtualMeshStatus(ctx context.Context, obj *v1alpha2.VirtualMesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMeshStatus indicates an expected call of PatchVirtualMeshStatus.
func (mr *MockVirtualMeshStatusWriterMockRecorder) PatchVirtualMeshStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMeshStatus", reflect.TypeOf((*MockVirtualMeshStatusWriter)(nil).PatchVirtualMeshStatus), varargs...)
}

// MockVirtualMeshClient is a mock of VirtualMeshClient interface.
type MockVirtualMeshClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshClientMockRecorder
}

// MockVirtualMeshClientMockRecorder is the mock recorder for MockVirtualMeshClient.
type MockVirtualMeshClientMockRecorder struct {
	mock *MockVirtualMeshClient
}

// NewMockVirtualMeshClient creates a new mock instance.
func NewMockVirtualMeshClient(ctrl *gomock.Controller) *MockVirtualMeshClient {
	mock := &MockVirtualMeshClient{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshClient) EXPECT() *MockVirtualMeshClientMockRecorder {
	return m.recorder
}

// GetVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) GetVirtualMesh(ctx context.Context, key client.ObjectKey) (*v1alpha2.VirtualMesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMesh", ctx, key)
	ret0, _ := ret[0].(*v1alpha2.VirtualMesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMesh indicates an expected call of GetVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) GetVirtualMesh(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).GetVirtualMesh), ctx, key)
}

// ListVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) ListVirtualMesh(ctx context.Context, opts ...client.ListOption) (*v1alpha2.VirtualMeshList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualMesh", varargs...)
	ret0, _ := ret[0].(*v1alpha2.VirtualMeshList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMesh indicates an expected call of ListVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) ListVirtualMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).ListVirtualMesh), varargs...)
}

// CreateVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) CreateVirtualMesh(ctx context.Context, obj *v1alpha2.VirtualMesh, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualMesh indicates an expected call of CreateVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) CreateVirtualMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).CreateVirtualMesh), varargs...)
}

// DeleteVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) DeleteVirtualMesh(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMesh indicates an expected call of DeleteVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) DeleteVirtualMesh(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).DeleteVirtualMesh), varargs...)
}

// UpdateVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) UpdateVirtualMesh(ctx context.Context, obj *v1alpha2.VirtualMesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMesh indicates an expected call of UpdateVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) UpdateVirtualMesh(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).UpdateVirtualMesh), varargs...)
}

// PatchVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) PatchVirtualMesh(ctx context.Context, obj *v1alpha2.VirtualMesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMesh indicates an expected call of PatchVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) PatchVirtualMesh(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).PatchVirtualMesh), varargs...)
}

// DeleteAllOfVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) DeleteAllOfVirtualMesh(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualMesh indicates an expected call of DeleteAllOfVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) DeleteAllOfVirtualMesh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).DeleteAllOfVirtualMesh), varargs...)
}

// UpsertVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) UpsertVirtualMesh(ctx context.Context, obj *v1alpha2.VirtualMesh, transitionFuncs ...v1alpha2.VirtualMeshTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualMesh indicates an expected call of UpsertVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) UpsertVirtualMesh(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).UpsertVirtualMesh), varargs...)
}

// UpdateVirtualMeshStatus mocks base method.
func (m *MockVirtualMeshClient) UpdateVirtualMeshStatus(ctx context.Context, obj *v1alpha2.VirtualMesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMeshStatus indicates an expected call of UpdateVirtualMeshStatus.
func (mr *MockVirtualMeshClientMockRecorder) UpdateVirtualMeshStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMeshStatus", reflect.TypeOf((*MockVirtualMeshClient)(nil).UpdateVirtualMeshStatus), varargs...)
}

// PatchVirtualMeshStatus mocks base method.
func (m *MockVirtualMeshClient) PatchVirtualMeshStatus(ctx context.Context, obj *v1alpha2.VirtualMesh, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMeshStatus indicates an expected call of PatchVirtualMeshStatus.
func (mr *MockVirtualMeshClientMockRecorder) PatchVirtualMeshStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMeshStatus", reflect.TypeOf((*MockVirtualMeshClient)(nil).PatchVirtualMeshStatus), varargs...)
}

// MockMulticlusterVirtualMeshClient is a mock of MulticlusterVirtualMeshClient interface.
type MockMulticlusterVirtualMeshClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualMeshClientMockRecorder
}

// MockMulticlusterVirtualMeshClientMockRecorder is the mock recorder for MockMulticlusterVirtualMeshClient.
type MockMulticlusterVirtualMeshClientMockRecorder struct {
	mock *MockMulticlusterVirtualMeshClient
}

// NewMockMulticlusterVirtualMeshClient creates a new mock instance.
func NewMockMulticlusterVirtualMeshClient(ctrl *gomock.Controller) *MockMulticlusterVirtualMeshClient {
	mock := &MockMulticlusterVirtualMeshClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualMeshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualMeshClient) EXPECT() *MockMulticlusterVirtualMeshClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterVirtualMeshClient) Cluster(cluster string) (v1alpha2.VirtualMeshClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.VirtualMeshClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterVirtualMeshClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterVirtualMeshClient)(nil).Cluster), cluster)
}
