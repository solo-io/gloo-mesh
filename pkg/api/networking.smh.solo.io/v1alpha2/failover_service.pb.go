// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/service-mesh-hub/api/networking/v1alpha2/failover_service.proto

package v1alpha2

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//A FailoverService creates a new hostname to which services can send requests.
//Requests will be routed based on a list of backing services ordered by
//decreasing priority. When outlier detection detects that a service in the list is
//in an unhealthy state, requests sent to the FailoverService will be routed
//to the next healthy service in the list. For each service referenced in the
//failover services list, outlier detection must be configured using a TrafficPolicy.
//
//Currently this feature only supports Services backed by Istio.
type FailoverServiceSpec struct {
	//
	//The DNS name of the failover service. Must be unique within the service mesh instance
	//since it is used as the hostname with which clients communicate.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The port on which the failover service listens.
	Port *FailoverServiceSpec_Port `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	// The meshes that this failover service will be visible to.
	Meshes []*v1.ObjectRef `protobuf:"bytes,3,rep,name=meshes,proto3" json:"meshes,omitempty"`
	//
	//A list of services ordered by decreasing priority for failover.
	//All services must be backed by either the same service mesh instance or
	//backed by service meshes that are grouped under a common VirtualMesh.
	FailoverServices     []*v1.ClusterObjectRef `protobuf:"bytes,4,rep,name=failover_services,json=failoverServices,proto3" json:"failover_services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *FailoverServiceSpec) Reset()         { *m = FailoverServiceSpec{} }
func (m *FailoverServiceSpec) String() string { return proto.CompactTextString(m) }
func (*FailoverServiceSpec) ProtoMessage()    {}
func (*FailoverServiceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c2a3822bd950167, []int{0}
}
func (m *FailoverServiceSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FailoverServiceSpec.Unmarshal(m, b)
}
func (m *FailoverServiceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FailoverServiceSpec.Marshal(b, m, deterministic)
}
func (m *FailoverServiceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailoverServiceSpec.Merge(m, src)
}
func (m *FailoverServiceSpec) XXX_Size() int {
	return xxx_messageInfo_FailoverServiceSpec.Size(m)
}
func (m *FailoverServiceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FailoverServiceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FailoverServiceSpec proto.InternalMessageInfo

func (m *FailoverServiceSpec) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *FailoverServiceSpec) GetPort() *FailoverServiceSpec_Port {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *FailoverServiceSpec) GetMeshes() []*v1.ObjectRef {
	if m != nil {
		return m.Meshes
	}
	return nil
}

func (m *FailoverServiceSpec) GetFailoverServices() []*v1.ClusterObjectRef {
	if m != nil {
		return m.FailoverServices
	}
	return nil
}

// The port on which the failover service listens.
type FailoverServiceSpec_Port struct {
	// Port number.
	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Protocol of the requests sent to the failover service, must be one of HTTP, HTTPS, GRPC, HTTP2, MONGO, TCP, TLS.
	Protocol             string   `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FailoverServiceSpec_Port) Reset()         { *m = FailoverServiceSpec_Port{} }
func (m *FailoverServiceSpec_Port) String() string { return proto.CompactTextString(m) }
func (*FailoverServiceSpec_Port) ProtoMessage()    {}
func (*FailoverServiceSpec_Port) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c2a3822bd950167, []int{0, 0}
}
func (m *FailoverServiceSpec_Port) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FailoverServiceSpec_Port.Unmarshal(m, b)
}
func (m *FailoverServiceSpec_Port) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FailoverServiceSpec_Port.Marshal(b, m, deterministic)
}
func (m *FailoverServiceSpec_Port) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailoverServiceSpec_Port.Merge(m, src)
}
func (m *FailoverServiceSpec_Port) XXX_Size() int {
	return xxx_messageInfo_FailoverServiceSpec_Port.Size(m)
}
func (m *FailoverServiceSpec_Port) XXX_DiscardUnknown() {
	xxx_messageInfo_FailoverServiceSpec_Port.DiscardUnknown(m)
}

var xxx_messageInfo_FailoverServiceSpec_Port proto.InternalMessageInfo

func (m *FailoverServiceSpec_Port) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *FailoverServiceSpec_Port) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type FailoverServiceStatus struct {
	// The most recent generation observed in the the FailoverService metadata.
	// if the observedGeneration does not match generation, the controller has not received the most
	// recent version of this resource.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// the state of the overall resource.
	// will only show accepted if it has been successfully
	// applied to all target meshes.
	State                ValidationState `protobuf:"varint,2,opt,name=state,proto3,enum=networking.smh.solo.io.ValidationState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FailoverServiceStatus) Reset()         { *m = FailoverServiceStatus{} }
func (m *FailoverServiceStatus) String() string { return proto.CompactTextString(m) }
func (*FailoverServiceStatus) ProtoMessage()    {}
func (*FailoverServiceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c2a3822bd950167, []int{1}
}
func (m *FailoverServiceStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FailoverServiceStatus.Unmarshal(m, b)
}
func (m *FailoverServiceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FailoverServiceStatus.Marshal(b, m, deterministic)
}
func (m *FailoverServiceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailoverServiceStatus.Merge(m, src)
}
func (m *FailoverServiceStatus) XXX_Size() int {
	return xxx_messageInfo_FailoverServiceStatus.Size(m)
}
func (m *FailoverServiceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_FailoverServiceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_FailoverServiceStatus proto.InternalMessageInfo

func (m *FailoverServiceStatus) GetObservedGeneration() int64 {
	if m != nil {
		return m.ObservedGeneration
	}
	return 0
}

func (m *FailoverServiceStatus) GetState() ValidationState {
	if m != nil {
		return m.State
	}
	return ValidationState_PENDING
}

func init() {
	proto.RegisterType((*FailoverServiceSpec)(nil), "networking.smh.solo.io.FailoverServiceSpec")
	proto.RegisterType((*FailoverServiceSpec_Port)(nil), "networking.smh.solo.io.FailoverServiceSpec.Port")
	proto.RegisterType((*FailoverServiceStatus)(nil), "networking.smh.solo.io.FailoverServiceStatus")
}

func init() {
	proto.RegisterFile("github.com/solo-io/service-mesh-hub/api/networking/v1alpha2/failover_service.proto", fileDescriptor_4c2a3822bd950167)
}

var fileDescriptor_4c2a3822bd950167 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x8e, 0xd3, 0x30,
	0x14, 0x86, 0x95, 0x69, 0x19, 0xcd, 0x78, 0x04, 0x02, 0x0f, 0xa0, 0x28, 0x42, 0xa8, 0x1a, 0x16,
	0x74, 0x53, 0x9b, 0x09, 0x88, 0x1d, 0x42, 0x02, 0x04, 0x0b, 0x16, 0x0c, 0xae, 0xc4, 0x82, 0x4d,
	0xe5, 0xa4, 0xaf, 0x89, 0x69, 0x92, 0x17, 0xd9, 0x4e, 0x38, 0x02, 0x57, 0xe1, 0x06, 0xdc, 0x87,
	0x93, 0x20, 0x3b, 0x69, 0x0a, 0x55, 0x90, 0xba, 0x8a, 0x1d, 0xdb, 0xdf, 0xff, 0xff, 0xef, 0x3d,
	0x22, 0x32, 0x65, 0xf3, 0x26, 0x61, 0x29, 0x96, 0xdc, 0x60, 0x81, 0x0b, 0x85, 0xdc, 0x80, 0x6e,
	0x55, 0x0a, 0x8b, 0x12, 0x4c, 0xbe, 0xc8, 0x9b, 0x84, 0xcb, 0x5a, 0xf1, 0x0a, 0xec, 0x77, 0xd4,
	0x5b, 0x55, 0x65, 0xbc, 0xbd, 0x96, 0x45, 0x9d, 0xcb, 0x98, 0x6f, 0xa4, 0x2a, 0xb0, 0x05, 0xbd,
	0xea, 0x5f, 0xb0, 0x5a, 0xa3, 0x45, 0xfa, 0x70, 0x7f, 0x97, 0x99, 0x32, 0x67, 0x8e, 0xcb, 0x14,
	0x46, 0x6c, 0x4c, 0x6b, 0xdb, 0xc6, 0x9e, 0x9f, 0xa2, 0x06, 0xde, 0x5e, 0xfb, 0x6f, 0xc7, 0x89,
	0x5e, 0x1f, 0x6d, 0xa4, 0x95, 0x85, 0x5a, 0x4b, 0xab, 0xb0, 0x5a, 0x19, 0x2b, 0xed, 0x0e, 0x70,
	0x3f, 0xc3, 0x0c, 0xfd, 0x92, 0xbb, 0x55, 0xf7, 0xf7, 0xea, 0xd7, 0x09, 0xb9, 0x7c, 0xdf, 0x3b,
	0x5f, 0x76, 0x0a, 0xcb, 0x1a, 0x52, 0x1a, 0x91, 0xb3, 0x1c, 0x8d, 0xad, 0x64, 0x09, 0x61, 0x30,
	0x0b, 0xe6, 0xe7, 0x62, 0xd8, 0xd3, 0x77, 0x64, 0x5a, 0xa3, 0xb6, 0xe1, 0xc9, 0x2c, 0x98, 0x5f,
	0xc4, 0xcf, 0xd8, 0x78, 0x42, 0x36, 0x82, 0x65, 0x37, 0xa8, 0xad, 0xf0, 0xaf, 0xe9, 0x0b, 0x72,
	0xea, 0xa2, 0x80, 0x09, 0x27, 0xb3, 0xc9, 0xfc, 0x22, 0x7e, 0xc4, 0x7c, 0x5a, 0x57, 0x83, 0x01,
	0xf1, 0x29, 0xf9, 0x06, 0xa9, 0x15, 0xb0, 0x11, 0xfd, 0x5d, 0x7a, 0x43, 0xee, 0x1d, 0x16, 0xda,
	0x84, 0x53, 0x0f, 0x78, 0x32, 0x02, 0x78, 0x5b, 0x34, 0xc6, 0x82, 0xde, 0x73, 0xee, 0x6e, 0xfe,
	0x75, 0x65, 0xa2, 0x97, 0x64, 0xea, 0x5c, 0x51, 0xda, 0xa7, 0x72, 0x69, 0x6f, 0xf7, 0x1e, 0x23,
	0x72, 0xe6, 0xcb, 0x94, 0x62, 0xe1, 0xd3, 0x9e, 0x8b, 0x61, 0x7f, 0xf5, 0x23, 0x20, 0x0f, 0x0e,
	0x23, 0x5a, 0x69, 0x1b, 0x43, 0x39, 0xb9, 0xc4, 0xc4, 0x99, 0x83, 0xf5, 0x2a, 0x83, 0x0a, 0xb4,
	0x6f, 0x86, 0x07, 0x4f, 0x04, 0xdd, 0x1d, 0x7d, 0x18, 0x4e, 0xe8, 0x2b, 0x72, 0xcb, 0x77, 0xca,
	0x6b, 0xdc, 0x89, 0x9f, 0xfe, 0xaf, 0xa2, 0x5f, 0x86, 0xce, 0x3a, 0x25, 0x10, 0xdd, 0xab, 0x37,
	0x9f, 0x7f, 0xfe, 0x7e, 0x1c, 0x7c, 0xfd, 0x78, 0xcc, 0xf0, 0xd6, 0xdb, 0xec, 0x60, 0x6e, 0xfe,
	0x16, 0x18, 0x66, 0x28, 0x39, 0xf5, 0x31, 0x9f, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x52,
	0x8b, 0x47, 0x12, 0x03, 0x00, 0x00,
}

func (this *FailoverServiceSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FailoverServiceSpec)
	if !ok {
		that2, ok := that.(FailoverServiceSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if !this.Port.Equal(that1.Port) {
		return false
	}
	if len(this.Meshes) != len(that1.Meshes) {
		return false
	}
	for i := range this.Meshes {
		if !this.Meshes[i].Equal(that1.Meshes[i]) {
			return false
		}
	}
	if len(this.FailoverServices) != len(that1.FailoverServices) {
		return false
	}
	for i := range this.FailoverServices {
		if !this.FailoverServices[i].Equal(that1.FailoverServices[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FailoverServiceSpec_Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FailoverServiceSpec_Port)
	if !ok {
		that2, ok := that.(FailoverServiceSpec_Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FailoverServiceStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FailoverServiceStatus)
	if !ok {
		that2, ok := that.(FailoverServiceStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObservedGeneration != that1.ObservedGeneration {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
