// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/service-mesh-hub/api/networking/v1alpha2/traffic_policy.proto

package v1alpha2

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	types1 "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha2/types"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//A Traffic Policy applies some L7 routing features to an existing mesh.
//Traffic Policies specify the following for all requests:
//- originating from from **source workload**
//- sent to **destination targets**
//- matching one or more **request matcher**
//
//NB: If any additional TrafficPolicy action fields (i.e. non selection related fields) are added,
//the TrafficPolicy Merger's "AreTrafficPolicyActionsEqual" method must be updated to reflect the new field.
type TrafficPolicySpec struct {
	//
	//Requests originating from these workloads will have the rule applied.
	//Leave empty to have all workloads in the mesh apply these rules.
	//
	//Note: Source Selectors are ignored when TrafficPolicies are
	//applied to pods in a Linkerd mesh. TrafficPolicies will apply to
	//all selected destinations in Linkerd, regardless of the source.
	//
	//Note: If using the ServiceSelector.Matcher, specifying clusters is currently not supported in Istio.
	SourceSelector []*WorkloadSelector `protobuf:"bytes,1,rep,name=source_selector,json=sourceSelector,proto3" json:"source_selector,omitempty"`
	//
	//Requests destined for these k8s services will have the rule applied.
	//Leave empty to apply to all destination k8s services in the mesh.
	DestinationSelector []*ServiceSelector `protobuf:"bytes,2,rep,name=destination_selector,json=destinationSelector,proto3" json:"destination_selector,omitempty"`
	//
	//If specified, this rule will only apply to http requests matching these conditions.
	//Within a single matcher, all conditions must be satisfied for a match to occur.
	//Between matchers, at least one matcher must be satisfied for the TrafficPolicy to apply.
	//NB: Linkerd only supports matching on Request Path and Method.
	HttpRequestMatchers []*TrafficPolicySpec_HttpMatcher `protobuf:"bytes,3,rep,name=http_request_matchers,json=httpRequestMatchers,proto3" json:"http_request_matchers,omitempty"`
	//
	//Enables traffic shifting, i.e. to reroute requests to a different service,
	//to a subset of pods based on their label, and/or split traffic between multiple services.
	TrafficShift *TrafficPolicySpec_MultiDestination `protobuf:"bytes,4,opt,name=traffic_shift,json=trafficShift,proto3" json:"traffic_shift,omitempty"`
	// Enable fault injection on requests.
	FaultInjection *TrafficPolicySpec_FaultInjection `protobuf:"bytes,5,opt,name=fault_injection,json=faultInjection,proto3" json:"fault_injection,omitempty"`
	// Set a timeout on requests.
	RequestTimeout *types.Duration `protobuf:"bytes,6,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	// Set a retry policy on requests.
	Retries *TrafficPolicySpec_RetryPolicy `protobuf:"bytes,7,opt,name=retries,proto3" json:"retries,omitempty"`
	//
	//Set a Cross-Origin Resource Sharing policy (CORS) for requests. Refer to
	//https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
	//for further details about cross origin resource sharing.
	CorsPolicy *TrafficPolicySpec_CorsPolicy `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// Mirror HTTP traffic to a another destination. Traffic will still be sent to its original destination as normal.
	Mirror *TrafficPolicySpec_Mirror `protobuf:"bytes,9,opt,name=mirror,proto3" json:"mirror,omitempty"`
	// Manipulate request and response headers.
	HeaderManipulation *TrafficPolicySpec_HeaderManipulation `protobuf:"bytes,10,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	//
	//Configure outlier detection on the targeted services.
	//Setting this field requires an empty source_selector because it must apply to all traffic.
	OutlierDetection     *TrafficPolicySpec_OutlierDetection `protobuf:"bytes,11,opt,name=outlier_detection,json=outlierDetection,proto3" json:"outlier_detection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *TrafficPolicySpec) Reset()         { *m = TrafficPolicySpec{} }
func (m *TrafficPolicySpec) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicySpec) ProtoMessage()    {}
func (*TrafficPolicySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0}
}
func (m *TrafficPolicySpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec.Unmarshal(m, b)
}
func (m *TrafficPolicySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec.Merge(m, src)
}
func (m *TrafficPolicySpec) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec.Size(m)
}
func (m *TrafficPolicySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec proto.InternalMessageInfo

func (m *TrafficPolicySpec) GetSourceSelector() []*WorkloadSelector {
	if m != nil {
		return m.SourceSelector
	}
	return nil
}

func (m *TrafficPolicySpec) GetDestinationSelector() []*ServiceSelector {
	if m != nil {
		return m.DestinationSelector
	}
	return nil
}

func (m *TrafficPolicySpec) GetHttpRequestMatchers() []*TrafficPolicySpec_HttpMatcher {
	if m != nil {
		return m.HttpRequestMatchers
	}
	return nil
}

func (m *TrafficPolicySpec) GetTrafficShift() *TrafficPolicySpec_MultiDestination {
	if m != nil {
		return m.TrafficShift
	}
	return nil
}

func (m *TrafficPolicySpec) GetFaultInjection() *TrafficPolicySpec_FaultInjection {
	if m != nil {
		return m.FaultInjection
	}
	return nil
}

func (m *TrafficPolicySpec) GetRequestTimeout() *types.Duration {
	if m != nil {
		return m.RequestTimeout
	}
	return nil
}

func (m *TrafficPolicySpec) GetRetries() *TrafficPolicySpec_RetryPolicy {
	if m != nil {
		return m.Retries
	}
	return nil
}

func (m *TrafficPolicySpec) GetCorsPolicy() *TrafficPolicySpec_CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *TrafficPolicySpec) GetMirror() *TrafficPolicySpec_Mirror {
	if m != nil {
		return m.Mirror
	}
	return nil
}

func (m *TrafficPolicySpec) GetHeaderManipulation() *TrafficPolicySpec_HeaderManipulation {
	if m != nil {
		return m.HeaderManipulation
	}
	return nil
}

func (m *TrafficPolicySpec) GetOutlierDetection() *TrafficPolicySpec_OutlierDetection {
	if m != nil {
		return m.OutlierDetection
	}
	return nil
}

//
//RetryPolicy contains mesh-specific retry configuration.
//Different meshes support different Retry features.
//Service Mesh Hub's RetryPolicy exposes config for multiple meshes simultaneously,
//allowing the same TrafficPolicy to apply retries to different mesh types.
//The configuration applied to the target mesh will use the corresponding
//config for each type, while other config types will be ignored.
type TrafficPolicySpec_RetryPolicy struct {
	// Number of retries for a given request
	Attempts int32 `protobuf:"varint,1,opt,name=attempts,proto3" json:"attempts,omitempty"`
	// Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE >=1ms.
	PerTryTimeout        *types.Duration `protobuf:"bytes,2,opt,name=per_try_timeout,json=perTryTimeout,proto3" json:"per_try_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TrafficPolicySpec_RetryPolicy) Reset()         { *m = TrafficPolicySpec_RetryPolicy{} }
func (m *TrafficPolicySpec_RetryPolicy) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicySpec_RetryPolicy) ProtoMessage()    {}
func (*TrafficPolicySpec_RetryPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0, 0}
}
func (m *TrafficPolicySpec_RetryPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec_RetryPolicy.Unmarshal(m, b)
}
func (m *TrafficPolicySpec_RetryPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec_RetryPolicy.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec_RetryPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec_RetryPolicy.Merge(m, src)
}
func (m *TrafficPolicySpec_RetryPolicy) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec_RetryPolicy.Size(m)
}
func (m *TrafficPolicySpec_RetryPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec_RetryPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec_RetryPolicy proto.InternalMessageInfo

func (m *TrafficPolicySpec_RetryPolicy) GetAttempts() int32 {
	if m != nil {
		return m.Attempts
	}
	return 0
}

func (m *TrafficPolicySpec_RetryPolicy) GetPerTryTimeout() *types.Duration {
	if m != nil {
		return m.PerTryTimeout
	}
	return nil
}

type TrafficPolicySpec_MultiDestination struct {
	// A traffic shift destination.
	Destinations         []*TrafficPolicySpec_MultiDestination_WeightedDestination `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                  `json:"-"`
	XXX_unrecognized     []byte                                                    `json:"-"`
	XXX_sizecache        int32                                                     `json:"-"`
}

func (m *TrafficPolicySpec_MultiDestination) Reset()         { *m = TrafficPolicySpec_MultiDestination{} }
func (m *TrafficPolicySpec_MultiDestination) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicySpec_MultiDestination) ProtoMessage()    {}
func (*TrafficPolicySpec_MultiDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0, 1}
}
func (m *TrafficPolicySpec_MultiDestination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec_MultiDestination.Unmarshal(m, b)
}
func (m *TrafficPolicySpec_MultiDestination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec_MultiDestination.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec_MultiDestination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec_MultiDestination.Merge(m, src)
}
func (m *TrafficPolicySpec_MultiDestination) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec_MultiDestination.Size(m)
}
func (m *TrafficPolicySpec_MultiDestination) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec_MultiDestination.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec_MultiDestination proto.InternalMessageInfo

func (m *TrafficPolicySpec_MultiDestination) GetDestinations() []*TrafficPolicySpec_MultiDestination_WeightedDestination {
	if m != nil {
		return m.Destinations
	}
	return nil
}

type TrafficPolicySpec_MultiDestination_WeightedDestination struct {
	// The different destination types can be selected for a traffic shift.
	//
	// Types that are valid to be assigned to DestinationType:
	//	*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeService
	//	*TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceRef
	DestinationType isTrafficPolicySpec_MultiDestination_WeightedDestination_DestinationType `protobuf_oneof:"destination_type"`
	// Weights across all of the destinations must sum to 100. Each is interpreted as a percent from 0-100.
	Weight               uint32   `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficPolicySpec_MultiDestination_WeightedDestination) Reset() {
	*m = TrafficPolicySpec_MultiDestination_WeightedDestination{}
}
func (m *TrafficPolicySpec_MultiDestination_WeightedDestination) String() string {
	return proto.CompactTextString(m)
}
func (*TrafficPolicySpec_MultiDestination_WeightedDestination) ProtoMessage() {}
func (*TrafficPolicySpec_MultiDestination_WeightedDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0, 1, 0}
}
func (m *TrafficPolicySpec_MultiDestination_WeightedDestination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec_MultiDestination_WeightedDestination.Unmarshal(m, b)
}
func (m *TrafficPolicySpec_MultiDestination_WeightedDestination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec_MultiDestination_WeightedDestination.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec_MultiDestination_WeightedDestination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec_MultiDestination_WeightedDestination.Merge(m, src)
}
func (m *TrafficPolicySpec_MultiDestination_WeightedDestination) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec_MultiDestination_WeightedDestination.Size(m)
}
func (m *TrafficPolicySpec_MultiDestination_WeightedDestination) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec_MultiDestination_WeightedDestination.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec_MultiDestination_WeightedDestination proto.InternalMessageInfo

type isTrafficPolicySpec_MultiDestination_WeightedDestination_DestinationType interface {
	isTrafficPolicySpec_MultiDestination_WeightedDestination_DestinationType()
	Equal(interface{}) bool
}

type TrafficPolicySpec_MultiDestination_WeightedDestination_KubeService struct {
	KubeService *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination `protobuf:"bytes,1,opt,name=kube_service,json=kubeService,proto3,oneof" json:"kube_service,omitempty"`
}
type TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceRef struct {
	FailoverServiceRef *v1.ObjectRef `protobuf:"bytes,3,opt,name=failover_service_ref,json=failoverServiceRef,proto3,oneof" json:"failover_service_ref,omitempty"`
}

func (*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeService) isTrafficPolicySpec_MultiDestination_WeightedDestination_DestinationType() {
}
func (*TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceRef) isTrafficPolicySpec_MultiDestination_WeightedDestination_DestinationType() {
}

func (m *TrafficPolicySpec_MultiDestination_WeightedDestination) GetDestinationType() isTrafficPolicySpec_MultiDestination_WeightedDestination_DestinationType {
	if m != nil {
		return m.DestinationType
	}
	return nil
}

func (m *TrafficPolicySpec_MultiDestination_WeightedDestination) GetKubeService() *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination {
	if x, ok := m.GetDestinationType().(*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeService); ok {
		return x.KubeService
	}
	return nil
}

func (m *TrafficPolicySpec_MultiDestination_WeightedDestination) GetFailoverServiceRef() *v1.ObjectRef {
	if x, ok := m.GetDestinationType().(*TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceRef); ok {
		return x.FailoverServiceRef
	}
	return nil
}

func (m *TrafficPolicySpec_MultiDestination_WeightedDestination) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TrafficPolicySpec_MultiDestination_WeightedDestination) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeService)(nil),
		(*TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceRef)(nil),
	}
}

// A traffic shift destination which lives in kubernetes.
type TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination struct {
	// The name of the destination service.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The namespace of the destination service.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The cluster of the destination k8s service (as it is registered with Service Mesh Hub).
	ClusterName string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// Subset routing is currently only supported on Istio.
	Subset map[string]string `protobuf:"bytes,4,rep,name=subset,proto3" json:"subset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Port on the destination k8s service to receive traffic. Required if the service exposes more than one port.
	Port                 uint32   `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) Reset() {
	*m = TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination{}
}
func (m *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) String() string {
	return proto.CompactTextString(m)
}
func (*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) ProtoMessage() {}
func (*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0, 1, 0, 0}
}
func (m *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination.Unmarshal(m, b)
}
func (m *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination.Merge(m, src)
}
func (m *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination.Size(m)
}
func (m *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination proto.InternalMessageInfo

func (m *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) GetSubset() map[string]string {
	if m != nil {
		return m.Subset
	}
	return nil
}

func (m *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

//
//FaultInjection can be used to specify one or more faults to inject
//while forwarding http requests to the destination specified in a route.
//Faults include aborting the Http request from downstream service, and/or delaying
//proxying of requests. A fault rule MUST HAVE delay or abort.
type TrafficPolicySpec_FaultInjection struct {
	// Types that are valid to be assigned to FaultInjectionType:
	//	*TrafficPolicySpec_FaultInjection_Delay_
	//	*TrafficPolicySpec_FaultInjection_Abort_
	FaultInjectionType isTrafficPolicySpec_FaultInjection_FaultInjectionType `protobuf_oneof:"fault_injection_type"`
	// Percentage of requests to be faulted with the error code provided. Values range between 0 and 100
	Percentage           float64  `protobuf:"fixed64,5,opt,name=percentage,proto3" json:"percentage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficPolicySpec_FaultInjection) Reset()         { *m = TrafficPolicySpec_FaultInjection{} }
func (m *TrafficPolicySpec_FaultInjection) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicySpec_FaultInjection) ProtoMessage()    {}
func (*TrafficPolicySpec_FaultInjection) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0, 2}
}
func (m *TrafficPolicySpec_FaultInjection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec_FaultInjection.Unmarshal(m, b)
}
func (m *TrafficPolicySpec_FaultInjection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec_FaultInjection.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec_FaultInjection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec_FaultInjection.Merge(m, src)
}
func (m *TrafficPolicySpec_FaultInjection) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec_FaultInjection.Size(m)
}
func (m *TrafficPolicySpec_FaultInjection) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec_FaultInjection.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec_FaultInjection proto.InternalMessageInfo

type isTrafficPolicySpec_FaultInjection_FaultInjectionType interface {
	isTrafficPolicySpec_FaultInjection_FaultInjectionType()
	Equal(interface{}) bool
}

type TrafficPolicySpec_FaultInjection_Delay_ struct {
	Delay *TrafficPolicySpec_FaultInjection_Delay `protobuf:"bytes,1,opt,name=delay,proto3,oneof" json:"delay,omitempty"`
}
type TrafficPolicySpec_FaultInjection_Abort_ struct {
	Abort *TrafficPolicySpec_FaultInjection_Abort `protobuf:"bytes,2,opt,name=abort,proto3,oneof" json:"abort,omitempty"`
}

func (*TrafficPolicySpec_FaultInjection_Delay_) isTrafficPolicySpec_FaultInjection_FaultInjectionType() {
}
func (*TrafficPolicySpec_FaultInjection_Abort_) isTrafficPolicySpec_FaultInjection_FaultInjectionType() {
}

func (m *TrafficPolicySpec_FaultInjection) GetFaultInjectionType() isTrafficPolicySpec_FaultInjection_FaultInjectionType {
	if m != nil {
		return m.FaultInjectionType
	}
	return nil
}

func (m *TrafficPolicySpec_FaultInjection) GetDelay() *TrafficPolicySpec_FaultInjection_Delay {
	if x, ok := m.GetFaultInjectionType().(*TrafficPolicySpec_FaultInjection_Delay_); ok {
		return x.Delay
	}
	return nil
}

func (m *TrafficPolicySpec_FaultInjection) GetAbort() *TrafficPolicySpec_FaultInjection_Abort {
	if x, ok := m.GetFaultInjectionType().(*TrafficPolicySpec_FaultInjection_Abort_); ok {
		return x.Abort
	}
	return nil
}

func (m *TrafficPolicySpec_FaultInjection) GetPercentage() float64 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TrafficPolicySpec_FaultInjection) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TrafficPolicySpec_FaultInjection_Delay_)(nil),
		(*TrafficPolicySpec_FaultInjection_Abort_)(nil),
	}
}

//
//The _fixedDelay_ field is used to indicate the amount of delay in seconds.
//The optional _percentage_ field can be used to only delay a certain
//percentage of requests. If left unspecified, all request will be delayed.
type TrafficPolicySpec_FaultInjection_Delay struct {
	// Types that are valid to be assigned to HttpDelayType:
	//	*TrafficPolicySpec_FaultInjection_Delay_FixedDelay
	//	*TrafficPolicySpec_FaultInjection_Delay_ExponentialDelay
	HttpDelayType        isTrafficPolicySpec_FaultInjection_Delay_HttpDelayType `protobuf_oneof:"http_delay_type"`
	XXX_NoUnkeyedLiteral struct{}                                               `json:"-"`
	XXX_unrecognized     []byte                                                 `json:"-"`
	XXX_sizecache        int32                                                  `json:"-"`
}

func (m *TrafficPolicySpec_FaultInjection_Delay) Reset() {
	*m = TrafficPolicySpec_FaultInjection_Delay{}
}
func (m *TrafficPolicySpec_FaultInjection_Delay) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicySpec_FaultInjection_Delay) ProtoMessage()    {}
func (*TrafficPolicySpec_FaultInjection_Delay) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0, 2, 0}
}
func (m *TrafficPolicySpec_FaultInjection_Delay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec_FaultInjection_Delay.Unmarshal(m, b)
}
func (m *TrafficPolicySpec_FaultInjection_Delay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec_FaultInjection_Delay.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec_FaultInjection_Delay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec_FaultInjection_Delay.Merge(m, src)
}
func (m *TrafficPolicySpec_FaultInjection_Delay) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec_FaultInjection_Delay.Size(m)
}
func (m *TrafficPolicySpec_FaultInjection_Delay) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec_FaultInjection_Delay.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec_FaultInjection_Delay proto.InternalMessageInfo

type isTrafficPolicySpec_FaultInjection_Delay_HttpDelayType interface {
	isTrafficPolicySpec_FaultInjection_Delay_HttpDelayType()
	Equal(interface{}) bool
}

type TrafficPolicySpec_FaultInjection_Delay_FixedDelay struct {
	FixedDelay *types.Duration `protobuf:"bytes,2,opt,name=fixed_delay,json=fixedDelay,proto3,oneof" json:"fixed_delay,omitempty"`
}
type TrafficPolicySpec_FaultInjection_Delay_ExponentialDelay struct {
	ExponentialDelay *types.Duration `protobuf:"bytes,3,opt,name=exponential_delay,json=exponentialDelay,proto3,oneof" json:"exponential_delay,omitempty"`
}

func (*TrafficPolicySpec_FaultInjection_Delay_FixedDelay) isTrafficPolicySpec_FaultInjection_Delay_HttpDelayType() {
}
func (*TrafficPolicySpec_FaultInjection_Delay_ExponentialDelay) isTrafficPolicySpec_FaultInjection_Delay_HttpDelayType() {
}

func (m *TrafficPolicySpec_FaultInjection_Delay) GetHttpDelayType() isTrafficPolicySpec_FaultInjection_Delay_HttpDelayType {
	if m != nil {
		return m.HttpDelayType
	}
	return nil
}

func (m *TrafficPolicySpec_FaultInjection_Delay) GetFixedDelay() *types.Duration {
	if x, ok := m.GetHttpDelayType().(*TrafficPolicySpec_FaultInjection_Delay_FixedDelay); ok {
		return x.FixedDelay
	}
	return nil
}

func (m *TrafficPolicySpec_FaultInjection_Delay) GetExponentialDelay() *types.Duration {
	if x, ok := m.GetHttpDelayType().(*TrafficPolicySpec_FaultInjection_Delay_ExponentialDelay); ok {
		return x.ExponentialDelay
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TrafficPolicySpec_FaultInjection_Delay) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TrafficPolicySpec_FaultInjection_Delay_FixedDelay)(nil),
		(*TrafficPolicySpec_FaultInjection_Delay_ExponentialDelay)(nil),
	}
}

//
//The _httpStatus_ field is used to indicate the HTTP status code to
//return to the caller. The optional _percentage_ field can be used to only
//abort a certain percentage of requests. If not specified, all requests are
//aborted.
type TrafficPolicySpec_FaultInjection_Abort struct {
	// Types that are valid to be assigned to ErrorType:
	//	*TrafficPolicySpec_FaultInjection_Abort_HttpStatus
	ErrorType            isTrafficPolicySpec_FaultInjection_Abort_ErrorType `protobuf_oneof:"error_type"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *TrafficPolicySpec_FaultInjection_Abort) Reset() {
	*m = TrafficPolicySpec_FaultInjection_Abort{}
}
func (m *TrafficPolicySpec_FaultInjection_Abort) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicySpec_FaultInjection_Abort) ProtoMessage()    {}
func (*TrafficPolicySpec_FaultInjection_Abort) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0, 2, 1}
}
func (m *TrafficPolicySpec_FaultInjection_Abort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec_FaultInjection_Abort.Unmarshal(m, b)
}
func (m *TrafficPolicySpec_FaultInjection_Abort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec_FaultInjection_Abort.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec_FaultInjection_Abort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec_FaultInjection_Abort.Merge(m, src)
}
func (m *TrafficPolicySpec_FaultInjection_Abort) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec_FaultInjection_Abort.Size(m)
}
func (m *TrafficPolicySpec_FaultInjection_Abort) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec_FaultInjection_Abort.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec_FaultInjection_Abort proto.InternalMessageInfo

type isTrafficPolicySpec_FaultInjection_Abort_ErrorType interface {
	isTrafficPolicySpec_FaultInjection_Abort_ErrorType()
	Equal(interface{}) bool
}

type TrafficPolicySpec_FaultInjection_Abort_HttpStatus struct {
	HttpStatus int32 `protobuf:"varint,4,opt,name=http_status,json=httpStatus,proto3,oneof" json:"http_status,omitempty"`
}

func (*TrafficPolicySpec_FaultInjection_Abort_HttpStatus) isTrafficPolicySpec_FaultInjection_Abort_ErrorType() {
}

func (m *TrafficPolicySpec_FaultInjection_Abort) GetErrorType() isTrafficPolicySpec_FaultInjection_Abort_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return nil
}

func (m *TrafficPolicySpec_FaultInjection_Abort) GetHttpStatus() int32 {
	if x, ok := m.GetErrorType().(*TrafficPolicySpec_FaultInjection_Abort_HttpStatus); ok {
		return x.HttpStatus
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TrafficPolicySpec_FaultInjection_Abort) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TrafficPolicySpec_FaultInjection_Abort_HttpStatus)(nil),
	}
}

// Manipulate request and response headers.
type TrafficPolicySpec_HeaderManipulation struct {
	// HTTP headers to remove before returning a response to the caller.
	RemoveResponseHeaders []string `protobuf:"bytes,12,rep,name=remove_response_headers,json=removeResponseHeaders,proto3" json:"remove_response_headers,omitempty"`
	// Additional HTTP headers to add before returning a response to the caller.
	AppendResponseHeaders map[string]string `protobuf:"bytes,13,rep,name=append_response_headers,json=appendResponseHeaders,proto3" json:"append_response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// HTTP headers to remove before forwarding a request to the destination service.
	RemoveRequestHeaders []string `protobuf:"bytes,14,rep,name=remove_request_headers,json=removeRequestHeaders,proto3" json:"remove_request_headers,omitempty"`
	// Additional HTTP headers to add before forwarding a request to the destination service.
	AppendRequestHeaders map[string]string `protobuf:"bytes,15,rep,name=append_request_headers,json=appendRequestHeaders,proto3" json:"append_request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TrafficPolicySpec_HeaderManipulation) Reset()         { *m = TrafficPolicySpec_HeaderManipulation{} }
func (m *TrafficPolicySpec_HeaderManipulation) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicySpec_HeaderManipulation) ProtoMessage()    {}
func (*TrafficPolicySpec_HeaderManipulation) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0, 3}
}
func (m *TrafficPolicySpec_HeaderManipulation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec_HeaderManipulation.Unmarshal(m, b)
}
func (m *TrafficPolicySpec_HeaderManipulation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec_HeaderManipulation.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec_HeaderManipulation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec_HeaderManipulation.Merge(m, src)
}
func (m *TrafficPolicySpec_HeaderManipulation) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec_HeaderManipulation.Size(m)
}
func (m *TrafficPolicySpec_HeaderManipulation) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec_HeaderManipulation.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec_HeaderManipulation proto.InternalMessageInfo

func (m *TrafficPolicySpec_HeaderManipulation) GetRemoveResponseHeaders() []string {
	if m != nil {
		return m.RemoveResponseHeaders
	}
	return nil
}

func (m *TrafficPolicySpec_HeaderManipulation) GetAppendResponseHeaders() map[string]string {
	if m != nil {
		return m.AppendResponseHeaders
	}
	return nil
}

func (m *TrafficPolicySpec_HeaderManipulation) GetRemoveRequestHeaders() []string {
	if m != nil {
		return m.RemoveRequestHeaders
	}
	return nil
}

func (m *TrafficPolicySpec_HeaderManipulation) GetAppendRequestHeaders() map[string]string {
	if m != nil {
		return m.AppendRequestHeaders
	}
	return nil
}

type TrafficPolicySpec_CorsPolicy struct {
	//
	//String patterns that match allowed origins.
	//An origin is allowed if any of the string matchers match.
	//If a match is found, then the outgoing Access-Control-Allow-Origin would be set to the origin as provided by the client.
	AllowOrigins []*TrafficPolicySpec_StringMatch `protobuf:"bytes,7,rep,name=allow_origins,json=allowOrigins,proto3" json:"allow_origins,omitempty"`
	//
	//List of HTTP methods allowed to access the resource. The content will
	//be serialized into the Access-Control-Allow-Methods header.
	AllowMethods []string `protobuf:"bytes,2,rep,name=allow_methods,json=allowMethods,proto3" json:"allow_methods,omitempty"`
	//
	//List of HTTP headers that can be used when requesting the
	//resource. Serialized to Access-Control-Allow-Headers header.
	AllowHeaders []string `protobuf:"bytes,3,rep,name=allow_headers,json=allowHeaders,proto3" json:"allow_headers,omitempty"`
	//
	//A white list of HTTP headers that the browsers are allowed to
	//access. Serialized into Access-Control-Expose-Headers header.
	ExposeHeaders []string `protobuf:"bytes,4,rep,name=expose_headers,json=exposeHeaders,proto3" json:"expose_headers,omitempty"`
	//
	//Specifies how long the results of a preflight request can be
	//cached. Translates to the `Access-Control-Max-Age` header.
	MaxAge *types.Duration `protobuf:"bytes,5,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	//
	//Indicates whether the caller is allowed to send the actual request
	//(not the preflight) using credentials. Translates to
	//`Access-Control-Allow-Credentials` header.
	AllowCredentials     *types.BoolValue `protobuf:"bytes,6,opt,name=allow_credentials,json=allowCredentials,proto3" json:"allow_credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TrafficPolicySpec_CorsPolicy) Reset()         { *m = TrafficPolicySpec_CorsPolicy{} }
func (m *TrafficPolicySpec_CorsPolicy) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicySpec_CorsPolicy) ProtoMessage()    {}
func (*TrafficPolicySpec_CorsPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0, 4}
}
func (m *TrafficPolicySpec_CorsPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec_CorsPolicy.Unmarshal(m, b)
}
func (m *TrafficPolicySpec_CorsPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec_CorsPolicy.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec_CorsPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec_CorsPolicy.Merge(m, src)
}
func (m *TrafficPolicySpec_CorsPolicy) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec_CorsPolicy.Size(m)
}
func (m *TrafficPolicySpec_CorsPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec_CorsPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec_CorsPolicy proto.InternalMessageInfo

func (m *TrafficPolicySpec_CorsPolicy) GetAllowOrigins() []*TrafficPolicySpec_StringMatch {
	if m != nil {
		return m.AllowOrigins
	}
	return nil
}

func (m *TrafficPolicySpec_CorsPolicy) GetAllowMethods() []string {
	if m != nil {
		return m.AllowMethods
	}
	return nil
}

func (m *TrafficPolicySpec_CorsPolicy) GetAllowHeaders() []string {
	if m != nil {
		return m.AllowHeaders
	}
	return nil
}

func (m *TrafficPolicySpec_CorsPolicy) GetExposeHeaders() []string {
	if m != nil {
		return m.ExposeHeaders
	}
	return nil
}

func (m *TrafficPolicySpec_CorsPolicy) GetMaxAge() *types.Duration {
	if m != nil {
		return m.MaxAge
	}
	return nil
}

func (m *TrafficPolicySpec_CorsPolicy) GetAllowCredentials() *types.BoolValue {
	if m != nil {
		return m.AllowCredentials
	}
	return nil
}

// Parameters for matching routes. All specified conditions must be satisfied for a match to occur.
type TrafficPolicySpec_HttpMatcher struct {
	// Types that are valid to be assigned to PathSpecifier:
	//	*TrafficPolicySpec_HttpMatcher_Prefix
	//	*TrafficPolicySpec_HttpMatcher_Exact
	//	*TrafficPolicySpec_HttpMatcher_Regex
	PathSpecifier isTrafficPolicySpec_HttpMatcher_PathSpecifier `protobuf_oneof:"path_specifier"`
	// Specifies a set of headers which requests must match in entirety (all headers must match).
	Headers []*TrafficPolicySpec_HeaderMatcher `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty"`
	//
	//Specifies a set of URL query parameters which requests must match in entirety (all query params must match).
	//The router will check the query string from the *path* header against all the specified query parameters
	QueryParameters []*TrafficPolicySpec_QueryParameterMatcher `protobuf:"bytes,7,rep,name=query_parameters,json=queryParameters,proto3" json:"query_parameters,omitempty"`
	// HTTP Method/Verb to match on. If none specified, the matcher will ignore the HTTP Method
	Method               *TrafficPolicySpec_HttpMethod `protobuf:"bytes,8,opt,name=method,proto3" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *TrafficPolicySpec_HttpMatcher) Reset()         { *m = TrafficPolicySpec_HttpMatcher{} }
func (m *TrafficPolicySpec_HttpMatcher) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicySpec_HttpMatcher) ProtoMessage()    {}
func (*TrafficPolicySpec_HttpMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0, 5}
}
func (m *TrafficPolicySpec_HttpMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec_HttpMatcher.Unmarshal(m, b)
}
func (m *TrafficPolicySpec_HttpMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec_HttpMatcher.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec_HttpMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec_HttpMatcher.Merge(m, src)
}
func (m *TrafficPolicySpec_HttpMatcher) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec_HttpMatcher.Size(m)
}
func (m *TrafficPolicySpec_HttpMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec_HttpMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec_HttpMatcher proto.InternalMessageInfo

type isTrafficPolicySpec_HttpMatcher_PathSpecifier interface {
	isTrafficPolicySpec_HttpMatcher_PathSpecifier()
	Equal(interface{}) bool
}

type TrafficPolicySpec_HttpMatcher_Prefix struct {
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}
type TrafficPolicySpec_HttpMatcher_Exact struct {
	Exact string `protobuf:"bytes,2,opt,name=exact,proto3,oneof" json:"exact,omitempty"`
}
type TrafficPolicySpec_HttpMatcher_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
}

func (*TrafficPolicySpec_HttpMatcher_Prefix) isTrafficPolicySpec_HttpMatcher_PathSpecifier() {}
func (*TrafficPolicySpec_HttpMatcher_Exact) isTrafficPolicySpec_HttpMatcher_PathSpecifier()  {}
func (*TrafficPolicySpec_HttpMatcher_Regex) isTrafficPolicySpec_HttpMatcher_PathSpecifier()  {}

func (m *TrafficPolicySpec_HttpMatcher) GetPathSpecifier() isTrafficPolicySpec_HttpMatcher_PathSpecifier {
	if m != nil {
		return m.PathSpecifier
	}
	return nil
}

func (m *TrafficPolicySpec_HttpMatcher) GetPrefix() string {
	if x, ok := m.GetPathSpecifier().(*TrafficPolicySpec_HttpMatcher_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *TrafficPolicySpec_HttpMatcher) GetExact() string {
	if x, ok := m.GetPathSpecifier().(*TrafficPolicySpec_HttpMatcher_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *TrafficPolicySpec_HttpMatcher) GetRegex() string {
	if x, ok := m.GetPathSpecifier().(*TrafficPolicySpec_HttpMatcher_Regex); ok {
		return x.Regex
	}
	return ""
}

func (m *TrafficPolicySpec_HttpMatcher) GetHeaders() []*TrafficPolicySpec_HeaderMatcher {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *TrafficPolicySpec_HttpMatcher) GetQueryParameters() []*TrafficPolicySpec_QueryParameterMatcher {
	if m != nil {
		return m.QueryParameters
	}
	return nil
}

func (m *TrafficPolicySpec_HttpMatcher) GetMethod() *TrafficPolicySpec_HttpMethod {
	if m != nil {
		return m.Method
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TrafficPolicySpec_HttpMatcher) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TrafficPolicySpec_HttpMatcher_Prefix)(nil),
		(*TrafficPolicySpec_HttpMatcher_Exact)(nil),
		(*TrafficPolicySpec_HttpMatcher_Regex)(nil),
	}
}

//
//Describes how to match a given string in HTTP headers. Match is
//case-sensitive.
type TrafficPolicySpec_StringMatch struct {
	// Types that are valid to be assigned to MatchType:
	//	*TrafficPolicySpec_StringMatch_Exact
	//	*TrafficPolicySpec_StringMatch_Prefix
	//	*TrafficPolicySpec_StringMatch_Regex
	MatchType            isTrafficPolicySpec_StringMatch_MatchType `protobuf_oneof:"match_type"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *TrafficPolicySpec_StringMatch) Reset()         { *m = TrafficPolicySpec_StringMatch{} }
func (m *TrafficPolicySpec_StringMatch) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicySpec_StringMatch) ProtoMessage()    {}
func (*TrafficPolicySpec_StringMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0, 6}
}
func (m *TrafficPolicySpec_StringMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec_StringMatch.Unmarshal(m, b)
}
func (m *TrafficPolicySpec_StringMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec_StringMatch.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec_StringMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec_StringMatch.Merge(m, src)
}
func (m *TrafficPolicySpec_StringMatch) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec_StringMatch.Size(m)
}
func (m *TrafficPolicySpec_StringMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec_StringMatch.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec_StringMatch proto.InternalMessageInfo

type isTrafficPolicySpec_StringMatch_MatchType interface {
	isTrafficPolicySpec_StringMatch_MatchType()
	Equal(interface{}) bool
}

type TrafficPolicySpec_StringMatch_Exact struct {
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3,oneof" json:"exact,omitempty"`
}
type TrafficPolicySpec_StringMatch_Prefix struct {
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}
type TrafficPolicySpec_StringMatch_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
}

func (*TrafficPolicySpec_StringMatch_Exact) isTrafficPolicySpec_StringMatch_MatchType()  {}
func (*TrafficPolicySpec_StringMatch_Prefix) isTrafficPolicySpec_StringMatch_MatchType() {}
func (*TrafficPolicySpec_StringMatch_Regex) isTrafficPolicySpec_StringMatch_MatchType()  {}

func (m *TrafficPolicySpec_StringMatch) GetMatchType() isTrafficPolicySpec_StringMatch_MatchType {
	if m != nil {
		return m.MatchType
	}
	return nil
}

func (m *TrafficPolicySpec_StringMatch) GetExact() string {
	if x, ok := m.GetMatchType().(*TrafficPolicySpec_StringMatch_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *TrafficPolicySpec_StringMatch) GetPrefix() string {
	if x, ok := m.GetMatchType().(*TrafficPolicySpec_StringMatch_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *TrafficPolicySpec_StringMatch) GetRegex() string {
	if x, ok := m.GetMatchType().(*TrafficPolicySpec_StringMatch_Regex); ok {
		return x.Regex
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TrafficPolicySpec_StringMatch) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TrafficPolicySpec_StringMatch_Exact)(nil),
		(*TrafficPolicySpec_StringMatch_Prefix)(nil),
		(*TrafficPolicySpec_StringMatch_Regex)(nil),
	}
}

type TrafficPolicySpec_HeaderMatcher struct {
	// Specifies the name of the header in the request.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//
	//Specifies the value of the header. If the value is absent a request that
	//has the name header will match, regardless of the header’s value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Specifies whether the header value should be treated as regex or not.
	Regex bool `protobuf:"varint,3,opt,name=regex,proto3" json:"regex,omitempty"`
	//
	//If set to true, the result of the match will be inverted. Defaults to false.
	//
	//Examples:
	// name=foo, invert_match=true: matches if no header named `foo` is present
	// name=foo, value=bar, invert_match=true: matches if no header named `foo` with value `bar` is present
	// name=foo, value=``\d{3}``, regex=true, invert_match=true: matches if no header named `foo` with a value consisting of three integers is present
	InvertMatch          bool     `protobuf:"varint,4,opt,name=invert_match,json=invertMatch,proto3" json:"invert_match,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficPolicySpec_HeaderMatcher) Reset()         { *m = TrafficPolicySpec_HeaderMatcher{} }
func (m *TrafficPolicySpec_HeaderMatcher) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicySpec_HeaderMatcher) ProtoMessage()    {}
func (*TrafficPolicySpec_HeaderMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0, 7}
}
func (m *TrafficPolicySpec_HeaderMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec_HeaderMatcher.Unmarshal(m, b)
}
func (m *TrafficPolicySpec_HeaderMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec_HeaderMatcher.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec_HeaderMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec_HeaderMatcher.Merge(m, src)
}
func (m *TrafficPolicySpec_HeaderMatcher) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec_HeaderMatcher.Size(m)
}
func (m *TrafficPolicySpec_HeaderMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec_HeaderMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec_HeaderMatcher proto.InternalMessageInfo

func (m *TrafficPolicySpec_HeaderMatcher) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TrafficPolicySpec_HeaderMatcher) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TrafficPolicySpec_HeaderMatcher) GetRegex() bool {
	if m != nil {
		return m.Regex
	}
	return false
}

func (m *TrafficPolicySpec_HeaderMatcher) GetInvertMatch() bool {
	if m != nil {
		return m.InvertMatch
	}
	return false
}

//
//Query parameter matching treats the query string of a request's :path header
//as an ampersand-separated list of keys and/or key=value elements.
type TrafficPolicySpec_QueryParameterMatcher struct {
	//
	//Specifies the name of a key that must be present in the requested
	//path*'s query string.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//
	//Specifies the value of the key. If the value is absent, a request
	//that contains the key in its query string will match, whether the
	//key appears with a value (e.g., "?debug=true") or not (e.g., "?debug")
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	//
	//Specifies whether the query parameter value is a regular expression.
	//Defaults to false. The entire query parameter value (i.e., the part to
	//the right of the equals sign in "key=value") must match the regex.
	//E.g., the regex "\d+$" will match "123" but not "a123" or "123a".
	Regex                bool     `protobuf:"varint,3,opt,name=regex,proto3" json:"regex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficPolicySpec_QueryParameterMatcher) Reset() {
	*m = TrafficPolicySpec_QueryParameterMatcher{}
}
func (m *TrafficPolicySpec_QueryParameterMatcher) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicySpec_QueryParameterMatcher) ProtoMessage()    {}
func (*TrafficPolicySpec_QueryParameterMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0, 8}
}
func (m *TrafficPolicySpec_QueryParameterMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec_QueryParameterMatcher.Unmarshal(m, b)
}
func (m *TrafficPolicySpec_QueryParameterMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec_QueryParameterMatcher.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec_QueryParameterMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec_QueryParameterMatcher.Merge(m, src)
}
func (m *TrafficPolicySpec_QueryParameterMatcher) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec_QueryParameterMatcher.Size(m)
}
func (m *TrafficPolicySpec_QueryParameterMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec_QueryParameterMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec_QueryParameterMatcher proto.InternalMessageInfo

func (m *TrafficPolicySpec_QueryParameterMatcher) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TrafficPolicySpec_QueryParameterMatcher) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TrafficPolicySpec_QueryParameterMatcher) GetRegex() bool {
	if m != nil {
		return m.Regex
	}
	return false
}

type TrafficPolicySpec_Mirror struct {
	// Different destination types can be selected mirroring traffic.
	//
	// Types that are valid to be assigned to DestinationType:
	//	*TrafficPolicySpec_Mirror_KubeService
	DestinationType isTrafficPolicySpec_Mirror_DestinationType `protobuf_oneof:"destination_type"`
	//
	//Percentage of traffic to mirror. If absent, 100% will be mirrored.
	//Values range between 0 and 100
	Percentage float64 `protobuf:"fixed64,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// Port on the destination k8s service to receive traffic. If multiple are found, and none are specified,
	// then the configuration will be considered invalid.
	Port                 uint32   `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficPolicySpec_Mirror) Reset()         { *m = TrafficPolicySpec_Mirror{} }
func (m *TrafficPolicySpec_Mirror) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicySpec_Mirror) ProtoMessage()    {}
func (*TrafficPolicySpec_Mirror) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0, 9}
}
func (m *TrafficPolicySpec_Mirror) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec_Mirror.Unmarshal(m, b)
}
func (m *TrafficPolicySpec_Mirror) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec_Mirror.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec_Mirror) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec_Mirror.Merge(m, src)
}
func (m *TrafficPolicySpec_Mirror) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec_Mirror.Size(m)
}
func (m *TrafficPolicySpec_Mirror) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec_Mirror.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec_Mirror proto.InternalMessageInfo

type isTrafficPolicySpec_Mirror_DestinationType interface {
	isTrafficPolicySpec_Mirror_DestinationType()
	Equal(interface{}) bool
}

type TrafficPolicySpec_Mirror_KubeService struct {
	KubeService *v1.ClusterObjectRef `protobuf:"bytes,1,opt,name=kube_service,json=kubeService,proto3,oneof" json:"kube_service,omitempty"`
}

func (*TrafficPolicySpec_Mirror_KubeService) isTrafficPolicySpec_Mirror_DestinationType() {}

func (m *TrafficPolicySpec_Mirror) GetDestinationType() isTrafficPolicySpec_Mirror_DestinationType {
	if m != nil {
		return m.DestinationType
	}
	return nil
}

func (m *TrafficPolicySpec_Mirror) GetKubeService() *v1.ClusterObjectRef {
	if x, ok := m.GetDestinationType().(*TrafficPolicySpec_Mirror_KubeService); ok {
		return x.KubeService
	}
	return nil
}

func (m *TrafficPolicySpec_Mirror) GetPercentage() float64 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

func (m *TrafficPolicySpec_Mirror) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TrafficPolicySpec_Mirror) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TrafficPolicySpec_Mirror_KubeService)(nil),
	}
}

// Express an optional HttpMethod by wrapping it in a nillable message.
type TrafficPolicySpec_HttpMethod struct {
	Method               types1.HttpMethodValue `protobuf:"varint,1,opt,name=method,proto3,enum=networking.smh.solo.io.HttpMethodValue" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TrafficPolicySpec_HttpMethod) Reset()         { *m = TrafficPolicySpec_HttpMethod{} }
func (m *TrafficPolicySpec_HttpMethod) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicySpec_HttpMethod) ProtoMessage()    {}
func (*TrafficPolicySpec_HttpMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0, 10}
}
func (m *TrafficPolicySpec_HttpMethod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec_HttpMethod.Unmarshal(m, b)
}
func (m *TrafficPolicySpec_HttpMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec_HttpMethod.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec_HttpMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec_HttpMethod.Merge(m, src)
}
func (m *TrafficPolicySpec_HttpMethod) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec_HttpMethod.Size(m)
}
func (m *TrafficPolicySpec_HttpMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec_HttpMethod.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec_HttpMethod proto.InternalMessageInfo

func (m *TrafficPolicySpec_HttpMethod) GetMethod() types1.HttpMethodValue {
	if m != nil {
		return m.Method
	}
	return types1.HttpMethodValue_GET
}

//
//Configure outlier detection settings on targeted services. If set, source selectors must be empty.
//Outlier detection settings apply to all incoming traffic.
type TrafficPolicySpec_OutlierDetection struct {
	// Number of errors before a host is ejected from the connection pool. Defaults to 5.
	ConsecutiveErrors uint32 `protobuf:"varint,1,opt,name=consecutive_errors,json=consecutiveErrors,proto3" json:"consecutive_errors,omitempty"`
	// Time interval between ejection sweep analysis. Format: 1h/1m/1s/1ms. MUST BE >=1ms. Defaults to 10s.
	Interval *types.Duration `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// Minimum ejection duration. Format: 1h/1m/1s/1ms. MUST BE >=1ms. Defaults to 30s.
	BaseEjectionTime *types.Duration `protobuf:"bytes,3,opt,name=base_ejection_time,json=baseEjectionTime,proto3" json:"base_ejection_time,omitempty"`
	// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected,
	// but will eject at least one host regardless of the value. MUST BE >= 0 and <= 100.
	// Defaults to 100%, allowing all hosts to be ejected from the pool.
	MaxEjectionPercent   uint32   `protobuf:"varint,4,opt,name=max_ejection_percent,json=maxEjectionPercent,proto3" json:"max_ejection_percent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficPolicySpec_OutlierDetection) Reset()         { *m = TrafficPolicySpec_OutlierDetection{} }
func (m *TrafficPolicySpec_OutlierDetection) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicySpec_OutlierDetection) ProtoMessage()    {}
func (*TrafficPolicySpec_OutlierDetection) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{0, 11}
}
func (m *TrafficPolicySpec_OutlierDetection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicySpec_OutlierDetection.Unmarshal(m, b)
}
func (m *TrafficPolicySpec_OutlierDetection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicySpec_OutlierDetection.Marshal(b, m, deterministic)
}
func (m *TrafficPolicySpec_OutlierDetection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicySpec_OutlierDetection.Merge(m, src)
}
func (m *TrafficPolicySpec_OutlierDetection) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicySpec_OutlierDetection.Size(m)
}
func (m *TrafficPolicySpec_OutlierDetection) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicySpec_OutlierDetection.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicySpec_OutlierDetection proto.InternalMessageInfo

func (m *TrafficPolicySpec_OutlierDetection) GetConsecutiveErrors() uint32 {
	if m != nil {
		return m.ConsecutiveErrors
	}
	return 0
}

func (m *TrafficPolicySpec_OutlierDetection) GetInterval() *types.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *TrafficPolicySpec_OutlierDetection) GetBaseEjectionTime() *types.Duration {
	if m != nil {
		return m.BaseEjectionTime
	}
	return nil
}

func (m *TrafficPolicySpec_OutlierDetection) GetMaxEjectionPercent() uint32 {
	if m != nil {
		return m.MaxEjectionPercent
	}
	return 0
}

type TrafficPolicyStatus struct {
	// The most recent generation observed in the the TrafficPolicy metadata.
	// if the observedGeneration does not match generation, the controller has not received the most
	// recent version of this resource.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// The state of the overall resource.
	// It will only show accepted if it has been successfully
	// applied to all target meshes.
	State ApprovalState `protobuf:"varint,2,opt,name=state,proto3,enum=networking.smh.solo.io.ApprovalState" json:"state,omitempty"`
	// The status of the TrafficPolicy for each TrafficTarget to which it has been applied.
	// A TrafficPolicy may be Accepted for some TrafficTargets and rejected for others.
	TrafficTargets       map[string]*ApprovalStatus `protobuf:"bytes,3,rep,name=traffic_targets,json=trafficTargets,proto3" json:"traffic_targets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TrafficPolicyStatus) Reset()         { *m = TrafficPolicyStatus{} }
func (m *TrafficPolicyStatus) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicyStatus) ProtoMessage()    {}
func (*TrafficPolicyStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_38af129748b071ad, []int{1}
}
func (m *TrafficPolicyStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicyStatus.Unmarshal(m, b)
}
func (m *TrafficPolicyStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicyStatus.Marshal(b, m, deterministic)
}
func (m *TrafficPolicyStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicyStatus.Merge(m, src)
}
func (m *TrafficPolicyStatus) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicyStatus.Size(m)
}
func (m *TrafficPolicyStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicyStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicyStatus proto.InternalMessageInfo

func (m *TrafficPolicyStatus) GetObservedGeneration() int64 {
	if m != nil {
		return m.ObservedGeneration
	}
	return 0
}

func (m *TrafficPolicyStatus) GetState() ApprovalState {
	if m != nil {
		return m.State
	}
	return ApprovalState_PENDING
}

func (m *TrafficPolicyStatus) GetTrafficTargets() map[string]*ApprovalStatus {
	if m != nil {
		return m.TrafficTargets
	}
	return nil
}

func init() {
	proto.RegisterType((*TrafficPolicySpec)(nil), "networking.smh.solo.io.TrafficPolicySpec")
	proto.RegisterType((*TrafficPolicySpec_RetryPolicy)(nil), "networking.smh.solo.io.TrafficPolicySpec.RetryPolicy")
	proto.RegisterType((*TrafficPolicySpec_MultiDestination)(nil), "networking.smh.solo.io.TrafficPolicySpec.MultiDestination")
	proto.RegisterType((*TrafficPolicySpec_MultiDestination_WeightedDestination)(nil), "networking.smh.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination")
	proto.RegisterType((*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination)(nil), "networking.smh.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.KubeDestination")
	proto.RegisterMapType((map[string]string)(nil), "networking.smh.solo.io.TrafficPolicySpec.MultiDestination.WeightedDestination.KubeDestination.SubsetEntry")
	proto.RegisterType((*TrafficPolicySpec_FaultInjection)(nil), "networking.smh.solo.io.TrafficPolicySpec.FaultInjection")
	proto.RegisterType((*TrafficPolicySpec_FaultInjection_Delay)(nil), "networking.smh.solo.io.TrafficPolicySpec.FaultInjection.Delay")
	proto.RegisterType((*TrafficPolicySpec_FaultInjection_Abort)(nil), "networking.smh.solo.io.TrafficPolicySpec.FaultInjection.Abort")
	proto.RegisterType((*TrafficPolicySpec_HeaderManipulation)(nil), "networking.smh.solo.io.TrafficPolicySpec.HeaderManipulation")
	proto.RegisterMapType((map[string]string)(nil), "networking.smh.solo.io.TrafficPolicySpec.HeaderManipulation.AppendRequestHeadersEntry")
	proto.RegisterMapType((map[string]string)(nil), "networking.smh.solo.io.TrafficPolicySpec.HeaderManipulation.AppendResponseHeadersEntry")
	proto.RegisterType((*TrafficPolicySpec_CorsPolicy)(nil), "networking.smh.solo.io.TrafficPolicySpec.CorsPolicy")
	proto.RegisterType((*TrafficPolicySpec_HttpMatcher)(nil), "networking.smh.solo.io.TrafficPolicySpec.HttpMatcher")
	proto.RegisterType((*TrafficPolicySpec_StringMatch)(nil), "networking.smh.solo.io.TrafficPolicySpec.StringMatch")
	proto.RegisterType((*TrafficPolicySpec_HeaderMatcher)(nil), "networking.smh.solo.io.TrafficPolicySpec.HeaderMatcher")
	proto.RegisterType((*TrafficPolicySpec_QueryParameterMatcher)(nil), "networking.smh.solo.io.TrafficPolicySpec.QueryParameterMatcher")
	proto.RegisterType((*TrafficPolicySpec_Mirror)(nil), "networking.smh.solo.io.TrafficPolicySpec.Mirror")
	proto.RegisterType((*TrafficPolicySpec_HttpMethod)(nil), "networking.smh.solo.io.TrafficPolicySpec.HttpMethod")
	proto.RegisterType((*TrafficPolicySpec_OutlierDetection)(nil), "networking.smh.solo.io.TrafficPolicySpec.OutlierDetection")
	proto.RegisterType((*TrafficPolicyStatus)(nil), "networking.smh.solo.io.TrafficPolicyStatus")
	proto.RegisterMapType((map[string]*ApprovalStatus)(nil), "networking.smh.solo.io.TrafficPolicyStatus.TrafficTargetsEntry")
}

func init() {
	proto.RegisterFile("github.com/solo-io/service-mesh-hub/api/networking/v1alpha2/traffic_policy.proto", fileDescriptor_38af129748b071ad)
}

var fileDescriptor_38af129748b071ad = []byte{
	// 1767 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4f, 0x73, 0x1b, 0x49,
	0x15, 0xb7, 0x24, 0x4b, 0xb1, 0x9f, 0x2c, 0x59, 0x6e, 0x3b, 0x5e, 0xed, 0xb0, 0x15, 0x92, 0x6c,
	0x2d, 0xf8, 0x12, 0x69, 0xd7, 0xbb, 0x0b, 0x61, 0x49, 0x91, 0xb2, 0x93, 0x10, 0x51, 0x8b, 0x37,
	0x4e, 0x3b, 0x24, 0x55, 0x39, 0x30, 0xd5, 0x1a, 0x3d, 0x49, 0x1d, 0x8f, 0xa6, 0x27, 0xdd, 0x3d,
	0x8a, 0x7d, 0x85, 0x2b, 0x55, 0xdc, 0x39, 0x72, 0xe2, 0x13, 0x70, 0xe0, 0x23, 0xf0, 0x01, 0x16,
	0x6e, 0x54, 0xf1, 0x15, 0xa8, 0xe2, 0x4c, 0x75, 0xf7, 0x8c, 0x34, 0xb2, 0xe5, 0x8d, 0xb4, 0x09,
	0x27, 0xa9, 0x5f, 0xbf, 0xf7, 0x7b, 0xff, 0xfa, 0xbd, 0x7e, 0x3d, 0x70, 0x3c, 0xe0, 0x7a, 0x98,
	0x74, 0x5b, 0x81, 0x18, 0xb5, 0x95, 0x08, 0xc5, 0x1d, 0x2e, 0xda, 0x0a, 0xe5, 0x98, 0x07, 0x78,
	0x67, 0x84, 0x6a, 0x78, 0x67, 0x98, 0x74, 0xdb, 0x2c, 0xe6, 0xed, 0x08, 0xf5, 0x1b, 0x21, 0x4f,
	0x79, 0x34, 0x68, 0x8f, 0x3f, 0x63, 0x61, 0x3c, 0x64, 0xfb, 0x6d, 0x2d, 0x59, 0xbf, 0xcf, 0x03,
	0x3f, 0x16, 0x21, 0x0f, 0xce, 0x5b, 0xb1, 0x14, 0x5a, 0x90, 0xdd, 0x29, 0x67, 0x4b, 0x8d, 0x86,
	0x2d, 0x83, 0xda, 0xe2, 0xc2, 0xbb, 0x31, 0x10, 0x62, 0x10, 0x62, 0xdb, 0x72, 0x75, 0x93, 0x7e,
	0xbb, 0x97, 0x48, 0xa6, 0xb9, 0x88, 0x9c, 0x9c, 0xf7, 0xc3, 0x8b, 0xfb, 0x9a, 0x8f, 0x50, 0x69,
	0x36, 0x8a, 0x53, 0x86, 0x4b, 0x00, 0x6f, 0x24, 0x8b, 0x63, 0x94, 0x2a, 0xdd, 0xff, 0x81, 0x3a,
	0x1d, 0xef, 0x5b, 0x5b, 0x03, 0x21, 0xb1, 0x3d, 0xfe, 0xcc, 0xfe, 0xa6, 0x9b, 0x9f, 0x2f, 0xec,
	0xd4, 0x50, 0xeb, 0x4c, 0xe3, 0xdd, 0x85, 0x85, 0x14, 0x86, 0x18, 0x68, 0x31, 0xb1, 0xe5, 0xfe,
	0xc2, 0x92, 0x63, 0x16, 0xf2, 0x9e, 0x8d, 0x83, 0xaf, 0x34, 0xd3, 0x99, 0xbd, 0x3b, 0x03, 0x31,
	0x10, 0xf6, 0x6f, 0xdb, 0xfc, 0x73, 0xd4, 0xdb, 0x7f, 0xbf, 0x0d, 0x5b, 0xcf, 0x5c, 0xd0, 0x8f,
	0x6d, 0xcc, 0x4f, 0x62, 0x0c, 0xc8, 0x53, 0xd8, 0x54, 0x22, 0x91, 0x01, 0xfa, 0x99, 0x19, 0xcd,
	0xc2, 0xcd, 0xd2, 0x5e, 0x75, 0x7f, 0xaf, 0x35, 0x3f, 0x17, 0xad, 0x17, 0x42, 0x9e, 0x86, 0x82,
	0xf5, 0x4e, 0x52, 0x7e, 0x5a, 0x77, 0x00, 0xd9, 0x9a, 0xbc, 0x84, 0x9d, 0x1e, 0x2a, 0xcd, 0xa3,
	0xd4, 0xb2, 0x0c, 0xb7, 0x68, 0x71, 0x7f, 0x7c, 0x15, 0xee, 0x89, 0xf3, 0x7a, 0x02, 0xbb, 0x9d,
	0x03, 0x99, 0x60, 0x73, 0xb8, 0x6e, 0x62, 0xec, 0x4b, 0x7c, 0x9d, 0xa0, 0xd2, 0xfe, 0x88, 0xe9,
	0x60, 0x88, 0x52, 0x35, 0x4b, 0x16, 0xfc, 0xcb, 0xab, 0xc0, 0x2f, 0x39, 0xde, 0xea, 0x68, 0x1d,
	0x1f, 0x39, 0x69, 0xba, 0x6d, 0x30, 0xa9, 0x83, 0x4c, 0x69, 0x8a, 0xf8, 0x50, 0xcb, 0xce, 0xa8,
	0x1a, 0xf2, 0xbe, 0x6e, 0xae, 0xde, 0x2c, 0xec, 0x55, 0xf7, 0xbf, 0x5a, 0x5c, 0xc5, 0x51, 0x12,
	0x6a, 0xfe, 0x70, 0xea, 0x05, 0xdd, 0x48, 0x01, 0x4f, 0x0c, 0x1e, 0x61, 0xb0, 0xd9, 0x67, 0x49,
	0xa8, 0x7d, 0x1e, 0xbd, 0xc2, 0xc0, 0x30, 0x34, 0xcb, 0x56, 0xc5, 0xdd, 0xc5, 0x55, 0xfc, 0xd2,
	0x00, 0xfc, 0x2a, 0x93, 0xa7, 0xf5, 0xfe, 0xcc, 0x9a, 0x1c, 0xc2, 0x66, 0x16, 0x29, 0x53, 0x11,
	0x22, 0xd1, 0xcd, 0x8a, 0x55, 0xf1, 0x61, 0xcb, 0x15, 0x44, 0x2b, 0x2b, 0x88, 0xd6, 0xc3, 0xb4,
	0xa2, 0x68, 0x3d, 0x95, 0x78, 0xe6, 0x04, 0xc8, 0x13, 0xb8, 0x26, 0x51, 0x4b, 0x8e, 0xaa, 0x79,
	0xcd, 0xca, 0x2e, 0x11, 0x64, 0x8a, 0x5a, 0x9e, 0xbb, 0x35, 0xcd, 0x50, 0xc8, 0x6f, 0xa0, 0x1a,
	0x08, 0xa9, 0xd2, 0xca, 0x6f, 0xae, 0x59, 0xd0, 0x2f, 0x16, 0x07, 0x7d, 0x20, 0xa4, 0x4a, 0x31,
	0x21, 0x98, 0xfc, 0x27, 0x1d, 0xa8, 0x8c, 0xb8, 0x94, 0x42, 0x36, 0xd7, 0x2d, 0xe2, 0xa7, 0x4b,
	0x24, 0xca, 0xca, 0xd1, 0x54, 0x9e, 0x8c, 0x60, 0x7b, 0x88, 0xac, 0x87, 0xd2, 0x1f, 0xb1, 0x88,
	0xc7, 0x49, 0x68, 0x03, 0xd3, 0x04, 0x0b, 0x7b, 0x6f, 0x89, 0x23, 0x66, 0x41, 0x8e, 0x72, 0x18,
	0x94, 0x0c, 0x2f, 0xd1, 0xc8, 0x00, 0xb6, 0x44, 0xa2, 0x43, 0x8e, 0xd2, 0xef, 0xa1, 0x4e, 0x4f,
	0x42, 0x75, 0xd9, 0xc3, 0xf6, 0xc4, 0x41, 0x3c, 0xcc, 0x10, 0x68, 0x43, 0x5c, 0xa0, 0x78, 0x21,
	0x54, 0x73, 0x09, 0x21, 0x1e, 0xac, 0x31, 0xad, 0x71, 0x14, 0x6b, 0xd5, 0x2c, 0xdc, 0x2c, 0xec,
	0x95, 0xe9, 0x64, 0x4d, 0x0e, 0x60, 0x33, 0x46, 0xe9, 0x6b, 0x79, 0x3e, 0x39, 0x38, 0xc5, 0xb7,
	0x1d, 0x9c, 0x5a, 0x8c, 0xf2, 0x99, 0x3c, 0x4f, 0xcf, 0x8d, 0xf7, 0xaf, 0x32, 0x34, 0x2e, 0x56,
	0x00, 0x91, 0xb0, 0x91, 0x2b, 0x6b, 0x95, 0xf6, 0x9a, 0x6f, 0xbe, 0x7f, 0x4d, 0xb5, 0x5e, 0x20,
	0x1f, 0x0c, 0x35, 0xf6, 0x66, 0xea, 0x2c, 0xaf, 0xc3, 0xfb, 0x76, 0x15, 0xb6, 0xe7, 0x70, 0x91,
	0xdf, 0x17, 0x60, 0xe3, 0x34, 0xe9, 0x9a, 0xce, 0x67, 0x3b, 0x8f, 0x0d, 0x42, 0x75, 0xff, 0xb7,
	0xef, 0xd7, 0x98, 0xd6, 0xd7, 0x49, 0x17, 0x73, 0xeb, 0xce, 0x0a, 0xad, 0x1a, 0xad, 0x69, 0xbb,
	0x23, 0xc7, 0xb0, 0xd3, 0x67, 0x3c, 0x14, 0x63, 0x94, 0x99, 0x21, 0xbe, 0xc4, 0x7e, 0xb3, 0x64,
	0x8d, 0xf9, 0xa8, 0x65, 0xef, 0x21, 0x73, 0x3b, 0x4d, 0xec, 0x78, 0xd2, 0x35, 0xe5, 0x4d, 0xb1,
	0xdf, 0x59, 0xa1, 0x24, 0x93, 0x4d, 0xe1, 0x28, 0xf6, 0xc9, 0x2e, 0x54, 0xde, 0x58, 0x3b, 0x6c,
	0xca, 0x6a, 0x34, 0x5d, 0x79, 0x7f, 0x2b, 0xc2, 0xe6, 0x05, 0x63, 0x08, 0x81, 0xd5, 0x88, 0x8d,
	0x9c, 0xeb, 0xeb, 0xd4, 0xfe, 0x27, 0x1f, 0xc1, 0xba, 0xf9, 0x55, 0x31, 0x0b, 0xd0, 0x42, 0xac,
	0xd3, 0x29, 0x81, 0xdc, 0x82, 0x8d, 0x20, 0x4c, 0x94, 0x46, 0xe9, 0x5b, 0xc9, 0x92, 0x65, 0xa8,
	0xa6, 0xb4, 0x6f, 0x0c, 0xc0, 0xef, 0x0a, 0x50, 0x51, 0x49, 0x57, 0xa1, 0xe9, 0x99, 0x26, 0xbf,
	0xaf, 0xfe, 0xbf, 0x21, 0x6d, 0x9d, 0x58, 0x65, 0x8f, 0x22, 0x2d, 0xcf, 0x69, 0xaa, 0xd9, 0x78,
	0x16, 0x0b, 0xa9, 0x6d, 0x4b, 0xad, 0x51, 0xfb, 0xdf, 0xfb, 0x19, 0x54, 0x73, 0xac, 0xa4, 0x01,
	0xa5, 0x53, 0x3c, 0x4f, 0x7d, 0x37, 0x7f, 0xc9, 0x0e, 0x94, 0xc7, 0x2c, 0x4c, 0x32, 0xb7, 0xdd,
	0xe2, 0xab, 0xe2, 0xdd, 0xc2, 0x21, 0x81, 0x46, 0xfe, 0x52, 0xd3, 0xe7, 0x31, 0x7a, 0xff, 0x28,
	0x41, 0x7d, 0xb6, 0x01, 0x93, 0xe7, 0x50, 0xee, 0x61, 0xc8, 0xce, 0xd3, 0xb3, 0xf4, 0x8b, 0xef,
	0xdb, 0xc9, 0x5b, 0x0f, 0x0d, 0x4a, 0x67, 0x85, 0x3a, 0x38, 0x83, 0xcb, 0xba, 0xc6, 0x9d, 0xe2,
	0x3b, 0xe2, 0x1e, 0x18, 0x14, 0x83, 0x6b, 0xe1, 0xc8, 0x0d, 0x80, 0x18, 0x65, 0x80, 0x91, 0x66,
	0x03, 0xb4, 0xb1, 0x2a, 0xd0, 0x1c, 0xc5, 0xfb, 0x73, 0x01, 0xca, 0xd6, 0x14, 0x72, 0x0f, 0xaa,
	0x7d, 0x7e, 0x86, 0x3d, 0xdf, 0xf9, 0xf7, 0xb6, 0x6e, 0xd0, 0x59, 0xa1, 0x60, 0xf9, 0x9d, 0x74,
	0x07, 0xb6, 0xf0, 0x2c, 0x16, 0x11, 0x46, 0x9a, 0xb3, 0x30, 0xc5, 0x28, 0xbd, 0x1d, 0xa3, 0x91,
	0x93, 0xb2, 0x48, 0x87, 0x5b, 0xb0, 0x69, 0x27, 0x00, 0x0b, 0xe1, 0xf2, 0x70, 0x17, 0xca, 0xd6,
	0x2d, 0x72, 0x0b, 0xaa, 0x76, 0xcf, 0x0c, 0x43, 0x89, 0xb2, 0x17, 0x76, 0xd9, 0x18, 0x62, 0x88,
	0x27, 0x96, 0x76, 0xb8, 0x01, 0x80, 0xa6, 0xc9, 0x5b, 0xc9, 0xc3, 0x5d, 0x53, 0x7c, 0x33, 0x57,
	0xb0, 0x43, 0xfc, 0xeb, 0x2a, 0x90, 0xcb, 0xdd, 0x9b, 0xfc, 0x04, 0x3e, 0x90, 0x38, 0x12, 0x63,
	0x53, 0xa1, 0x2a, 0x16, 0x91, 0x42, 0xdf, 0xf5, 0x73, 0xd5, 0xdc, 0xb8, 0x59, 0xda, 0x5b, 0xa7,
	0xd7, 0xdd, 0x36, 0x4d, 0x77, 0x1d, 0x84, 0x22, 0x7f, 0x2c, 0xc0, 0x07, 0x66, 0xdc, 0x8c, 0x7a,
	0x97, 0x05, 0x6b, 0xb6, 0x42, 0x5e, 0xbc, 0xcb, 0xad, 0xd2, 0x3a, 0xb0, 0xd8, 0x17, 0xb4, 0xba,
	0x72, 0xb8, 0xce, 0xe6, 0xed, 0x91, 0x2f, 0x60, 0x77, 0xe2, 0x89, 0x9b, 0x0f, 0x32, 0x7b, 0xea,
	0xd6, 0x91, 0x9d, 0xcc, 0x11, 0xbb, 0x99, 0x49, 0xfd, 0xa1, 0x00, 0xbb, 0x13, 0x3f, 0x66, 0xc5,
	0x36, 0xad, 0x1b, 0xcf, 0xdf, 0x8b, 0x1b, 0x79, 0x9d, 0xce, 0x8b, 0x1d, 0x36, 0x67, 0xcb, 0xeb,
	0x80, 0x77, 0xb5, 0xe7, 0xcb, 0x54, 0xb7, 0xf7, 0x18, 0x3e, 0xbc, 0x52, 0xf9, 0x52, 0x40, 0xdf,
	0x16, 0x01, 0xa6, 0xf3, 0x09, 0x79, 0x09, 0x35, 0x16, 0x86, 0xe2, 0x8d, 0x2f, 0x24, 0x1f, 0xf0,
	0xc8, 0x4c, 0x50, 0x4b, 0x8e, 0xa9, 0x27, 0x5a, 0xf2, 0x68, 0x60, 0x87, 0x52, 0xba, 0x61, 0xb1,
	0x9e, 0x38, 0x28, 0xf2, 0x71, 0x86, 0x3d, 0x42, 0x3d, 0x14, 0x3d, 0x65, 0xe7, 0xeb, 0xf5, 0x94,
	0xe9, 0xc8, 0xd1, 0xa6, 0x4c, 0x59, 0x9e, 0x4a, 0x39, 0xa6, 0x2c, 0xad, 0x9f, 0x40, 0xdd, 0x94,
	0x59, 0xee, 0x50, 0xae, 0x5a, 0xae, 0x9a, 0xa3, 0x66, 0x6c, 0xfb, 0x70, 0x6d, 0xc4, 0xce, 0xfc,
	0xac, 0x51, 0x7c, 0xe7, 0x2c, 0x50, 0x19, 0xb1, 0xb3, 0x83, 0x01, 0x92, 0xc7, 0xb0, 0xe5, 0xf4,
	0x07, 0x12, 0x7b, 0xae, 0x8c, 0x55, 0x3a, 0x82, 0x7a, 0x97, 0xa4, 0x0f, 0x85, 0x08, 0x9f, 0x9b,
	0x50, 0xd2, 0x86, 0x15, 0x7a, 0x30, 0x95, 0xf1, 0xfe, 0x5b, 0x84, 0x6a, 0x6e, 0x64, 0x27, 0x4d,
	0xa8, 0xc4, 0x12, 0xfb, 0xfc, 0xcc, 0xe5, 0xa5, 0xb3, 0x42, 0xd3, 0x35, 0xd9, 0x85, 0x32, 0x9e,
	0xb1, 0xc0, 0xb5, 0x4a, 0xb3, 0xe1, 0x96, 0x86, 0x2e, 0x71, 0x80, 0x67, 0xee, 0xc6, 0x32, 0x74,
	0xbb, 0x24, 0x4f, 0xe1, 0x5a, 0xe6, 0x76, 0xc5, 0x66, 0xe7, 0xa7, 0xcb, 0x1f, 0x62, 0xf7, 0x8c,
	0xc8, 0x70, 0xc8, 0x2b, 0x68, 0xbc, 0x4e, 0x50, 0x9e, 0xfb, 0x31, 0x93, 0x6c, 0x84, 0xda, 0x60,
	0xbb, 0xcc, 0xdf, 0x5f, 0x1c, 0xfb, 0xa9, 0x41, 0x38, 0xce, 0x00, 0x32, 0x1d, 0x9b, 0xaf, 0x67,
	0xc8, 0x8a, 0xfc, 0x1a, 0x2a, 0xee, 0x00, 0x2c, 0x3f, 0x48, 0xdb, 0x78, 0x5a, 0x59, 0x9a, 0x62,
	0x1c, 0x36, 0xa0, 0x1e, 0x33, 0x3d, 0xf4, 0x55, 0x8c, 0x01, 0xef, 0x73, 0x94, 0x1e, 0x42, 0x35,
	0x77, 0x06, 0xa7, 0xd1, 0x2d, 0xcc, 0x46, 0x77, 0x9a, 0x8f, 0xe2, 0xe5, 0x7c, 0xcc, 0x8b, 0xbb,
	0xe9, 0xc4, 0xf6, 0xf5, 0xe6, 0x3a, 0xae, 0x84, 0xda, 0x4c, 0x30, 0xe7, 0x4e, 0x26, 0x73, 0xeb,
	0xce, 0x50, 0xa7, 0x0a, 0xd6, 0xb2, 0xb4, 0xde, 0x82, 0x0d, 0x1e, 0x8d, 0x51, 0xa6, 0x6f, 0x44,
	0x7b, 0x19, 0xac, 0xd1, 0xaa, 0xa3, 0x59, 0x25, 0xde, 0x0b, 0xb8, 0x3e, 0x37, 0xc8, 0xef, 0xaa,
	0xdb, 0xfb, 0x53, 0x01, 0x2a, 0xee, 0x4d, 0x41, 0x3a, 0x73, 0x67, 0xcc, 0x8f, 0xe7, 0x8c, 0x75,
	0x0f, 0xdc, 0x04, 0x95, 0x9f, 0xee, 0x66, 0x06, 0xc5, 0xd9, 0xab, 0xba, 0x78, 0xf1, 0xaa, 0x9e,
	0x0c, 0x3c, 0xa5, 0xe9, 0xc0, 0x33, 0x77, 0x6a, 0x39, 0x02, 0x98, 0x26, 0x9e, 0xdc, 0x9f, 0x1c,
	0x1f, 0x63, 0x59, 0xfd, 0xea, 0xe7, 0xf9, 0x54, 0xc6, 0x95, 0x68, 0x2a, 0xe6, 0xfd, 0xa7, 0x00,
	0x8d, 0x8b, 0x6f, 0x0f, 0x72, 0x07, 0x48, 0x60, 0x1a, 0x72, 0x90, 0x68, 0x3e, 0x46, 0xdf, 0xde,
	0xb8, 0xee, 0x91, 0x51, 0xa3, 0x5b, 0xb9, 0x9d, 0x47, 0x76, 0x83, 0x7c, 0x09, 0x6b, 0x3c, 0xd2,
	0x28, 0xc7, 0x2c, 0x7c, 0xfb, 0x33, 0x63, 0xc2, 0x4a, 0x1e, 0x03, 0xe9, 0x32, 0x85, 0x3e, 0x4e,
	0xee, 0x6e, 0x9e, 0x0e, 0xa4, 0xdf, 0x09, 0xd0, 0x30, 0x42, 0x8f, 0x52, 0x19, 0xf3, 0x5a, 0x21,
	0x9f, 0xc2, 0x8e, 0xe9, 0x6c, 0x13, 0x9c, 0x34, 0xaa, 0xf6, 0xcc, 0xd4, 0x28, 0x19, 0xb1, 0xb3,
	0x8c, 0xfd, 0xd8, 0xed, 0xdc, 0xfe, 0x67, 0x11, 0xb6, 0x67, 0x0b, 0xca, 0x8e, 0x17, 0xa4, 0x0d,
	0xdb, 0xa2, 0x6b, 0x72, 0x8d, 0x3d, 0x7f, 0x80, 0x11, 0x3a, 0x95, 0xd6, 0xf3, 0x12, 0x25, 0xd9,
	0xd6, 0xe3, 0xc9, 0x0e, 0xf9, 0x39, 0x94, 0xed, 0xa7, 0x1b, 0xeb, 0x77, 0x7d, 0xff, 0x93, 0xab,
	0xc2, 0x7f, 0x10, 0xc7, 0x52, 0x8c, 0x59, 0x68, 0xf4, 0x20, 0x75, 0x32, 0x64, 0x08, 0x9b, 0xd9,
	0x27, 0x0a, 0xcd, 0xe4, 0x00, 0x75, 0xf6, 0x1d, 0x64, 0xc1, 0x36, 0x63, 0x6d, 0xce, 0x68, 0xcf,
	0x1c, 0x82, 0xbb, 0x70, 0xeb, 0x7a, 0x86, 0xe8, 0xf1, 0x89, 0xbb, 0x79, 0xb6, 0x39, 0x57, 0xe3,
	0xbd, 0x7c, 0x99, 0x54, 0xf7, 0x7f, 0xb4, 0x88, 0x3f, 0x89, 0xca, 0x4f, 0xda, 0x4f, 0xff, 0xf2,
	0xef, 0x1b, 0x85, 0x97, 0x5f, 0x2f, 0xf2, 0x6d, 0x31, 0x3e, 0x1d, 0x5c, 0xf8, 0x36, 0x96, 0xd7,
	0x31, 0xf9, 0x4e, 0xd6, 0xad, 0xd8, 0x43, 0xf0, 0xf9, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x56,
	0x79, 0x62, 0x4e, 0xb1, 0x14, 0x00, 0x00,
}

func (this *TrafficPolicySpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec)
	if !ok {
		that2, ok := that.(TrafficPolicySpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SourceSelector) != len(that1.SourceSelector) {
		return false
	}
	for i := range this.SourceSelector {
		if !this.SourceSelector[i].Equal(that1.SourceSelector[i]) {
			return false
		}
	}
	if len(this.DestinationSelector) != len(that1.DestinationSelector) {
		return false
	}
	for i := range this.DestinationSelector {
		if !this.DestinationSelector[i].Equal(that1.DestinationSelector[i]) {
			return false
		}
	}
	if len(this.HttpRequestMatchers) != len(that1.HttpRequestMatchers) {
		return false
	}
	for i := range this.HttpRequestMatchers {
		if !this.HttpRequestMatchers[i].Equal(that1.HttpRequestMatchers[i]) {
			return false
		}
	}
	if !this.TrafficShift.Equal(that1.TrafficShift) {
		return false
	}
	if !this.FaultInjection.Equal(that1.FaultInjection) {
		return false
	}
	if !this.RequestTimeout.Equal(that1.RequestTimeout) {
		return false
	}
	if !this.Retries.Equal(that1.Retries) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if !this.Mirror.Equal(that1.Mirror) {
		return false
	}
	if !this.HeaderManipulation.Equal(that1.HeaderManipulation) {
		return false
	}
	if !this.OutlierDetection.Equal(that1.OutlierDetection) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_RetryPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_RetryPolicy)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_RetryPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Attempts != that1.Attempts {
		return false
	}
	if !this.PerTryTimeout.Equal(that1.PerTryTimeout) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_MultiDestination) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_MultiDestination)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_MultiDestination)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Destinations) != len(that1.Destinations) {
		return false
	}
	for i := range this.Destinations {
		if !this.Destinations[i].Equal(that1.Destinations[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_MultiDestination_WeightedDestination) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_MultiDestination_WeightedDestination)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_MultiDestination_WeightedDestination)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DestinationType == nil {
		if this.DestinationType != nil {
			return false
		}
	} else if this.DestinationType == nil {
		return false
	} else if !this.DestinationType.Equal(that1.DestinationType) {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeService)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_MultiDestination_WeightedDestination_KubeService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KubeService.Equal(that1.KubeService) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceRef)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_MultiDestination_WeightedDestination_FailoverServiceRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FailoverServiceRef.Equal(that1.FailoverServiceRef) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_MultiDestination_WeightedDestination_KubeDestination)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.ClusterName != that1.ClusterName {
		return false
	}
	if len(this.Subset) != len(that1.Subset) {
		return false
	}
	for i := range this.Subset {
		if this.Subset[i] != that1.Subset[i] {
			return false
		}
	}
	if this.Port != that1.Port {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_FaultInjection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_FaultInjection)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_FaultInjection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.FaultInjectionType == nil {
		if this.FaultInjectionType != nil {
			return false
		}
	} else if this.FaultInjectionType == nil {
		return false
	} else if !this.FaultInjectionType.Equal(that1.FaultInjectionType) {
		return false
	}
	if this.Percentage != that1.Percentage {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_FaultInjection_Delay_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_FaultInjection_Delay_)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_FaultInjection_Delay_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Delay.Equal(that1.Delay) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_FaultInjection_Abort_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_FaultInjection_Abort_)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_FaultInjection_Abort_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Abort.Equal(that1.Abort) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_FaultInjection_Delay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_FaultInjection_Delay)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_FaultInjection_Delay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HttpDelayType == nil {
		if this.HttpDelayType != nil {
			return false
		}
	} else if this.HttpDelayType == nil {
		return false
	} else if !this.HttpDelayType.Equal(that1.HttpDelayType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_FaultInjection_Delay_FixedDelay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_FaultInjection_Delay_FixedDelay)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_FaultInjection_Delay_FixedDelay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FixedDelay.Equal(that1.FixedDelay) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_FaultInjection_Delay_ExponentialDelay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_FaultInjection_Delay_ExponentialDelay)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_FaultInjection_Delay_ExponentialDelay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExponentialDelay.Equal(that1.ExponentialDelay) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_FaultInjection_Abort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_FaultInjection_Abort)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_FaultInjection_Abort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ErrorType == nil {
		if this.ErrorType != nil {
			return false
		}
	} else if this.ErrorType == nil {
		return false
	} else if !this.ErrorType.Equal(that1.ErrorType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_FaultInjection_Abort_HttpStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_FaultInjection_Abort_HttpStatus)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_FaultInjection_Abort_HttpStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpStatus != that1.HttpStatus {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_HeaderManipulation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_HeaderManipulation)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_HeaderManipulation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RemoveResponseHeaders) != len(that1.RemoveResponseHeaders) {
		return false
	}
	for i := range this.RemoveResponseHeaders {
		if this.RemoveResponseHeaders[i] != that1.RemoveResponseHeaders[i] {
			return false
		}
	}
	if len(this.AppendResponseHeaders) != len(that1.AppendResponseHeaders) {
		return false
	}
	for i := range this.AppendResponseHeaders {
		if this.AppendResponseHeaders[i] != that1.AppendResponseHeaders[i] {
			return false
		}
	}
	if len(this.RemoveRequestHeaders) != len(that1.RemoveRequestHeaders) {
		return false
	}
	for i := range this.RemoveRequestHeaders {
		if this.RemoveRequestHeaders[i] != that1.RemoveRequestHeaders[i] {
			return false
		}
	}
	if len(this.AppendRequestHeaders) != len(that1.AppendRequestHeaders) {
		return false
	}
	for i := range this.AppendRequestHeaders {
		if this.AppendRequestHeaders[i] != that1.AppendRequestHeaders[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_CorsPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_CorsPolicy)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_CorsPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AllowOrigins) != len(that1.AllowOrigins) {
		return false
	}
	for i := range this.AllowOrigins {
		if !this.AllowOrigins[i].Equal(that1.AllowOrigins[i]) {
			return false
		}
	}
	if len(this.AllowMethods) != len(that1.AllowMethods) {
		return false
	}
	for i := range this.AllowMethods {
		if this.AllowMethods[i] != that1.AllowMethods[i] {
			return false
		}
	}
	if len(this.AllowHeaders) != len(that1.AllowHeaders) {
		return false
	}
	for i := range this.AllowHeaders {
		if this.AllowHeaders[i] != that1.AllowHeaders[i] {
			return false
		}
	}
	if len(this.ExposeHeaders) != len(that1.ExposeHeaders) {
		return false
	}
	for i := range this.ExposeHeaders {
		if this.ExposeHeaders[i] != that1.ExposeHeaders[i] {
			return false
		}
	}
	if !this.MaxAge.Equal(that1.MaxAge) {
		return false
	}
	if !this.AllowCredentials.Equal(that1.AllowCredentials) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_HttpMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_HttpMatcher)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_HttpMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PathSpecifier == nil {
		if this.PathSpecifier != nil {
			return false
		}
	} else if this.PathSpecifier == nil {
		return false
	} else if !this.PathSpecifier.Equal(that1.PathSpecifier) {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if len(this.QueryParameters) != len(that1.QueryParameters) {
		return false
	}
	for i := range this.QueryParameters {
		if !this.QueryParameters[i].Equal(that1.QueryParameters[i]) {
			return false
		}
	}
	if !this.Method.Equal(that1.Method) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_HttpMatcher_Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_HttpMatcher_Prefix)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_HttpMatcher_Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_HttpMatcher_Exact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_HttpMatcher_Exact)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_HttpMatcher_Exact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Exact != that1.Exact {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_HttpMatcher_Regex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_HttpMatcher_Regex)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_HttpMatcher_Regex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Regex != that1.Regex {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_StringMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_StringMatch)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_StringMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.MatchType == nil {
		if this.MatchType != nil {
			return false
		}
	} else if this.MatchType == nil {
		return false
	} else if !this.MatchType.Equal(that1.MatchType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_StringMatch_Exact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_StringMatch_Exact)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_StringMatch_Exact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Exact != that1.Exact {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_StringMatch_Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_StringMatch_Prefix)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_StringMatch_Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_StringMatch_Regex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_StringMatch_Regex)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_StringMatch_Regex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Regex != that1.Regex {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_HeaderMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_HeaderMatcher)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_HeaderMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Regex != that1.Regex {
		return false
	}
	if this.InvertMatch != that1.InvertMatch {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_QueryParameterMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_QueryParameterMatcher)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_QueryParameterMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Regex != that1.Regex {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_Mirror) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_Mirror)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_Mirror)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DestinationType == nil {
		if this.DestinationType != nil {
			return false
		}
	} else if this.DestinationType == nil {
		return false
	} else if !this.DestinationType.Equal(that1.DestinationType) {
		return false
	}
	if this.Percentage != that1.Percentage {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_Mirror_KubeService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_Mirror_KubeService)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_Mirror_KubeService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KubeService.Equal(that1.KubeService) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_HttpMethod) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_HttpMethod)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_HttpMethod)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicySpec_OutlierDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicySpec_OutlierDetection)
	if !ok {
		that2, ok := that.(TrafficPolicySpec_OutlierDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConsecutiveErrors != that1.ConsecutiveErrors {
		return false
	}
	if !this.Interval.Equal(that1.Interval) {
		return false
	}
	if !this.BaseEjectionTime.Equal(that1.BaseEjectionTime) {
		return false
	}
	if this.MaxEjectionPercent != that1.MaxEjectionPercent {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficPolicyStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficPolicyStatus)
	if !ok {
		that2, ok := that.(TrafficPolicyStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObservedGeneration != that1.ObservedGeneration {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if len(this.TrafficTargets) != len(that1.TrafficTargets) {
		return false
	}
	for i := range this.TrafficTargets {
		if !this.TrafficTargets[i].Equal(that1.TrafficTargets[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
