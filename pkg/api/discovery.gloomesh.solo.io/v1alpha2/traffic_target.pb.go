// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo-mesh/api/discovery/v1alpha2/traffic_target.proto

package v1alpha2

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/networking.gloomesh.solo.io/v1alpha2"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//*
//The TrafficTarget is an abstraction for a traffic target which we have discovered to be part of a
//given mesh.
type TrafficTargetSpec struct {
	// The type of traffic target backing the TrafficTarget.
	//
	// Types that are valid to be assigned to Type:
	//	*TrafficTargetSpec_KubeService_
	Type isTrafficTargetSpec_Type `protobuf_oneof:"type"`
	// The mesh with which this traffic target is associated.
	Mesh                 *v1.ObjectRef `protobuf:"bytes,2,opt,name=mesh,proto3" json:"mesh,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TrafficTargetSpec) Reset()         { *m = TrafficTargetSpec{} }
func (m *TrafficTargetSpec) String() string { return proto.CompactTextString(m) }
func (*TrafficTargetSpec) ProtoMessage()    {}
func (*TrafficTargetSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3840f4d363603fb2, []int{0}
}
func (m *TrafficTargetSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficTargetSpec.Unmarshal(m, b)
}
func (m *TrafficTargetSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficTargetSpec.Marshal(b, m, deterministic)
}
func (m *TrafficTargetSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficTargetSpec.Merge(m, src)
}
func (m *TrafficTargetSpec) XXX_Size() int {
	return xxx_messageInfo_TrafficTargetSpec.Size(m)
}
func (m *TrafficTargetSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficTargetSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficTargetSpec proto.InternalMessageInfo

type isTrafficTargetSpec_Type interface {
	isTrafficTargetSpec_Type()
	Equal(interface{}) bool
}

type TrafficTargetSpec_KubeService_ struct {
	KubeService *TrafficTargetSpec_KubeService `protobuf:"bytes,1,opt,name=kube_service,json=kubeService,proto3,oneof" json:"kube_service,omitempty"`
}

func (*TrafficTargetSpec_KubeService_) isTrafficTargetSpec_Type() {}

func (m *TrafficTargetSpec) GetType() isTrafficTargetSpec_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *TrafficTargetSpec) GetKubeService() *TrafficTargetSpec_KubeService {
	if x, ok := m.GetType().(*TrafficTargetSpec_KubeService_); ok {
		return x.KubeService
	}
	return nil
}

func (m *TrafficTargetSpec) GetMesh() *v1.ObjectRef {
	if m != nil {
		return m.Mesh
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TrafficTargetSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TrafficTargetSpec_KubeService_)(nil),
	}
}

type TrafficTargetSpec_KubeService struct {
	// A reference to the kube-native traffic target that this TrafficTarget represents.
	Ref *v1.ClusterObjectRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// Selectors for the set of pods targeted by the k8s Service.
	WorkloadSelectorLabels map[string]string `protobuf:"bytes,2,rep,name=workload_selector_labels,json=workloadSelectorLabels,proto3" json:"workload_selector_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Labels on the underlying k8s Service itself.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The ports exposed by the underlying service.
	Ports []*TrafficTargetSpec_KubeService_KubeServicePort `protobuf:"bytes,4,rep,name=ports,proto3" json:"ports,omitempty"`
	// Subsets for routing, based on labels.
	Subsets              map[string]*TrafficTargetSpec_KubeService_Subset `protobuf:"bytes,5,rep,name=subsets,proto3" json:"subsets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *TrafficTargetSpec_KubeService) Reset()         { *m = TrafficTargetSpec_KubeService{} }
func (m *TrafficTargetSpec_KubeService) String() string { return proto.CompactTextString(m) }
func (*TrafficTargetSpec_KubeService) ProtoMessage()    {}
func (*TrafficTargetSpec_KubeService) Descriptor() ([]byte, []int) {
	return fileDescriptor_3840f4d363603fb2, []int{0, 0}
}
func (m *TrafficTargetSpec_KubeService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficTargetSpec_KubeService.Unmarshal(m, b)
}
func (m *TrafficTargetSpec_KubeService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficTargetSpec_KubeService.Marshal(b, m, deterministic)
}
func (m *TrafficTargetSpec_KubeService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficTargetSpec_KubeService.Merge(m, src)
}
func (m *TrafficTargetSpec_KubeService) XXX_Size() int {
	return xxx_messageInfo_TrafficTargetSpec_KubeService.Size(m)
}
func (m *TrafficTargetSpec_KubeService) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficTargetSpec_KubeService.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficTargetSpec_KubeService proto.InternalMessageInfo

func (m *TrafficTargetSpec_KubeService) GetRef() *v1.ClusterObjectRef {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *TrafficTargetSpec_KubeService) GetWorkloadSelectorLabels() map[string]string {
	if m != nil {
		return m.WorkloadSelectorLabels
	}
	return nil
}

func (m *TrafficTargetSpec_KubeService) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *TrafficTargetSpec_KubeService) GetPorts() []*TrafficTargetSpec_KubeService_KubeServicePort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *TrafficTargetSpec_KubeService) GetSubsets() map[string]*TrafficTargetSpec_KubeService_Subset {
	if m != nil {
		return m.Subsets
	}
	return nil
}

type TrafficTargetSpec_KubeService_KubeServicePort struct {
	// External-facing port for this k8s service (NOT the service's target port on the backing pods).
	Port     uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Available in k8s 1.18+, specifies the application protocol.
	AppProtocol          string   `protobuf:"bytes,4,opt,name=app_protocol,json=appProtocol,proto3" json:"app_protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficTargetSpec_KubeService_KubeServicePort) Reset() {
	*m = TrafficTargetSpec_KubeService_KubeServicePort{}
}
func (m *TrafficTargetSpec_KubeService_KubeServicePort) String() string {
	return proto.CompactTextString(m)
}
func (*TrafficTargetSpec_KubeService_KubeServicePort) ProtoMessage() {}
func (*TrafficTargetSpec_KubeService_KubeServicePort) Descriptor() ([]byte, []int) {
	return fileDescriptor_3840f4d363603fb2, []int{0, 0, 0}
}
func (m *TrafficTargetSpec_KubeService_KubeServicePort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficTargetSpec_KubeService_KubeServicePort.Unmarshal(m, b)
}
func (m *TrafficTargetSpec_KubeService_KubeServicePort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficTargetSpec_KubeService_KubeServicePort.Marshal(b, m, deterministic)
}
func (m *TrafficTargetSpec_KubeService_KubeServicePort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficTargetSpec_KubeService_KubeServicePort.Merge(m, src)
}
func (m *TrafficTargetSpec_KubeService_KubeServicePort) XXX_Size() int {
	return xxx_messageInfo_TrafficTargetSpec_KubeService_KubeServicePort.Size(m)
}
func (m *TrafficTargetSpec_KubeService_KubeServicePort) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficTargetSpec_KubeService_KubeServicePort.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficTargetSpec_KubeService_KubeServicePort proto.InternalMessageInfo

func (m *TrafficTargetSpec_KubeService_KubeServicePort) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *TrafficTargetSpec_KubeService_KubeServicePort) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TrafficTargetSpec_KubeService_KubeServicePort) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *TrafficTargetSpec_KubeService_KubeServicePort) GetAppProtocol() string {
	if m != nil {
		return m.AppProtocol
	}
	return ""
}

// Subsets for routing, based on labels.
type TrafficTargetSpec_KubeService_Subset struct {
	Values               []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficTargetSpec_KubeService_Subset) Reset()         { *m = TrafficTargetSpec_KubeService_Subset{} }
func (m *TrafficTargetSpec_KubeService_Subset) String() string { return proto.CompactTextString(m) }
func (*TrafficTargetSpec_KubeService_Subset) ProtoMessage()    {}
func (*TrafficTargetSpec_KubeService_Subset) Descriptor() ([]byte, []int) {
	return fileDescriptor_3840f4d363603fb2, []int{0, 0, 4}
}
func (m *TrafficTargetSpec_KubeService_Subset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficTargetSpec_KubeService_Subset.Unmarshal(m, b)
}
func (m *TrafficTargetSpec_KubeService_Subset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficTargetSpec_KubeService_Subset.Marshal(b, m, deterministic)
}
func (m *TrafficTargetSpec_KubeService_Subset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficTargetSpec_KubeService_Subset.Merge(m, src)
}
func (m *TrafficTargetSpec_KubeService_Subset) XXX_Size() int {
	return xxx_messageInfo_TrafficTargetSpec_KubeService_Subset.Size(m)
}
func (m *TrafficTargetSpec_KubeService_Subset) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficTargetSpec_KubeService_Subset.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficTargetSpec_KubeService_Subset proto.InternalMessageInfo

func (m *TrafficTargetSpec_KubeService_Subset) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type TrafficTargetStatus struct {
	// The most recent generation observed in the the TrafficPolicy metadata.
	// if the observedGeneration does not match generation, the controller has not received the most
	// recent version of this resource.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// The set of Traffic Policies that have been applied to this TrafficTarget
	AppliedTrafficPolicies []*TrafficTargetStatus_AppliedTrafficPolicy `protobuf:"bytes,3,rep,name=applied_traffic_policies,json=appliedTrafficPolicies,proto3" json:"applied_traffic_policies,omitempty"`
	// The set of Access Policies that have been applied to this TrafficTarget
	AppliedAccessPolicies []*TrafficTargetStatus_AppliedAccessPolicy `protobuf:"bytes,4,rep,name=applied_access_policies,json=appliedAccessPolicies,proto3" json:"applied_access_policies,omitempty"`
	// The local fully qualified domain
	LocalFqdn string `protobuf:"bytes,5,opt,name=local_fqdn,json=localFqdn,proto3" json:"local_fqdn,omitempty"`
	// The remote fully qualified domain
	RemoteFqdn           string   `protobuf:"bytes,6,opt,name=remote_fqdn,json=remoteFqdn,proto3" json:"remote_fqdn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficTargetStatus) Reset()         { *m = TrafficTargetStatus{} }
func (m *TrafficTargetStatus) String() string { return proto.CompactTextString(m) }
func (*TrafficTargetStatus) ProtoMessage()    {}
func (*TrafficTargetStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_3840f4d363603fb2, []int{1}
}
func (m *TrafficTargetStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficTargetStatus.Unmarshal(m, b)
}
func (m *TrafficTargetStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficTargetStatus.Marshal(b, m, deterministic)
}
func (m *TrafficTargetStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficTargetStatus.Merge(m, src)
}
func (m *TrafficTargetStatus) XXX_Size() int {
	return xxx_messageInfo_TrafficTargetStatus.Size(m)
}
func (m *TrafficTargetStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficTargetStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficTargetStatus proto.InternalMessageInfo

func (m *TrafficTargetStatus) GetObservedGeneration() int64 {
	if m != nil {
		return m.ObservedGeneration
	}
	return 0
}

func (m *TrafficTargetStatus) GetAppliedTrafficPolicies() []*TrafficTargetStatus_AppliedTrafficPolicy {
	if m != nil {
		return m.AppliedTrafficPolicies
	}
	return nil
}

func (m *TrafficTargetStatus) GetAppliedAccessPolicies() []*TrafficTargetStatus_AppliedAccessPolicy {
	if m != nil {
		return m.AppliedAccessPolicies
	}
	return nil
}

func (m *TrafficTargetStatus) GetLocalFqdn() string {
	if m != nil {
		return m.LocalFqdn
	}
	return ""
}

func (m *TrafficTargetStatus) GetRemoteFqdn() string {
	if m != nil {
		return m.RemoteFqdn
	}
	return ""
}

// AppliedTrafficPolicy represents a traffic policy that has been applied to the TrafficTarget.
// if an existing Traffic Policy becomes invalid, the last applied policy will be used
type TrafficTargetStatus_AppliedTrafficPolicy struct {
	// reference to the traffic policy
	Ref *v1.ObjectRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// the observed generation of the accepted traffic policy
	ObservedGeneration int64 `protobuf:"varint,2,opt,name=observedGeneration,proto3" json:"observedGeneration,omitempty"`
	// the last known valid spec of the traffic policy
	Spec                 *v1alpha2.TrafficPolicySpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *TrafficTargetStatus_AppliedTrafficPolicy) Reset() {
	*m = TrafficTargetStatus_AppliedTrafficPolicy{}
}
func (m *TrafficTargetStatus_AppliedTrafficPolicy) String() string { return proto.CompactTextString(m) }
func (*TrafficTargetStatus_AppliedTrafficPolicy) ProtoMessage()    {}
func (*TrafficTargetStatus_AppliedTrafficPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_3840f4d363603fb2, []int{1, 0}
}
func (m *TrafficTargetStatus_AppliedTrafficPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficTargetStatus_AppliedTrafficPolicy.Unmarshal(m, b)
}
func (m *TrafficTargetStatus_AppliedTrafficPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficTargetStatus_AppliedTrafficPolicy.Marshal(b, m, deterministic)
}
func (m *TrafficTargetStatus_AppliedTrafficPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficTargetStatus_AppliedTrafficPolicy.Merge(m, src)
}
func (m *TrafficTargetStatus_AppliedTrafficPolicy) XXX_Size() int {
	return xxx_messageInfo_TrafficTargetStatus_AppliedTrafficPolicy.Size(m)
}
func (m *TrafficTargetStatus_AppliedTrafficPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficTargetStatus_AppliedTrafficPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficTargetStatus_AppliedTrafficPolicy proto.InternalMessageInfo

func (m *TrafficTargetStatus_AppliedTrafficPolicy) GetRef() *v1.ObjectRef {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *TrafficTargetStatus_AppliedTrafficPolicy) GetObservedGeneration() int64 {
	if m != nil {
		return m.ObservedGeneration
	}
	return 0
}

func (m *TrafficTargetStatus_AppliedTrafficPolicy) GetSpec() *v1alpha2.TrafficPolicySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// AppliedAccessPolicy represents a access policy that has been applied to the TrafficTarget.
// if an existing Access Policy becomes invalid, the last applied policy will be used
type TrafficTargetStatus_AppliedAccessPolicy struct {
	// reference to the access policy
	Ref *v1.ObjectRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// the observed generation of the accepted access policy
	ObservedGeneration int64 `protobuf:"varint,2,opt,name=observedGeneration,proto3" json:"observedGeneration,omitempty"`
	// the last known valid spec of the access policy
	Spec                 *v1alpha2.AccessPolicySpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TrafficTargetStatus_AppliedAccessPolicy) Reset() {
	*m = TrafficTargetStatus_AppliedAccessPolicy{}
}
func (m *TrafficTargetStatus_AppliedAccessPolicy) String() string { return proto.CompactTextString(m) }
func (*TrafficTargetStatus_AppliedAccessPolicy) ProtoMessage()    {}
func (*TrafficTargetStatus_AppliedAccessPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_3840f4d363603fb2, []int{1, 1}
}
func (m *TrafficTargetStatus_AppliedAccessPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficTargetStatus_AppliedAccessPolicy.Unmarshal(m, b)
}
func (m *TrafficTargetStatus_AppliedAccessPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficTargetStatus_AppliedAccessPolicy.Marshal(b, m, deterministic)
}
func (m *TrafficTargetStatus_AppliedAccessPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficTargetStatus_AppliedAccessPolicy.Merge(m, src)
}
func (m *TrafficTargetStatus_AppliedAccessPolicy) XXX_Size() int {
	return xxx_messageInfo_TrafficTargetStatus_AppliedAccessPolicy.Size(m)
}
func (m *TrafficTargetStatus_AppliedAccessPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficTargetStatus_AppliedAccessPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficTargetStatus_AppliedAccessPolicy proto.InternalMessageInfo

func (m *TrafficTargetStatus_AppliedAccessPolicy) GetRef() *v1.ObjectRef {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *TrafficTargetStatus_AppliedAccessPolicy) GetObservedGeneration() int64 {
	if m != nil {
		return m.ObservedGeneration
	}
	return 0
}

func (m *TrafficTargetStatus_AppliedAccessPolicy) GetSpec() *v1alpha2.AccessPolicySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// Federation policy applied to this TrafficTarget, allowing access
// to the traffic target from other meshes/clusters.
type TrafficTargetStatus_AppliedFederation struct {
	//*
	//For any workload that this traffic target has federated to (i.e., any Workload whose ref appears in `federated_to_workloads`),
	//a client in that workload will be able to reach this traffic target at this DNS name. This includes workloads on clusters other than
	//the one hosting this service.
	MulticlusterDnsName string `protobuf:"bytes,1,opt,name=multicluster_dns_name,json=multiclusterDnsName,proto3" json:"multicluster_dns_name,omitempty"`
	// The list of Meshes which are able to resolve this service's `multicluster_dns_name`.
	FederatedToMeshes    []*v1.ObjectRef `protobuf:"bytes,2,rep,name=federated_to_meshes,json=federatedToMeshes,proto3" json:"federated_to_meshes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TrafficTargetStatus_AppliedFederation) Reset()         { *m = TrafficTargetStatus_AppliedFederation{} }
func (m *TrafficTargetStatus_AppliedFederation) String() string { return proto.CompactTextString(m) }
func (*TrafficTargetStatus_AppliedFederation) ProtoMessage()    {}
func (*TrafficTargetStatus_AppliedFederation) Descriptor() ([]byte, []int) {
	return fileDescriptor_3840f4d363603fb2, []int{1, 2}
}
func (m *TrafficTargetStatus_AppliedFederation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficTargetStatus_AppliedFederation.Unmarshal(m, b)
}
func (m *TrafficTargetStatus_AppliedFederation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficTargetStatus_AppliedFederation.Marshal(b, m, deterministic)
}
func (m *TrafficTargetStatus_AppliedFederation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficTargetStatus_AppliedFederation.Merge(m, src)
}
func (m *TrafficTargetStatus_AppliedFederation) XXX_Size() int {
	return xxx_messageInfo_TrafficTargetStatus_AppliedFederation.Size(m)
}
func (m *TrafficTargetStatus_AppliedFederation) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficTargetStatus_AppliedFederation.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficTargetStatus_AppliedFederation proto.InternalMessageInfo

func (m *TrafficTargetStatus_AppliedFederation) GetMulticlusterDnsName() string {
	if m != nil {
		return m.MulticlusterDnsName
	}
	return ""
}

func (m *TrafficTargetStatus_AppliedFederation) GetFederatedToMeshes() []*v1.ObjectRef {
	if m != nil {
		return m.FederatedToMeshes
	}
	return nil
}

func init() {
	proto.RegisterType((*TrafficTargetSpec)(nil), "discovery.gloomesh.solo.io.TrafficTargetSpec")
	proto.RegisterType((*TrafficTargetSpec_KubeService)(nil), "discovery.gloomesh.solo.io.TrafficTargetSpec.KubeService")
	proto.RegisterMapType((map[string]string)(nil), "discovery.gloomesh.solo.io.TrafficTargetSpec.KubeService.LabelsEntry")
	proto.RegisterMapType((map[string]*TrafficTargetSpec_KubeService_Subset)(nil), "discovery.gloomesh.solo.io.TrafficTargetSpec.KubeService.SubsetsEntry")
	proto.RegisterMapType((map[string]string)(nil), "discovery.gloomesh.solo.io.TrafficTargetSpec.KubeService.WorkloadSelectorLabelsEntry")
	proto.RegisterType((*TrafficTargetSpec_KubeService_KubeServicePort)(nil), "discovery.gloomesh.solo.io.TrafficTargetSpec.KubeService.KubeServicePort")
	proto.RegisterType((*TrafficTargetSpec_KubeService_Subset)(nil), "discovery.gloomesh.solo.io.TrafficTargetSpec.KubeService.Subset")
	proto.RegisterType((*TrafficTargetStatus)(nil), "discovery.gloomesh.solo.io.TrafficTargetStatus")
	proto.RegisterType((*TrafficTargetStatus_AppliedTrafficPolicy)(nil), "discovery.gloomesh.solo.io.TrafficTargetStatus.AppliedTrafficPolicy")
	proto.RegisterType((*TrafficTargetStatus_AppliedAccessPolicy)(nil), "discovery.gloomesh.solo.io.TrafficTargetStatus.AppliedAccessPolicy")
	proto.RegisterType((*TrafficTargetStatus_AppliedFederation)(nil), "discovery.gloomesh.solo.io.TrafficTargetStatus.AppliedFederation")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo-mesh/api/discovery/v1alpha2/traffic_target.proto", fileDescriptor_3840f4d363603fb2)
}

var fileDescriptor_3840f4d363603fb2 = []byte{
	// 843 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xef, 0x6e, 0xe3, 0x44,
	0x10, 0xc7, 0x4d, 0x9a, 0x5e, 0xc7, 0x45, 0xd0, 0x4d, 0xaf, 0x58, 0x3e, 0xfe, 0x94, 0xe3, 0x4b,
	0xbf, 0xd4, 0xe6, 0x82, 0x0e, 0x71, 0x7c, 0xa2, 0xbd, 0xbb, 0x72, 0x27, 0x8e, 0xa3, 0x72, 0x0b,
	0x48, 0x48, 0x60, 0x36, 0xf6, 0xc4, 0x35, 0x71, 0xbc, 0x3e, 0xef, 0x3a, 0x47, 0x04, 0xe2, 0x15,
	0xf8, 0x80, 0x90, 0x78, 0x04, 0x1e, 0x01, 0xf1, 0x04, 0x3c, 0x07, 0x4f, 0x82, 0x76, 0xd6, 0x49,
	0x1d, 0x92, 0x06, 0x14, 0xc4, 0x27, 0xef, 0xce, 0xec, 0xfc, 0x7e, 0xbf, 0xd9, 0xd9, 0x1d, 0x2f,
	0x3c, 0x4a, 0x52, 0x75, 0x59, 0xf5, 0xbd, 0x48, 0x8c, 0x7c, 0x29, 0x32, 0x71, 0x94, 0x0a, 0x3f,
	0xc9, 0x84, 0x38, 0x1a, 0xa1, 0xbc, 0xf4, 0x79, 0x91, 0xfa, 0x71, 0x2a, 0x23, 0x31, 0xc6, 0x72,
	0xe2, 0x8f, 0xef, 0xf0, 0xac, 0xb8, 0xe4, 0x3d, 0x5f, 0x95, 0x7c, 0x30, 0x48, 0xa3, 0x50, 0xf1,
	0x32, 0x41, 0xe5, 0x15, 0xa5, 0x50, 0x82, 0xb9, 0xb3, 0x85, 0x9e, 0x06, 0xd0, 0xf1, 0x9e, 0x46,
	0xf4, 0x52, 0xe1, 0xde, 0x92, 0xc3, 0x71, 0x8f, 0xd0, 0x22, 0x51, 0xa2, 0x3f, 0xbe, 0x43, 0x5f,
	0x13, 0xe8, 0xbe, 0x3b, 0xcf, 0x97, 0xa3, 0x7a, 0x2e, 0xca, 0x61, 0x9a, 0x27, 0x8b, 0x84, 0x85,
	0xc8, 0xd2, 0x68, 0x52, 0xc7, 0xdd, 0xfd, 0xe7, 0x38, 0x1e, 0x45, 0x28, 0xe5, 0x7c, 0xd8, 0x5e,
	0x22, 0x12, 0x41, 0x43, 0x5f, 0x8f, 0x8c, 0xf5, 0xf6, 0x1f, 0x37, 0x60, 0xf7, 0xc2, 0xb0, 0x5c,
	0x50, 0x56, 0xe7, 0x05, 0x46, 0xec, 0x2b, 0xd8, 0x19, 0x56, 0x7d, 0x0c, 0x25, 0x96, 0xe3, 0x34,
	0x42, 0xc7, 0x3a, 0xb0, 0x0e, 0xed, 0xde, 0x3d, 0xef, 0xfa, 0x54, 0xbd, 0x05, 0x10, 0xef, 0xa3,
	0xaa, 0x8f, 0xe7, 0x06, 0xe0, 0xd1, 0x0b, 0x81, 0x3d, 0xbc, 0x9a, 0xb2, 0xb7, 0xa1, 0xad, 0x83,
	0x9d, 0x0d, 0xc2, 0x7d, 0xd5, 0xa3, 0x5d, 0xd1, 0x7b, 0x35, 0x83, 0xfb, 0xa4, 0xff, 0x0d, 0x46,
	0x2a, 0xc0, 0x41, 0x40, 0x2b, 0xdd, 0x5f, 0xb6, 0xc0, 0x6e, 0x00, 0xb2, 0xbb, 0xd0, 0x2a, 0x71,
	0x50, 0x0b, 0x7b, 0x6b, 0x09, 0xc0, 0xfd, 0xac, 0x92, 0x0a, 0xcb, 0x2b, 0x1c, 0xbd, 0x9e, 0xfd,
	0x68, 0x81, 0xa3, 0x77, 0x2b, 0x13, 0x3c, 0x0e, 0x25, 0x66, 0x18, 0x29, 0x51, 0x86, 0x19, 0xef,
	0x63, 0x26, 0x9d, 0x8d, 0x83, 0xd6, 0xa1, 0xdd, 0xfb, 0x74, 0xed, 0x2c, 0xbd, 0xcf, 0x6b, 0xe4,
	0xf3, 0x1a, 0xf8, 0x09, 0xe1, 0x3e, 0xcc, 0x55, 0x39, 0x09, 0xf6, 0x9f, 0x2f, 0x75, 0xb2, 0x2f,
	0xa1, 0x53, 0xd3, 0xb7, 0x88, 0xfe, 0xe1, 0xfa, 0xf4, 0x4d, 0xba, 0x1a, 0x94, 0x85, 0xb0, 0x59,
	0x88, 0x52, 0x49, 0xa7, 0x4d, 0xe8, 0x8f, 0xd7, 0x47, 0x6f, 0x8c, 0xcf, 0x44, 0xa9, 0x02, 0x83,
	0xcb, 0xbe, 0x86, 0x2d, 0x59, 0xf5, 0x25, 0x2a, 0xe9, 0x6c, 0x12, 0xc5, 0xe9, 0xfa, 0x14, 0xe7,
	0x06, 0xc8, 0x64, 0x30, 0x85, 0x75, 0xbf, 0x85, 0x97, 0xfe, 0xc6, 0xcd, 0x18, 0xb4, 0x35, 0x3b,
	0x95, 0xff, 0xc5, 0x80, 0xc6, 0xda, 0x96, 0xf3, 0x11, 0xd2, 0x99, 0xda, 0x0e, 0x68, 0xcc, 0x5c,
	0xb8, 0x41, 0xc7, 0x3c, 0x12, 0x99, 0xd3, 0x22, 0xfb, 0x6c, 0xce, 0xde, 0x84, 0x1d, 0x5e, 0x14,
	0xe1, 0xcc, 0xdf, 0x26, 0xbf, 0xcd, 0x8b, 0xe2, 0xac, 0x36, 0xb9, 0x8f, 0xe1, 0xd6, 0x8a, 0x92,
	0xb2, 0x97, 0xa1, 0x35, 0xc4, 0x09, 0x89, 0xd8, 0x0e, 0xf4, 0x90, 0xed, 0xc1, 0xe6, 0x98, 0x67,
	0xd5, 0x54, 0x84, 0x99, 0xbc, 0xbf, 0xf1, 0x9e, 0xe5, 0xde, 0x03, 0x7b, 0xdd, 0xd0, 0xef, 0x61,
	0xa7, 0xb9, 0x31, 0x4b, 0x62, 0x3f, 0x6b, 0xc6, 0xda, 0xbd, 0x0f, 0xfe, 0x6b, 0x05, 0x9a, 0xec,
	0x07, 0xd0, 0x31, 0x46, 0xb6, 0x0f, 0x1d, 0x32, 0x4b, 0xc7, 0x3a, 0x68, 0x1d, 0x6e, 0x07, 0xf5,
	0xec, 0xa4, 0x03, 0x6d, 0x35, 0x29, 0xf0, 0xf6, 0x4f, 0x5b, 0xd0, 0x9d, 0x47, 0x57, 0x5c, 0x55,
	0x92, 0xf9, 0xd0, 0x15, 0x7d, 0xdd, 0x49, 0x30, 0x0e, 0x13, 0xcc, 0xb1, 0xe4, 0x2a, 0x15, 0x39,
	0xe9, 0x6f, 0x05, 0x6c, 0xea, 0xfa, 0x70, 0xe6, 0x61, 0x3f, 0x80, 0xc3, 0x8b, 0x22, 0x4b, 0x31,
	0x0e, 0xe7, 0x1a, 0x60, 0x8a, 0xd3, 0x4b, 0xf2, 0xe0, 0xdf, 0x67, 0x48, 0x1a, 0xbc, 0x63, 0x83,
	0x57, 0xbb, 0xce, 0xa8, 0x2f, 0x06, 0xfb, 0x7c, 0xd1, 0x9a, 0xa2, 0x64, 0xdf, 0xc1, 0x2b, 0x53,
	0xfe, 0x66, 0x23, 0xd5, 0xf4, 0xe6, 0x16, 0xdd, 0x5f, 0x93, 0xfe, 0x98, 0xd0, 0x6a, 0xf6, 0x9b,
	0x7c, 0xc1, 0xa8, 0xc9, 0x5f, 0x03, 0xc8, 0x44, 0xc4, 0xb3, 0x70, 0xf0, 0x2c, 0xce, 0x9d, 0x4d,
	0x2a, 0xf2, 0x36, 0x59, 0x4e, 0x9f, 0xc5, 0x39, 0x7b, 0x03, 0xec, 0x12, 0x47, 0x42, 0xa1, 0xf1,
	0x77, 0xc8, 0x0f, 0xc6, 0xa4, 0x17, 0xb8, 0xbf, 0x5b, 0xb0, 0xb7, 0x2c, 0x5b, 0xe6, 0x35, 0x3b,
	0xe6, 0xea, 0x96, 0x4b, 0xad, 0xd2, 0x83, 0x25, 0xb5, 0xa1, 0x13, 0xb6, 0xbc, 0x6a, 0x27, 0xd0,
	0x96, 0x05, 0x46, 0x74, 0xcf, 0xec, 0x9e, 0xe7, 0x5d, 0xfd, 0x97, 0xae, 0xdd, 0x23, 0xa3, 0x4c,
	0x1f, 0xc2, 0x80, 0x62, 0xdd, 0xdf, 0x2c, 0xe8, 0x2e, 0xd9, 0xab, 0xff, 0x5d, 0xfb, 0xf1, 0x9c,
	0xf6, 0xa3, 0x95, 0xda, 0x9b, 0xc2, 0x1a, 0xd2, 0x7f, 0xb6, 0x60, 0xb7, 0x96, 0x7e, 0x8a, 0xf1,
	0x14, 0xb8, 0x07, 0x37, 0x47, 0x55, 0xa6, 0xd2, 0xc8, 0xfc, 0x8d, 0xc2, 0x38, 0x97, 0x21, 0x75,
	0x29, 0x73, 0x7b, 0xbb, 0x4d, 0xe7, 0x83, 0x5c, 0x3e, 0xd5, 0x4d, 0xeb, 0x09, 0x74, 0x07, 0x06,
	0x41, 0x5f, 0x00, 0x11, 0x6a, 0x76, 0x9c, 0xfe, 0x9d, 0x56, 0x27, 0xbf, 0x3b, 0x0b, 0xbc, 0x10,
	0x1f, 0x53, 0xd8, 0xc9, 0xd3, 0x5f, 0xff, 0x7c, 0xdd, 0xfa, 0x62, 0xf5, 0x73, 0xa7, 0x18, 0x26,
	0xf3, 0x4f, 0x9e, 0x85, 0xac, 0x67, 0x4f, 0x8b, 0x7e, 0x87, 0x1a, 0xe6, 0x3b, 0x7f, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x55, 0x15, 0x94, 0x25, 0x41, 0x09, 0x00, 0x00,
}

func (this *TrafficTargetSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficTargetSpec)
	if !ok {
		that2, ok := that.(TrafficTargetSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	if !this.Mesh.Equal(that1.Mesh) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficTargetSpec_KubeService_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficTargetSpec_KubeService_)
	if !ok {
		that2, ok := that.(TrafficTargetSpec_KubeService_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KubeService.Equal(that1.KubeService) {
		return false
	}
	return true
}
func (this *TrafficTargetSpec_KubeService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficTargetSpec_KubeService)
	if !ok {
		that2, ok := that.(TrafficTargetSpec_KubeService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ref.Equal(that1.Ref) {
		return false
	}
	if len(this.WorkloadSelectorLabels) != len(that1.WorkloadSelectorLabels) {
		return false
	}
	for i := range this.WorkloadSelectorLabels {
		if this.WorkloadSelectorLabels[i] != that1.WorkloadSelectorLabels[i] {
			return false
		}
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Ports) != len(that1.Ports) {
		return false
	}
	for i := range this.Ports {
		if !this.Ports[i].Equal(that1.Ports[i]) {
			return false
		}
	}
	if len(this.Subsets) != len(that1.Subsets) {
		return false
	}
	for i := range this.Subsets {
		if !this.Subsets[i].Equal(that1.Subsets[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficTargetSpec_KubeService_KubeServicePort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficTargetSpec_KubeService_KubeServicePort)
	if !ok {
		that2, ok := that.(TrafficTargetSpec_KubeService_KubeServicePort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if this.AppProtocol != that1.AppProtocol {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficTargetSpec_KubeService_Subset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficTargetSpec_KubeService_Subset)
	if !ok {
		that2, ok := that.(TrafficTargetSpec_KubeService_Subset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficTargetStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficTargetStatus)
	if !ok {
		that2, ok := that.(TrafficTargetStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObservedGeneration != that1.ObservedGeneration {
		return false
	}
	if len(this.AppliedTrafficPolicies) != len(that1.AppliedTrafficPolicies) {
		return false
	}
	for i := range this.AppliedTrafficPolicies {
		if !this.AppliedTrafficPolicies[i].Equal(that1.AppliedTrafficPolicies[i]) {
			return false
		}
	}
	if len(this.AppliedAccessPolicies) != len(that1.AppliedAccessPolicies) {
		return false
	}
	for i := range this.AppliedAccessPolicies {
		if !this.AppliedAccessPolicies[i].Equal(that1.AppliedAccessPolicies[i]) {
			return false
		}
	}
	if this.LocalFqdn != that1.LocalFqdn {
		return false
	}
	if this.RemoteFqdn != that1.RemoteFqdn {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficTargetStatus_AppliedTrafficPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficTargetStatus_AppliedTrafficPolicy)
	if !ok {
		that2, ok := that.(TrafficTargetStatus_AppliedTrafficPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ref.Equal(that1.Ref) {
		return false
	}
	if this.ObservedGeneration != that1.ObservedGeneration {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficTargetStatus_AppliedAccessPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficTargetStatus_AppliedAccessPolicy)
	if !ok {
		that2, ok := that.(TrafficTargetStatus_AppliedAccessPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ref.Equal(that1.Ref) {
		return false
	}
	if this.ObservedGeneration != that1.ObservedGeneration {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficTargetStatus_AppliedFederation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficTargetStatus_AppliedFederation)
	if !ok {
		that2, ok := that.(TrafficTargetStatus_AppliedFederation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MulticlusterDnsName != that1.MulticlusterDnsName {
		return false
	}
	if len(this.FederatedToMeshes) != len(that1.FederatedToMeshes) {
		return false
	}
	for i := range this.FederatedToMeshes {
		if !this.FederatedToMeshes[i].Equal(that1.FederatedToMeshes[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
