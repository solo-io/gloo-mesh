// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/service-mesh-hub/api/core/v1alpha1/workload_selector.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//Select Kubernetes workloads directly using label and/or namespace criteria. See comments on the fields for
//detailed semantics.
type WorkloadSelector struct {
	// If specified, all labels must exist on workloads, else match on any labels.
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If specified, match workloads if they exist in one of the specified namespaces. If not specified, match on any namespace.
	Namespaces           []string `protobuf:"bytes,2,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkloadSelector) Reset()         { *m = WorkloadSelector{} }
func (m *WorkloadSelector) String() string { return proto.CompactTextString(m) }
func (*WorkloadSelector) ProtoMessage()    {}
func (*WorkloadSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8aa2157c287aedb, []int{0}
}
func (m *WorkloadSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkloadSelector.Unmarshal(m, b)
}
func (m *WorkloadSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkloadSelector.Marshal(b, m, deterministic)
}
func (m *WorkloadSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadSelector.Merge(m, src)
}
func (m *WorkloadSelector) XXX_Size() int {
	return xxx_messageInfo_WorkloadSelector.Size(m)
}
func (m *WorkloadSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadSelector.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadSelector proto.InternalMessageInfo

func (m *WorkloadSelector) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *WorkloadSelector) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func init() {
	proto.RegisterType((*WorkloadSelector)(nil), "core.smh.solo.io.WorkloadSelector")
	proto.RegisterMapType((map[string]string)(nil), "core.smh.solo.io.WorkloadSelector.LabelsEntry")
}

func init() {
	proto.RegisterFile("github.com/solo-io/service-mesh-hub/api/core/v1alpha1/workload_selector.proto", fileDescriptor_b8aa2157c287aedb)
}

var fileDescriptor_b8aa2157c287aedb = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0xe5, 0x56, 0x54, 0xaa, 0xbb, 0x54, 0x51, 0x87, 0x28, 0x43, 0x14, 0x31, 0x65, 0x20,
	0xb6, 0x0a, 0x0b, 0x30, 0x22, 0xc1, 0x02, 0x0c, 0x84, 0x01, 0x89, 0x05, 0x39, 0xe1, 0xd6, 0x89,
	0xe2, 0xf4, 0x5a, 0x76, 0x92, 0x2a, 0x6f, 0xc4, 0x0b, 0xf0, 0x42, 0x3c, 0x09, 0xca, 0x8f, 0x20,
	0xea, 0xd4, 0xed, 0xf8, 0xf8, 0x7e, 0xf6, 0xf1, 0x31, 0x7d, 0x96, 0x79, 0x95, 0xd5, 0x09, 0x4b,
	0xb1, 0xe4, 0x16, 0x15, 0x46, 0x39, 0x72, 0x0b, 0xa6, 0xc9, 0x53, 0x88, 0x4a, 0xb0, 0x59, 0x94,
	0xd5, 0x09, 0x17, 0x3a, 0xe7, 0x29, 0x1a, 0xe0, 0xcd, 0x56, 0x28, 0x9d, 0x89, 0x2d, 0x3f, 0xa0,
	0x29, 0x14, 0x8a, 0xcf, 0x0f, 0x0b, 0x0a, 0xd2, 0x0a, 0x0d, 0xd3, 0x06, 0x2b, 0x74, 0xd6, 0xdd,
	0x18, 0xb3, 0x65, 0xc6, 0xba, 0xc3, 0x58, 0x8e, 0x9e, 0x2f, 0x11, 0xa5, 0x02, 0xde, 0xef, 0x27,
	0xf5, 0x8e, 0x1f, 0x8c, 0xd0, 0x1a, 0x8c, 0x1d, 0x08, 0xef, 0xe2, 0x84, 0xdb, 0x0c, 0xec, 0xc6,
	0xe9, 0x8d, 0x44, 0x89, 0xbd, 0xe4, 0x9d, 0x1a, 0xdc, 0xf3, 0x6f, 0x42, 0xd7, 0x6f, 0x63, 0xa2,
	0xd7, 0x31, 0x90, 0xf3, 0x40, 0x17, 0x4a, 0x24, 0xa0, 0xac, 0x4b, 0x82, 0x79, 0xb8, 0xba, 0x64,
	0xec, 0x38, 0x1b, 0x3b, 0x66, 0xd8, 0x53, 0x0f, 0xdc, 0xef, 0x2b, 0xd3, 0xc6, 0x23, 0xed, 0xf8,
	0x94, 0xee, 0x45, 0x09, 0x56, 0x8b, 0x14, 0xac, 0x3b, 0x0b, 0xe6, 0xe1, 0x32, 0x9e, 0x38, 0xde,
	0x0d, 0x5d, 0x4d, 0x30, 0x67, 0x4d, 0xe7, 0x05, 0xb4, 0x2e, 0x09, 0x48, 0xb8, 0x8c, 0x3b, 0xe9,
	0x6c, 0xe8, 0x59, 0x23, 0x54, 0x0d, 0xee, 0xac, 0xf7, 0x86, 0xc5, 0xed, 0xec, 0x9a, 0xdc, 0xbd,
	0x7c, 0xfd, 0xf8, 0xe4, 0xfd, 0xf1, 0x94, 0x2f, 0xd0, 0x85, 0xfc, 0x2b, 0x66, 0xfa, 0x86, 0xff,
	0x92, 0xaa, 0x56, 0x83, 0x4d, 0x16, 0x7d, 0x23, 0x57, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x38,
	0xa4, 0x28, 0x34, 0xd8, 0x01, 0x00, 0x00,
}

func (this *WorkloadSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkloadSelector)
	if !ok {
		that2, ok := that.(WorkloadSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
