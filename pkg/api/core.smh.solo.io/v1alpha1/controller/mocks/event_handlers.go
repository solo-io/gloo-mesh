// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/core.smh.solo.io/v1alpha1"
	controller "github.com/solo-io/service-mesh-hub/pkg/api/core.smh.solo.io/v1alpha1/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockSettingsEventHandler is a mock of SettingsEventHandler interface.
type MockSettingsEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsEventHandlerMockRecorder
}

// MockSettingsEventHandlerMockRecorder is the mock recorder for MockSettingsEventHandler.
type MockSettingsEventHandlerMockRecorder struct {
	mock *MockSettingsEventHandler
}

// NewMockSettingsEventHandler creates a new mock instance.
func NewMockSettingsEventHandler(ctrl *gomock.Controller) *MockSettingsEventHandler {
	mock := &MockSettingsEventHandler{ctrl: ctrl}
	mock.recorder = &MockSettingsEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingsEventHandler) EXPECT() *MockSettingsEventHandlerMockRecorder {
	return m.recorder
}

// CreateSettings mocks base method.
func (m *MockSettingsEventHandler) CreateSettings(obj *v1alpha1.Settings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSettings", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSettings indicates an expected call of CreateSettings.
func (mr *MockSettingsEventHandlerMockRecorder) CreateSettings(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSettings", reflect.TypeOf((*MockSettingsEventHandler)(nil).CreateSettings), obj)
}

// UpdateSettings mocks base method.
func (m *MockSettingsEventHandler) UpdateSettings(old, new *v1alpha1.Settings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSettings", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSettings indicates an expected call of UpdateSettings.
func (mr *MockSettingsEventHandlerMockRecorder) UpdateSettings(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettings", reflect.TypeOf((*MockSettingsEventHandler)(nil).UpdateSettings), old, new)
}

// DeleteSettings mocks base method.
func (m *MockSettingsEventHandler) DeleteSettings(obj *v1alpha1.Settings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSettings", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSettings indicates an expected call of DeleteSettings.
func (mr *MockSettingsEventHandlerMockRecorder) DeleteSettings(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSettings", reflect.TypeOf((*MockSettingsEventHandler)(nil).DeleteSettings), obj)
}

// GenericSettings mocks base method.
func (m *MockSettingsEventHandler) GenericSettings(obj *v1alpha1.Settings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericSettings", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericSettings indicates an expected call of GenericSettings.
func (mr *MockSettingsEventHandlerMockRecorder) GenericSettings(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericSettings", reflect.TypeOf((*MockSettingsEventHandler)(nil).GenericSettings), obj)
}

// MockSettingsEventWatcher is a mock of SettingsEventWatcher interface.
type MockSettingsEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsEventWatcherMockRecorder
}

// MockSettingsEventWatcherMockRecorder is the mock recorder for MockSettingsEventWatcher.
type MockSettingsEventWatcherMockRecorder struct {
	mock *MockSettingsEventWatcher
}

// NewMockSettingsEventWatcher creates a new mock instance.
func NewMockSettingsEventWatcher(ctrl *gomock.Controller) *MockSettingsEventWatcher {
	mock := &MockSettingsEventWatcher{ctrl: ctrl}
	mock.recorder = &MockSettingsEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingsEventWatcher) EXPECT() *MockSettingsEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockSettingsEventWatcher) AddEventHandler(ctx context.Context, h controller.SettingsEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockSettingsEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockSettingsEventWatcher)(nil).AddEventHandler), varargs...)
}
