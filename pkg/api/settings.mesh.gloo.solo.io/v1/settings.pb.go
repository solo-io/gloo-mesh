// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo-mesh/api/settings/v1/settings.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	v11 "github.com/solo-io/gloo-mesh/pkg/api/common.mesh.gloo.solo.io/v1"
	v1 "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v12 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Configure system-wide settings and defaults. Settings specified in networking policies take precedence over those specified here.
type SettingsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configure default mTLS settings for Destinations.
	Mtls *v1.TrafficPolicySpec_Policy_MTLS `protobuf:"bytes,1,opt,name=mtls,proto3" json:"mtls,omitempty"`
	// Configure Gloo Mesh networking to communicate with one or more external gRPC NetworkingExtensions servers.
	// Updates will be applied by the servers in the order they are listed (servers towards the end of the list take precedence).
	// Note: Extension Servers have full write access to the output objects written by Gloo Mesh.
	NetworkingExtensionServers []*GrpcServer `protobuf:"bytes,2,rep,name=networking_extension_servers,json=networkingExtensionServers,proto3" json:"networking_extension_servers,omitempty"`
	// Settings for Gloo Mesh discovery.
	Discovery *DiscoverySettings `protobuf:"bytes,3,opt,name=discovery,proto3" json:"discovery,omitempty"`
	// Enable and configure use of Relay mode to communicate with remote clusters. This is an enterprise-only feature.
	Relay *RelaySettings `protobuf:"bytes,4,opt,name=relay,proto3" json:"relay,omitempty"`
	// Configure the enterprise dashboard.
	Dashboard *DashboardSettings `protobuf:"bytes,5,opt,name=dashboard,proto3" json:"dashboard,omitempty"`
}

func (x *SettingsSpec) Reset() {
	*x = SettingsSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsSpec) ProtoMessage() {}

func (x *SettingsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsSpec.ProtoReflect.Descriptor instead.
func (*SettingsSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{0}
}

func (x *SettingsSpec) GetMtls() *v1.TrafficPolicySpec_Policy_MTLS {
	if x != nil {
		return x.Mtls
	}
	return nil
}

func (x *SettingsSpec) GetNetworkingExtensionServers() []*GrpcServer {
	if x != nil {
		return x.NetworkingExtensionServers
	}
	return nil
}

func (x *SettingsSpec) GetDiscovery() *DiscoverySettings {
	if x != nil {
		return x.Discovery
	}
	return nil
}

func (x *SettingsSpec) GetRelay() *RelaySettings {
	if x != nil {
		return x.Relay
	}
	return nil
}

func (x *SettingsSpec) GetDashboard() *DashboardSettings {
	if x != nil {
		return x.Dashboard
	}
	return nil
}

// RelaySettings contains options for configuring Gloo Mesh to use Relay for cluster management.
// Relay provides a way for connecting Gloo Mesh to remote Kubernetes Clusters
// without the need to share credentials and access to remote Kube API Servers
// from the management cluster (the Gloo Mesh controllers).
//
// Relay instead uses a streaming gRPC API to pass discovery data
// from remote clusters to the management cluster, and push
// configuration from the management cluster to the remote clusters.
//
// Architecturally, it includes a Relay-agent which is installed to remote Kube clusters at
// registration time, which then connects directly to the Relay Server in the management cluster.
// to push its discovery data and pull its mesh configuration.
//
//
// To configure Gloo Mesh to use Relay, make sure to read the
// [relay installation guide]({{< versioned_link_path fromRoot="/guides/setup/install_gloo_mesh" >}}) and
// [relay cluster registration guide]({{< versioned_link_path fromRoot="/guides/setup/register_cluster" >}}).
type RelaySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable the use of Relay for cluster management.
	// If relay is enabled, make sure to follow the [relay cluster registration guide]({{< versioned_link_path fromRoot="/guides/setup/register_cluster#relay" >}})
	// for registering your clusters.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Connection info for the Relay Server. Gloo Mesh will fetch discovery resources from this server
	// and push translated outputs to this server.
	// Note: currently this field has no effect as the relay server runs in-process of the networking Pod.
	Server *GrpcServer `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *RelaySettings) Reset() {
	*x = RelaySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelaySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelaySettings) ProtoMessage() {}

func (x *RelaySettings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelaySettings.ProtoReflect.Descriptor instead.
func (*RelaySettings) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{1}
}

func (x *RelaySettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *RelaySettings) GetServer() *GrpcServer {
	if x != nil {
		return x.Server
	}
	return nil
}

// Settings for Gloo Mesh discovery.
type DiscoverySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Istio-specific discovery settings
	Istio *DiscoverySettings_Istio `protobuf:"bytes,1,opt,name=istio,proto3" json:"istio,omitempty"`
}

func (x *DiscoverySettings) Reset() {
	*x = DiscoverySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverySettings) ProtoMessage() {}

func (x *DiscoverySettings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverySettings.ProtoReflect.Descriptor instead.
func (*DiscoverySettings) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{2}
}

func (x *DiscoverySettings) GetIstio() *DiscoverySettings_Istio {
	if x != nil {
		return x.Istio
	}
	return nil
}

// Options for connecting to an external gRPC server.
type GrpcServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TCP address of the gRPC Server (including port).
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// If true communicate over HTTP rather than HTTPS.
	Insecure bool `protobuf:"varint,2,opt,name=insecure,proto3" json:"insecure,omitempty"`
	// If true Gloo Mesh will automatically attempt to reconnect to the server after encountering network failures.
	ReconnectOnNetworkFailures bool `protobuf:"varint,3,opt,name=reconnect_on_network_failures,json=reconnectOnNetworkFailures,proto3" json:"reconnect_on_network_failures,omitempty"`
}

func (x *GrpcServer) Reset() {
	*x = GrpcServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcServer) ProtoMessage() {}

func (x *GrpcServer) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcServer.ProtoReflect.Descriptor instead.
func (*GrpcServer) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{3}
}

func (x *GrpcServer) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GrpcServer) GetInsecure() bool {
	if x != nil {
		return x.Insecure
	}
	return false
}

func (x *GrpcServer) GetReconnectOnNetworkFailures() bool {
	if x != nil {
		return x.ReconnectOnNetworkFailures
	}
	return false
}

type DashboardSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthConfigs []*DashboardSettings_AuthConfig `protobuf:"bytes,1,rep,name=auth_configs,json=authConfigs,proto3" json:"auth_configs,omitempty"`
}

func (x *DashboardSettings) Reset() {
	*x = DashboardSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSettings) ProtoMessage() {}

func (x *DashboardSettings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSettings.ProtoReflect.Descriptor instead.
func (*DashboardSettings) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{4}
}

func (x *DashboardSettings) GetAuthConfigs() []*DashboardSettings_AuthConfig {
	if x != nil {
		return x.AuthConfigs
	}
	return nil
}

// The json web key set (JWKS) (https://tools.ietf.org/html/rfc7517) is
// discovered at an interval from a remote source. When keys rotate in
// the remote source, there may be a delay in the local source picking
// up those new keys. Therefore, a user could execute a request with a
// token that has been signed by a key in the remote JWKS, but the local
// cache doesn't have the key yet. The request would fail because the
// key isn't contained in the local set. Since most IdPs publish key
// keys in their remote JWKS before they are used, this is not an issue
// most of the time. This policy lets you define the behavior for when a
// user has a token with a key not yet in the local cache.
type JwksOnDemandCacheRefreshPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Policy:
	//	*JwksOnDemandCacheRefreshPolicy_Never
	//	*JwksOnDemandCacheRefreshPolicy_Always
	//	*JwksOnDemandCacheRefreshPolicy_MaxIdpReqPerPollingInterval
	Policy isJwksOnDemandCacheRefreshPolicy_Policy `protobuf_oneof:"policy"`
}

func (x *JwksOnDemandCacheRefreshPolicy) Reset() {
	*x = JwksOnDemandCacheRefreshPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwksOnDemandCacheRefreshPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwksOnDemandCacheRefreshPolicy) ProtoMessage() {}

func (x *JwksOnDemandCacheRefreshPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwksOnDemandCacheRefreshPolicy.ProtoReflect.Descriptor instead.
func (*JwksOnDemandCacheRefreshPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{5}
}

func (m *JwksOnDemandCacheRefreshPolicy) GetPolicy() isJwksOnDemandCacheRefreshPolicy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *JwksOnDemandCacheRefreshPolicy) GetNever() *empty.Empty {
	if x, ok := x.GetPolicy().(*JwksOnDemandCacheRefreshPolicy_Never); ok {
		return x.Never
	}
	return nil
}

func (x *JwksOnDemandCacheRefreshPolicy) GetAlways() *empty.Empty {
	if x, ok := x.GetPolicy().(*JwksOnDemandCacheRefreshPolicy_Always); ok {
		return x.Always
	}
	return nil
}

func (x *JwksOnDemandCacheRefreshPolicy) GetMaxIdpReqPerPollingInterval() uint32 {
	if x, ok := x.GetPolicy().(*JwksOnDemandCacheRefreshPolicy_MaxIdpReqPerPollingInterval); ok {
		return x.MaxIdpReqPerPollingInterval
	}
	return 0
}

type isJwksOnDemandCacheRefreshPolicy_Policy interface {
	isJwksOnDemandCacheRefreshPolicy_Policy()
}

type JwksOnDemandCacheRefreshPolicy_Never struct {
	// Never refresh the local JWKS cache on demand. If a key is not
	// in the cache, it is assumed to be malicious. This is the
	// default policy since we assume that IdPs publish keys before
	// they rotate them, and frequent polling finds the newest keys.
	Never *empty.Empty `protobuf:"bytes,1,opt,name=never,proto3,oneof"`
}

type JwksOnDemandCacheRefreshPolicy_Always struct {
	// If a key is not in the cache, fetch the most recent keys from
	// the IdP and update the cache. NOTE: This should only be done
	// in trusted environments, since missing keys will each trigger
	// a request to the IdP. Using this in an environment exposed to
	// the internet will allow malicious agents to execute a DDoS
	// attack by spamming protected endpoints with tokens signed by
	// invalid keys.
	Always *empty.Empty `protobuf:"bytes,2,opt,name=always,proto3,oneof"`
}

type JwksOnDemandCacheRefreshPolicy_MaxIdpReqPerPollingInterval struct {
	// If a key is not in the cache, fetch the most recent keys from
	// the IdP and update the cache. This value sets the number of
	// requests to the IdP per polling interval. If that limit is
	// exceeded, we will stop fetching from the IdP for the
	// remainder of the polling interval.
	MaxIdpReqPerPollingInterval uint32 `protobuf:"varint,3,opt,name=max_idp_req_per_polling_interval,json=maxIdpReqPerPollingInterval,proto3,oneof"`
}

func (*JwksOnDemandCacheRefreshPolicy_Never) isJwksOnDemandCacheRefreshPolicy_Policy() {}

func (*JwksOnDemandCacheRefreshPolicy_Always) isJwksOnDemandCacheRefreshPolicy_Policy() {}

func (*JwksOnDemandCacheRefreshPolicy_MaxIdpReqPerPollingInterval) isJwksOnDemandCacheRefreshPolicy_Policy() {
}

type SettingsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The most recent generation observed in the the Settings metadata.
	// If the `observedGeneration` does not match `metadata.generation`, Gloo Mesh has not processed the most
	// recent version of this resource.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// The state of the overall resource.
	// It will only show accepted if no processing errors encountered.
	State v11.ApprovalState `protobuf:"varint,2,opt,name=state,proto3,enum=common.mesh.gloo.solo.io.ApprovalState" json:"state,omitempty"`
	// Any errors encountered while processing Settings object.
	Errors []string `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *SettingsStatus) Reset() {
	*x = SettingsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsStatus) ProtoMessage() {}

func (x *SettingsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsStatus.ProtoReflect.Descriptor instead.
func (*SettingsStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{6}
}

func (x *SettingsStatus) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *SettingsStatus) GetState() v11.ApprovalState {
	if x != nil {
		return x.State
	}
	return v11.ApprovalState_PENDING
}

func (x *SettingsStatus) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Istio-specific discovery settings
type DiscoverySettings_Istio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configure discovery of ingress gateways per cluster. The key to the map is either a Gloo Mesh cluster name or
	// `*` denoting all clusters. If an entry is found for a given cluster, it will be used. Otherwise, the
	// wildcard entry will be used if it exists. Lastly, we will fall back to a set of default values.
	IngressGatewayDetectors map[string]*DiscoverySettings_Istio_IngressGatewayDetector `protobuf:"bytes,1,rep,name=ingress_gateway_detectors,json=ingressGatewayDetectors,proto3" json:"ingress_gateway_detectors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DiscoverySettings_Istio) Reset() {
	*x = DiscoverySettings_Istio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverySettings_Istio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverySettings_Istio) ProtoMessage() {}

func (x *DiscoverySettings_Istio) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverySettings_Istio.ProtoReflect.Descriptor instead.
func (*DiscoverySettings_Istio) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{2, 0}
}

func (x *DiscoverySettings_Istio) GetIngressGatewayDetectors() map[string]*DiscoverySettings_Istio_IngressGatewayDetector {
	if x != nil {
		return x.IngressGatewayDetectors
	}
	return nil
}

// Configure discovery of ingress gateways.
type DiscoverySettings_Istio_IngressGatewayDetector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workload labels used to detect ingress gateways for an Istio deployment.
	// If not specified, will default to `{"istio": "ingressgateway"}`.
	GatewayWorkloadLabels map[string]string `protobuf:"bytes,1,rep,name=gateway_workload_labels,json=gatewayWorkloadLabels,proto3" json:"gateway_workload_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The name of the TLS port used to detect ingress gateways. Kubernetes services must have a port with this name
	// in order to be recognized as an ingress gateway. If not specified, will default to `tls`.
	GatewayTlsPortName string `protobuf:"bytes,2,opt,name=gateway_tls_port_name,json=gatewayTlsPortName,proto3" json:"gateway_tls_port_name,omitempty"`
}

func (x *DiscoverySettings_Istio_IngressGatewayDetector) Reset() {
	*x = DiscoverySettings_Istio_IngressGatewayDetector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverySettings_Istio_IngressGatewayDetector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverySettings_Istio_IngressGatewayDetector) ProtoMessage() {}

func (x *DiscoverySettings_Istio_IngressGatewayDetector) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverySettings_Istio_IngressGatewayDetector.ProtoReflect.Descriptor instead.
func (*DiscoverySettings_Istio_IngressGatewayDetector) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{2, 0, 1}
}

func (x *DiscoverySettings_Istio_IngressGatewayDetector) GetGatewayWorkloadLabels() map[string]string {
	if x != nil {
		return x.GatewayWorkloadLabels
	}
	return nil
}

func (x *DiscoverySettings_Istio_IngressGatewayDetector) GetGatewayTlsPortName() string {
	if x != nil {
		return x.GatewayTlsPortName
	}
	return ""
}

type DashboardSettings_SessionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set-Cookie options
	CookieOptions *DashboardSettings_SessionConfig_CookieOptions `protobuf:"bytes,1,opt,name=cookie_options,json=cookieOptions,proto3" json:"cookie_options,omitempty"`
	// Types that are assignable to Backend:
	//	*DashboardSettings_SessionConfig_Cookie
	//	*DashboardSettings_SessionConfig_Redis
	Backend isDashboardSettings_SessionConfig_Backend `protobuf_oneof:"backend"`
}

func (x *DashboardSettings_SessionConfig) Reset() {
	*x = DashboardSettings_SessionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSettings_SessionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSettings_SessionConfig) ProtoMessage() {}

func (x *DashboardSettings_SessionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSettings_SessionConfig.ProtoReflect.Descriptor instead.
func (*DashboardSettings_SessionConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{4, 0}
}

func (x *DashboardSettings_SessionConfig) GetCookieOptions() *DashboardSettings_SessionConfig_CookieOptions {
	if x != nil {
		return x.CookieOptions
	}
	return nil
}

func (m *DashboardSettings_SessionConfig) GetBackend() isDashboardSettings_SessionConfig_Backend {
	if m != nil {
		return m.Backend
	}
	return nil
}

func (x *DashboardSettings_SessionConfig) GetCookie() *DashboardSettings_SessionConfig_CookieSession {
	if x, ok := x.GetBackend().(*DashboardSettings_SessionConfig_Cookie); ok {
		return x.Cookie
	}
	return nil
}

func (x *DashboardSettings_SessionConfig) GetRedis() *DashboardSettings_SessionConfig_RedisSession {
	if x, ok := x.GetBackend().(*DashboardSettings_SessionConfig_Redis); ok {
		return x.Redis
	}
	return nil
}

type isDashboardSettings_SessionConfig_Backend interface {
	isDashboardSettings_SessionConfig_Backend()
}

type DashboardSettings_SessionConfig_Cookie struct {
	// Store all session data in the cookie itself
	Cookie *DashboardSettings_SessionConfig_CookieSession `protobuf:"bytes,2,opt,name=cookie,proto3,oneof"`
}

type DashboardSettings_SessionConfig_Redis struct {
	// Store the session data in a Redis instance.
	Redis *DashboardSettings_SessionConfig_RedisSession `protobuf:"bytes,3,opt,name=redis,proto3,oneof"`
}

func (*DashboardSettings_SessionConfig_Cookie) isDashboardSettings_SessionConfig_Backend() {}

func (*DashboardSettings_SessionConfig_Redis) isDashboardSettings_SessionConfig_Backend() {}

type DashboardSettings_NoAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DashboardSettings_NoAuth) Reset() {
	*x = DashboardSettings_NoAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSettings_NoAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSettings_NoAuth) ProtoMessage() {}

func (x *DashboardSettings_NoAuth) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSettings_NoAuth.ProtoReflect.Descriptor instead.
func (*DashboardSettings_NoAuth) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{4, 1}
}

type DashboardSettings_OidcConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The client ID from the issuer
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// THe client secret from the issuer
	ClientSecret *v12.ObjectRef `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// The url of the issuer. We will look for OIDC information in:
	//   {{ issuerURL }}/.well-known/openid-configuration
	IssuerUrl string `protobuf:"bytes,3,opt,name=issuer_url,json=issuerUrl,proto3" json:"issuer_url,omitempty"`
	// Extra query parameters to apply to the authorization request to the
	// identity provider. For example, using the PKCE flow
	// (https://www.oauth.com/oauth2-servers/pkce/authorization-request/) by
	// setting `code_challenge` and `code_challenge_method`.
	AuthEndpointQueryParams map[string]string `protobuf:"bytes,4,rep,name=auth_endpoint_query_params,json=authEndpointQueryParams,proto3" json:"auth_endpoint_query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Extra query parameters to apply to the token request to the identity
	// provider. For example, using the PKCE flow
	// (https://www.oauth.com/oauth2-servers/pkce/authorization-request/) by
	// setting `code_challenge` and `code_challenge_method`.
	TokenEndpointQueryParams map[string]string `protobuf:"bytes,5,rep,name=token_endpoint_query_params,json=tokenEndpointQueryParams,proto3" json:"token_endpoint_query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// URL to redirect to after successful auth.
	AppUrl string `protobuf:"bytes,6,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	// Path to handle the OIDC callback.
	CallbackPath string `protobuf:"bytes,7,opt,name=callback_path,json=callbackPath,proto3" json:"callback_path,omitempty"`
	// Path used to logout. If not provided, logout will be disabled.
	LogoutPath string `protobuf:"bytes,8,opt,name=logout_path,json=logoutPath,proto3" json:"logout_path,omitempty"`
	// Scopes to request in addition to 'openid'.
	Scopes []string `protobuf:"bytes,9,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// Additional headers.
	Header *DashboardSettings_OidcConfig_HeaderConfig `protobuf:"bytes,10,opt,name=header,proto3" json:"header,omitempty"`
	// Ensure that certain values are set regardless of what the OIDC
	// provider returns.
	DiscoveryOverride *DashboardSettings_OidcConfig_DiscoveryOverride `protobuf:"bytes,11,opt,name=discovery_override,json=discoveryOverride,proto3" json:"discovery_override,omitempty"`
	// How often to poll the OIDC issuer for new configuration.
	DiscoveryPollInterval *duration.Duration `protobuf:"bytes,12,opt,name=discovery_poll_interval,json=discoveryPollInterval,proto3" json:"discovery_poll_interval,omitempty"`
	// If a user executes a request with a key that is not found in the
	// JWKS, it could be that the keys have rotated on the remote source,
	// and not yet in the local cache. This policy lets you define the
	// behavior for how to refresh the local cache during a request where an
	// invalid key is provided
	JwksCacheRefreshPolicy *JwksOnDemandCacheRefreshPolicy `protobuf:"bytes,13,opt,name=jwks_cache_refresh_policy,json=jwksCacheRefreshPolicy,proto3" json:"jwks_cache_refresh_policy,omitempty"`
}

func (x *DashboardSettings_OidcConfig) Reset() {
	*x = DashboardSettings_OidcConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSettings_OidcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSettings_OidcConfig) ProtoMessage() {}

func (x *DashboardSettings_OidcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSettings_OidcConfig.ProtoReflect.Descriptor instead.
func (*DashboardSettings_OidcConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{4, 2}
}

func (x *DashboardSettings_OidcConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *DashboardSettings_OidcConfig) GetClientSecret() *v12.ObjectRef {
	if x != nil {
		return x.ClientSecret
	}
	return nil
}

func (x *DashboardSettings_OidcConfig) GetIssuerUrl() string {
	if x != nil {
		return x.IssuerUrl
	}
	return ""
}

func (x *DashboardSettings_OidcConfig) GetAuthEndpointQueryParams() map[string]string {
	if x != nil {
		return x.AuthEndpointQueryParams
	}
	return nil
}

func (x *DashboardSettings_OidcConfig) GetTokenEndpointQueryParams() map[string]string {
	if x != nil {
		return x.TokenEndpointQueryParams
	}
	return nil
}

func (x *DashboardSettings_OidcConfig) GetAppUrl() string {
	if x != nil {
		return x.AppUrl
	}
	return ""
}

func (x *DashboardSettings_OidcConfig) GetCallbackPath() string {
	if x != nil {
		return x.CallbackPath
	}
	return ""
}

func (x *DashboardSettings_OidcConfig) GetLogoutPath() string {
	if x != nil {
		return x.LogoutPath
	}
	return ""
}

func (x *DashboardSettings_OidcConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *DashboardSettings_OidcConfig) GetHeader() *DashboardSettings_OidcConfig_HeaderConfig {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DashboardSettings_OidcConfig) GetDiscoveryOverride() *DashboardSettings_OidcConfig_DiscoveryOverride {
	if x != nil {
		return x.DiscoveryOverride
	}
	return nil
}

func (x *DashboardSettings_OidcConfig) GetDiscoveryPollInterval() *duration.Duration {
	if x != nil {
		return x.DiscoveryPollInterval
	}
	return nil
}

func (x *DashboardSettings_OidcConfig) GetJwksCacheRefreshPolicy() *JwksOnDemandCacheRefreshPolicy {
	if x != nil {
		return x.JwksCacheRefreshPolicy
	}
	return nil
}

type DashboardSettings_AuthConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *wrappers.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to AuthConfig:
	//	*DashboardSettings_AuthConfig_None
	//	*DashboardSettings_AuthConfig_Oidc
	AuthConfig isDashboardSettings_AuthConfig_AuthConfig `protobuf_oneof:"auth_config"`
}

func (x *DashboardSettings_AuthConfig) Reset() {
	*x = DashboardSettings_AuthConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSettings_AuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSettings_AuthConfig) ProtoMessage() {}

func (x *DashboardSettings_AuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSettings_AuthConfig.ProtoReflect.Descriptor instead.
func (*DashboardSettings_AuthConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{4, 3}
}

func (x *DashboardSettings_AuthConfig) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (m *DashboardSettings_AuthConfig) GetAuthConfig() isDashboardSettings_AuthConfig_AuthConfig {
	if m != nil {
		return m.AuthConfig
	}
	return nil
}

func (x *DashboardSettings_AuthConfig) GetNone() *DashboardSettings_NoAuth {
	if x, ok := x.GetAuthConfig().(*DashboardSettings_AuthConfig_None); ok {
		return x.None
	}
	return nil
}

func (x *DashboardSettings_AuthConfig) GetOidc() *DashboardSettings_OidcConfig {
	if x, ok := x.GetAuthConfig().(*DashboardSettings_AuthConfig_Oidc); ok {
		return x.Oidc
	}
	return nil
}

type isDashboardSettings_AuthConfig_AuthConfig interface {
	isDashboardSettings_AuthConfig_AuthConfig()
}

type DashboardSettings_AuthConfig_None struct {
	None *DashboardSettings_NoAuth `protobuf:"bytes,2,opt,name=none,proto3,oneof"`
}

type DashboardSettings_AuthConfig_Oidc struct {
	Oidc *DashboardSettings_OidcConfig `protobuf:"bytes,3,opt,name=oidc,proto3,oneof"`
}

func (*DashboardSettings_AuthConfig_None) isDashboardSettings_AuthConfig_AuthConfig() {}

func (*DashboardSettings_AuthConfig_Oidc) isDashboardSettings_AuthConfig_AuthConfig() {}

type DashboardSettings_SessionConfig_CookieSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DashboardSettings_SessionConfig_CookieSession) Reset() {
	*x = DashboardSettings_SessionConfig_CookieSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSettings_SessionConfig_CookieSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSettings_SessionConfig_CookieSession) ProtoMessage() {}

func (x *DashboardSettings_SessionConfig_CookieSession) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSettings_SessionConfig_CookieSession.ProtoReflect.Descriptor instead.
func (*DashboardSettings_SessionConfig_CookieSession) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{4, 0, 0}
}

type DashboardSettings_SessionConfig_RedisSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DashboardSettings_SessionConfig_RedisSession) Reset() {
	*x = DashboardSettings_SessionConfig_RedisSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSettings_SessionConfig_RedisSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSettings_SessionConfig_RedisSession) ProtoMessage() {}

func (x *DashboardSettings_SessionConfig_RedisSession) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSettings_SessionConfig_RedisSession.ProtoReflect.Descriptor instead.
func (*DashboardSettings_SessionConfig_RedisSession) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{4, 0, 1}
}

type DashboardSettings_SessionConfig_CookieOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Max age of the cookie. If unset, the default of 30 days will be
	// used. To disable expiration, set explicitly to 0.
	MaxAge *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// Use an insecure cookie.
	// Should only be used for testing and in trusted environments.
	NotSecure bool `protobuf:"varint,2,opt,name=not_secure,json=notSecure,proto3" json:"not_secure,omitempty"`
	// Path of the cookie. Defaults to "/", set to "" to disable the
	// option.
	Path *wrappers.StringValue `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Domain of the cookie.
	Domain string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *DashboardSettings_SessionConfig_CookieOptions) Reset() {
	*x = DashboardSettings_SessionConfig_CookieOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSettings_SessionConfig_CookieOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSettings_SessionConfig_CookieOptions) ProtoMessage() {}

func (x *DashboardSettings_SessionConfig_CookieOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSettings_SessionConfig_CookieOptions.ProtoReflect.Descriptor instead.
func (*DashboardSettings_SessionConfig_CookieOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{4, 0, 2}
}

func (x *DashboardSettings_SessionConfig_CookieOptions) GetMaxAge() *wrappers.UInt32Value {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *DashboardSettings_SessionConfig_CookieOptions) GetNotSecure() bool {
	if x != nil {
		return x.NotSecure
	}
	return false
}

func (x *DashboardSettings_SessionConfig_CookieOptions) GetPath() *wrappers.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *DashboardSettings_SessionConfig_CookieOptions) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type DashboardSettings_OidcConfig_HeaderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set, the ID token will be sent upstream with this header.
	IdTokenHeader string `protobuf:"bytes,1,opt,name=id_token_header,json=idTokenHeader,proto3" json:"id_token_header,omitempty"`
	// If set, the access token will be sent upstream with this header.
	AccessTokenHeader string `protobuf:"bytes,2,opt,name=access_token_header,json=accessTokenHeader,proto3" json:"access_token_header,omitempty"`
}

func (x *DashboardSettings_OidcConfig_HeaderConfig) Reset() {
	*x = DashboardSettings_OidcConfig_HeaderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSettings_OidcConfig_HeaderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSettings_OidcConfig_HeaderConfig) ProtoMessage() {}

func (x *DashboardSettings_OidcConfig_HeaderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSettings_OidcConfig_HeaderConfig.ProtoReflect.Descriptor instead.
func (*DashboardSettings_OidcConfig_HeaderConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{4, 2, 2}
}

func (x *DashboardSettings_OidcConfig_HeaderConfig) GetIdTokenHeader() string {
	if x != nil {
		return x.IdTokenHeader
	}
	return ""
}

func (x *DashboardSettings_OidcConfig_HeaderConfig) GetAccessTokenHeader() string {
	if x != nil {
		return x.AccessTokenHeader
	}
	return ""
}

// OIDC configuration is discovered at
// <issuerUrl>/.well-known/openid-configuration The discovery override
// defines any properties that should override this discovery
// configuration
// https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata
type DashboardSettings_OidcConfig_DiscoveryOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of the provider authorization endpoint.
	AuthEndpoint string `protobuf:"bytes,1,opt,name=auth_endpoint,json=authEndpoint,proto3" json:"auth_endpoint,omitempty"`
	// URL of the provider token endpoint.
	TokenEndpoint string `protobuf:"bytes,2,opt,name=token_endpoint,json=tokenEndpoint,proto3" json:"token_endpoint,omitempty"`
	// URL of the provider JSON web key set.
	JwksUri string `protobuf:"bytes,3,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
	// List of scope values that the provider supports.
	Scopes []string `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// List of response types that the provider supports.
	ResponseTypes []string `protobuf:"bytes,5,rep,name=response_types,json=responseTypes,proto3" json:"response_types,omitempty"`
	// List of subject identifier types that the provider supports.
	Subjects []string `protobuf:"bytes,6,rep,name=subjects,proto3" json:"subjects,omitempty"`
	// List of json web signature signing algorithms that the provider
	// supports for encoding claims in a JWT.
	IdTokenAlgs []string `protobuf:"bytes,7,rep,name=id_token_algs,json=idTokenAlgs,proto3" json:"id_token_algs,omitempty"`
	// List of client authentication methods supported by the provider
	// token endpoint.
	AuthMethods []string `protobuf:"bytes,8,rep,name=auth_methods,json=authMethods,proto3" json:"auth_methods,omitempty"`
	// List of claim types that the provider supports.
	Claims []string `protobuf:"bytes,9,rep,name=claims,proto3" json:"claims,omitempty"`
}

func (x *DashboardSettings_OidcConfig_DiscoveryOverride) Reset() {
	*x = DashboardSettings_OidcConfig_DiscoveryOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardSettings_OidcConfig_DiscoveryOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardSettings_OidcConfig_DiscoveryOverride) ProtoMessage() {}

func (x *DashboardSettings_OidcConfig_DiscoveryOverride) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardSettings_OidcConfig_DiscoveryOverride.ProtoReflect.Descriptor instead.
func (*DashboardSettings_OidcConfig_DiscoveryOverride) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP(), []int{4, 2, 3}
}

func (x *DashboardSettings_OidcConfig_DiscoveryOverride) GetAuthEndpoint() string {
	if x != nil {
		return x.AuthEndpoint
	}
	return ""
}

func (x *DashboardSettings_OidcConfig_DiscoveryOverride) GetTokenEndpoint() string {
	if x != nil {
		return x.TokenEndpoint
	}
	return ""
}

func (x *DashboardSettings_OidcConfig_DiscoveryOverride) GetJwksUri() string {
	if x != nil {
		return x.JwksUri
	}
	return ""
}

func (x *DashboardSettings_OidcConfig_DiscoveryOverride) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *DashboardSettings_OidcConfig_DiscoveryOverride) GetResponseTypes() []string {
	if x != nil {
		return x.ResponseTypes
	}
	return nil
}

func (x *DashboardSettings_OidcConfig_DiscoveryOverride) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *DashboardSettings_OidcConfig_DiscoveryOverride) GetIdTokenAlgs() []string {
	if x != nil {
		return x.IdTokenAlgs
	}
	return nil
}

func (x *DashboardSettings_OidcConfig_DiscoveryOverride) GetAuthMethods() []string {
	if x != nil {
		return x.AuthMethods
	}
	return nil
}

func (x *DashboardSettings_OidcConfig_DiscoveryOverride) GetClaims() []string {
	if x != nil {
		return x.Claims
	}
	return nil
}

var File_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69,
	0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6b, 0x76, 0x32, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa4, 0x03, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x4f, 0x0a, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x52, 0x04,
	0x6d, 0x74, 0x6c, 0x73, 0x12, 0x68, 0x0a, 0x1c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x1a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x4b,
	0x0a, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x4b, 0x0a, 0x09,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x09,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x69, 0x0a, 0x0d, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x22, 0xc8, 0x05, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x49, 0x0a, 0x05, 0x69, 0x73,
	0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x05,
	0x69, 0x73, 0x74, 0x69, 0x6f, 0x1a, 0xe7, 0x04, 0x0a, 0x05, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x12,
	0x8c, 0x01, 0x0a, 0x19, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x96,
	0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x60, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4a, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x49, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb5, 0x02, 0x0a, 0x16, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x9d, 0x01, 0x0a, 0x17, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x6c,
	0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x6c, 0x73, 0x50, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x48, 0x0a, 0x1a, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x85, 0x01, 0x0a, 0x0a, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x22, 0x9d, 0x13, 0x0a, 0x11, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5b, 0x0a,
	0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0xa6, 0x04, 0x0a, 0x0d, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x70, 0x0a, 0x0e,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0d, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63,
	0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x60, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x1a, 0x0f, 0x0a, 0x0d, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x0e, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xaf, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x1a, 0x08, 0x0a, 0x06, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x8b, 0x0c,
	0x0a, 0x0a, 0x4f, 0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0c,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x92, 0x01, 0x0a, 0x1a,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x55, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x4f, 0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x95, 0x01, 0x0a, 0x1b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4f, 0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55, 0x72,
	0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12,
	0x5d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4f,
	0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x79,
	0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4f, 0x69, 0x64, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x75, 0x0a, 0x19,
	0x6a, 0x77, 0x6b, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4a, 0x77, 0x6b,
	0x73, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x16, 0x6a, 0x77, 0x6b,
	0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x1a, 0x4a, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x4b, 0x0a, 0x1d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x66, 0x0a, 0x0c,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f,
	0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x1a, 0xb4, 0x02, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x77, 0x6b, 0x73, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x77, 0x6b, 0x73, 0x55, 0x72,
	0x69, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x67, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x1a, 0xe9, 0x01, 0x0a, 0x0a,
	0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x04,
	0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x4e, 0x0a, 0x04, 0x6f, 0x69, 0x64, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4f, 0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x04, 0x6f, 0x69, 0x64, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd5, 0x01, 0x0a, 0x1e, 0x4a, 0x77, 0x6b, 0x73,
	0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x6e, 0x65,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x12, 0x47, 0x0a, 0x20,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x1b, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x70,
	0x52, 0x65, 0x71, 0x50, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0x98, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x48, 0x5a, 0x42, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31,
	0xc0, 0xf5, 0x04, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescData = file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_goTypes = []interface{}{
	(*SettingsSpec)(nil),                   // 0: settings.mesh.gloo.solo.io.SettingsSpec
	(*RelaySettings)(nil),                  // 1: settings.mesh.gloo.solo.io.RelaySettings
	(*DiscoverySettings)(nil),              // 2: settings.mesh.gloo.solo.io.DiscoverySettings
	(*GrpcServer)(nil),                     // 3: settings.mesh.gloo.solo.io.GrpcServer
	(*DashboardSettings)(nil),              // 4: settings.mesh.gloo.solo.io.DashboardSettings
	(*JwksOnDemandCacheRefreshPolicy)(nil), // 5: settings.mesh.gloo.solo.io.JwksOnDemandCacheRefreshPolicy
	(*SettingsStatus)(nil),                 // 6: settings.mesh.gloo.solo.io.SettingsStatus
	(*DiscoverySettings_Istio)(nil),        // 7: settings.mesh.gloo.solo.io.DiscoverySettings.Istio
	nil,                                    // 8: settings.mesh.gloo.solo.io.DiscoverySettings.Istio.IngressGatewayDetectorsEntry
	(*DiscoverySettings_Istio_IngressGatewayDetector)(nil), // 9: settings.mesh.gloo.solo.io.DiscoverySettings.Istio.IngressGatewayDetector
	nil,                                                   // 10: settings.mesh.gloo.solo.io.DiscoverySettings.Istio.IngressGatewayDetector.GatewayWorkloadLabelsEntry
	(*DashboardSettings_SessionConfig)(nil),               // 11: settings.mesh.gloo.solo.io.DashboardSettings.SessionConfig
	(*DashboardSettings_NoAuth)(nil),                      // 12: settings.mesh.gloo.solo.io.DashboardSettings.NoAuth
	(*DashboardSettings_OidcConfig)(nil),                  // 13: settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig
	(*DashboardSettings_AuthConfig)(nil),                  // 14: settings.mesh.gloo.solo.io.DashboardSettings.AuthConfig
	(*DashboardSettings_SessionConfig_CookieSession)(nil), // 15: settings.mesh.gloo.solo.io.DashboardSettings.SessionConfig.CookieSession
	(*DashboardSettings_SessionConfig_RedisSession)(nil),  // 16: settings.mesh.gloo.solo.io.DashboardSettings.SessionConfig.RedisSession
	(*DashboardSettings_SessionConfig_CookieOptions)(nil), // 17: settings.mesh.gloo.solo.io.DashboardSettings.SessionConfig.CookieOptions
	nil, // 18: settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig.AuthEndpointQueryParamsEntry
	nil, // 19: settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig.TokenEndpointQueryParamsEntry
	(*DashboardSettings_OidcConfig_HeaderConfig)(nil),      // 20: settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig.HeaderConfig
	(*DashboardSettings_OidcConfig_DiscoveryOverride)(nil), // 21: settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig.DiscoveryOverride
	(*v1.TrafficPolicySpec_Policy_MTLS)(nil),               // 22: networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.MTLS
	(*empty.Empty)(nil),                                    // 23: google.protobuf.Empty
	(v11.ApprovalState)(0),                                 // 24: common.mesh.gloo.solo.io.ApprovalState
	(*v12.ObjectRef)(nil),                                  // 25: core.skv2.solo.io.ObjectRef
	(*duration.Duration)(nil),                              // 26: google.protobuf.Duration
	(*wrappers.StringValue)(nil),                           // 27: google.protobuf.StringValue
	(*wrappers.UInt32Value)(nil),                           // 28: google.protobuf.UInt32Value
}
var file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_depIdxs = []int32{
	22, // 0: settings.mesh.gloo.solo.io.SettingsSpec.mtls:type_name -> networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy.MTLS
	3,  // 1: settings.mesh.gloo.solo.io.SettingsSpec.networking_extension_servers:type_name -> settings.mesh.gloo.solo.io.GrpcServer
	2,  // 2: settings.mesh.gloo.solo.io.SettingsSpec.discovery:type_name -> settings.mesh.gloo.solo.io.DiscoverySettings
	1,  // 3: settings.mesh.gloo.solo.io.SettingsSpec.relay:type_name -> settings.mesh.gloo.solo.io.RelaySettings
	4,  // 4: settings.mesh.gloo.solo.io.SettingsSpec.dashboard:type_name -> settings.mesh.gloo.solo.io.DashboardSettings
	3,  // 5: settings.mesh.gloo.solo.io.RelaySettings.server:type_name -> settings.mesh.gloo.solo.io.GrpcServer
	7,  // 6: settings.mesh.gloo.solo.io.DiscoverySettings.istio:type_name -> settings.mesh.gloo.solo.io.DiscoverySettings.Istio
	14, // 7: settings.mesh.gloo.solo.io.DashboardSettings.auth_configs:type_name -> settings.mesh.gloo.solo.io.DashboardSettings.AuthConfig
	23, // 8: settings.mesh.gloo.solo.io.JwksOnDemandCacheRefreshPolicy.never:type_name -> google.protobuf.Empty
	23, // 9: settings.mesh.gloo.solo.io.JwksOnDemandCacheRefreshPolicy.always:type_name -> google.protobuf.Empty
	24, // 10: settings.mesh.gloo.solo.io.SettingsStatus.state:type_name -> common.mesh.gloo.solo.io.ApprovalState
	8,  // 11: settings.mesh.gloo.solo.io.DiscoverySettings.Istio.ingress_gateway_detectors:type_name -> settings.mesh.gloo.solo.io.DiscoverySettings.Istio.IngressGatewayDetectorsEntry
	9,  // 12: settings.mesh.gloo.solo.io.DiscoverySettings.Istio.IngressGatewayDetectorsEntry.value:type_name -> settings.mesh.gloo.solo.io.DiscoverySettings.Istio.IngressGatewayDetector
	10, // 13: settings.mesh.gloo.solo.io.DiscoverySettings.Istio.IngressGatewayDetector.gateway_workload_labels:type_name -> settings.mesh.gloo.solo.io.DiscoverySettings.Istio.IngressGatewayDetector.GatewayWorkloadLabelsEntry
	17, // 14: settings.mesh.gloo.solo.io.DashboardSettings.SessionConfig.cookie_options:type_name -> settings.mesh.gloo.solo.io.DashboardSettings.SessionConfig.CookieOptions
	15, // 15: settings.mesh.gloo.solo.io.DashboardSettings.SessionConfig.cookie:type_name -> settings.mesh.gloo.solo.io.DashboardSettings.SessionConfig.CookieSession
	16, // 16: settings.mesh.gloo.solo.io.DashboardSettings.SessionConfig.redis:type_name -> settings.mesh.gloo.solo.io.DashboardSettings.SessionConfig.RedisSession
	25, // 17: settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig.client_secret:type_name -> core.skv2.solo.io.ObjectRef
	18, // 18: settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig.auth_endpoint_query_params:type_name -> settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig.AuthEndpointQueryParamsEntry
	19, // 19: settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig.token_endpoint_query_params:type_name -> settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig.TokenEndpointQueryParamsEntry
	20, // 20: settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig.header:type_name -> settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig.HeaderConfig
	21, // 21: settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig.discovery_override:type_name -> settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig.DiscoveryOverride
	26, // 22: settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig.discovery_poll_interval:type_name -> google.protobuf.Duration
	5,  // 23: settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig.jwks_cache_refresh_policy:type_name -> settings.mesh.gloo.solo.io.JwksOnDemandCacheRefreshPolicy
	27, // 24: settings.mesh.gloo.solo.io.DashboardSettings.AuthConfig.name:type_name -> google.protobuf.StringValue
	12, // 25: settings.mesh.gloo.solo.io.DashboardSettings.AuthConfig.none:type_name -> settings.mesh.gloo.solo.io.DashboardSettings.NoAuth
	13, // 26: settings.mesh.gloo.solo.io.DashboardSettings.AuthConfig.oidc:type_name -> settings.mesh.gloo.solo.io.DashboardSettings.OidcConfig
	28, // 27: settings.mesh.gloo.solo.io.DashboardSettings.SessionConfig.CookieOptions.max_age:type_name -> google.protobuf.UInt32Value
	27, // 28: settings.mesh.gloo.solo.io.DashboardSettings.SessionConfig.CookieOptions.path:type_name -> google.protobuf.StringValue
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_init() }
func file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_init() {
	if File_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelaySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwksOnDemandCacheRefreshPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverySettings_Istio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverySettings_Istio_IngressGatewayDetector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSettings_SessionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSettings_NoAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSettings_OidcConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSettings_AuthConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSettings_SessionConfig_CookieSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSettings_SessionConfig_RedisSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSettings_SessionConfig_CookieOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSettings_OidcConfig_HeaderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardSettings_OidcConfig_DiscoveryOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*JwksOnDemandCacheRefreshPolicy_Never)(nil),
		(*JwksOnDemandCacheRefreshPolicy_Always)(nil),
		(*JwksOnDemandCacheRefreshPolicy_MaxIdpReqPerPollingInterval)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*DashboardSettings_SessionConfig_Cookie)(nil),
		(*DashboardSettings_SessionConfig_Redis)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*DashboardSettings_AuthConfig_None)(nil),
		(*DashboardSettings_AuthConfig_Oidc)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto = out.File
	file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_api_settings_v1_settings_proto_depIdxs = nil
}
