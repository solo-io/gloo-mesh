// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	settings_mesh_gloo_solo_io_v1 "github.com/solo-io/gloo-mesh/pkg/api/settings.mesh.gloo.solo.io/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the Settings Resource
// DEPRECATED: Prefer reconciler pattern.
type SettingsEventHandler interface {
	CreateSettings(obj *settings_mesh_gloo_solo_io_v1.Settings) error
	UpdateSettings(old, new *settings_mesh_gloo_solo_io_v1.Settings) error
	DeleteSettings(obj *settings_mesh_gloo_solo_io_v1.Settings) error
	GenericSettings(obj *settings_mesh_gloo_solo_io_v1.Settings) error
}

type SettingsEventHandlerFuncs struct {
	OnCreate  func(obj *settings_mesh_gloo_solo_io_v1.Settings) error
	OnUpdate  func(old, new *settings_mesh_gloo_solo_io_v1.Settings) error
	OnDelete  func(obj *settings_mesh_gloo_solo_io_v1.Settings) error
	OnGeneric func(obj *settings_mesh_gloo_solo_io_v1.Settings) error
}

func (f *SettingsEventHandlerFuncs) CreateSettings(obj *settings_mesh_gloo_solo_io_v1.Settings) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *SettingsEventHandlerFuncs) DeleteSettings(obj *settings_mesh_gloo_solo_io_v1.Settings) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *SettingsEventHandlerFuncs) UpdateSettings(objOld, objNew *settings_mesh_gloo_solo_io_v1.Settings) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *SettingsEventHandlerFuncs) GenericSettings(obj *settings_mesh_gloo_solo_io_v1.Settings) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type SettingsEventWatcher interface {
	AddEventHandler(ctx context.Context, h SettingsEventHandler, predicates ...predicate.Predicate) error
}

type settingsEventWatcher struct {
	watcher events.EventWatcher
}

func NewSettingsEventWatcher(name string, mgr manager.Manager) SettingsEventWatcher {
	return &settingsEventWatcher{
		watcher: events.NewWatcher(name, mgr, &settings_mesh_gloo_solo_io_v1.Settings{}),
	}
}

func (c *settingsEventWatcher) AddEventHandler(ctx context.Context, h SettingsEventHandler, predicates ...predicate.Predicate) error {
	handler := genericSettingsHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericSettingsHandler implements a generic events.EventHandler
type genericSettingsHandler struct {
	handler SettingsEventHandler
}

func (h genericSettingsHandler) Create(object client.Object) error {
	obj, ok := object.(*settings_mesh_gloo_solo_io_v1.Settings)
	if !ok {
		return errors.Errorf("internal error: Settings handler received event for %T", object)
	}
	return h.handler.CreateSettings(obj)
}

func (h genericSettingsHandler) Delete(object client.Object) error {
	obj, ok := object.(*settings_mesh_gloo_solo_io_v1.Settings)
	if !ok {
		return errors.Errorf("internal error: Settings handler received event for %T", object)
	}
	return h.handler.DeleteSettings(obj)
}

func (h genericSettingsHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*settings_mesh_gloo_solo_io_v1.Settings)
	if !ok {
		return errors.Errorf("internal error: Settings handler received event for %T", old)
	}
	objNew, ok := new.(*settings_mesh_gloo_solo_io_v1.Settings)
	if !ok {
		return errors.Errorf("internal error: Settings handler received event for %T", new)
	}
	return h.handler.UpdateSettings(objOld, objNew)
}

func (h genericSettingsHandler) Generic(object client.Object) error {
	obj, ok := object.(*settings_mesh_gloo_solo_io_v1.Settings)
	if !ok {
		return errors.Errorf("internal error: Settings handler received event for %T", object)
	}
	return h.handler.GenericSettings(obj)
}

// Handle events for the Dashboard Resource
// DEPRECATED: Prefer reconciler pattern.
type DashboardEventHandler interface {
	CreateDashboard(obj *settings_mesh_gloo_solo_io_v1.Dashboard) error
	UpdateDashboard(old, new *settings_mesh_gloo_solo_io_v1.Dashboard) error
	DeleteDashboard(obj *settings_mesh_gloo_solo_io_v1.Dashboard) error
	GenericDashboard(obj *settings_mesh_gloo_solo_io_v1.Dashboard) error
}

type DashboardEventHandlerFuncs struct {
	OnCreate  func(obj *settings_mesh_gloo_solo_io_v1.Dashboard) error
	OnUpdate  func(old, new *settings_mesh_gloo_solo_io_v1.Dashboard) error
	OnDelete  func(obj *settings_mesh_gloo_solo_io_v1.Dashboard) error
	OnGeneric func(obj *settings_mesh_gloo_solo_io_v1.Dashboard) error
}

func (f *DashboardEventHandlerFuncs) CreateDashboard(obj *settings_mesh_gloo_solo_io_v1.Dashboard) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *DashboardEventHandlerFuncs) DeleteDashboard(obj *settings_mesh_gloo_solo_io_v1.Dashboard) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *DashboardEventHandlerFuncs) UpdateDashboard(objOld, objNew *settings_mesh_gloo_solo_io_v1.Dashboard) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *DashboardEventHandlerFuncs) GenericDashboard(obj *settings_mesh_gloo_solo_io_v1.Dashboard) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type DashboardEventWatcher interface {
	AddEventHandler(ctx context.Context, h DashboardEventHandler, predicates ...predicate.Predicate) error
}

type dashboardEventWatcher struct {
	watcher events.EventWatcher
}

func NewDashboardEventWatcher(name string, mgr manager.Manager) DashboardEventWatcher {
	return &dashboardEventWatcher{
		watcher: events.NewWatcher(name, mgr, &settings_mesh_gloo_solo_io_v1.Dashboard{}),
	}
}

func (c *dashboardEventWatcher) AddEventHandler(ctx context.Context, h DashboardEventHandler, predicates ...predicate.Predicate) error {
	handler := genericDashboardHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericDashboardHandler implements a generic events.EventHandler
type genericDashboardHandler struct {
	handler DashboardEventHandler
}

func (h genericDashboardHandler) Create(object client.Object) error {
	obj, ok := object.(*settings_mesh_gloo_solo_io_v1.Dashboard)
	if !ok {
		return errors.Errorf("internal error: Dashboard handler received event for %T", object)
	}
	return h.handler.CreateDashboard(obj)
}

func (h genericDashboardHandler) Delete(object client.Object) error {
	obj, ok := object.(*settings_mesh_gloo_solo_io_v1.Dashboard)
	if !ok {
		return errors.Errorf("internal error: Dashboard handler received event for %T", object)
	}
	return h.handler.DeleteDashboard(obj)
}

func (h genericDashboardHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*settings_mesh_gloo_solo_io_v1.Dashboard)
	if !ok {
		return errors.Errorf("internal error: Dashboard handler received event for %T", old)
	}
	objNew, ok := new.(*settings_mesh_gloo_solo_io_v1.Dashboard)
	if !ok {
		return errors.Errorf("internal error: Dashboard handler received event for %T", new)
	}
	return h.handler.UpdateDashboard(objOld, objNew)
}

func (h genericDashboardHandler) Generic(object client.Object) error {
	obj, ok := object.(*settings_mesh_gloo_solo_io_v1.Dashboard)
	if !ok {
		return errors.Errorf("internal error: Dashboard handler received event for %T", object)
	}
	return h.handler.GenericDashboard(obj)
}
