// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package appmesh is a generated GoMock package.
package appmesh

import (
	context "context"
	reflect "reflect"

	appmesh "github.com/aws/aws-sdk-go/service/appmesh"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetMesh mocks base method
func (m *MockClient) GetMesh(ctx context.Context, meshName string) (*appmesh.MeshData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMesh", ctx, meshName)
	ret0, _ := ret[0].(*appmesh.MeshData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMesh indicates an expected call of GetMesh
func (mr *MockClientMockRecorder) GetMesh(ctx, meshName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMesh", reflect.TypeOf((*MockClient)(nil).GetMesh), ctx, meshName)
}

// ListMeshes mocks base method
func (m *MockClient) ListMeshes(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeshes", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshes indicates an expected call of ListMeshes
func (mr *MockClientMockRecorder) ListMeshes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshes", reflect.TypeOf((*MockClient)(nil).ListMeshes), ctx)
}

// ListVirtualNodes mocks base method
func (m *MockClient) ListVirtualNodes(ctx context.Context, meshName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualNodes", ctx, meshName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualNodes indicates an expected call of ListVirtualNodes
func (mr *MockClientMockRecorder) ListVirtualNodes(ctx, meshName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualNodes", reflect.TypeOf((*MockClient)(nil).ListVirtualNodes), ctx, meshName)
}

// ListVirtualServices mocks base method
func (m *MockClient) ListVirtualServices(ctx context.Context, meshName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualServices", ctx, meshName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualServices indicates an expected call of ListVirtualServices
func (mr *MockClientMockRecorder) ListVirtualServices(ctx, meshName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualServices", reflect.TypeOf((*MockClient)(nil).ListVirtualServices), ctx, meshName)
}

// ListVirtualRouters mocks base method
func (m *MockClient) ListVirtualRouters(ctx context.Context, meshName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualRouters", ctx, meshName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualRouters indicates an expected call of ListVirtualRouters
func (mr *MockClientMockRecorder) ListVirtualRouters(ctx, meshName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualRouters", reflect.TypeOf((*MockClient)(nil).ListVirtualRouters), ctx, meshName)
}

// ListRoutes mocks base method
func (m *MockClient) ListRoutes(ctx context.Context, meshName, virtualRouterName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutes", ctx, meshName, virtualRouterName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutes indicates an expected call of ListRoutes
func (mr *MockClientMockRecorder) ListRoutes(ctx, meshName, virtualRouterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutes", reflect.TypeOf((*MockClient)(nil).ListRoutes), ctx, meshName, virtualRouterName)
}

// CreateMesh mocks base method
func (m *MockClient) CreateMesh(ctx context.Context, meshName string) (*appmesh.MeshData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMesh", ctx, meshName)
	ret0, _ := ret[0].(*appmesh.MeshData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMesh indicates an expected call of CreateMesh
func (mr *MockClientMockRecorder) CreateMesh(ctx, meshName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMesh", reflect.TypeOf((*MockClient)(nil).CreateMesh), ctx, meshName)
}

// CreateVirtualNode mocks base method
func (m *MockClient) CreateVirtualNode(ctx context.Context, virtualNode *appmesh.VirtualNodeData) (*appmesh.VirtualNodeData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualNode", ctx, virtualNode)
	ret0, _ := ret[0].(*appmesh.VirtualNodeData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualNode indicates an expected call of CreateVirtualNode
func (mr *MockClientMockRecorder) CreateVirtualNode(ctx, virtualNode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualNode", reflect.TypeOf((*MockClient)(nil).CreateVirtualNode), ctx, virtualNode)
}

// CreateVirtualService mocks base method
func (m *MockClient) CreateVirtualService(ctx context.Context, virtualService *appmesh.VirtualServiceData) (*appmesh.VirtualServiceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualService", ctx, virtualService)
	ret0, _ := ret[0].(*appmesh.VirtualServiceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualService indicates an expected call of CreateVirtualService
func (mr *MockClientMockRecorder) CreateVirtualService(ctx, virtualService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualService", reflect.TypeOf((*MockClient)(nil).CreateVirtualService), ctx, virtualService)
}

// CreateVirtualRouter mocks base method
func (m *MockClient) CreateVirtualRouter(ctx context.Context, virtualRouter *appmesh.VirtualRouterData) (*appmesh.VirtualRouterData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualRouter", ctx, virtualRouter)
	ret0, _ := ret[0].(*appmesh.VirtualRouterData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualRouter indicates an expected call of CreateVirtualRouter
func (mr *MockClientMockRecorder) CreateVirtualRouter(ctx, virtualRouter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualRouter", reflect.TypeOf((*MockClient)(nil).CreateVirtualRouter), ctx, virtualRouter)
}

// CreateRoute mocks base method
func (m *MockClient) CreateRoute(ctx context.Context, route *appmesh.RouteData) (*appmesh.RouteData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoute", ctx, route)
	ret0, _ := ret[0].(*appmesh.RouteData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoute indicates an expected call of CreateRoute
func (mr *MockClientMockRecorder) CreateRoute(ctx, route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoute", reflect.TypeOf((*MockClient)(nil).CreateRoute), ctx, route)
}

// UpdateVirtualNode mocks base method
func (m *MockClient) UpdateVirtualNode(ctx context.Context, virtualNode *appmesh.VirtualNodeData) (*appmesh.VirtualNodeData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualNode", ctx, virtualNode)
	ret0, _ := ret[0].(*appmesh.VirtualNodeData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVirtualNode indicates an expected call of UpdateVirtualNode
func (mr *MockClientMockRecorder) UpdateVirtualNode(ctx, virtualNode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualNode", reflect.TypeOf((*MockClient)(nil).UpdateVirtualNode), ctx, virtualNode)
}

// UpdateVirtualService mocks base method
func (m *MockClient) UpdateVirtualService(ctx context.Context, virtualService *appmesh.VirtualServiceData) (*appmesh.VirtualServiceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualService", ctx, virtualService)
	ret0, _ := ret[0].(*appmesh.VirtualServiceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVirtualService indicates an expected call of UpdateVirtualService
func (mr *MockClientMockRecorder) UpdateVirtualService(ctx, virtualService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualService", reflect.TypeOf((*MockClient)(nil).UpdateVirtualService), ctx, virtualService)
}

// UpdateVirtualRouter mocks base method
func (m *MockClient) UpdateVirtualRouter(ctx context.Context, virtualRouter *appmesh.VirtualRouterData) (*appmesh.VirtualRouterData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualRouter", ctx, virtualRouter)
	ret0, _ := ret[0].(*appmesh.VirtualRouterData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVirtualRouter indicates an expected call of UpdateVirtualRouter
func (mr *MockClientMockRecorder) UpdateVirtualRouter(ctx, virtualRouter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualRouter", reflect.TypeOf((*MockClient)(nil).UpdateVirtualRouter), ctx, virtualRouter)
}

// UpdateRoute mocks base method
func (m *MockClient) UpdateRoute(ctx context.Context, route *appmesh.RouteData) (*appmesh.RouteData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoute", ctx, route)
	ret0, _ := ret[0].(*appmesh.RouteData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoute indicates an expected call of UpdateRoute
func (mr *MockClientMockRecorder) UpdateRoute(ctx, route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoute", reflect.TypeOf((*MockClient)(nil).UpdateRoute), ctx, route)
}

// DeleteMesh mocks base method
func (m *MockClient) DeleteMesh(ctx context.Context, meshName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMesh", ctx, meshName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMesh indicates an expected call of DeleteMesh
func (mr *MockClientMockRecorder) DeleteMesh(ctx, meshName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMesh", reflect.TypeOf((*MockClient)(nil).DeleteMesh), ctx, meshName)
}

// DeleteVirtualNode mocks base method
func (m *MockClient) DeleteVirtualNode(ctx context.Context, meshName, virtualNodeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualNode", ctx, meshName, virtualNodeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualNode indicates an expected call of DeleteVirtualNode
func (mr *MockClientMockRecorder) DeleteVirtualNode(ctx, meshName, virtualNodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualNode", reflect.TypeOf((*MockClient)(nil).DeleteVirtualNode), ctx, meshName, virtualNodeName)
}

// DeleteVirtualService mocks base method
func (m *MockClient) DeleteVirtualService(ctx context.Context, meshName, virtualServiceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualService", ctx, meshName, virtualServiceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualService indicates an expected call of DeleteVirtualService
func (mr *MockClientMockRecorder) DeleteVirtualService(ctx, meshName, virtualServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualService", reflect.TypeOf((*MockClient)(nil).DeleteVirtualService), ctx, meshName, virtualServiceName)
}

// DeleteVirtualRouter mocks base method
func (m *MockClient) DeleteVirtualRouter(ctx context.Context, meshName, virtualRouterName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualRouter", ctx, meshName, virtualRouterName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualRouter indicates an expected call of DeleteVirtualRouter
func (mr *MockClientMockRecorder) DeleteVirtualRouter(ctx, meshName, virtualRouterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualRouter", reflect.TypeOf((*MockClient)(nil).DeleteVirtualRouter), ctx, meshName, virtualRouterName)
}

// DeleteRoute mocks base method
func (m *MockClient) DeleteRoute(ctx context.Context, meshName, virtualRouterName, routeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoute", ctx, meshName, virtualRouterName, routeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoute indicates an expected call of DeleteRoute
func (mr *MockClientMockRecorder) DeleteRoute(ctx, meshName, virtualRouterName, routeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockClient)(nil).DeleteRoute), ctx, meshName, virtualRouterName, routeName)
}
