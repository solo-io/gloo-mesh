// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/service-mesh-hub/pkg/clients"
	clientcmd "k8s.io/client-go/tools/clientcmd"
)

// MockClusterRegistrationClient is a mock of ClusterRegistrationClient interface.
type MockClusterRegistrationClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRegistrationClientMockRecorder
}

// MockClusterRegistrationClientMockRecorder is the mock recorder for MockClusterRegistrationClient.
type MockClusterRegistrationClientMockRecorder struct {
	mock *MockClusterRegistrationClient
}

// NewMockClusterRegistrationClient creates a new mock instance.
func NewMockClusterRegistrationClient(ctrl *gomock.Controller) *MockClusterRegistrationClient {
	mock := &MockClusterRegistrationClient{ctrl: ctrl}
	mock.recorder = &MockClusterRegistrationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterRegistrationClient) EXPECT() *MockClusterRegistrationClientMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockClusterRegistrationClient) Register(ctx context.Context, remoteConfig clientcmd.ClientConfig, remoteClusterName, remoteWriteNamespace, remoteContextName, discoverySource string, registerOpts clients.ClusterRegisterOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, remoteConfig, remoteClusterName, remoteWriteNamespace, remoteContextName, discoverySource, registerOpts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockClusterRegistrationClientMockRecorder) Register(ctx, remoteConfig, remoteClusterName, remoteWriteNamespace, remoteContextName, discoverySource, registerOpts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockClusterRegistrationClient)(nil).Register), ctx, remoteConfig, remoteClusterName, remoteWriteNamespace, remoteContextName, discoverySource, registerOpts)
}
