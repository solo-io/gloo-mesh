// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_zephyr_networking is a generated GoMock package.
package mock_zephyr_networking

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/networking.zephyr.solo.io/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockVirtualMeshClient is a mock of VirtualMeshClient interface.
type MockVirtualMeshClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshClientMockRecorder
}

// MockVirtualMeshClientMockRecorder is the mock recorder for MockVirtualMeshClient.
type MockVirtualMeshClientMockRecorder struct {
	mock *MockVirtualMeshClient
}

// NewMockVirtualMeshClient creates a new mock instance.
func NewMockVirtualMeshClient(ctrl *gomock.Controller) *MockVirtualMeshClient {
	mock := &MockVirtualMeshClient{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshClient) EXPECT() *MockVirtualMeshClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockVirtualMeshClient) Get(ctx context.Context, name, namespace string) (*v1alpha1.VirtualMesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, namespace)
	ret0, _ := ret[0].(*v1alpha1.VirtualMesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMeshClientMockRecorder) Get(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMeshClient)(nil).Get), ctx, name, namespace)
}

// List mocks base method.
func (m *MockVirtualMeshClient) List(ctx context.Context, opts ...client.ListOption) (*v1alpha1.VirtualMeshList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha1.VirtualMeshList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualMeshClientMockRecorder) List(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMeshClient)(nil).List), varargs...)
}

// UpdateStatus mocks base method.
func (m *MockVirtualMeshClient) UpdateStatus(ctx context.Context, virtualMesh *v1alpha1.VirtualMesh, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, virtualMesh}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockVirtualMeshClientMockRecorder) UpdateStatus(ctx, virtualMesh interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, virtualMesh}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockVirtualMeshClient)(nil).UpdateStatus), varargs...)
}

// Create mocks base method.
func (m *MockVirtualMeshClient) Create(ctx context.Context, virtualMesh *v1alpha1.VirtualMesh) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, virtualMesh)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVirtualMeshClientMockRecorder) Create(ctx, virtualMesh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVirtualMeshClient)(nil).Create), ctx, virtualMesh)
}

// MockTrafficPolicyClient is a mock of TrafficPolicyClient interface.
type MockTrafficPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficPolicyClientMockRecorder
}

// MockTrafficPolicyClientMockRecorder is the mock recorder for MockTrafficPolicyClient.
type MockTrafficPolicyClientMockRecorder struct {
	mock *MockTrafficPolicyClient
}

// NewMockTrafficPolicyClient creates a new mock instance.
func NewMockTrafficPolicyClient(ctrl *gomock.Controller) *MockTrafficPolicyClient {
	mock := &MockTrafficPolicyClient{ctrl: ctrl}
	mock.recorder = &MockTrafficPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficPolicyClient) EXPECT() *MockTrafficPolicyClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTrafficPolicyClient) Get(ctx context.Context, name, namespace string) (*v1alpha1.TrafficPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, namespace)
	ret0, _ := ret[0].(*v1alpha1.TrafficPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTrafficPolicyClientMockRecorder) Get(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTrafficPolicyClient)(nil).Get), ctx, name, namespace)
}

// Create mocks base method.
func (m *MockTrafficPolicyClient) Create(ctx context.Context, trafficPolicy *v1alpha1.TrafficPolicy, options ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, trafficPolicy}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTrafficPolicyClientMockRecorder) Create(ctx, trafficPolicy interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, trafficPolicy}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTrafficPolicyClient)(nil).Create), varargs...)
}

// UpdateStatus mocks base method.
func (m *MockTrafficPolicyClient) UpdateStatus(ctx context.Context, trafficPolicy *v1alpha1.TrafficPolicy, options ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, trafficPolicy}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockTrafficPolicyClientMockRecorder) UpdateStatus(ctx, trafficPolicy interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, trafficPolicy}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockTrafficPolicyClient)(nil).UpdateStatus), varargs...)
}

// List mocks base method.
func (m *MockTrafficPolicyClient) List(ctx context.Context, options ...client.ListOption) (*v1alpha1.TrafficPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha1.TrafficPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTrafficPolicyClientMockRecorder) List(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTrafficPolicyClient)(nil).List), varargs...)
}

// MockAccessControlPolicyClient is a mock of AccessControlPolicyClient interface.
type MockAccessControlPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccessControlPolicyClientMockRecorder
}

// MockAccessControlPolicyClientMockRecorder is the mock recorder for MockAccessControlPolicyClient.
type MockAccessControlPolicyClientMockRecorder struct {
	mock *MockAccessControlPolicyClient
}

// NewMockAccessControlPolicyClient creates a new mock instance.
func NewMockAccessControlPolicyClient(ctrl *gomock.Controller) *MockAccessControlPolicyClient {
	mock := &MockAccessControlPolicyClient{ctrl: ctrl}
	mock.recorder = &MockAccessControlPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessControlPolicyClient) EXPECT() *MockAccessControlPolicyClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccessControlPolicyClient) Create(ctx context.Context, acp *v1alpha1.AccessControlPolicy, options ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, acp}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccessControlPolicyClientMockRecorder) Create(ctx, acp interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, acp}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).Create), varargs...)
}

// List mocks base method.
func (m *MockAccessControlPolicyClient) List(ctx context.Context, opts ...client.ListOption) (*v1alpha1.AccessControlPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha1.AccessControlPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAccessControlPolicyClientMockRecorder) List(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).List), varargs...)
}

// UpdateStatus mocks base method.
func (m *MockAccessControlPolicyClient) UpdateStatus(ctx context.Context, acp *v1alpha1.AccessControlPolicy, options ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, acp}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockAccessControlPolicyClientMockRecorder) UpdateStatus(ctx, acp interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, acp}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).UpdateStatus), varargs...)
}
