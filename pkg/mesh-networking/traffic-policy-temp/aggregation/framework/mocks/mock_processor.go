// Code generated by MockGen. DO NOT EDIT.
// Source: ./processor.go

// Package mock_aggregation_framework is a generated GoMock package.
package mock_aggregation_framework

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha1"
	aggregation_framework "github.com/solo-io/service-mesh-hub/pkg/mesh-networking/traffic-policy-temp/aggregation/framework"
)

// MockAggregationProcessor is a mock of AggregationProcessor interface.
type MockAggregationProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockAggregationProcessorMockRecorder
}

// MockAggregationProcessorMockRecorder is the mock recorder for MockAggregationProcessor.
type MockAggregationProcessorMockRecorder struct {
	mock *MockAggregationProcessor
}

// NewMockAggregationProcessor creates a new mock instance.
func NewMockAggregationProcessor(ctrl *gomock.Controller) *MockAggregationProcessor {
	mock := &MockAggregationProcessor{ctrl: ctrl}
	mock.recorder = &MockAggregationProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregationProcessor) EXPECT() *MockAggregationProcessorMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockAggregationProcessor) Process(ctx context.Context, allTrafficPolicies []*v1alpha1.TrafficPolicy) (*aggregation_framework.ProcessedObjects, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, allTrafficPolicies)
	ret0, _ := ret[0].(*aggregation_framework.ProcessedObjects)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockAggregationProcessorMockRecorder) Process(ctx, allTrafficPolicies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockAggregationProcessor)(nil).Process), ctx, allTrafficPolicies)
}
