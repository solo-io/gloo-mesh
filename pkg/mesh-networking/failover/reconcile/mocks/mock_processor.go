// Code generated by MockGen. DO NOT EDIT.
// Source: ./processor.go

// Package mock_reconcile is a generated GoMock package.
package mock_reconcile

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	failover "github.com/solo-io/service-mesh-hub/pkg/mesh-networking/failover"
)

// MockFailoverServiceProcessor is a mock of FailoverServiceProcessor interface.
type MockFailoverServiceProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverServiceProcessorMockRecorder
}

// MockFailoverServiceProcessorMockRecorder is the mock recorder for MockFailoverServiceProcessor.
type MockFailoverServiceProcessorMockRecorder struct {
	mock *MockFailoverServiceProcessor
}

// NewMockFailoverServiceProcessor creates a new mock instance.
func NewMockFailoverServiceProcessor(ctrl *gomock.Controller) *MockFailoverServiceProcessor {
	mock := &MockFailoverServiceProcessor{ctrl: ctrl}
	mock.recorder = &MockFailoverServiceProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverServiceProcessor) EXPECT() *MockFailoverServiceProcessorMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockFailoverServiceProcessor) Process(ctx context.Context, inputSnapshot failover.InputSnapshot) failover.OutputSnapshot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, inputSnapshot)
	ret0, _ := ret[0].(failover.OutputSnapshot)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockFailoverServiceProcessorMockRecorder) Process(ctx, inputSnapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockFailoverServiceProcessor)(nil).Process), ctx, inputSnapshot)
}
