// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_failover_service_translation is a generated GoMock package.
package mock_failover_service_translation

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha1"
	v1alpha1sets "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha1/sets"
	v1alpha10 "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha1"
	types "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha1/types"
	failover "github.com/solo-io/service-mesh-hub/pkg/mesh-networking/failover"
)

// MockFailoverServiceTranslator is a mock of FailoverServiceTranslator interface.
type MockFailoverServiceTranslator struct {
	ctrl     *gomock.Controller
	recorder *MockFailoverServiceTranslatorMockRecorder
}

// MockFailoverServiceTranslatorMockRecorder is the mock recorder for MockFailoverServiceTranslator.
type MockFailoverServiceTranslatorMockRecorder struct {
	mock *MockFailoverServiceTranslator
}

// NewMockFailoverServiceTranslator creates a new mock instance.
func NewMockFailoverServiceTranslator(ctrl *gomock.Controller) *MockFailoverServiceTranslator {
	mock := &MockFailoverServiceTranslator{ctrl: ctrl}
	mock.recorder = &MockFailoverServiceTranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailoverServiceTranslator) EXPECT() *MockFailoverServiceTranslatorMockRecorder {
	return m.recorder
}

// Translate mocks base method.
func (m *MockFailoverServiceTranslator) Translate(ctx context.Context, failoverService *v1alpha10.FailoverService, prioritizedMeshServices []*v1alpha1.MeshService, allMeshes v1alpha1sets.MeshSet) (failover.MeshOutputs, *types.FailoverServiceStatus_TranslatorError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", ctx, failoverService, prioritizedMeshServices, allMeshes)
	ret0, _ := ret[0].(failover.MeshOutputs)
	ret1, _ := ret[1].(*types.FailoverServiceStatus_TranslatorError)
	return ret0, ret1
}

// Translate indicates an expected call of Translate.
func (mr *MockFailoverServiceTranslatorMockRecorder) Translate(ctx, failoverService, prioritizedMeshServices, allMeshes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockFailoverServiceTranslator)(nil).Translate), ctx, failoverService, prioritizedMeshServices, allMeshes)
}
