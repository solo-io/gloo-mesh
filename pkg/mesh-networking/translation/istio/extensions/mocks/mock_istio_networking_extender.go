// Code generated by MockGen. DO NOT EDIT.
// Source: ./istio_networking_extender.go

// Package mock_extensions is a generated GoMock package.
package mock_extensions

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha2"
	istio "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/output/istio"
)

// MockIstioExtender is a mock of IstioExtender interface
type MockIstioExtender struct {
	ctrl     *gomock.Controller
	recorder *MockIstioExtenderMockRecorder
}

// MockIstioExtenderMockRecorder is the mock recorder for MockIstioExtender
type MockIstioExtenderMockRecorder struct {
	mock *MockIstioExtender
}

// NewMockIstioExtender creates a new mock instance
func NewMockIstioExtender(ctrl *gomock.Controller) *MockIstioExtender {
	mock := &MockIstioExtender{ctrl: ctrl}
	mock.recorder = &MockIstioExtenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIstioExtender) EXPECT() *MockIstioExtenderMockRecorder {
	return m.recorder
}

// PatchTrafficTargetOutputs mocks base method
func (m *MockIstioExtender) PatchTrafficTargetOutputs(ctx context.Context, trafficTarget *v1alpha2.TrafficTarget, trafficTargetOutputs istio.Builder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchTrafficTargetOutputs", ctx, trafficTarget, trafficTargetOutputs)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficTargetOutputs indicates an expected call of PatchTrafficTargetOutputs
func (mr *MockIstioExtenderMockRecorder) PatchTrafficTargetOutputs(ctx, trafficTarget, trafficTargetOutputs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficTargetOutputs", reflect.TypeOf((*MockIstioExtender)(nil).PatchTrafficTargetOutputs), ctx, trafficTarget, trafficTargetOutputs)
}

// PatchWorkloadOutputs mocks base method
func (m *MockIstioExtender) PatchWorkloadOutputs(ctx context.Context, workload *v1alpha2.Workload, workloadOutputs istio.Builder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchWorkloadOutputs", ctx, workload, workloadOutputs)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWorkloadOutputs indicates an expected call of PatchWorkloadOutputs
func (mr *MockIstioExtenderMockRecorder) PatchWorkloadOutputs(ctx, workload, workloadOutputs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWorkloadOutputs", reflect.TypeOf((*MockIstioExtender)(nil).PatchWorkloadOutputs), ctx, workload, workloadOutputs)
}

// PatchMeshOutputs mocks base method
func (m *MockIstioExtender) PatchMeshOutputs(ctx context.Context, mesh *v1alpha2.Mesh, meshOutputs istio.Builder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchMeshOutputs", ctx, mesh, meshOutputs)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshOutputs indicates an expected call of PatchMeshOutputs
func (mr *MockIstioExtenderMockRecorder) PatchMeshOutputs(ctx, mesh, meshOutputs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshOutputs", reflect.TypeOf((*MockIstioExtender)(nil).PatchMeshOutputs), ctx, mesh, meshOutputs)
}
