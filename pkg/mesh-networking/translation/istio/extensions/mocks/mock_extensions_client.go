// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/extensions/v1alpha1 (interfaces: NetworkingExtensionsClient)

// Package mock_extensions is a generated GoMock package.
package mock_extensions

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/extensions/v1alpha1"
	grpc "google.golang.org/grpc"
)

// MockNetworkingExtensionsClient is a mock of NetworkingExtensionsClient interface
type MockNetworkingExtensionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingExtensionsClientMockRecorder
}

// MockNetworkingExtensionsClientMockRecorder is the mock recorder for MockNetworkingExtensionsClient
type MockNetworkingExtensionsClientMockRecorder struct {
	mock *MockNetworkingExtensionsClient
}

// NewMockNetworkingExtensionsClient creates a new mock instance
func NewMockNetworkingExtensionsClient(ctrl *gomock.Controller) *MockNetworkingExtensionsClient {
	mock := &MockNetworkingExtensionsClient{ctrl: ctrl}
	mock.recorder = &MockNetworkingExtensionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkingExtensionsClient) EXPECT() *MockNetworkingExtensionsClientMockRecorder {
	return m.recorder
}

// GetMeshPatches mocks base method
func (m *MockNetworkingExtensionsClient) GetMeshPatches(arg0 context.Context, arg1 *v1alpha1.MeshPatchRequest, arg2 ...grpc.CallOption) (*v1alpha1.PatchList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMeshPatches", varargs...)
	ret0, _ := ret[0].(*v1alpha1.PatchList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshPatches indicates an expected call of GetMeshPatches
func (mr *MockNetworkingExtensionsClientMockRecorder) GetMeshPatches(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshPatches", reflect.TypeOf((*MockNetworkingExtensionsClient)(nil).GetMeshPatches), varargs...)
}

// GetTrafficTargetPatches mocks base method
func (m *MockNetworkingExtensionsClient) GetTrafficTargetPatches(arg0 context.Context, arg1 *v1alpha1.TrafficTargetPatchRequest, arg2 ...grpc.CallOption) (*v1alpha1.PatchList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrafficTargetPatches", varargs...)
	ret0, _ := ret[0].(*v1alpha1.PatchList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrafficTargetPatches indicates an expected call of GetTrafficTargetPatches
func (mr *MockNetworkingExtensionsClientMockRecorder) GetTrafficTargetPatches(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficTargetPatches", reflect.TypeOf((*MockNetworkingExtensionsClient)(nil).GetTrafficTargetPatches), varargs...)
}

// GetWorkloadPatches mocks base method
func (m *MockNetworkingExtensionsClient) GetWorkloadPatches(arg0 context.Context, arg1 *v1alpha1.WorkloadPatchRequest, arg2 ...grpc.CallOption) (*v1alpha1.PatchList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkloadPatches", varargs...)
	ret0, _ := ret[0].(*v1alpha1.PatchList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkloadPatches indicates an expected call of GetWorkloadPatches
func (mr *MockNetworkingExtensionsClientMockRecorder) GetWorkloadPatches(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkloadPatches", reflect.TypeOf((*MockNetworkingExtensionsClient)(nil).GetWorkloadPatches), varargs...)
}

// WatchPushNotifications mocks base method
func (m *MockNetworkingExtensionsClient) WatchPushNotifications(arg0 context.Context, arg1 *v1alpha1.WatchPushNotificationsRequest, arg2 ...grpc.CallOption) (v1alpha1.NetworkingExtensions_WatchPushNotificationsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchPushNotifications", varargs...)
	ret0, _ := ret[0].(v1alpha1.NetworkingExtensions_WatchPushNotificationsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchPushNotifications indicates an expected call of WatchPushNotifications
func (mr *MockNetworkingExtensionsClientMockRecorder) WatchPushNotifications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchPushNotifications", reflect.TypeOf((*MockNetworkingExtensionsClient)(nil).WatchPushNotifications), varargs...)
}
