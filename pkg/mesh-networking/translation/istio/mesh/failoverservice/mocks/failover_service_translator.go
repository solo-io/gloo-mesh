// Code generated by MockGen. DO NOT EDIT.
// Source: ./failover_service_translator.go

// Package mock_failoverservice is a generated GoMock package.
package mock_failoverservice

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha2"
	input "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/input"
	reporting "github.com/solo-io/service-mesh-hub/pkg/mesh-networking/reporting"
	failoverservice "github.com/solo-io/service-mesh-hub/pkg/mesh-networking/translation/istio/mesh/failoverservice"
)

// MockTranslator is a mock of Translator interface.
type MockTranslator struct {
	ctrl     *gomock.Controller
	recorder *MockTranslatorMockRecorder
}

// MockTranslatorMockRecorder is the mock recorder for MockTranslator.
type MockTranslatorMockRecorder struct {
	mock *MockTranslator
}

// NewMockTranslator creates a new mock instance.
func NewMockTranslator(ctrl *gomock.Controller) *MockTranslator {
	mock := &MockTranslator{ctrl: ctrl}
	mock.recorder = &MockTranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranslator) EXPECT() *MockTranslatorMockRecorder {
	return m.recorder
}

// Translate mocks base method.
func (m *MockTranslator) Translate(in input.Snapshot, mesh *v1alpha2.Mesh, failoverService *v1alpha2.MeshStatus_AppliedFailoverService, reporter reporting.Reporter) failoverservice.Outputs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", in, mesh, failoverService, reporter)
	ret0, _ := ret[0].(failoverservice.Outputs)
	return ret0
}

// Translate indicates an expected call of Translate.
func (mr *MockTranslatorMockRecorder) Translate(in, mesh, failoverService, reporter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockTranslator)(nil).Translate), in, mesh, failoverService, reporter)
}
