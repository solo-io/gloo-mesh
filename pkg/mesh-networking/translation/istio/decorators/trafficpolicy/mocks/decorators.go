// Code generated by MockGen. DO NOT EDIT.
// Source: ./decorators.go

// Package mock_trafficpolicy is a generated GoMock package.
package mock_trafficpolicy

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/v1alpha2"
	decorators "github.com/solo-io/service-mesh-hub/pkg/mesh-networking/translation/decorators"
	v1alpha3 "istio.io/api/networking/v1alpha3"
)

// MockDestinationRuleDecorator is a mock of DestinationRuleDecorator interface
type MockDestinationRuleDecorator struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationRuleDecoratorMockRecorder
}

// MockDestinationRuleDecoratorMockRecorder is the mock recorder for MockDestinationRuleDecorator
type MockDestinationRuleDecoratorMockRecorder struct {
	mock *MockDestinationRuleDecorator
}

// NewMockDestinationRuleDecorator creates a new mock instance
func NewMockDestinationRuleDecorator(ctrl *gomock.Controller) *MockDestinationRuleDecorator {
	mock := &MockDestinationRuleDecorator{ctrl: ctrl}
	mock.recorder = &MockDestinationRuleDecoratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDestinationRuleDecorator) EXPECT() *MockDestinationRuleDecoratorMockRecorder {
	return m.recorder
}

// DecoratorName mocks base method
func (m *MockDestinationRuleDecorator) DecoratorName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecoratorName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DecoratorName indicates an expected call of DecoratorName
func (mr *MockDestinationRuleDecoratorMockRecorder) DecoratorName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecoratorName", reflect.TypeOf((*MockDestinationRuleDecorator)(nil).DecoratorName))
}

// ApplyToDestinationRule mocks base method
func (m *MockDestinationRuleDecorator) ApplyToDestinationRule(appliedPolicy *v1alpha2.MeshServiceStatus_AppliedTrafficPolicy, service *v1alpha2.MeshService, output *v1alpha3.DestinationRule, registerField decorators.RegisterField) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyToDestinationRule", appliedPolicy, service, output, registerField)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyToDestinationRule indicates an expected call of ApplyToDestinationRule
func (mr *MockDestinationRuleDecoratorMockRecorder) ApplyToDestinationRule(appliedPolicy, service, output, registerField interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyToDestinationRule", reflect.TypeOf((*MockDestinationRuleDecorator)(nil).ApplyToDestinationRule), appliedPolicy, service, output, registerField)
}

// MockAggregatingDestinationRuleDecorator is a mock of AggregatingDestinationRuleDecorator interface
type MockAggregatingDestinationRuleDecorator struct {
	ctrl     *gomock.Controller
	recorder *MockAggregatingDestinationRuleDecoratorMockRecorder
}

// MockAggregatingDestinationRuleDecoratorMockRecorder is the mock recorder for MockAggregatingDestinationRuleDecorator
type MockAggregatingDestinationRuleDecoratorMockRecorder struct {
	mock *MockAggregatingDestinationRuleDecorator
}

// NewMockAggregatingDestinationRuleDecorator creates a new mock instance
func NewMockAggregatingDestinationRuleDecorator(ctrl *gomock.Controller) *MockAggregatingDestinationRuleDecorator {
	mock := &MockAggregatingDestinationRuleDecorator{ctrl: ctrl}
	mock.recorder = &MockAggregatingDestinationRuleDecoratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAggregatingDestinationRuleDecorator) EXPECT() *MockAggregatingDestinationRuleDecoratorMockRecorder {
	return m.recorder
}

// DecoratorName mocks base method
func (m *MockAggregatingDestinationRuleDecorator) DecoratorName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecoratorName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DecoratorName indicates an expected call of DecoratorName
func (mr *MockAggregatingDestinationRuleDecoratorMockRecorder) DecoratorName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecoratorName", reflect.TypeOf((*MockAggregatingDestinationRuleDecorator)(nil).DecoratorName))
}

// ApplyAllToDestinationRule mocks base method
func (m *MockAggregatingDestinationRuleDecorator) ApplyAllToDestinationRule(allAppliedPolicies []*v1alpha2.MeshServiceStatus_AppliedTrafficPolicy, output *v1alpha3.DestinationRule, registerField decorators.RegisterField) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyAllToDestinationRule", allAppliedPolicies, output, registerField)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyAllToDestinationRule indicates an expected call of ApplyAllToDestinationRule
func (mr *MockAggregatingDestinationRuleDecoratorMockRecorder) ApplyAllToDestinationRule(allAppliedPolicies, output, registerField interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyAllToDestinationRule", reflect.TypeOf((*MockAggregatingDestinationRuleDecorator)(nil).ApplyAllToDestinationRule), allAppliedPolicies, output, registerField)
}

// MockVirtualServiceDecorator is a mock of VirtualServiceDecorator interface
type MockVirtualServiceDecorator struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceDecoratorMockRecorder
}

// MockVirtualServiceDecoratorMockRecorder is the mock recorder for MockVirtualServiceDecorator
type MockVirtualServiceDecoratorMockRecorder struct {
	mock *MockVirtualServiceDecorator
}

// NewMockVirtualServiceDecorator creates a new mock instance
func NewMockVirtualServiceDecorator(ctrl *gomock.Controller) *MockVirtualServiceDecorator {
	mock := &MockVirtualServiceDecorator{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceDecoratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualServiceDecorator) EXPECT() *MockVirtualServiceDecoratorMockRecorder {
	return m.recorder
}

// DecoratorName mocks base method
func (m *MockVirtualServiceDecorator) DecoratorName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecoratorName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DecoratorName indicates an expected call of DecoratorName
func (mr *MockVirtualServiceDecoratorMockRecorder) DecoratorName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecoratorName", reflect.TypeOf((*MockVirtualServiceDecorator)(nil).DecoratorName))
}

// ApplyToVirtualService mocks base method
func (m *MockVirtualServiceDecorator) ApplyToVirtualService(appliedPolicy *v1alpha2.MeshServiceStatus_AppliedTrafficPolicy, service *v1alpha2.MeshService, output *v1alpha3.HTTPRoute, registerField decorators.RegisterField) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyToVirtualService", appliedPolicy, service, output, registerField)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyToVirtualService indicates an expected call of ApplyToVirtualService
func (mr *MockVirtualServiceDecoratorMockRecorder) ApplyToVirtualService(appliedPolicy, service, output, registerField interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyToVirtualService", reflect.TypeOf((*MockVirtualServiceDecorator)(nil).ApplyToVirtualService), appliedPolicy, service, output, registerField)
}
