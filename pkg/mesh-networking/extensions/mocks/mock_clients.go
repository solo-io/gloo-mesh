// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_extensions is a generated GoMock package.
package mock_extensions

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/gloo-mesh/pkg/api/settings.mesh.gloo.solo.io/v1"
	extensions "github.com/solo-io/gloo-mesh/pkg/mesh-networking/extensions"
)

// MockClientset is a mock of Clientset interface
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// ConfigureServers mocks base method
func (m *MockClientset) ConfigureServers(extensionsServerOptions []*v1.GrpcServer, pushFn extensions.PushFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureServers", extensionsServerOptions, pushFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureServers indicates an expected call of ConfigureServers
func (mr *MockClientsetMockRecorder) ConfigureServers(extensionsServerOptions, pushFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureServers", reflect.TypeOf((*MockClientset)(nil).ConfigureServers), extensionsServerOptions, pushFn)
}

// GetClients mocks base method
func (m *MockClientset) GetClients() extensions.Clients {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClients")
	ret0, _ := ret[0].(extensions.Clients)
	return ret0
}

// GetClients indicates an expected call of GetClients
func (mr *MockClientsetMockRecorder) GetClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockClientset)(nil).GetClients))
}
