// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/controller-runtime/pkg/predicate (interfaces: Predicate)

// Package mock_controller_runtime is a generated GoMock package.
package mock_controller_runtime

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	event "sigs.k8s.io/controller-runtime/pkg/event"
)

// MockPredicate is a mock of Predicate interface
type MockPredicate struct {
	ctrl     *gomock.Controller
	recorder *MockPredicateMockRecorder
}

// MockPredicateMockRecorder is the mock recorder for MockPredicate
type MockPredicateMockRecorder struct {
	mock *MockPredicate
}

// NewMockPredicate creates a new mock instance
func NewMockPredicate(ctrl *gomock.Controller) *MockPredicate {
	mock := &MockPredicate{ctrl: ctrl}
	mock.recorder = &MockPredicateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPredicate) EXPECT() *MockPredicateMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockPredicate) Create(arg0 event.CreateEvent) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockPredicateMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPredicate)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockPredicate) Delete(arg0 event.DeleteEvent) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockPredicateMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPredicate)(nil).Delete), arg0)
}

// Generic mocks base method
func (m *MockPredicate) Generic(arg0 event.GenericEvent) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockPredicateMockRecorder) Generic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockPredicate)(nil).Generic), arg0)
}

// Update mocks base method
func (m *MockPredicate) Update(arg0 event.UpdateEvent) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockPredicateMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPredicate)(nil).Update), arg0)
}
