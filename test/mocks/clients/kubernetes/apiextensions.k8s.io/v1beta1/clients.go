// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/service-mesh-hub/pkg/api/kubernetes/apiextensions.k8s.io/v1beta1 (interfaces: CustomResourceDefinitionClient)

// Package mock_k8s_extension_clients is a generated GoMock package.
package mock_k8s_extension_clients

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/solo-io/service-mesh-hub/pkg/api/kubernetes/apiextensions.k8s.io/v1beta1"
	v1beta10 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
	types "k8s.io/apimachinery/pkg/types"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockCustomResourceDefinitionClient is a mock of CustomResourceDefinitionClient interface.
type MockCustomResourceDefinitionClient struct {
	ctrl     *gomock.Controller
	recorder *MockCustomResourceDefinitionClientMockRecorder
}

// MockCustomResourceDefinitionClientMockRecorder is the mock recorder for MockCustomResourceDefinitionClient.
type MockCustomResourceDefinitionClientMockRecorder struct {
	mock *MockCustomResourceDefinitionClient
}

// NewMockCustomResourceDefinitionClient creates a new mock instance.
func NewMockCustomResourceDefinitionClient(ctrl *gomock.Controller) *MockCustomResourceDefinitionClient {
	mock := &MockCustomResourceDefinitionClient{ctrl: ctrl}
	mock.recorder = &MockCustomResourceDefinitionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomResourceDefinitionClient) EXPECT() *MockCustomResourceDefinitionClientMockRecorder {
	return m.recorder
}

// CreateCustomResourceDefinition mocks base method.
func (m *MockCustomResourceDefinitionClient) CreateCustomResourceDefinition(arg0 context.Context, arg1 *v1beta10.CustomResourceDefinition, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCustomResourceDefinition", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomResourceDefinition indicates an expected call of CreateCustomResourceDefinition.
func (mr *MockCustomResourceDefinitionClientMockRecorder) CreateCustomResourceDefinition(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomResourceDefinition", reflect.TypeOf((*MockCustomResourceDefinitionClient)(nil).CreateCustomResourceDefinition), varargs...)
}

// DeleteAllOfCustomResourceDefinition mocks base method.
func (m *MockCustomResourceDefinitionClient) DeleteAllOfCustomResourceDefinition(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfCustomResourceDefinition", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfCustomResourceDefinition indicates an expected call of DeleteAllOfCustomResourceDefinition.
func (mr *MockCustomResourceDefinitionClientMockRecorder) DeleteAllOfCustomResourceDefinition(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfCustomResourceDefinition", reflect.TypeOf((*MockCustomResourceDefinitionClient)(nil).DeleteAllOfCustomResourceDefinition), varargs...)
}

// DeleteCustomResourceDefinition mocks base method.
func (m *MockCustomResourceDefinitionClient) DeleteCustomResourceDefinition(arg0 context.Context, arg1 types.NamespacedName, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomResourceDefinition", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomResourceDefinition indicates an expected call of DeleteCustomResourceDefinition.
func (mr *MockCustomResourceDefinitionClientMockRecorder) DeleteCustomResourceDefinition(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomResourceDefinition", reflect.TypeOf((*MockCustomResourceDefinitionClient)(nil).DeleteCustomResourceDefinition), varargs...)
}

// GetCustomResourceDefinition mocks base method.
func (m *MockCustomResourceDefinitionClient) GetCustomResourceDefinition(arg0 context.Context, arg1 types.NamespacedName) (*v1beta10.CustomResourceDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomResourceDefinition", arg0, arg1)
	ret0, _ := ret[0].(*v1beta10.CustomResourceDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomResourceDefinition indicates an expected call of GetCustomResourceDefinition.
func (mr *MockCustomResourceDefinitionClientMockRecorder) GetCustomResourceDefinition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomResourceDefinition", reflect.TypeOf((*MockCustomResourceDefinitionClient)(nil).GetCustomResourceDefinition), arg0, arg1)
}

// ListCustomResourceDefinition mocks base method.
func (m *MockCustomResourceDefinitionClient) ListCustomResourceDefinition(arg0 context.Context, arg1 ...client.ListOption) (*v1beta10.CustomResourceDefinitionList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomResourceDefinition", varargs...)
	ret0, _ := ret[0].(*v1beta10.CustomResourceDefinitionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomResourceDefinition indicates an expected call of ListCustomResourceDefinition.
func (mr *MockCustomResourceDefinitionClientMockRecorder) ListCustomResourceDefinition(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomResourceDefinition", reflect.TypeOf((*MockCustomResourceDefinitionClient)(nil).ListCustomResourceDefinition), varargs...)
}

// PatchCustomResourceDefinition mocks base method.
func (m *MockCustomResourceDefinitionClient) PatchCustomResourceDefinition(arg0 context.Context, arg1 *v1beta10.CustomResourceDefinition, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCustomResourceDefinition", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCustomResourceDefinition indicates an expected call of PatchCustomResourceDefinition.
func (mr *MockCustomResourceDefinitionClientMockRecorder) PatchCustomResourceDefinition(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCustomResourceDefinition", reflect.TypeOf((*MockCustomResourceDefinitionClient)(nil).PatchCustomResourceDefinition), varargs...)
}

// PatchCustomResourceDefinitionStatus mocks base method.
func (m *MockCustomResourceDefinitionClient) PatchCustomResourceDefinitionStatus(arg0 context.Context, arg1 *v1beta10.CustomResourceDefinition, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCustomResourceDefinitionStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCustomResourceDefinitionStatus indicates an expected call of PatchCustomResourceDefinitionStatus.
func (mr *MockCustomResourceDefinitionClientMockRecorder) PatchCustomResourceDefinitionStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCustomResourceDefinitionStatus", reflect.TypeOf((*MockCustomResourceDefinitionClient)(nil).PatchCustomResourceDefinitionStatus), varargs...)
}

// UpdateCustomResourceDefinition mocks base method.
func (m *MockCustomResourceDefinitionClient) UpdateCustomResourceDefinition(arg0 context.Context, arg1 *v1beta10.CustomResourceDefinition, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCustomResourceDefinition", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomResourceDefinition indicates an expected call of UpdateCustomResourceDefinition.
func (mr *MockCustomResourceDefinitionClientMockRecorder) UpdateCustomResourceDefinition(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomResourceDefinition", reflect.TypeOf((*MockCustomResourceDefinitionClient)(nil).UpdateCustomResourceDefinition), varargs...)
}

// UpdateCustomResourceDefinitionStatus mocks base method.
func (m *MockCustomResourceDefinitionClient) UpdateCustomResourceDefinitionStatus(arg0 context.Context, arg1 *v1beta10.CustomResourceDefinition, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCustomResourceDefinitionStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomResourceDefinitionStatus indicates an expected call of UpdateCustomResourceDefinitionStatus.
func (mr *MockCustomResourceDefinitionClientMockRecorder) UpdateCustomResourceDefinitionStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomResourceDefinitionStatus", reflect.TypeOf((*MockCustomResourceDefinitionClient)(nil).UpdateCustomResourceDefinitionStatus), varargs...)
}

// UpsertCustomResourceDefinition mocks base method.
func (m *MockCustomResourceDefinitionClient) UpsertCustomResourceDefinition(arg0 context.Context, arg1 *v1beta10.CustomResourceDefinition, arg2 ...v1beta1.CustomResourceDefinitionTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertCustomResourceDefinition", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCustomResourceDefinition indicates an expected call of UpsertCustomResourceDefinition.
func (mr *MockCustomResourceDefinitionClientMockRecorder) UpsertCustomResourceDefinition(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCustomResourceDefinition", reflect.TypeOf((*MockCustomResourceDefinitionClient)(nil).UpsertCustomResourceDefinition), varargs...)
}
