// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/service-mesh-hub/pkg/api/istio/security/v1beta1 (interfaces: AuthorizationPolicyClient)

// Package mock_istio_security_clients is a generated GoMock package.
package mock_istio_security_clients

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "istio.io/client-go/pkg/apis/security/v1beta1"
	types "k8s.io/apimachinery/pkg/types"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockAuthorizationPolicyClient is a mock of AuthorizationPolicyClient interface.
type MockAuthorizationPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationPolicyClientMockRecorder
}

// MockAuthorizationPolicyClientMockRecorder is the mock recorder for MockAuthorizationPolicyClient.
type MockAuthorizationPolicyClientMockRecorder struct {
	mock *MockAuthorizationPolicyClient
}

// NewMockAuthorizationPolicyClient creates a new mock instance.
func NewMockAuthorizationPolicyClient(ctrl *gomock.Controller) *MockAuthorizationPolicyClient {
	mock := &MockAuthorizationPolicyClient{ctrl: ctrl}
	mock.recorder = &MockAuthorizationPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationPolicyClient) EXPECT() *MockAuthorizationPolicyClientMockRecorder {
	return m.recorder
}

// CreateAuthorizationPolicy mocks base method.
func (m *MockAuthorizationPolicyClient) CreateAuthorizationPolicy(arg0 context.Context, arg1 *v1beta1.AuthorizationPolicy, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAuthorizationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthorizationPolicy indicates an expected call of CreateAuthorizationPolicy.
func (mr *MockAuthorizationPolicyClientMockRecorder) CreateAuthorizationPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorizationPolicy", reflect.TypeOf((*MockAuthorizationPolicyClient)(nil).CreateAuthorizationPolicy), varargs...)
}

// DeleteAllOfAuthorizationPolicy mocks base method.
func (m *MockAuthorizationPolicyClient) DeleteAllOfAuthorizationPolicy(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfAuthorizationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfAuthorizationPolicy indicates an expected call of DeleteAllOfAuthorizationPolicy.
func (mr *MockAuthorizationPolicyClientMockRecorder) DeleteAllOfAuthorizationPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfAuthorizationPolicy", reflect.TypeOf((*MockAuthorizationPolicyClient)(nil).DeleteAllOfAuthorizationPolicy), varargs...)
}

// DeleteAuthorizationPolicy mocks base method.
func (m *MockAuthorizationPolicyClient) DeleteAuthorizationPolicy(arg0 context.Context, arg1 types.NamespacedName, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAuthorizationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthorizationPolicy indicates an expected call of DeleteAuthorizationPolicy.
func (mr *MockAuthorizationPolicyClientMockRecorder) DeleteAuthorizationPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizationPolicy", reflect.TypeOf((*MockAuthorizationPolicyClient)(nil).DeleteAuthorizationPolicy), varargs...)
}

// GetAuthorizationPolicy mocks base method.
func (m *MockAuthorizationPolicyClient) GetAuthorizationPolicy(arg0 context.Context, arg1 types.NamespacedName) (*v1beta1.AuthorizationPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationPolicy", arg0, arg1)
	ret0, _ := ret[0].(*v1beta1.AuthorizationPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationPolicy indicates an expected call of GetAuthorizationPolicy.
func (mr *MockAuthorizationPolicyClientMockRecorder) GetAuthorizationPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationPolicy", reflect.TypeOf((*MockAuthorizationPolicyClient)(nil).GetAuthorizationPolicy), arg0, arg1)
}

// ListAuthorizationPolicy mocks base method.
func (m *MockAuthorizationPolicyClient) ListAuthorizationPolicy(arg0 context.Context, arg1 ...client.ListOption) (*v1beta1.AuthorizationPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAuthorizationPolicy", varargs...)
	ret0, _ := ret[0].(*v1beta1.AuthorizationPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthorizationPolicy indicates an expected call of ListAuthorizationPolicy.
func (mr *MockAuthorizationPolicyClientMockRecorder) ListAuthorizationPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthorizationPolicy", reflect.TypeOf((*MockAuthorizationPolicyClient)(nil).ListAuthorizationPolicy), varargs...)
}

// PatchAuthorizationPolicy mocks base method.
func (m *MockAuthorizationPolicyClient) PatchAuthorizationPolicy(arg0 context.Context, arg1 *v1beta1.AuthorizationPolicy, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAuthorizationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchAuthorizationPolicy indicates an expected call of PatchAuthorizationPolicy.
func (mr *MockAuthorizationPolicyClientMockRecorder) PatchAuthorizationPolicy(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAuthorizationPolicy", reflect.TypeOf((*MockAuthorizationPolicyClient)(nil).PatchAuthorizationPolicy), varargs...)
}

// PatchAuthorizationPolicyStatus mocks base method.
func (m *MockAuthorizationPolicyClient) PatchAuthorizationPolicyStatus(arg0 context.Context, arg1 *v1beta1.AuthorizationPolicy, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAuthorizationPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchAuthorizationPolicyStatus indicates an expected call of PatchAuthorizationPolicyStatus.
func (mr *MockAuthorizationPolicyClientMockRecorder) PatchAuthorizationPolicyStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAuthorizationPolicyStatus", reflect.TypeOf((*MockAuthorizationPolicyClient)(nil).PatchAuthorizationPolicyStatus), varargs...)
}

// UpdateAuthorizationPolicy mocks base method.
func (m *MockAuthorizationPolicyClient) UpdateAuthorizationPolicy(arg0 context.Context, arg1 *v1beta1.AuthorizationPolicy, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAuthorizationPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthorizationPolicy indicates an expected call of UpdateAuthorizationPolicy.
func (mr *MockAuthorizationPolicyClientMockRecorder) UpdateAuthorizationPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorizationPolicy", reflect.TypeOf((*MockAuthorizationPolicyClient)(nil).UpdateAuthorizationPolicy), varargs...)
}

// UpdateAuthorizationPolicyStatus mocks base method.
func (m *MockAuthorizationPolicyClient) UpdateAuthorizationPolicyStatus(arg0 context.Context, arg1 *v1beta1.AuthorizationPolicy, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAuthorizationPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthorizationPolicyStatus indicates an expected call of UpdateAuthorizationPolicyStatus.
func (mr *MockAuthorizationPolicyClientMockRecorder) UpdateAuthorizationPolicyStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorizationPolicyStatus", reflect.TypeOf((*MockAuthorizationPolicyClient)(nil).UpdateAuthorizationPolicyStatus), varargs...)
}

// UpsertAuthorizationPolicySpec mocks base method.
func (m *MockAuthorizationPolicyClient) UpsertAuthorizationPolicySpec(arg0 context.Context, arg1 *v1beta1.AuthorizationPolicy, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAuthorizationPolicySpec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAuthorizationPolicySpec indicates an expected call of UpsertAuthorizationPolicySpec.
func (mr *MockAuthorizationPolicyClientMockRecorder) UpsertAuthorizationPolicySpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAuthorizationPolicySpec", reflect.TypeOf((*MockAuthorizationPolicyClient)(nil).UpsertAuthorizationPolicySpec), varargs...)
}
