// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/service-mesh-hub/pkg/api/istio/networking/v1alpha3 (interfaces: DestinationRuleClient,EnvoyFilterClient,GatewayClient,ServiceEntryClient,VirtualServiceClient)

// Package mock_istio_networking_clients is a generated GoMock package.
package mock_istio_networking_clients

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha3 "istio.io/client-go/pkg/apis/networking/v1alpha3"
	types "k8s.io/apimachinery/pkg/types"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockDestinationRuleClient is a mock of DestinationRuleClient interface.
type MockDestinationRuleClient struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationRuleClientMockRecorder
}

// MockDestinationRuleClientMockRecorder is the mock recorder for MockDestinationRuleClient.
type MockDestinationRuleClientMockRecorder struct {
	mock *MockDestinationRuleClient
}

// NewMockDestinationRuleClient creates a new mock instance.
func NewMockDestinationRuleClient(ctrl *gomock.Controller) *MockDestinationRuleClient {
	mock := &MockDestinationRuleClient{ctrl: ctrl}
	mock.recorder = &MockDestinationRuleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDestinationRuleClient) EXPECT() *MockDestinationRuleClientMockRecorder {
	return m.recorder
}

// CreateDestinationRule mocks base method.
func (m *MockDestinationRuleClient) CreateDestinationRule(arg0 context.Context, arg1 *v1alpha3.DestinationRule, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDestinationRule", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDestinationRule indicates an expected call of CreateDestinationRule.
func (mr *MockDestinationRuleClientMockRecorder) CreateDestinationRule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDestinationRule", reflect.TypeOf((*MockDestinationRuleClient)(nil).CreateDestinationRule), varargs...)
}

// DeleteAllOfDestinationRule mocks base method.
func (m *MockDestinationRuleClient) DeleteAllOfDestinationRule(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfDestinationRule", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfDestinationRule indicates an expected call of DeleteAllOfDestinationRule.
func (mr *MockDestinationRuleClientMockRecorder) DeleteAllOfDestinationRule(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfDestinationRule", reflect.TypeOf((*MockDestinationRuleClient)(nil).DeleteAllOfDestinationRule), varargs...)
}

// DeleteDestinationRule mocks base method.
func (m *MockDestinationRuleClient) DeleteDestinationRule(arg0 context.Context, arg1 types.NamespacedName, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDestinationRule", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDestinationRule indicates an expected call of DeleteDestinationRule.
func (mr *MockDestinationRuleClientMockRecorder) DeleteDestinationRule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDestinationRule", reflect.TypeOf((*MockDestinationRuleClient)(nil).DeleteDestinationRule), varargs...)
}

// GetDestinationRule mocks base method.
func (m *MockDestinationRuleClient) GetDestinationRule(arg0 context.Context, arg1 types.NamespacedName) (*v1alpha3.DestinationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestinationRule", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha3.DestinationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestinationRule indicates an expected call of GetDestinationRule.
func (mr *MockDestinationRuleClientMockRecorder) GetDestinationRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationRule", reflect.TypeOf((*MockDestinationRuleClient)(nil).GetDestinationRule), arg0, arg1)
}

// ListDestinationRule mocks base method.
func (m *MockDestinationRuleClient) ListDestinationRule(arg0 context.Context, arg1 ...client.ListOption) (*v1alpha3.DestinationRuleList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDestinationRule", varargs...)
	ret0, _ := ret[0].(*v1alpha3.DestinationRuleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDestinationRule indicates an expected call of ListDestinationRule.
func (mr *MockDestinationRuleClientMockRecorder) ListDestinationRule(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDestinationRule", reflect.TypeOf((*MockDestinationRuleClient)(nil).ListDestinationRule), varargs...)
}

// PatchDestinationRule mocks base method.
func (m *MockDestinationRuleClient) PatchDestinationRule(arg0 context.Context, arg1 *v1alpha3.DestinationRule, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDestinationRule", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDestinationRule indicates an expected call of PatchDestinationRule.
func (mr *MockDestinationRuleClientMockRecorder) PatchDestinationRule(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDestinationRule", reflect.TypeOf((*MockDestinationRuleClient)(nil).PatchDestinationRule), varargs...)
}

// PatchDestinationRuleStatus mocks base method.
func (m *MockDestinationRuleClient) PatchDestinationRuleStatus(arg0 context.Context, arg1 *v1alpha3.DestinationRule, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDestinationRuleStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDestinationRuleStatus indicates an expected call of PatchDestinationRuleStatus.
func (mr *MockDestinationRuleClientMockRecorder) PatchDestinationRuleStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDestinationRuleStatus", reflect.TypeOf((*MockDestinationRuleClient)(nil).PatchDestinationRuleStatus), varargs...)
}

// UpdateDestinationRule mocks base method.
func (m *MockDestinationRuleClient) UpdateDestinationRule(arg0 context.Context, arg1 *v1alpha3.DestinationRule, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDestinationRule", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDestinationRule indicates an expected call of UpdateDestinationRule.
func (mr *MockDestinationRuleClientMockRecorder) UpdateDestinationRule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDestinationRule", reflect.TypeOf((*MockDestinationRuleClient)(nil).UpdateDestinationRule), varargs...)
}

// UpdateDestinationRuleStatus mocks base method.
func (m *MockDestinationRuleClient) UpdateDestinationRuleStatus(arg0 context.Context, arg1 *v1alpha3.DestinationRule, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDestinationRuleStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDestinationRuleStatus indicates an expected call of UpdateDestinationRuleStatus.
func (mr *MockDestinationRuleClientMockRecorder) UpdateDestinationRuleStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDestinationRuleStatus", reflect.TypeOf((*MockDestinationRuleClient)(nil).UpdateDestinationRuleStatus), varargs...)
}

// UpsertDestinationRuleSpec mocks base method.
func (m *MockDestinationRuleClient) UpsertDestinationRuleSpec(arg0 context.Context, arg1 *v1alpha3.DestinationRule, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertDestinationRuleSpec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertDestinationRuleSpec indicates an expected call of UpsertDestinationRuleSpec.
func (mr *MockDestinationRuleClientMockRecorder) UpsertDestinationRuleSpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertDestinationRuleSpec", reflect.TypeOf((*MockDestinationRuleClient)(nil).UpsertDestinationRuleSpec), varargs...)
}

// MockEnvoyFilterClient is a mock of EnvoyFilterClient interface.
type MockEnvoyFilterClient struct {
	ctrl     *gomock.Controller
	recorder *MockEnvoyFilterClientMockRecorder
}

// MockEnvoyFilterClientMockRecorder is the mock recorder for MockEnvoyFilterClient.
type MockEnvoyFilterClientMockRecorder struct {
	mock *MockEnvoyFilterClient
}

// NewMockEnvoyFilterClient creates a new mock instance.
func NewMockEnvoyFilterClient(ctrl *gomock.Controller) *MockEnvoyFilterClient {
	mock := &MockEnvoyFilterClient{ctrl: ctrl}
	mock.recorder = &MockEnvoyFilterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvoyFilterClient) EXPECT() *MockEnvoyFilterClientMockRecorder {
	return m.recorder
}

// CreateEnvoyFilter mocks base method.
func (m *MockEnvoyFilterClient) CreateEnvoyFilter(arg0 context.Context, arg1 *v1alpha3.EnvoyFilter, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnvoyFilter", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEnvoyFilter indicates an expected call of CreateEnvoyFilter.
func (mr *MockEnvoyFilterClientMockRecorder) CreateEnvoyFilter(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvoyFilter", reflect.TypeOf((*MockEnvoyFilterClient)(nil).CreateEnvoyFilter), varargs...)
}

// DeleteAllOfEnvoyFilter mocks base method.
func (m *MockEnvoyFilterClient) DeleteAllOfEnvoyFilter(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfEnvoyFilter", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfEnvoyFilter indicates an expected call of DeleteAllOfEnvoyFilter.
func (mr *MockEnvoyFilterClientMockRecorder) DeleteAllOfEnvoyFilter(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfEnvoyFilter", reflect.TypeOf((*MockEnvoyFilterClient)(nil).DeleteAllOfEnvoyFilter), varargs...)
}

// DeleteEnvoyFilter mocks base method.
func (m *MockEnvoyFilterClient) DeleteEnvoyFilter(arg0 context.Context, arg1 types.NamespacedName, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvoyFilter", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvoyFilter indicates an expected call of DeleteEnvoyFilter.
func (mr *MockEnvoyFilterClientMockRecorder) DeleteEnvoyFilter(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvoyFilter", reflect.TypeOf((*MockEnvoyFilterClient)(nil).DeleteEnvoyFilter), varargs...)
}

// GetEnvoyFilter mocks base method.
func (m *MockEnvoyFilterClient) GetEnvoyFilter(arg0 context.Context, arg1 types.NamespacedName) (*v1alpha3.EnvoyFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvoyFilter", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha3.EnvoyFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvoyFilter indicates an expected call of GetEnvoyFilter.
func (mr *MockEnvoyFilterClientMockRecorder) GetEnvoyFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvoyFilter", reflect.TypeOf((*MockEnvoyFilterClient)(nil).GetEnvoyFilter), arg0, arg1)
}

// ListEnvoyFilter mocks base method.
func (m *MockEnvoyFilterClient) ListEnvoyFilter(arg0 context.Context, arg1 ...client.ListOption) (*v1alpha3.EnvoyFilterList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvoyFilter", varargs...)
	ret0, _ := ret[0].(*v1alpha3.EnvoyFilterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvoyFilter indicates an expected call of ListEnvoyFilter.
func (mr *MockEnvoyFilterClientMockRecorder) ListEnvoyFilter(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvoyFilter", reflect.TypeOf((*MockEnvoyFilterClient)(nil).ListEnvoyFilter), varargs...)
}

// PatchEnvoyFilter mocks base method.
func (m *MockEnvoyFilterClient) PatchEnvoyFilter(arg0 context.Context, arg1 *v1alpha3.EnvoyFilter, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchEnvoyFilter", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchEnvoyFilter indicates an expected call of PatchEnvoyFilter.
func (mr *MockEnvoyFilterClientMockRecorder) PatchEnvoyFilter(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchEnvoyFilter", reflect.TypeOf((*MockEnvoyFilterClient)(nil).PatchEnvoyFilter), varargs...)
}

// PatchEnvoyFilterStatus mocks base method.
func (m *MockEnvoyFilterClient) PatchEnvoyFilterStatus(arg0 context.Context, arg1 *v1alpha3.EnvoyFilter, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchEnvoyFilterStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchEnvoyFilterStatus indicates an expected call of PatchEnvoyFilterStatus.
func (mr *MockEnvoyFilterClientMockRecorder) PatchEnvoyFilterStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchEnvoyFilterStatus", reflect.TypeOf((*MockEnvoyFilterClient)(nil).PatchEnvoyFilterStatus), varargs...)
}

// UpdateEnvoyFilter mocks base method.
func (m *MockEnvoyFilterClient) UpdateEnvoyFilter(arg0 context.Context, arg1 *v1alpha3.EnvoyFilter, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnvoyFilter", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnvoyFilter indicates an expected call of UpdateEnvoyFilter.
func (mr *MockEnvoyFilterClientMockRecorder) UpdateEnvoyFilter(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvoyFilter", reflect.TypeOf((*MockEnvoyFilterClient)(nil).UpdateEnvoyFilter), varargs...)
}

// UpdateEnvoyFilterStatus mocks base method.
func (m *MockEnvoyFilterClient) UpdateEnvoyFilterStatus(arg0 context.Context, arg1 *v1alpha3.EnvoyFilter, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnvoyFilterStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnvoyFilterStatus indicates an expected call of UpdateEnvoyFilterStatus.
func (mr *MockEnvoyFilterClientMockRecorder) UpdateEnvoyFilterStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvoyFilterStatus", reflect.TypeOf((*MockEnvoyFilterClient)(nil).UpdateEnvoyFilterStatus), varargs...)
}

// UpsertEnvoyFilterSpec mocks base method.
func (m *MockEnvoyFilterClient) UpsertEnvoyFilterSpec(arg0 context.Context, arg1 *v1alpha3.EnvoyFilter, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertEnvoyFilterSpec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertEnvoyFilterSpec indicates an expected call of UpsertEnvoyFilterSpec.
func (mr *MockEnvoyFilterClientMockRecorder) UpsertEnvoyFilterSpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEnvoyFilterSpec", reflect.TypeOf((*MockEnvoyFilterClient)(nil).UpsertEnvoyFilterSpec), varargs...)
}

// MockGatewayClient is a mock of GatewayClient interface.
type MockGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayClientMockRecorder
}

// MockGatewayClientMockRecorder is the mock recorder for MockGatewayClient.
type MockGatewayClientMockRecorder struct {
	mock *MockGatewayClient
}

// NewMockGatewayClient creates a new mock instance.
func NewMockGatewayClient(ctrl *gomock.Controller) *MockGatewayClient {
	mock := &MockGatewayClient{ctrl: ctrl}
	mock.recorder = &MockGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayClient) EXPECT() *MockGatewayClientMockRecorder {
	return m.recorder
}

// CreateGateway mocks base method.
func (m *MockGatewayClient) CreateGateway(arg0 context.Context, arg1 *v1alpha3.Gateway, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGateway indicates an expected call of CreateGateway.
func (mr *MockGatewayClientMockRecorder) CreateGateway(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGateway", reflect.TypeOf((*MockGatewayClient)(nil).CreateGateway), varargs...)
}

// DeleteAllOfGateway mocks base method.
func (m *MockGatewayClient) DeleteAllOfGateway(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGateway indicates an expected call of DeleteAllOfGateway.
func (mr *MockGatewayClientMockRecorder) DeleteAllOfGateway(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGateway", reflect.TypeOf((*MockGatewayClient)(nil).DeleteAllOfGateway), varargs...)
}

// DeleteGateway mocks base method.
func (m *MockGatewayClient) DeleteGateway(arg0 context.Context, arg1 types.NamespacedName, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGateway indicates an expected call of DeleteGateway.
func (mr *MockGatewayClientMockRecorder) DeleteGateway(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGateway", reflect.TypeOf((*MockGatewayClient)(nil).DeleteGateway), varargs...)
}

// GetGateway mocks base method.
func (m *MockGatewayClient) GetGateway(arg0 context.Context, arg1 types.NamespacedName) (*v1alpha3.Gateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGateway", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha3.Gateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGateway indicates an expected call of GetGateway.
func (mr *MockGatewayClientMockRecorder) GetGateway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGateway", reflect.TypeOf((*MockGatewayClient)(nil).GetGateway), arg0, arg1)
}

// ListGateway mocks base method.
func (m *MockGatewayClient) ListGateway(arg0 context.Context, arg1 ...client.ListOption) (*v1alpha3.GatewayList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGateway", varargs...)
	ret0, _ := ret[0].(*v1alpha3.GatewayList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGateway indicates an expected call of ListGateway.
func (mr *MockGatewayClientMockRecorder) ListGateway(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGateway", reflect.TypeOf((*MockGatewayClient)(nil).ListGateway), varargs...)
}

// PatchGateway mocks base method.
func (m *MockGatewayClient) PatchGateway(arg0 context.Context, arg1 *v1alpha3.Gateway, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGateway indicates an expected call of PatchGateway.
func (mr *MockGatewayClientMockRecorder) PatchGateway(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGateway", reflect.TypeOf((*MockGatewayClient)(nil).PatchGateway), varargs...)
}

// PatchGatewayStatus mocks base method.
func (m *MockGatewayClient) PatchGatewayStatus(arg0 context.Context, arg1 *v1alpha3.Gateway, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGatewayStatus indicates an expected call of PatchGatewayStatus.
func (mr *MockGatewayClientMockRecorder) PatchGatewayStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGatewayStatus", reflect.TypeOf((*MockGatewayClient)(nil).PatchGatewayStatus), varargs...)
}

// UpdateGateway mocks base method.
func (m *MockGatewayClient) UpdateGateway(arg0 context.Context, arg1 *v1alpha3.Gateway, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGateway indicates an expected call of UpdateGateway.
func (mr *MockGatewayClientMockRecorder) UpdateGateway(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGateway", reflect.TypeOf((*MockGatewayClient)(nil).UpdateGateway), varargs...)
}

// UpdateGatewayStatus mocks base method.
func (m *MockGatewayClient) UpdateGatewayStatus(arg0 context.Context, arg1 *v1alpha3.Gateway, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGatewayStatus indicates an expected call of UpdateGatewayStatus.
func (mr *MockGatewayClientMockRecorder) UpdateGatewayStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayStatus", reflect.TypeOf((*MockGatewayClient)(nil).UpdateGatewayStatus), varargs...)
}

// UpsertGatewaySpec mocks base method.
func (m *MockGatewayClient) UpsertGatewaySpec(arg0 context.Context, arg1 *v1alpha3.Gateway, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGatewaySpec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGatewaySpec indicates an expected call of UpsertGatewaySpec.
func (mr *MockGatewayClientMockRecorder) UpsertGatewaySpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGatewaySpec", reflect.TypeOf((*MockGatewayClient)(nil).UpsertGatewaySpec), varargs...)
}

// MockServiceEntryClient is a mock of ServiceEntryClient interface.
type MockServiceEntryClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceEntryClientMockRecorder
}

// MockServiceEntryClientMockRecorder is the mock recorder for MockServiceEntryClient.
type MockServiceEntryClientMockRecorder struct {
	mock *MockServiceEntryClient
}

// NewMockServiceEntryClient creates a new mock instance.
func NewMockServiceEntryClient(ctrl *gomock.Controller) *MockServiceEntryClient {
	mock := &MockServiceEntryClient{ctrl: ctrl}
	mock.recorder = &MockServiceEntryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceEntryClient) EXPECT() *MockServiceEntryClientMockRecorder {
	return m.recorder
}

// CreateServiceEntry mocks base method.
func (m *MockServiceEntryClient) CreateServiceEntry(arg0 context.Context, arg1 *v1alpha3.ServiceEntry, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateServiceEntry indicates an expected call of CreateServiceEntry.
func (mr *MockServiceEntryClientMockRecorder) CreateServiceEntry(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceEntry", reflect.TypeOf((*MockServiceEntryClient)(nil).CreateServiceEntry), varargs...)
}

// DeleteAllOfServiceEntry mocks base method.
func (m *MockServiceEntryClient) DeleteAllOfServiceEntry(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfServiceEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfServiceEntry indicates an expected call of DeleteAllOfServiceEntry.
func (mr *MockServiceEntryClientMockRecorder) DeleteAllOfServiceEntry(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfServiceEntry", reflect.TypeOf((*MockServiceEntryClient)(nil).DeleteAllOfServiceEntry), varargs...)
}

// DeleteServiceEntry mocks base method.
func (m *MockServiceEntryClient) DeleteServiceEntry(arg0 context.Context, arg1 types.NamespacedName, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceEntry indicates an expected call of DeleteServiceEntry.
func (mr *MockServiceEntryClientMockRecorder) DeleteServiceEntry(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceEntry", reflect.TypeOf((*MockServiceEntryClient)(nil).DeleteServiceEntry), varargs...)
}

// GetServiceEntry mocks base method.
func (m *MockServiceEntryClient) GetServiceEntry(arg0 context.Context, arg1 types.NamespacedName) (*v1alpha3.ServiceEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceEntry", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha3.ServiceEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceEntry indicates an expected call of GetServiceEntry.
func (mr *MockServiceEntryClientMockRecorder) GetServiceEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceEntry", reflect.TypeOf((*MockServiceEntryClient)(nil).GetServiceEntry), arg0, arg1)
}

// ListServiceEntry mocks base method.
func (m *MockServiceEntryClient) ListServiceEntry(arg0 context.Context, arg1 ...client.ListOption) (*v1alpha3.ServiceEntryList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceEntry", varargs...)
	ret0, _ := ret[0].(*v1alpha3.ServiceEntryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceEntry indicates an expected call of ListServiceEntry.
func (mr *MockServiceEntryClientMockRecorder) ListServiceEntry(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceEntry", reflect.TypeOf((*MockServiceEntryClient)(nil).ListServiceEntry), varargs...)
}

// PatchServiceEntry mocks base method.
func (m *MockServiceEntryClient) PatchServiceEntry(arg0 context.Context, arg1 *v1alpha3.ServiceEntry, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchServiceEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceEntry indicates an expected call of PatchServiceEntry.
func (mr *MockServiceEntryClientMockRecorder) PatchServiceEntry(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceEntry", reflect.TypeOf((*MockServiceEntryClient)(nil).PatchServiceEntry), varargs...)
}

// PatchServiceEntryStatus mocks base method.
func (m *MockServiceEntryClient) PatchServiceEntryStatus(arg0 context.Context, arg1 *v1alpha3.ServiceEntry, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchServiceEntryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceEntryStatus indicates an expected call of PatchServiceEntryStatus.
func (mr *MockServiceEntryClientMockRecorder) PatchServiceEntryStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceEntryStatus", reflect.TypeOf((*MockServiceEntryClient)(nil).PatchServiceEntryStatus), varargs...)
}

// UpdateServiceEntry mocks base method.
func (m *MockServiceEntryClient) UpdateServiceEntry(arg0 context.Context, arg1 *v1alpha3.ServiceEntry, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceEntry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceEntry indicates an expected call of UpdateServiceEntry.
func (mr *MockServiceEntryClientMockRecorder) UpdateServiceEntry(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceEntry", reflect.TypeOf((*MockServiceEntryClient)(nil).UpdateServiceEntry), varargs...)
}

// UpdateServiceEntryStatus mocks base method.
func (m *MockServiceEntryClient) UpdateServiceEntryStatus(arg0 context.Context, arg1 *v1alpha3.ServiceEntry, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceEntryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceEntryStatus indicates an expected call of UpdateServiceEntryStatus.
func (mr *MockServiceEntryClientMockRecorder) UpdateServiceEntryStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceEntryStatus", reflect.TypeOf((*MockServiceEntryClient)(nil).UpdateServiceEntryStatus), varargs...)
}

// UpsertServiceEntrySpec mocks base method.
func (m *MockServiceEntryClient) UpsertServiceEntrySpec(arg0 context.Context, arg1 *v1alpha3.ServiceEntry, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertServiceEntrySpec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertServiceEntrySpec indicates an expected call of UpsertServiceEntrySpec.
func (mr *MockServiceEntryClientMockRecorder) UpsertServiceEntrySpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertServiceEntrySpec", reflect.TypeOf((*MockServiceEntryClient)(nil).UpsertServiceEntrySpec), varargs...)
}

// MockVirtualServiceClient is a mock of VirtualServiceClient interface.
type MockVirtualServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceClientMockRecorder
}

// MockVirtualServiceClientMockRecorder is the mock recorder for MockVirtualServiceClient.
type MockVirtualServiceClientMockRecorder struct {
	mock *MockVirtualServiceClient
}

// NewMockVirtualServiceClient creates a new mock instance.
func NewMockVirtualServiceClient(ctrl *gomock.Controller) *MockVirtualServiceClient {
	mock := &MockVirtualServiceClient{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualServiceClient) EXPECT() *MockVirtualServiceClientMockRecorder {
	return m.recorder
}

// CreateVirtualService mocks base method.
func (m *MockVirtualServiceClient) CreateVirtualService(arg0 context.Context, arg1 *v1alpha3.VirtualService, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualService indicates an expected call of CreateVirtualService.
func (mr *MockVirtualServiceClientMockRecorder) CreateVirtualService(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualService", reflect.TypeOf((*MockVirtualServiceClient)(nil).CreateVirtualService), varargs...)
}

// DeleteAllOfVirtualService mocks base method.
func (m *MockVirtualServiceClient) DeleteAllOfVirtualService(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualService indicates an expected call of DeleteAllOfVirtualService.
func (mr *MockVirtualServiceClientMockRecorder) DeleteAllOfVirtualService(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualService", reflect.TypeOf((*MockVirtualServiceClient)(nil).DeleteAllOfVirtualService), varargs...)
}

// DeleteVirtualService mocks base method.
func (m *MockVirtualServiceClient) DeleteVirtualService(arg0 context.Context, arg1 types.NamespacedName, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualService indicates an expected call of DeleteVirtualService.
func (mr *MockVirtualServiceClientMockRecorder) DeleteVirtualService(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualService", reflect.TypeOf((*MockVirtualServiceClient)(nil).DeleteVirtualService), varargs...)
}

// GetVirtualService mocks base method.
func (m *MockVirtualServiceClient) GetVirtualService(arg0 context.Context, arg1 types.NamespacedName) (*v1alpha3.VirtualService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualService", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha3.VirtualService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualService indicates an expected call of GetVirtualService.
func (mr *MockVirtualServiceClientMockRecorder) GetVirtualService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualService", reflect.TypeOf((*MockVirtualServiceClient)(nil).GetVirtualService), arg0, arg1)
}

// ListVirtualService mocks base method.
func (m *MockVirtualServiceClient) ListVirtualService(arg0 context.Context, arg1 ...client.ListOption) (*v1alpha3.VirtualServiceList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualService", varargs...)
	ret0, _ := ret[0].(*v1alpha3.VirtualServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualService indicates an expected call of ListVirtualService.
func (mr *MockVirtualServiceClientMockRecorder) ListVirtualService(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualService", reflect.TypeOf((*MockVirtualServiceClient)(nil).ListVirtualService), varargs...)
}

// PatchVirtualService mocks base method.
func (m *MockVirtualServiceClient) PatchVirtualService(arg0 context.Context, arg1 *v1alpha3.VirtualService, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualService indicates an expected call of PatchVirtualService.
func (mr *MockVirtualServiceClientMockRecorder) PatchVirtualService(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualService", reflect.TypeOf((*MockVirtualServiceClient)(nil).PatchVirtualService), varargs...)
}

// PatchVirtualServiceStatus mocks base method.
func (m *MockVirtualServiceClient) PatchVirtualServiceStatus(arg0 context.Context, arg1 *v1alpha3.VirtualService, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualServiceStatus indicates an expected call of PatchVirtualServiceStatus.
func (mr *MockVirtualServiceClientMockRecorder) PatchVirtualServiceStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualServiceStatus", reflect.TypeOf((*MockVirtualServiceClient)(nil).PatchVirtualServiceStatus), varargs...)
}

// UpdateVirtualService mocks base method.
func (m *MockVirtualServiceClient) UpdateVirtualService(arg0 context.Context, arg1 *v1alpha3.VirtualService, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualService indicates an expected call of UpdateVirtualService.
func (mr *MockVirtualServiceClientMockRecorder) UpdateVirtualService(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualService", reflect.TypeOf((*MockVirtualServiceClient)(nil).UpdateVirtualService), varargs...)
}

// UpdateVirtualServiceStatus mocks base method.
func (m *MockVirtualServiceClient) UpdateVirtualServiceStatus(arg0 context.Context, arg1 *v1alpha3.VirtualService, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualServiceStatus indicates an expected call of UpdateVirtualServiceStatus.
func (mr *MockVirtualServiceClientMockRecorder) UpdateVirtualServiceStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualServiceStatus", reflect.TypeOf((*MockVirtualServiceClient)(nil).UpdateVirtualServiceStatus), varargs...)
}

// UpsertVirtualServiceSpec mocks base method.
func (m *MockVirtualServiceClient) UpsertVirtualServiceSpec(arg0 context.Context, arg1 *v1alpha3.VirtualService, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualServiceSpec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualServiceSpec indicates an expected call of UpsertVirtualServiceSpec.
func (mr *MockVirtualServiceClientMockRecorder) UpsertVirtualServiceSpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualServiceSpec", reflect.TypeOf((*MockVirtualServiceClient)(nil).UpsertVirtualServiceSpec), varargs...)
}
