// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1 (interfaces: KubernetesClusterClient,MeshClient,MeshServiceClient,MeshWorkloadClient)

// Package mock_zephyr_discovery_clients is a generated GoMock package.
package mock_zephyr_discovery_clients

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1"
	types "k8s.io/apimachinery/pkg/types"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockKubernetesClusterClient is a mock of KubernetesClusterClient interface.
type MockKubernetesClusterClient struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesClusterClientMockRecorder
}

// MockKubernetesClusterClientMockRecorder is the mock recorder for MockKubernetesClusterClient.
type MockKubernetesClusterClientMockRecorder struct {
	mock *MockKubernetesClusterClient
}

// NewMockKubernetesClusterClient creates a new mock instance.
func NewMockKubernetesClusterClient(ctrl *gomock.Controller) *MockKubernetesClusterClient {
	mock := &MockKubernetesClusterClient{ctrl: ctrl}
	mock.recorder = &MockKubernetesClusterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesClusterClient) EXPECT() *MockKubernetesClusterClientMockRecorder {
	return m.recorder
}

// CreateKubernetesCluster mocks base method.
func (m *MockKubernetesClusterClient) CreateKubernetesCluster(arg0 context.Context, arg1 *v1alpha1.KubernetesCluster, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKubernetesCluster indicates an expected call of CreateKubernetesCluster.
func (mr *MockKubernetesClusterClientMockRecorder) CreateKubernetesCluster(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterClient)(nil).CreateKubernetesCluster), varargs...)
}

// DeleteAllOfKubernetesCluster mocks base method.
func (m *MockKubernetesClusterClient) DeleteAllOfKubernetesCluster(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfKubernetesCluster indicates an expected call of DeleteAllOfKubernetesCluster.
func (mr *MockKubernetesClusterClientMockRecorder) DeleteAllOfKubernetesCluster(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterClient)(nil).DeleteAllOfKubernetesCluster), varargs...)
}

// DeleteKubernetesCluster mocks base method.
func (m *MockKubernetesClusterClient) DeleteKubernetesCluster(arg0 context.Context, arg1 types.NamespacedName, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKubernetesCluster indicates an expected call of DeleteKubernetesCluster.
func (mr *MockKubernetesClusterClientMockRecorder) DeleteKubernetesCluster(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterClient)(nil).DeleteKubernetesCluster), varargs...)
}

// GetKubernetesCluster mocks base method.
func (m *MockKubernetesClusterClient) GetKubernetesCluster(arg0 context.Context, arg1 types.NamespacedName) (*v1alpha1.KubernetesCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubernetesCluster", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.KubernetesCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubernetesCluster indicates an expected call of GetKubernetesCluster.
func (mr *MockKubernetesClusterClientMockRecorder) GetKubernetesCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterClient)(nil).GetKubernetesCluster), arg0, arg1)
}

// ListKubernetesCluster mocks base method.
func (m *MockKubernetesClusterClient) ListKubernetesCluster(arg0 context.Context, arg1 ...client.ListOption) (*v1alpha1.KubernetesClusterList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKubernetesCluster", varargs...)
	ret0, _ := ret[0].(*v1alpha1.KubernetesClusterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKubernetesCluster indicates an expected call of ListKubernetesCluster.
func (mr *MockKubernetesClusterClientMockRecorder) ListKubernetesCluster(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterClient)(nil).ListKubernetesCluster), varargs...)
}

// PatchKubernetesCluster mocks base method.
func (m *MockKubernetesClusterClient) PatchKubernetesCluster(arg0 context.Context, arg1 *v1alpha1.KubernetesCluster, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchKubernetesCluster indicates an expected call of PatchKubernetesCluster.
func (mr *MockKubernetesClusterClientMockRecorder) PatchKubernetesCluster(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterClient)(nil).PatchKubernetesCluster), varargs...)
}

// PatchKubernetesClusterStatus mocks base method.
func (m *MockKubernetesClusterClient) PatchKubernetesClusterStatus(arg0 context.Context, arg1 *v1alpha1.KubernetesCluster, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchKubernetesClusterStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchKubernetesClusterStatus indicates an expected call of PatchKubernetesClusterStatus.
func (mr *MockKubernetesClusterClientMockRecorder) PatchKubernetesClusterStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchKubernetesClusterStatus", reflect.TypeOf((*MockKubernetesClusterClient)(nil).PatchKubernetesClusterStatus), varargs...)
}

// UpdateKubernetesCluster mocks base method.
func (m *MockKubernetesClusterClient) UpdateKubernetesCluster(arg0 context.Context, arg1 *v1alpha1.KubernetesCluster, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKubernetesCluster", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKubernetesCluster indicates an expected call of UpdateKubernetesCluster.
func (mr *MockKubernetesClusterClientMockRecorder) UpdateKubernetesCluster(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKubernetesCluster", reflect.TypeOf((*MockKubernetesClusterClient)(nil).UpdateKubernetesCluster), varargs...)
}

// UpdateKubernetesClusterStatus mocks base method.
func (m *MockKubernetesClusterClient) UpdateKubernetesClusterStatus(arg0 context.Context, arg1 *v1alpha1.KubernetesCluster, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKubernetesClusterStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKubernetesClusterStatus indicates an expected call of UpdateKubernetesClusterStatus.
func (mr *MockKubernetesClusterClientMockRecorder) UpdateKubernetesClusterStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKubernetesClusterStatus", reflect.TypeOf((*MockKubernetesClusterClient)(nil).UpdateKubernetesClusterStatus), varargs...)
}

// UpsertKubernetesClusterSpec mocks base method.
func (m *MockKubernetesClusterClient) UpsertKubernetesClusterSpec(arg0 context.Context, arg1 *v1alpha1.KubernetesCluster, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertKubernetesClusterSpec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertKubernetesClusterSpec indicates an expected call of UpsertKubernetesClusterSpec.
func (mr *MockKubernetesClusterClientMockRecorder) UpsertKubernetesClusterSpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertKubernetesClusterSpec", reflect.TypeOf((*MockKubernetesClusterClient)(nil).UpsertKubernetesClusterSpec), varargs...)
}

// MockMeshClient is a mock of MeshClient interface.
type MockMeshClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeshClientMockRecorder
}

// MockMeshClientMockRecorder is the mock recorder for MockMeshClient.
type MockMeshClientMockRecorder struct {
	mock *MockMeshClient
}

// NewMockMeshClient creates a new mock instance.
func NewMockMeshClient(ctrl *gomock.Controller) *MockMeshClient {
	mock := &MockMeshClient{ctrl: ctrl}
	mock.recorder = &MockMeshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshClient) EXPECT() *MockMeshClientMockRecorder {
	return m.recorder
}

// CreateMesh mocks base method.
func (m *MockMeshClient) CreateMesh(arg0 context.Context, arg1 *v1alpha1.Mesh, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMesh indicates an expected call of CreateMesh.
func (mr *MockMeshClientMockRecorder) CreateMesh(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMesh", reflect.TypeOf((*MockMeshClient)(nil).CreateMesh), varargs...)
}

// DeleteAllOfMesh mocks base method.
func (m *MockMeshClient) DeleteAllOfMesh(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMesh indicates an expected call of DeleteAllOfMesh.
func (mr *MockMeshClientMockRecorder) DeleteAllOfMesh(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMesh", reflect.TypeOf((*MockMeshClient)(nil).DeleteAllOfMesh), varargs...)
}

// DeleteMesh mocks base method.
func (m *MockMeshClient) DeleteMesh(arg0 context.Context, arg1 types.NamespacedName, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMesh indicates an expected call of DeleteMesh.
func (mr *MockMeshClientMockRecorder) DeleteMesh(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMesh", reflect.TypeOf((*MockMeshClient)(nil).DeleteMesh), varargs...)
}

// GetMesh mocks base method.
func (m *MockMeshClient) GetMesh(arg0 context.Context, arg1 types.NamespacedName) (*v1alpha1.Mesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMesh", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.Mesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMesh indicates an expected call of GetMesh.
func (mr *MockMeshClientMockRecorder) GetMesh(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMesh", reflect.TypeOf((*MockMeshClient)(nil).GetMesh), arg0, arg1)
}

// ListMesh mocks base method.
func (m *MockMeshClient) ListMesh(arg0 context.Context, arg1 ...client.ListOption) (*v1alpha1.MeshList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMesh", varargs...)
	ret0, _ := ret[0].(*v1alpha1.MeshList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMesh indicates an expected call of ListMesh.
func (mr *MockMeshClientMockRecorder) ListMesh(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMesh", reflect.TypeOf((*MockMeshClient)(nil).ListMesh), varargs...)
}

// PatchMesh mocks base method.
func (m *MockMeshClient) PatchMesh(arg0 context.Context, arg1 *v1alpha1.Mesh, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMesh indicates an expected call of PatchMesh.
func (mr *MockMeshClientMockRecorder) PatchMesh(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMesh", reflect.TypeOf((*MockMeshClient)(nil).PatchMesh), varargs...)
}

// PatchMeshStatus mocks base method.
func (m *MockMeshClient) PatchMeshStatus(arg0 context.Context, arg1 *v1alpha1.Mesh, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshStatus indicates an expected call of PatchMeshStatus.
func (mr *MockMeshClientMockRecorder) PatchMeshStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshStatus", reflect.TypeOf((*MockMeshClient)(nil).PatchMeshStatus), varargs...)
}

// UpdateMesh mocks base method.
func (m *MockMeshClient) UpdateMesh(arg0 context.Context, arg1 *v1alpha1.Mesh, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMesh indicates an expected call of UpdateMesh.
func (mr *MockMeshClientMockRecorder) UpdateMesh(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMesh", reflect.TypeOf((*MockMeshClient)(nil).UpdateMesh), varargs...)
}

// UpdateMeshStatus mocks base method.
func (m *MockMeshClient) UpdateMeshStatus(arg0 context.Context, arg1 *v1alpha1.Mesh, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshStatus indicates an expected call of UpdateMeshStatus.
func (mr *MockMeshClientMockRecorder) UpdateMeshStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshStatus", reflect.TypeOf((*MockMeshClient)(nil).UpdateMeshStatus), varargs...)
}

// UpsertMeshSpec mocks base method.
func (m *MockMeshClient) UpsertMeshSpec(arg0 context.Context, arg1 *v1alpha1.Mesh, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMeshSpec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMeshSpec indicates an expected call of UpsertMeshSpec.
func (mr *MockMeshClientMockRecorder) UpsertMeshSpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMeshSpec", reflect.TypeOf((*MockMeshClient)(nil).UpsertMeshSpec), varargs...)
}

// MockMeshServiceClient is a mock of MeshServiceClient interface.
type MockMeshServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeshServiceClientMockRecorder
}

// MockMeshServiceClientMockRecorder is the mock recorder for MockMeshServiceClient.
type MockMeshServiceClientMockRecorder struct {
	mock *MockMeshServiceClient
}

// NewMockMeshServiceClient creates a new mock instance.
func NewMockMeshServiceClient(ctrl *gomock.Controller) *MockMeshServiceClient {
	mock := &MockMeshServiceClient{ctrl: ctrl}
	mock.recorder = &MockMeshServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshServiceClient) EXPECT() *MockMeshServiceClientMockRecorder {
	return m.recorder
}

// CreateMeshService mocks base method.
func (m *MockMeshServiceClient) CreateMeshService(arg0 context.Context, arg1 *v1alpha1.MeshService, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMeshService indicates an expected call of CreateMeshService.
func (mr *MockMeshServiceClientMockRecorder) CreateMeshService(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshService", reflect.TypeOf((*MockMeshServiceClient)(nil).CreateMeshService), varargs...)
}

// DeleteAllOfMeshService mocks base method.
func (m *MockMeshServiceClient) DeleteAllOfMeshService(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMeshService indicates an expected call of DeleteAllOfMeshService.
func (mr *MockMeshServiceClientMockRecorder) DeleteAllOfMeshService(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMeshService", reflect.TypeOf((*MockMeshServiceClient)(nil).DeleteAllOfMeshService), varargs...)
}

// DeleteMeshService mocks base method.
func (m *MockMeshServiceClient) DeleteMeshService(arg0 context.Context, arg1 types.NamespacedName, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMeshService indicates an expected call of DeleteMeshService.
func (mr *MockMeshServiceClientMockRecorder) DeleteMeshService(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshService", reflect.TypeOf((*MockMeshServiceClient)(nil).DeleteMeshService), varargs...)
}

// GetMeshService mocks base method.
func (m *MockMeshServiceClient) GetMeshService(arg0 context.Context, arg1 types.NamespacedName) (*v1alpha1.MeshService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshService", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.MeshService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshService indicates an expected call of GetMeshService.
func (mr *MockMeshServiceClientMockRecorder) GetMeshService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshService", reflect.TypeOf((*MockMeshServiceClient)(nil).GetMeshService), arg0, arg1)
}

// ListMeshService mocks base method.
func (m *MockMeshServiceClient) ListMeshService(arg0 context.Context, arg1 ...client.ListOption) (*v1alpha1.MeshServiceList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMeshService", varargs...)
	ret0, _ := ret[0].(*v1alpha1.MeshServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshService indicates an expected call of ListMeshService.
func (mr *MockMeshServiceClientMockRecorder) ListMeshService(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshService", reflect.TypeOf((*MockMeshServiceClient)(nil).ListMeshService), varargs...)
}

// PatchMeshService mocks base method.
func (m *MockMeshServiceClient) PatchMeshService(arg0 context.Context, arg1 *v1alpha1.MeshService, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshService indicates an expected call of PatchMeshService.
func (mr *MockMeshServiceClientMockRecorder) PatchMeshService(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshService", reflect.TypeOf((*MockMeshServiceClient)(nil).PatchMeshService), varargs...)
}

// PatchMeshServiceStatus mocks base method.
func (m *MockMeshServiceClient) PatchMeshServiceStatus(arg0 context.Context, arg1 *v1alpha1.MeshService, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshServiceStatus indicates an expected call of PatchMeshServiceStatus.
func (mr *MockMeshServiceClientMockRecorder) PatchMeshServiceStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshServiceStatus", reflect.TypeOf((*MockMeshServiceClient)(nil).PatchMeshServiceStatus), varargs...)
}

// UpdateMeshService mocks base method.
func (m *MockMeshServiceClient) UpdateMeshService(arg0 context.Context, arg1 *v1alpha1.MeshService, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshService indicates an expected call of UpdateMeshService.
func (mr *MockMeshServiceClientMockRecorder) UpdateMeshService(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshService", reflect.TypeOf((*MockMeshServiceClient)(nil).UpdateMeshService), varargs...)
}

// UpdateMeshServiceStatus mocks base method.
func (m *MockMeshServiceClient) UpdateMeshServiceStatus(arg0 context.Context, arg1 *v1alpha1.MeshService, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshServiceStatus indicates an expected call of UpdateMeshServiceStatus.
func (mr *MockMeshServiceClientMockRecorder) UpdateMeshServiceStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshServiceStatus", reflect.TypeOf((*MockMeshServiceClient)(nil).UpdateMeshServiceStatus), varargs...)
}

// UpsertMeshServiceSpec mocks base method.
func (m *MockMeshServiceClient) UpsertMeshServiceSpec(arg0 context.Context, arg1 *v1alpha1.MeshService, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMeshServiceSpec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMeshServiceSpec indicates an expected call of UpsertMeshServiceSpec.
func (mr *MockMeshServiceClientMockRecorder) UpsertMeshServiceSpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMeshServiceSpec", reflect.TypeOf((*MockMeshServiceClient)(nil).UpsertMeshServiceSpec), varargs...)
}

// MockMeshWorkloadClient is a mock of MeshWorkloadClient interface.
type MockMeshWorkloadClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadClientMockRecorder
}

// MockMeshWorkloadClientMockRecorder is the mock recorder for MockMeshWorkloadClient.
type MockMeshWorkloadClientMockRecorder struct {
	mock *MockMeshWorkloadClient
}

// NewMockMeshWorkloadClient creates a new mock instance.
func NewMockMeshWorkloadClient(ctrl *gomock.Controller) *MockMeshWorkloadClient {
	mock := &MockMeshWorkloadClient{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshWorkloadClient) EXPECT() *MockMeshWorkloadClientMockRecorder {
	return m.recorder
}

// CreateMeshWorkload mocks base method.
func (m *MockMeshWorkloadClient) CreateMeshWorkload(arg0 context.Context, arg1 *v1alpha1.MeshWorkload, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMeshWorkload indicates an expected call of CreateMeshWorkload.
func (mr *MockMeshWorkloadClientMockRecorder) CreateMeshWorkload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).CreateMeshWorkload), varargs...)
}

// DeleteAllOfMeshWorkload mocks base method.
func (m *MockMeshWorkloadClient) DeleteAllOfMeshWorkload(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMeshWorkload indicates an expected call of DeleteAllOfMeshWorkload.
func (mr *MockMeshWorkloadClientMockRecorder) DeleteAllOfMeshWorkload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).DeleteAllOfMeshWorkload), varargs...)
}

// DeleteMeshWorkload mocks base method.
func (m *MockMeshWorkloadClient) DeleteMeshWorkload(arg0 context.Context, arg1 types.NamespacedName, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMeshWorkload indicates an expected call of DeleteMeshWorkload.
func (mr *MockMeshWorkloadClientMockRecorder) DeleteMeshWorkload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).DeleteMeshWorkload), varargs...)
}

// GetMeshWorkload mocks base method.
func (m *MockMeshWorkloadClient) GetMeshWorkload(arg0 context.Context, arg1 types.NamespacedName) (*v1alpha1.MeshWorkload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshWorkload", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.MeshWorkload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshWorkload indicates an expected call of GetMeshWorkload.
func (mr *MockMeshWorkloadClientMockRecorder) GetMeshWorkload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).GetMeshWorkload), arg0, arg1)
}

// ListMeshWorkload mocks base method.
func (m *MockMeshWorkloadClient) ListMeshWorkload(arg0 context.Context, arg1 ...client.ListOption) (*v1alpha1.MeshWorkloadList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMeshWorkload", varargs...)
	ret0, _ := ret[0].(*v1alpha1.MeshWorkloadList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshWorkload indicates an expected call of ListMeshWorkload.
func (mr *MockMeshWorkloadClientMockRecorder) ListMeshWorkload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).ListMeshWorkload), varargs...)
}

// PatchMeshWorkload mocks base method.
func (m *MockMeshWorkloadClient) PatchMeshWorkload(arg0 context.Context, arg1 *v1alpha1.MeshWorkload, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshWorkload indicates an expected call of PatchMeshWorkload.
func (mr *MockMeshWorkloadClientMockRecorder) PatchMeshWorkload(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).PatchMeshWorkload), varargs...)
}

// PatchMeshWorkloadStatus mocks base method.
func (m *MockMeshWorkloadClient) PatchMeshWorkloadStatus(arg0 context.Context, arg1 *v1alpha1.MeshWorkload, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMeshWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMeshWorkloadStatus indicates an expected call of PatchMeshWorkloadStatus.
func (mr *MockMeshWorkloadClientMockRecorder) PatchMeshWorkloadStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMeshWorkloadStatus", reflect.TypeOf((*MockMeshWorkloadClient)(nil).PatchMeshWorkloadStatus), varargs...)
}

// UpdateMeshWorkload mocks base method.
func (m *MockMeshWorkloadClient) UpdateMeshWorkload(arg0 context.Context, arg1 *v1alpha1.MeshWorkload, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshWorkload indicates an expected call of UpdateMeshWorkload.
func (mr *MockMeshWorkloadClientMockRecorder) UpdateMeshWorkload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshWorkload", reflect.TypeOf((*MockMeshWorkloadClient)(nil).UpdateMeshWorkload), varargs...)
}

// UpdateMeshWorkloadStatus mocks base method.
func (m *MockMeshWorkloadClient) UpdateMeshWorkloadStatus(arg0 context.Context, arg1 *v1alpha1.MeshWorkload, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshWorkloadStatus indicates an expected call of UpdateMeshWorkloadStatus.
func (mr *MockMeshWorkloadClientMockRecorder) UpdateMeshWorkloadStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshWorkloadStatus", reflect.TypeOf((*MockMeshWorkloadClient)(nil).UpdateMeshWorkloadStatus), varargs...)
}

// UpsertMeshWorkloadSpec mocks base method.
func (m *MockMeshWorkloadClient) UpsertMeshWorkloadSpec(arg0 context.Context, arg1 *v1alpha1.MeshWorkload, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMeshWorkloadSpec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMeshWorkloadSpec indicates an expected call of UpsertMeshWorkloadSpec.
func (mr *MockMeshWorkloadClientMockRecorder) UpsertMeshWorkloadSpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMeshWorkloadSpec", reflect.TypeOf((*MockMeshWorkloadClient)(nil).UpsertMeshWorkloadSpec), varargs...)
}
