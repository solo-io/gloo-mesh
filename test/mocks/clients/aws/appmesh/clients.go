// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/appmesh/appmeshiface (interfaces: AppMeshAPI)

// Package mock_appmesh_clients is a generated GoMock package.
package mock_appmesh_clients

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	appmesh "github.com/aws/aws-sdk-go/service/appmesh"
	gomock "github.com/golang/mock/gomock"
)

// MockAppMeshAPI is a mock of AppMeshAPI interface.
type MockAppMeshAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAppMeshAPIMockRecorder
}

// MockAppMeshAPIMockRecorder is the mock recorder for MockAppMeshAPI.
type MockAppMeshAPIMockRecorder struct {
	mock *MockAppMeshAPI
}

// NewMockAppMeshAPI creates a new mock instance.
func NewMockAppMeshAPI(ctrl *gomock.Controller) *MockAppMeshAPI {
	mock := &MockAppMeshAPI{ctrl: ctrl}
	mock.recorder = &MockAppMeshAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppMeshAPI) EXPECT() *MockAppMeshAPIMockRecorder {
	return m.recorder
}

// CreateMesh mocks base method.
func (m *MockAppMeshAPI) CreateMesh(arg0 *appmesh.CreateMeshInput) (*appmesh.CreateMeshOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMesh", arg0)
	ret0, _ := ret[0].(*appmesh.CreateMeshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMesh indicates an expected call of CreateMesh.
func (mr *MockAppMeshAPIMockRecorder) CreateMesh(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMesh", reflect.TypeOf((*MockAppMeshAPI)(nil).CreateMesh), arg0)
}

// CreateMeshRequest mocks base method.
func (m *MockAppMeshAPI) CreateMeshRequest(arg0 *appmesh.CreateMeshInput) (*request.Request, *appmesh.CreateMeshOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeshRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.CreateMeshOutput)
	return ret0, ret1
}

// CreateMeshRequest indicates an expected call of CreateMeshRequest.
func (mr *MockAppMeshAPIMockRecorder) CreateMeshRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).CreateMeshRequest), arg0)
}

// CreateMeshWithContext mocks base method.
func (m *MockAppMeshAPI) CreateMeshWithContext(arg0 context.Context, arg1 *appmesh.CreateMeshInput, arg2 ...request.Option) (*appmesh.CreateMeshOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMeshWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.CreateMeshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMeshWithContext indicates an expected call of CreateMeshWithContext.
func (mr *MockAppMeshAPIMockRecorder) CreateMeshWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).CreateMeshWithContext), varargs...)
}

// CreateRoute mocks base method.
func (m *MockAppMeshAPI) CreateRoute(arg0 *appmesh.CreateRouteInput) (*appmesh.CreateRouteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoute", arg0)
	ret0, _ := ret[0].(*appmesh.CreateRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoute indicates an expected call of CreateRoute.
func (mr *MockAppMeshAPIMockRecorder) CreateRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoute", reflect.TypeOf((*MockAppMeshAPI)(nil).CreateRoute), arg0)
}

// CreateRouteRequest mocks base method.
func (m *MockAppMeshAPI) CreateRouteRequest(arg0 *appmesh.CreateRouteInput) (*request.Request, *appmesh.CreateRouteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.CreateRouteOutput)
	return ret0, ret1
}

// CreateRouteRequest indicates an expected call of CreateRouteRequest.
func (mr *MockAppMeshAPIMockRecorder) CreateRouteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).CreateRouteRequest), arg0)
}

// CreateRouteWithContext mocks base method.
func (m *MockAppMeshAPI) CreateRouteWithContext(arg0 context.Context, arg1 *appmesh.CreateRouteInput, arg2 ...request.Option) (*appmesh.CreateRouteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRouteWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.CreateRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouteWithContext indicates an expected call of CreateRouteWithContext.
func (mr *MockAppMeshAPIMockRecorder) CreateRouteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).CreateRouteWithContext), varargs...)
}

// CreateVirtualNode mocks base method.
func (m *MockAppMeshAPI) CreateVirtualNode(arg0 *appmesh.CreateVirtualNodeInput) (*appmesh.CreateVirtualNodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualNode", arg0)
	ret0, _ := ret[0].(*appmesh.CreateVirtualNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualNode indicates an expected call of CreateVirtualNode.
func (mr *MockAppMeshAPIMockRecorder) CreateVirtualNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualNode", reflect.TypeOf((*MockAppMeshAPI)(nil).CreateVirtualNode), arg0)
}

// CreateVirtualNodeRequest mocks base method.
func (m *MockAppMeshAPI) CreateVirtualNodeRequest(arg0 *appmesh.CreateVirtualNodeInput) (*request.Request, *appmesh.CreateVirtualNodeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualNodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.CreateVirtualNodeOutput)
	return ret0, ret1
}

// CreateVirtualNodeRequest indicates an expected call of CreateVirtualNodeRequest.
func (mr *MockAppMeshAPIMockRecorder) CreateVirtualNodeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualNodeRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).CreateVirtualNodeRequest), arg0)
}

// CreateVirtualNodeWithContext mocks base method.
func (m *MockAppMeshAPI) CreateVirtualNodeWithContext(arg0 context.Context, arg1 *appmesh.CreateVirtualNodeInput, arg2 ...request.Option) (*appmesh.CreateVirtualNodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualNodeWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.CreateVirtualNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualNodeWithContext indicates an expected call of CreateVirtualNodeWithContext.
func (mr *MockAppMeshAPIMockRecorder) CreateVirtualNodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualNodeWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).CreateVirtualNodeWithContext), varargs...)
}

// CreateVirtualRouter mocks base method.
func (m *MockAppMeshAPI) CreateVirtualRouter(arg0 *appmesh.CreateVirtualRouterInput) (*appmesh.CreateVirtualRouterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualRouter", arg0)
	ret0, _ := ret[0].(*appmesh.CreateVirtualRouterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualRouter indicates an expected call of CreateVirtualRouter.
func (mr *MockAppMeshAPIMockRecorder) CreateVirtualRouter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualRouter", reflect.TypeOf((*MockAppMeshAPI)(nil).CreateVirtualRouter), arg0)
}

// CreateVirtualRouterRequest mocks base method.
func (m *MockAppMeshAPI) CreateVirtualRouterRequest(arg0 *appmesh.CreateVirtualRouterInput) (*request.Request, *appmesh.CreateVirtualRouterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualRouterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.CreateVirtualRouterOutput)
	return ret0, ret1
}

// CreateVirtualRouterRequest indicates an expected call of CreateVirtualRouterRequest.
func (mr *MockAppMeshAPIMockRecorder) CreateVirtualRouterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualRouterRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).CreateVirtualRouterRequest), arg0)
}

// CreateVirtualRouterWithContext mocks base method.
func (m *MockAppMeshAPI) CreateVirtualRouterWithContext(arg0 context.Context, arg1 *appmesh.CreateVirtualRouterInput, arg2 ...request.Option) (*appmesh.CreateVirtualRouterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualRouterWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.CreateVirtualRouterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualRouterWithContext indicates an expected call of CreateVirtualRouterWithContext.
func (mr *MockAppMeshAPIMockRecorder) CreateVirtualRouterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualRouterWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).CreateVirtualRouterWithContext), varargs...)
}

// CreateVirtualService mocks base method.
func (m *MockAppMeshAPI) CreateVirtualService(arg0 *appmesh.CreateVirtualServiceInput) (*appmesh.CreateVirtualServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualService", arg0)
	ret0, _ := ret[0].(*appmesh.CreateVirtualServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualService indicates an expected call of CreateVirtualService.
func (mr *MockAppMeshAPIMockRecorder) CreateVirtualService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualService", reflect.TypeOf((*MockAppMeshAPI)(nil).CreateVirtualService), arg0)
}

// CreateVirtualServiceRequest mocks base method.
func (m *MockAppMeshAPI) CreateVirtualServiceRequest(arg0 *appmesh.CreateVirtualServiceInput) (*request.Request, *appmesh.CreateVirtualServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.CreateVirtualServiceOutput)
	return ret0, ret1
}

// CreateVirtualServiceRequest indicates an expected call of CreateVirtualServiceRequest.
func (mr *MockAppMeshAPIMockRecorder) CreateVirtualServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualServiceRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).CreateVirtualServiceRequest), arg0)
}

// CreateVirtualServiceWithContext mocks base method.
func (m *MockAppMeshAPI) CreateVirtualServiceWithContext(arg0 context.Context, arg1 *appmesh.CreateVirtualServiceInput, arg2 ...request.Option) (*appmesh.CreateVirtualServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualServiceWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.CreateVirtualServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualServiceWithContext indicates an expected call of CreateVirtualServiceWithContext.
func (mr *MockAppMeshAPIMockRecorder) CreateVirtualServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualServiceWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).CreateVirtualServiceWithContext), varargs...)
}

// DeleteMesh mocks base method.
func (m *MockAppMeshAPI) DeleteMesh(arg0 *appmesh.DeleteMeshInput) (*appmesh.DeleteMeshOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMesh", arg0)
	ret0, _ := ret[0].(*appmesh.DeleteMeshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMesh indicates an expected call of DeleteMesh.
func (mr *MockAppMeshAPIMockRecorder) DeleteMesh(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMesh", reflect.TypeOf((*MockAppMeshAPI)(nil).DeleteMesh), arg0)
}

// DeleteMeshRequest mocks base method.
func (m *MockAppMeshAPI) DeleteMeshRequest(arg0 *appmesh.DeleteMeshInput) (*request.Request, *appmesh.DeleteMeshOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMeshRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.DeleteMeshOutput)
	return ret0, ret1
}

// DeleteMeshRequest indicates an expected call of DeleteMeshRequest.
func (mr *MockAppMeshAPIMockRecorder) DeleteMeshRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).DeleteMeshRequest), arg0)
}

// DeleteMeshWithContext mocks base method.
func (m *MockAppMeshAPI) DeleteMeshWithContext(arg0 context.Context, arg1 *appmesh.DeleteMeshInput, arg2 ...request.Option) (*appmesh.DeleteMeshOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMeshWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.DeleteMeshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMeshWithContext indicates an expected call of DeleteMeshWithContext.
func (mr *MockAppMeshAPIMockRecorder) DeleteMeshWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).DeleteMeshWithContext), varargs...)
}

// DeleteRoute mocks base method.
func (m *MockAppMeshAPI) DeleteRoute(arg0 *appmesh.DeleteRouteInput) (*appmesh.DeleteRouteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoute", arg0)
	ret0, _ := ret[0].(*appmesh.DeleteRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoute indicates an expected call of DeleteRoute.
func (mr *MockAppMeshAPIMockRecorder) DeleteRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockAppMeshAPI)(nil).DeleteRoute), arg0)
}

// DeleteRouteRequest mocks base method.
func (m *MockAppMeshAPI) DeleteRouteRequest(arg0 *appmesh.DeleteRouteInput) (*request.Request, *appmesh.DeleteRouteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.DeleteRouteOutput)
	return ret0, ret1
}

// DeleteRouteRequest indicates an expected call of DeleteRouteRequest.
func (mr *MockAppMeshAPIMockRecorder) DeleteRouteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).DeleteRouteRequest), arg0)
}

// DeleteRouteWithContext mocks base method.
func (m *MockAppMeshAPI) DeleteRouteWithContext(arg0 context.Context, arg1 *appmesh.DeleteRouteInput, arg2 ...request.Option) (*appmesh.DeleteRouteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouteWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.DeleteRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteWithContext indicates an expected call of DeleteRouteWithContext.
func (mr *MockAppMeshAPIMockRecorder) DeleteRouteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).DeleteRouteWithContext), varargs...)
}

// DeleteVirtualNode mocks base method.
func (m *MockAppMeshAPI) DeleteVirtualNode(arg0 *appmesh.DeleteVirtualNodeInput) (*appmesh.DeleteVirtualNodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualNode", arg0)
	ret0, _ := ret[0].(*appmesh.DeleteVirtualNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVirtualNode indicates an expected call of DeleteVirtualNode.
func (mr *MockAppMeshAPIMockRecorder) DeleteVirtualNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualNode", reflect.TypeOf((*MockAppMeshAPI)(nil).DeleteVirtualNode), arg0)
}

// DeleteVirtualNodeRequest mocks base method.
func (m *MockAppMeshAPI) DeleteVirtualNodeRequest(arg0 *appmesh.DeleteVirtualNodeInput) (*request.Request, *appmesh.DeleteVirtualNodeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualNodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.DeleteVirtualNodeOutput)
	return ret0, ret1
}

// DeleteVirtualNodeRequest indicates an expected call of DeleteVirtualNodeRequest.
func (mr *MockAppMeshAPIMockRecorder) DeleteVirtualNodeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualNodeRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).DeleteVirtualNodeRequest), arg0)
}

// DeleteVirtualNodeWithContext mocks base method.
func (m *MockAppMeshAPI) DeleteVirtualNodeWithContext(arg0 context.Context, arg1 *appmesh.DeleteVirtualNodeInput, arg2 ...request.Option) (*appmesh.DeleteVirtualNodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualNodeWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.DeleteVirtualNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVirtualNodeWithContext indicates an expected call of DeleteVirtualNodeWithContext.
func (mr *MockAppMeshAPIMockRecorder) DeleteVirtualNodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualNodeWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).DeleteVirtualNodeWithContext), varargs...)
}

// DeleteVirtualRouter mocks base method.
func (m *MockAppMeshAPI) DeleteVirtualRouter(arg0 *appmesh.DeleteVirtualRouterInput) (*appmesh.DeleteVirtualRouterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualRouter", arg0)
	ret0, _ := ret[0].(*appmesh.DeleteVirtualRouterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVirtualRouter indicates an expected call of DeleteVirtualRouter.
func (mr *MockAppMeshAPIMockRecorder) DeleteVirtualRouter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualRouter", reflect.TypeOf((*MockAppMeshAPI)(nil).DeleteVirtualRouter), arg0)
}

// DeleteVirtualRouterRequest mocks base method.
func (m *MockAppMeshAPI) DeleteVirtualRouterRequest(arg0 *appmesh.DeleteVirtualRouterInput) (*request.Request, *appmesh.DeleteVirtualRouterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualRouterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.DeleteVirtualRouterOutput)
	return ret0, ret1
}

// DeleteVirtualRouterRequest indicates an expected call of DeleteVirtualRouterRequest.
func (mr *MockAppMeshAPIMockRecorder) DeleteVirtualRouterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualRouterRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).DeleteVirtualRouterRequest), arg0)
}

// DeleteVirtualRouterWithContext mocks base method.
func (m *MockAppMeshAPI) DeleteVirtualRouterWithContext(arg0 context.Context, arg1 *appmesh.DeleteVirtualRouterInput, arg2 ...request.Option) (*appmesh.DeleteVirtualRouterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualRouterWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.DeleteVirtualRouterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVirtualRouterWithContext indicates an expected call of DeleteVirtualRouterWithContext.
func (mr *MockAppMeshAPIMockRecorder) DeleteVirtualRouterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualRouterWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).DeleteVirtualRouterWithContext), varargs...)
}

// DeleteVirtualService mocks base method.
func (m *MockAppMeshAPI) DeleteVirtualService(arg0 *appmesh.DeleteVirtualServiceInput) (*appmesh.DeleteVirtualServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualService", arg0)
	ret0, _ := ret[0].(*appmesh.DeleteVirtualServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVirtualService indicates an expected call of DeleteVirtualService.
func (mr *MockAppMeshAPIMockRecorder) DeleteVirtualService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualService", reflect.TypeOf((*MockAppMeshAPI)(nil).DeleteVirtualService), arg0)
}

// DeleteVirtualServiceRequest mocks base method.
func (m *MockAppMeshAPI) DeleteVirtualServiceRequest(arg0 *appmesh.DeleteVirtualServiceInput) (*request.Request, *appmesh.DeleteVirtualServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.DeleteVirtualServiceOutput)
	return ret0, ret1
}

// DeleteVirtualServiceRequest indicates an expected call of DeleteVirtualServiceRequest.
func (mr *MockAppMeshAPIMockRecorder) DeleteVirtualServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualServiceRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).DeleteVirtualServiceRequest), arg0)
}

// DeleteVirtualServiceWithContext mocks base method.
func (m *MockAppMeshAPI) DeleteVirtualServiceWithContext(arg0 context.Context, arg1 *appmesh.DeleteVirtualServiceInput, arg2 ...request.Option) (*appmesh.DeleteVirtualServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualServiceWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.DeleteVirtualServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVirtualServiceWithContext indicates an expected call of DeleteVirtualServiceWithContext.
func (mr *MockAppMeshAPIMockRecorder) DeleteVirtualServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualServiceWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).DeleteVirtualServiceWithContext), varargs...)
}

// DescribeMesh mocks base method.
func (m *MockAppMeshAPI) DescribeMesh(arg0 *appmesh.DescribeMeshInput) (*appmesh.DescribeMeshOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMesh", arg0)
	ret0, _ := ret[0].(*appmesh.DescribeMeshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMesh indicates an expected call of DescribeMesh.
func (mr *MockAppMeshAPIMockRecorder) DescribeMesh(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMesh", reflect.TypeOf((*MockAppMeshAPI)(nil).DescribeMesh), arg0)
}

// DescribeMeshRequest mocks base method.
func (m *MockAppMeshAPI) DescribeMeshRequest(arg0 *appmesh.DescribeMeshInput) (*request.Request, *appmesh.DescribeMeshOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMeshRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.DescribeMeshOutput)
	return ret0, ret1
}

// DescribeMeshRequest indicates an expected call of DescribeMeshRequest.
func (mr *MockAppMeshAPIMockRecorder) DescribeMeshRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMeshRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).DescribeMeshRequest), arg0)
}

// DescribeMeshWithContext mocks base method.
func (m *MockAppMeshAPI) DescribeMeshWithContext(arg0 context.Context, arg1 *appmesh.DescribeMeshInput, arg2 ...request.Option) (*appmesh.DescribeMeshOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMeshWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.DescribeMeshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMeshWithContext indicates an expected call of DescribeMeshWithContext.
func (mr *MockAppMeshAPIMockRecorder) DescribeMeshWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMeshWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).DescribeMeshWithContext), varargs...)
}

// DescribeRoute mocks base method.
func (m *MockAppMeshAPI) DescribeRoute(arg0 *appmesh.DescribeRouteInput) (*appmesh.DescribeRouteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRoute", arg0)
	ret0, _ := ret[0].(*appmesh.DescribeRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRoute indicates an expected call of DescribeRoute.
func (mr *MockAppMeshAPIMockRecorder) DescribeRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRoute", reflect.TypeOf((*MockAppMeshAPI)(nil).DescribeRoute), arg0)
}

// DescribeRouteRequest mocks base method.
func (m *MockAppMeshAPI) DescribeRouteRequest(arg0 *appmesh.DescribeRouteInput) (*request.Request, *appmesh.DescribeRouteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRouteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.DescribeRouteOutput)
	return ret0, ret1
}

// DescribeRouteRequest indicates an expected call of DescribeRouteRequest.
func (mr *MockAppMeshAPIMockRecorder) DescribeRouteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRouteRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).DescribeRouteRequest), arg0)
}

// DescribeRouteWithContext mocks base method.
func (m *MockAppMeshAPI) DescribeRouteWithContext(arg0 context.Context, arg1 *appmesh.DescribeRouteInput, arg2 ...request.Option) (*appmesh.DescribeRouteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRouteWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.DescribeRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRouteWithContext indicates an expected call of DescribeRouteWithContext.
func (mr *MockAppMeshAPIMockRecorder) DescribeRouteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRouteWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).DescribeRouteWithContext), varargs...)
}

// DescribeVirtualNode mocks base method.
func (m *MockAppMeshAPI) DescribeVirtualNode(arg0 *appmesh.DescribeVirtualNodeInput) (*appmesh.DescribeVirtualNodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVirtualNode", arg0)
	ret0, _ := ret[0].(*appmesh.DescribeVirtualNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVirtualNode indicates an expected call of DescribeVirtualNode.
func (mr *MockAppMeshAPIMockRecorder) DescribeVirtualNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVirtualNode", reflect.TypeOf((*MockAppMeshAPI)(nil).DescribeVirtualNode), arg0)
}

// DescribeVirtualNodeRequest mocks base method.
func (m *MockAppMeshAPI) DescribeVirtualNodeRequest(arg0 *appmesh.DescribeVirtualNodeInput) (*request.Request, *appmesh.DescribeVirtualNodeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVirtualNodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.DescribeVirtualNodeOutput)
	return ret0, ret1
}

// DescribeVirtualNodeRequest indicates an expected call of DescribeVirtualNodeRequest.
func (mr *MockAppMeshAPIMockRecorder) DescribeVirtualNodeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVirtualNodeRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).DescribeVirtualNodeRequest), arg0)
}

// DescribeVirtualNodeWithContext mocks base method.
func (m *MockAppMeshAPI) DescribeVirtualNodeWithContext(arg0 context.Context, arg1 *appmesh.DescribeVirtualNodeInput, arg2 ...request.Option) (*appmesh.DescribeVirtualNodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVirtualNodeWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.DescribeVirtualNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVirtualNodeWithContext indicates an expected call of DescribeVirtualNodeWithContext.
func (mr *MockAppMeshAPIMockRecorder) DescribeVirtualNodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVirtualNodeWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).DescribeVirtualNodeWithContext), varargs...)
}

// DescribeVirtualRouter mocks base method.
func (m *MockAppMeshAPI) DescribeVirtualRouter(arg0 *appmesh.DescribeVirtualRouterInput) (*appmesh.DescribeVirtualRouterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVirtualRouter", arg0)
	ret0, _ := ret[0].(*appmesh.DescribeVirtualRouterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVirtualRouter indicates an expected call of DescribeVirtualRouter.
func (mr *MockAppMeshAPIMockRecorder) DescribeVirtualRouter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVirtualRouter", reflect.TypeOf((*MockAppMeshAPI)(nil).DescribeVirtualRouter), arg0)
}

// DescribeVirtualRouterRequest mocks base method.
func (m *MockAppMeshAPI) DescribeVirtualRouterRequest(arg0 *appmesh.DescribeVirtualRouterInput) (*request.Request, *appmesh.DescribeVirtualRouterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVirtualRouterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.DescribeVirtualRouterOutput)
	return ret0, ret1
}

// DescribeVirtualRouterRequest indicates an expected call of DescribeVirtualRouterRequest.
func (mr *MockAppMeshAPIMockRecorder) DescribeVirtualRouterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVirtualRouterRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).DescribeVirtualRouterRequest), arg0)
}

// DescribeVirtualRouterWithContext mocks base method.
func (m *MockAppMeshAPI) DescribeVirtualRouterWithContext(arg0 context.Context, arg1 *appmesh.DescribeVirtualRouterInput, arg2 ...request.Option) (*appmesh.DescribeVirtualRouterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVirtualRouterWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.DescribeVirtualRouterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVirtualRouterWithContext indicates an expected call of DescribeVirtualRouterWithContext.
func (mr *MockAppMeshAPIMockRecorder) DescribeVirtualRouterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVirtualRouterWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).DescribeVirtualRouterWithContext), varargs...)
}

// DescribeVirtualService mocks base method.
func (m *MockAppMeshAPI) DescribeVirtualService(arg0 *appmesh.DescribeVirtualServiceInput) (*appmesh.DescribeVirtualServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVirtualService", arg0)
	ret0, _ := ret[0].(*appmesh.DescribeVirtualServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVirtualService indicates an expected call of DescribeVirtualService.
func (mr *MockAppMeshAPIMockRecorder) DescribeVirtualService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVirtualService", reflect.TypeOf((*MockAppMeshAPI)(nil).DescribeVirtualService), arg0)
}

// DescribeVirtualServiceRequest mocks base method.
func (m *MockAppMeshAPI) DescribeVirtualServiceRequest(arg0 *appmesh.DescribeVirtualServiceInput) (*request.Request, *appmesh.DescribeVirtualServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVirtualServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.DescribeVirtualServiceOutput)
	return ret0, ret1
}

// DescribeVirtualServiceRequest indicates an expected call of DescribeVirtualServiceRequest.
func (mr *MockAppMeshAPIMockRecorder) DescribeVirtualServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVirtualServiceRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).DescribeVirtualServiceRequest), arg0)
}

// DescribeVirtualServiceWithContext mocks base method.
func (m *MockAppMeshAPI) DescribeVirtualServiceWithContext(arg0 context.Context, arg1 *appmesh.DescribeVirtualServiceInput, arg2 ...request.Option) (*appmesh.DescribeVirtualServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVirtualServiceWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.DescribeVirtualServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVirtualServiceWithContext indicates an expected call of DescribeVirtualServiceWithContext.
func (mr *MockAppMeshAPIMockRecorder) DescribeVirtualServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVirtualServiceWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).DescribeVirtualServiceWithContext), varargs...)
}

// ListMeshes mocks base method.
func (m *MockAppMeshAPI) ListMeshes(arg0 *appmesh.ListMeshesInput) (*appmesh.ListMeshesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeshes", arg0)
	ret0, _ := ret[0].(*appmesh.ListMeshesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshes indicates an expected call of ListMeshes.
func (mr *MockAppMeshAPIMockRecorder) ListMeshes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshes", reflect.TypeOf((*MockAppMeshAPI)(nil).ListMeshes), arg0)
}

// ListMeshesPages mocks base method.
func (m *MockAppMeshAPI) ListMeshesPages(arg0 *appmesh.ListMeshesInput, arg1 func(*appmesh.ListMeshesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeshesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMeshesPages indicates an expected call of ListMeshesPages.
func (mr *MockAppMeshAPIMockRecorder) ListMeshesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshesPages", reflect.TypeOf((*MockAppMeshAPI)(nil).ListMeshesPages), arg0, arg1)
}

// ListMeshesPagesWithContext mocks base method.
func (m *MockAppMeshAPI) ListMeshesPagesWithContext(arg0 context.Context, arg1 *appmesh.ListMeshesInput, arg2 func(*appmesh.ListMeshesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMeshesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMeshesPagesWithContext indicates an expected call of ListMeshesPagesWithContext.
func (mr *MockAppMeshAPIMockRecorder) ListMeshesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshesPagesWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).ListMeshesPagesWithContext), varargs...)
}

// ListMeshesRequest mocks base method.
func (m *MockAppMeshAPI) ListMeshesRequest(arg0 *appmesh.ListMeshesInput) (*request.Request, *appmesh.ListMeshesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeshesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.ListMeshesOutput)
	return ret0, ret1
}

// ListMeshesRequest indicates an expected call of ListMeshesRequest.
func (mr *MockAppMeshAPIMockRecorder) ListMeshesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshesRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).ListMeshesRequest), arg0)
}

// ListMeshesWithContext mocks base method.
func (m *MockAppMeshAPI) ListMeshesWithContext(arg0 context.Context, arg1 *appmesh.ListMeshesInput, arg2 ...request.Option) (*appmesh.ListMeshesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMeshesWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.ListMeshesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshesWithContext indicates an expected call of ListMeshesWithContext.
func (mr *MockAppMeshAPIMockRecorder) ListMeshesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshesWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).ListMeshesWithContext), varargs...)
}

// ListRoutes mocks base method.
func (m *MockAppMeshAPI) ListRoutes(arg0 *appmesh.ListRoutesInput) (*appmesh.ListRoutesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutes", arg0)
	ret0, _ := ret[0].(*appmesh.ListRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutes indicates an expected call of ListRoutes.
func (mr *MockAppMeshAPIMockRecorder) ListRoutes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutes", reflect.TypeOf((*MockAppMeshAPI)(nil).ListRoutes), arg0)
}

// ListRoutesPages mocks base method.
func (m *MockAppMeshAPI) ListRoutesPages(arg0 *appmesh.ListRoutesInput, arg1 func(*appmesh.ListRoutesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoutesPages indicates an expected call of ListRoutesPages.
func (mr *MockAppMeshAPIMockRecorder) ListRoutesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutesPages", reflect.TypeOf((*MockAppMeshAPI)(nil).ListRoutesPages), arg0, arg1)
}

// ListRoutesPagesWithContext mocks base method.
func (m *MockAppMeshAPI) ListRoutesPagesWithContext(arg0 context.Context, arg1 *appmesh.ListRoutesInput, arg2 func(*appmesh.ListRoutesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoutesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoutesPagesWithContext indicates an expected call of ListRoutesPagesWithContext.
func (mr *MockAppMeshAPIMockRecorder) ListRoutesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutesPagesWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).ListRoutesPagesWithContext), varargs...)
}

// ListRoutesRequest mocks base method.
func (m *MockAppMeshAPI) ListRoutesRequest(arg0 *appmesh.ListRoutesInput) (*request.Request, *appmesh.ListRoutesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.ListRoutesOutput)
	return ret0, ret1
}

// ListRoutesRequest indicates an expected call of ListRoutesRequest.
func (mr *MockAppMeshAPIMockRecorder) ListRoutesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutesRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).ListRoutesRequest), arg0)
}

// ListRoutesWithContext mocks base method.
func (m *MockAppMeshAPI) ListRoutesWithContext(arg0 context.Context, arg1 *appmesh.ListRoutesInput, arg2 ...request.Option) (*appmesh.ListRoutesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoutesWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.ListRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutesWithContext indicates an expected call of ListRoutesWithContext.
func (mr *MockAppMeshAPIMockRecorder) ListRoutesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutesWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).ListRoutesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockAppMeshAPI) ListTagsForResource(arg0 *appmesh.ListTagsForResourceInput) (*appmesh.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*appmesh.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockAppMeshAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockAppMeshAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourcePages mocks base method.
func (m *MockAppMeshAPI) ListTagsForResourcePages(arg0 *appmesh.ListTagsForResourceInput, arg1 func(*appmesh.ListTagsForResourceOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourcePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePages indicates an expected call of ListTagsForResourcePages.
func (mr *MockAppMeshAPIMockRecorder) ListTagsForResourcePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePages", reflect.TypeOf((*MockAppMeshAPI)(nil).ListTagsForResourcePages), arg0, arg1)
}

// ListTagsForResourcePagesWithContext mocks base method.
func (m *MockAppMeshAPI) ListTagsForResourcePagesWithContext(arg0 context.Context, arg1 *appmesh.ListTagsForResourceInput, arg2 func(*appmesh.ListTagsForResourceOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourcePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePagesWithContext indicates an expected call of ListTagsForResourcePagesWithContext.
func (mr *MockAppMeshAPIMockRecorder) ListTagsForResourcePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePagesWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).ListTagsForResourcePagesWithContext), varargs...)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockAppMeshAPI) ListTagsForResourceRequest(arg0 *appmesh.ListTagsForResourceInput) (*request.Request, *appmesh.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockAppMeshAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockAppMeshAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *appmesh.ListTagsForResourceInput, arg2 ...request.Option) (*appmesh.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockAppMeshAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListVirtualNodes mocks base method.
func (m *MockAppMeshAPI) ListVirtualNodes(arg0 *appmesh.ListVirtualNodesInput) (*appmesh.ListVirtualNodesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualNodes", arg0)
	ret0, _ := ret[0].(*appmesh.ListVirtualNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualNodes indicates an expected call of ListVirtualNodes.
func (mr *MockAppMeshAPIMockRecorder) ListVirtualNodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualNodes", reflect.TypeOf((*MockAppMeshAPI)(nil).ListVirtualNodes), arg0)
}

// ListVirtualNodesPages mocks base method.
func (m *MockAppMeshAPI) ListVirtualNodesPages(arg0 *appmesh.ListVirtualNodesInput, arg1 func(*appmesh.ListVirtualNodesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualNodesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVirtualNodesPages indicates an expected call of ListVirtualNodesPages.
func (mr *MockAppMeshAPIMockRecorder) ListVirtualNodesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualNodesPages", reflect.TypeOf((*MockAppMeshAPI)(nil).ListVirtualNodesPages), arg0, arg1)
}

// ListVirtualNodesPagesWithContext mocks base method.
func (m *MockAppMeshAPI) ListVirtualNodesPagesWithContext(arg0 context.Context, arg1 *appmesh.ListVirtualNodesInput, arg2 func(*appmesh.ListVirtualNodesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualNodesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVirtualNodesPagesWithContext indicates an expected call of ListVirtualNodesPagesWithContext.
func (mr *MockAppMeshAPIMockRecorder) ListVirtualNodesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualNodesPagesWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).ListVirtualNodesPagesWithContext), varargs...)
}

// ListVirtualNodesRequest mocks base method.
func (m *MockAppMeshAPI) ListVirtualNodesRequest(arg0 *appmesh.ListVirtualNodesInput) (*request.Request, *appmesh.ListVirtualNodesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualNodesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.ListVirtualNodesOutput)
	return ret0, ret1
}

// ListVirtualNodesRequest indicates an expected call of ListVirtualNodesRequest.
func (mr *MockAppMeshAPIMockRecorder) ListVirtualNodesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualNodesRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).ListVirtualNodesRequest), arg0)
}

// ListVirtualNodesWithContext mocks base method.
func (m *MockAppMeshAPI) ListVirtualNodesWithContext(arg0 context.Context, arg1 *appmesh.ListVirtualNodesInput, arg2 ...request.Option) (*appmesh.ListVirtualNodesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualNodesWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.ListVirtualNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualNodesWithContext indicates an expected call of ListVirtualNodesWithContext.
func (mr *MockAppMeshAPIMockRecorder) ListVirtualNodesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualNodesWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).ListVirtualNodesWithContext), varargs...)
}

// ListVirtualRouters mocks base method.
func (m *MockAppMeshAPI) ListVirtualRouters(arg0 *appmesh.ListVirtualRoutersInput) (*appmesh.ListVirtualRoutersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualRouters", arg0)
	ret0, _ := ret[0].(*appmesh.ListVirtualRoutersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualRouters indicates an expected call of ListVirtualRouters.
func (mr *MockAppMeshAPIMockRecorder) ListVirtualRouters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualRouters", reflect.TypeOf((*MockAppMeshAPI)(nil).ListVirtualRouters), arg0)
}

// ListVirtualRoutersPages mocks base method.
func (m *MockAppMeshAPI) ListVirtualRoutersPages(arg0 *appmesh.ListVirtualRoutersInput, arg1 func(*appmesh.ListVirtualRoutersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualRoutersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVirtualRoutersPages indicates an expected call of ListVirtualRoutersPages.
func (mr *MockAppMeshAPIMockRecorder) ListVirtualRoutersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualRoutersPages", reflect.TypeOf((*MockAppMeshAPI)(nil).ListVirtualRoutersPages), arg0, arg1)
}

// ListVirtualRoutersPagesWithContext mocks base method.
func (m *MockAppMeshAPI) ListVirtualRoutersPagesWithContext(arg0 context.Context, arg1 *appmesh.ListVirtualRoutersInput, arg2 func(*appmesh.ListVirtualRoutersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualRoutersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVirtualRoutersPagesWithContext indicates an expected call of ListVirtualRoutersPagesWithContext.
func (mr *MockAppMeshAPIMockRecorder) ListVirtualRoutersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualRoutersPagesWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).ListVirtualRoutersPagesWithContext), varargs...)
}

// ListVirtualRoutersRequest mocks base method.
func (m *MockAppMeshAPI) ListVirtualRoutersRequest(arg0 *appmesh.ListVirtualRoutersInput) (*request.Request, *appmesh.ListVirtualRoutersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualRoutersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.ListVirtualRoutersOutput)
	return ret0, ret1
}

// ListVirtualRoutersRequest indicates an expected call of ListVirtualRoutersRequest.
func (mr *MockAppMeshAPIMockRecorder) ListVirtualRoutersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualRoutersRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).ListVirtualRoutersRequest), arg0)
}

// ListVirtualRoutersWithContext mocks base method.
func (m *MockAppMeshAPI) ListVirtualRoutersWithContext(arg0 context.Context, arg1 *appmesh.ListVirtualRoutersInput, arg2 ...request.Option) (*appmesh.ListVirtualRoutersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualRoutersWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.ListVirtualRoutersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualRoutersWithContext indicates an expected call of ListVirtualRoutersWithContext.
func (mr *MockAppMeshAPIMockRecorder) ListVirtualRoutersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualRoutersWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).ListVirtualRoutersWithContext), varargs...)
}

// ListVirtualServices mocks base method.
func (m *MockAppMeshAPI) ListVirtualServices(arg0 *appmesh.ListVirtualServicesInput) (*appmesh.ListVirtualServicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualServices", arg0)
	ret0, _ := ret[0].(*appmesh.ListVirtualServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualServices indicates an expected call of ListVirtualServices.
func (mr *MockAppMeshAPIMockRecorder) ListVirtualServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualServices", reflect.TypeOf((*MockAppMeshAPI)(nil).ListVirtualServices), arg0)
}

// ListVirtualServicesPages mocks base method.
func (m *MockAppMeshAPI) ListVirtualServicesPages(arg0 *appmesh.ListVirtualServicesInput, arg1 func(*appmesh.ListVirtualServicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualServicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVirtualServicesPages indicates an expected call of ListVirtualServicesPages.
func (mr *MockAppMeshAPIMockRecorder) ListVirtualServicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualServicesPages", reflect.TypeOf((*MockAppMeshAPI)(nil).ListVirtualServicesPages), arg0, arg1)
}

// ListVirtualServicesPagesWithContext mocks base method.
func (m *MockAppMeshAPI) ListVirtualServicesPagesWithContext(arg0 context.Context, arg1 *appmesh.ListVirtualServicesInput, arg2 func(*appmesh.ListVirtualServicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualServicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVirtualServicesPagesWithContext indicates an expected call of ListVirtualServicesPagesWithContext.
func (mr *MockAppMeshAPIMockRecorder) ListVirtualServicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualServicesPagesWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).ListVirtualServicesPagesWithContext), varargs...)
}

// ListVirtualServicesRequest mocks base method.
func (m *MockAppMeshAPI) ListVirtualServicesRequest(arg0 *appmesh.ListVirtualServicesInput) (*request.Request, *appmesh.ListVirtualServicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualServicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.ListVirtualServicesOutput)
	return ret0, ret1
}

// ListVirtualServicesRequest indicates an expected call of ListVirtualServicesRequest.
func (mr *MockAppMeshAPIMockRecorder) ListVirtualServicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualServicesRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).ListVirtualServicesRequest), arg0)
}

// ListVirtualServicesWithContext mocks base method.
func (m *MockAppMeshAPI) ListVirtualServicesWithContext(arg0 context.Context, arg1 *appmesh.ListVirtualServicesInput, arg2 ...request.Option) (*appmesh.ListVirtualServicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualServicesWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.ListVirtualServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualServicesWithContext indicates an expected call of ListVirtualServicesWithContext.
func (mr *MockAppMeshAPIMockRecorder) ListVirtualServicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualServicesWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).ListVirtualServicesWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockAppMeshAPI) TagResource(arg0 *appmesh.TagResourceInput) (*appmesh.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*appmesh.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockAppMeshAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockAppMeshAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockAppMeshAPI) TagResourceRequest(arg0 *appmesh.TagResourceInput) (*request.Request, *appmesh.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockAppMeshAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockAppMeshAPI) TagResourceWithContext(arg0 context.Context, arg1 *appmesh.TagResourceInput, arg2 ...request.Option) (*appmesh.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockAppMeshAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockAppMeshAPI) UntagResource(arg0 *appmesh.UntagResourceInput) (*appmesh.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*appmesh.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockAppMeshAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockAppMeshAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockAppMeshAPI) UntagResourceRequest(arg0 *appmesh.UntagResourceInput) (*request.Request, *appmesh.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockAppMeshAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockAppMeshAPI) UntagResourceWithContext(arg0 context.Context, arg1 *appmesh.UntagResourceInput, arg2 ...request.Option) (*appmesh.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockAppMeshAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateMesh mocks base method.
func (m *MockAppMeshAPI) UpdateMesh(arg0 *appmesh.UpdateMeshInput) (*appmesh.UpdateMeshOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMesh", arg0)
	ret0, _ := ret[0].(*appmesh.UpdateMeshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMesh indicates an expected call of UpdateMesh.
func (mr *MockAppMeshAPIMockRecorder) UpdateMesh(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMesh", reflect.TypeOf((*MockAppMeshAPI)(nil).UpdateMesh), arg0)
}

// UpdateMeshRequest mocks base method.
func (m *MockAppMeshAPI) UpdateMeshRequest(arg0 *appmesh.UpdateMeshInput) (*request.Request, *appmesh.UpdateMeshOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeshRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.UpdateMeshOutput)
	return ret0, ret1
}

// UpdateMeshRequest indicates an expected call of UpdateMeshRequest.
func (mr *MockAppMeshAPIMockRecorder) UpdateMeshRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).UpdateMeshRequest), arg0)
}

// UpdateMeshWithContext mocks base method.
func (m *MockAppMeshAPI) UpdateMeshWithContext(arg0 context.Context, arg1 *appmesh.UpdateMeshInput, arg2 ...request.Option) (*appmesh.UpdateMeshOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.UpdateMeshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMeshWithContext indicates an expected call of UpdateMeshWithContext.
func (mr *MockAppMeshAPIMockRecorder) UpdateMeshWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).UpdateMeshWithContext), varargs...)
}

// UpdateRoute mocks base method.
func (m *MockAppMeshAPI) UpdateRoute(arg0 *appmesh.UpdateRouteInput) (*appmesh.UpdateRouteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoute", arg0)
	ret0, _ := ret[0].(*appmesh.UpdateRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoute indicates an expected call of UpdateRoute.
func (mr *MockAppMeshAPIMockRecorder) UpdateRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoute", reflect.TypeOf((*MockAppMeshAPI)(nil).UpdateRoute), arg0)
}

// UpdateRouteRequest mocks base method.
func (m *MockAppMeshAPI) UpdateRouteRequest(arg0 *appmesh.UpdateRouteInput) (*request.Request, *appmesh.UpdateRouteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.UpdateRouteOutput)
	return ret0, ret1
}

// UpdateRouteRequest indicates an expected call of UpdateRouteRequest.
func (mr *MockAppMeshAPIMockRecorder) UpdateRouteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).UpdateRouteRequest), arg0)
}

// UpdateRouteWithContext mocks base method.
func (m *MockAppMeshAPI) UpdateRouteWithContext(arg0 context.Context, arg1 *appmesh.UpdateRouteInput, arg2 ...request.Option) (*appmesh.UpdateRouteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.UpdateRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRouteWithContext indicates an expected call of UpdateRouteWithContext.
func (mr *MockAppMeshAPIMockRecorder) UpdateRouteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).UpdateRouteWithContext), varargs...)
}

// UpdateVirtualNode mocks base method.
func (m *MockAppMeshAPI) UpdateVirtualNode(arg0 *appmesh.UpdateVirtualNodeInput) (*appmesh.UpdateVirtualNodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualNode", arg0)
	ret0, _ := ret[0].(*appmesh.UpdateVirtualNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVirtualNode indicates an expected call of UpdateVirtualNode.
func (mr *MockAppMeshAPIMockRecorder) UpdateVirtualNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualNode", reflect.TypeOf((*MockAppMeshAPI)(nil).UpdateVirtualNode), arg0)
}

// UpdateVirtualNodeRequest mocks base method.
func (m *MockAppMeshAPI) UpdateVirtualNodeRequest(arg0 *appmesh.UpdateVirtualNodeInput) (*request.Request, *appmesh.UpdateVirtualNodeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualNodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.UpdateVirtualNodeOutput)
	return ret0, ret1
}

// UpdateVirtualNodeRequest indicates an expected call of UpdateVirtualNodeRequest.
func (mr *MockAppMeshAPIMockRecorder) UpdateVirtualNodeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualNodeRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).UpdateVirtualNodeRequest), arg0)
}

// UpdateVirtualNodeWithContext mocks base method.
func (m *MockAppMeshAPI) UpdateVirtualNodeWithContext(arg0 context.Context, arg1 *appmesh.UpdateVirtualNodeInput, arg2 ...request.Option) (*appmesh.UpdateVirtualNodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualNodeWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.UpdateVirtualNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVirtualNodeWithContext indicates an expected call of UpdateVirtualNodeWithContext.
func (mr *MockAppMeshAPIMockRecorder) UpdateVirtualNodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualNodeWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).UpdateVirtualNodeWithContext), varargs...)
}

// UpdateVirtualRouter mocks base method.
func (m *MockAppMeshAPI) UpdateVirtualRouter(arg0 *appmesh.UpdateVirtualRouterInput) (*appmesh.UpdateVirtualRouterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualRouter", arg0)
	ret0, _ := ret[0].(*appmesh.UpdateVirtualRouterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVirtualRouter indicates an expected call of UpdateVirtualRouter.
func (mr *MockAppMeshAPIMockRecorder) UpdateVirtualRouter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualRouter", reflect.TypeOf((*MockAppMeshAPI)(nil).UpdateVirtualRouter), arg0)
}

// UpdateVirtualRouterRequest mocks base method.
func (m *MockAppMeshAPI) UpdateVirtualRouterRequest(arg0 *appmesh.UpdateVirtualRouterInput) (*request.Request, *appmesh.UpdateVirtualRouterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualRouterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.UpdateVirtualRouterOutput)
	return ret0, ret1
}

// UpdateVirtualRouterRequest indicates an expected call of UpdateVirtualRouterRequest.
func (mr *MockAppMeshAPIMockRecorder) UpdateVirtualRouterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualRouterRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).UpdateVirtualRouterRequest), arg0)
}

// UpdateVirtualRouterWithContext mocks base method.
func (m *MockAppMeshAPI) UpdateVirtualRouterWithContext(arg0 context.Context, arg1 *appmesh.UpdateVirtualRouterInput, arg2 ...request.Option) (*appmesh.UpdateVirtualRouterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualRouterWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.UpdateVirtualRouterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVirtualRouterWithContext indicates an expected call of UpdateVirtualRouterWithContext.
func (mr *MockAppMeshAPIMockRecorder) UpdateVirtualRouterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualRouterWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).UpdateVirtualRouterWithContext), varargs...)
}

// UpdateVirtualService mocks base method.
func (m *MockAppMeshAPI) UpdateVirtualService(arg0 *appmesh.UpdateVirtualServiceInput) (*appmesh.UpdateVirtualServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualService", arg0)
	ret0, _ := ret[0].(*appmesh.UpdateVirtualServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVirtualService indicates an expected call of UpdateVirtualService.
func (mr *MockAppMeshAPIMockRecorder) UpdateVirtualService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualService", reflect.TypeOf((*MockAppMeshAPI)(nil).UpdateVirtualService), arg0)
}

// UpdateVirtualServiceRequest mocks base method.
func (m *MockAppMeshAPI) UpdateVirtualServiceRequest(arg0 *appmesh.UpdateVirtualServiceInput) (*request.Request, *appmesh.UpdateVirtualServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appmesh.UpdateVirtualServiceOutput)
	return ret0, ret1
}

// UpdateVirtualServiceRequest indicates an expected call of UpdateVirtualServiceRequest.
func (mr *MockAppMeshAPIMockRecorder) UpdateVirtualServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualServiceRequest", reflect.TypeOf((*MockAppMeshAPI)(nil).UpdateVirtualServiceRequest), arg0)
}

// UpdateVirtualServiceWithContext mocks base method.
func (m *MockAppMeshAPI) UpdateVirtualServiceWithContext(arg0 context.Context, arg1 *appmesh.UpdateVirtualServiceInput, arg2 ...request.Option) (*appmesh.UpdateVirtualServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualServiceWithContext", varargs...)
	ret0, _ := ret[0].(*appmesh.UpdateVirtualServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVirtualServiceWithContext indicates an expected call of UpdateVirtualServiceWithContext.
func (mr *MockAppMeshAPIMockRecorder) UpdateVirtualServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualServiceWithContext", reflect.TypeOf((*MockAppMeshAPI)(nil).UpdateVirtualServiceWithContext), varargs...)
}
