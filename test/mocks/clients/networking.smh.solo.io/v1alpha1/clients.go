// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha1 (interfaces: TrafficPolicyClient,AccessControlPolicyClient,VirtualMeshClient)

// Package mock_smh_networking_clients is a generated GoMock package.
package mock_smh_networking_clients

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha1"
	types "k8s.io/apimachinery/pkg/types"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockTrafficPolicyClient is a mock of TrafficPolicyClient interface.
type MockTrafficPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficPolicyClientMockRecorder
}

// MockTrafficPolicyClientMockRecorder is the mock recorder for MockTrafficPolicyClient.
type MockTrafficPolicyClientMockRecorder struct {
	mock *MockTrafficPolicyClient
}

// NewMockTrafficPolicyClient creates a new mock instance.
func NewMockTrafficPolicyClient(ctrl *gomock.Controller) *MockTrafficPolicyClient {
	mock := &MockTrafficPolicyClient{ctrl: ctrl}
	mock.recorder = &MockTrafficPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficPolicyClient) EXPECT() *MockTrafficPolicyClientMockRecorder {
	return m.recorder
}

// CreateTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) CreateTrafficPolicy(arg0 context.Context, arg1 *v1alpha1.TrafficPolicy, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrafficPolicy indicates an expected call of CreateTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) CreateTrafficPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).CreateTrafficPolicy), varargs...)
}

// DeleteAllOfTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) DeleteAllOfTrafficPolicy(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTrafficPolicy indicates an expected call of DeleteAllOfTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) DeleteAllOfTrafficPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).DeleteAllOfTrafficPolicy), varargs...)
}

// DeleteTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) DeleteTrafficPolicy(arg0 context.Context, arg1 types.NamespacedName, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrafficPolicy indicates an expected call of DeleteTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) DeleteTrafficPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).DeleteTrafficPolicy), varargs...)
}

// GetTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) GetTrafficPolicy(arg0 context.Context, arg1 types.NamespacedName) (*v1alpha1.TrafficPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrafficPolicy", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.TrafficPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrafficPolicy indicates an expected call of GetTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) GetTrafficPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).GetTrafficPolicy), arg0, arg1)
}

// ListTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) ListTrafficPolicy(arg0 context.Context, arg1 ...client.ListOption) (*v1alpha1.TrafficPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrafficPolicy", varargs...)
	ret0, _ := ret[0].(*v1alpha1.TrafficPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrafficPolicy indicates an expected call of ListTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) ListTrafficPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).ListTrafficPolicy), varargs...)
}

// PatchTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) PatchTrafficPolicy(arg0 context.Context, arg1 *v1alpha1.TrafficPolicy, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficPolicy indicates an expected call of PatchTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) PatchTrafficPolicy(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).PatchTrafficPolicy), varargs...)
}

// PatchTrafficPolicyStatus mocks base method.
func (m *MockTrafficPolicyClient) PatchTrafficPolicyStatus(arg0 context.Context, arg1 *v1alpha1.TrafficPolicy, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTrafficPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTrafficPolicyStatus indicates an expected call of PatchTrafficPolicyStatus.
func (mr *MockTrafficPolicyClientMockRecorder) PatchTrafficPolicyStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTrafficPolicyStatus", reflect.TypeOf((*MockTrafficPolicyClient)(nil).PatchTrafficPolicyStatus), varargs...)
}

// UpdateTrafficPolicy mocks base method.
func (m *MockTrafficPolicyClient) UpdateTrafficPolicy(arg0 context.Context, arg1 *v1alpha1.TrafficPolicy, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficPolicy indicates an expected call of UpdateTrafficPolicy.
func (mr *MockTrafficPolicyClientMockRecorder) UpdateTrafficPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficPolicy", reflect.TypeOf((*MockTrafficPolicyClient)(nil).UpdateTrafficPolicy), varargs...)
}

// UpdateTrafficPolicyStatus mocks base method.
func (m *MockTrafficPolicyClient) UpdateTrafficPolicyStatus(arg0 context.Context, arg1 *v1alpha1.TrafficPolicy, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrafficPolicyStatus indicates an expected call of UpdateTrafficPolicyStatus.
func (mr *MockTrafficPolicyClientMockRecorder) UpdateTrafficPolicyStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficPolicyStatus", reflect.TypeOf((*MockTrafficPolicyClient)(nil).UpdateTrafficPolicyStatus), varargs...)
}

// UpsertTrafficPolicySpec mocks base method.
func (m *MockTrafficPolicyClient) UpsertTrafficPolicySpec(arg0 context.Context, arg1 *v1alpha1.TrafficPolicy, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTrafficPolicySpec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTrafficPolicySpec indicates an expected call of UpsertTrafficPolicySpec.
func (mr *MockTrafficPolicyClientMockRecorder) UpsertTrafficPolicySpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTrafficPolicySpec", reflect.TypeOf((*MockTrafficPolicyClient)(nil).UpsertTrafficPolicySpec), varargs...)
}

// MockAccessControlPolicyClient is a mock of AccessControlPolicyClient interface.
type MockAccessControlPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccessControlPolicyClientMockRecorder
}

// MockAccessControlPolicyClientMockRecorder is the mock recorder for MockAccessControlPolicyClient.
type MockAccessControlPolicyClientMockRecorder struct {
	mock *MockAccessControlPolicyClient
}

// NewMockAccessControlPolicyClient creates a new mock instance.
func NewMockAccessControlPolicyClient(ctrl *gomock.Controller) *MockAccessControlPolicyClient {
	mock := &MockAccessControlPolicyClient{ctrl: ctrl}
	mock.recorder = &MockAccessControlPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessControlPolicyClient) EXPECT() *MockAccessControlPolicyClientMockRecorder {
	return m.recorder
}

// CreateAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyClient) CreateAccessControlPolicy(arg0 context.Context, arg1 *v1alpha1.AccessControlPolicy, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccessControlPolicy indicates an expected call of CreateAccessControlPolicy.
func (mr *MockAccessControlPolicyClientMockRecorder) CreateAccessControlPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).CreateAccessControlPolicy), varargs...)
}

// DeleteAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyClient) DeleteAccessControlPolicy(arg0 context.Context, arg1 types.NamespacedName, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessControlPolicy indicates an expected call of DeleteAccessControlPolicy.
func (mr *MockAccessControlPolicyClientMockRecorder) DeleteAccessControlPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).DeleteAccessControlPolicy), varargs...)
}

// DeleteAllOfAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyClient) DeleteAllOfAccessControlPolicy(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfAccessControlPolicy indicates an expected call of DeleteAllOfAccessControlPolicy.
func (mr *MockAccessControlPolicyClientMockRecorder) DeleteAllOfAccessControlPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).DeleteAllOfAccessControlPolicy), varargs...)
}

// GetAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyClient) GetAccessControlPolicy(arg0 context.Context, arg1 types.NamespacedName) (*v1alpha1.AccessControlPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessControlPolicy", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.AccessControlPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessControlPolicy indicates an expected call of GetAccessControlPolicy.
func (mr *MockAccessControlPolicyClientMockRecorder) GetAccessControlPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).GetAccessControlPolicy), arg0, arg1)
}

// ListAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyClient) ListAccessControlPolicy(arg0 context.Context, arg1 ...client.ListOption) (*v1alpha1.AccessControlPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(*v1alpha1.AccessControlPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessControlPolicy indicates an expected call of ListAccessControlPolicy.
func (mr *MockAccessControlPolicyClientMockRecorder) ListAccessControlPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).ListAccessControlPolicy), varargs...)
}

// PatchAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyClient) PatchAccessControlPolicy(arg0 context.Context, arg1 *v1alpha1.AccessControlPolicy, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchAccessControlPolicy indicates an expected call of PatchAccessControlPolicy.
func (mr *MockAccessControlPolicyClientMockRecorder) PatchAccessControlPolicy(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).PatchAccessControlPolicy), varargs...)
}

// PatchAccessControlPolicyStatus mocks base method.
func (m *MockAccessControlPolicyClient) PatchAccessControlPolicyStatus(arg0 context.Context, arg1 *v1alpha1.AccessControlPolicy, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAccessControlPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchAccessControlPolicyStatus indicates an expected call of PatchAccessControlPolicyStatus.
func (mr *MockAccessControlPolicyClientMockRecorder) PatchAccessControlPolicyStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAccessControlPolicyStatus", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).PatchAccessControlPolicyStatus), varargs...)
}

// UpdateAccessControlPolicy mocks base method.
func (m *MockAccessControlPolicyClient) UpdateAccessControlPolicy(arg0 context.Context, arg1 *v1alpha1.AccessControlPolicy, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessControlPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessControlPolicy indicates an expected call of UpdateAccessControlPolicy.
func (mr *MockAccessControlPolicyClientMockRecorder) UpdateAccessControlPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessControlPolicy", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).UpdateAccessControlPolicy), varargs...)
}

// UpdateAccessControlPolicyStatus mocks base method.
func (m *MockAccessControlPolicyClient) UpdateAccessControlPolicyStatus(arg0 context.Context, arg1 *v1alpha1.AccessControlPolicy, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessControlPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessControlPolicyStatus indicates an expected call of UpdateAccessControlPolicyStatus.
func (mr *MockAccessControlPolicyClientMockRecorder) UpdateAccessControlPolicyStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessControlPolicyStatus", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).UpdateAccessControlPolicyStatus), varargs...)
}

// UpsertAccessControlPolicySpec mocks base method.
func (m *MockAccessControlPolicyClient) UpsertAccessControlPolicySpec(arg0 context.Context, arg1 *v1alpha1.AccessControlPolicy, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAccessControlPolicySpec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAccessControlPolicySpec indicates an expected call of UpsertAccessControlPolicySpec.
func (mr *MockAccessControlPolicyClientMockRecorder) UpsertAccessControlPolicySpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAccessControlPolicySpec", reflect.TypeOf((*MockAccessControlPolicyClient)(nil).UpsertAccessControlPolicySpec), varargs...)
}

// MockVirtualMeshClient is a mock of VirtualMeshClient interface.
type MockVirtualMeshClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMeshClientMockRecorder
}

// MockVirtualMeshClientMockRecorder is the mock recorder for MockVirtualMeshClient.
type MockVirtualMeshClientMockRecorder struct {
	mock *MockVirtualMeshClient
}

// NewMockVirtualMeshClient creates a new mock instance.
func NewMockVirtualMeshClient(ctrl *gomock.Controller) *MockVirtualMeshClient {
	mock := &MockVirtualMeshClient{ctrl: ctrl}
	mock.recorder = &MockVirtualMeshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMeshClient) EXPECT() *MockVirtualMeshClientMockRecorder {
	return m.recorder
}

// CreateVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) CreateVirtualMesh(arg0 context.Context, arg1 *v1alpha1.VirtualMesh, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualMesh indicates an expected call of CreateVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) CreateVirtualMesh(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).CreateVirtualMesh), varargs...)
}

// DeleteAllOfVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) DeleteAllOfVirtualMesh(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualMesh indicates an expected call of DeleteAllOfVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) DeleteAllOfVirtualMesh(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).DeleteAllOfVirtualMesh), varargs...)
}

// DeleteVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) DeleteVirtualMesh(arg0 context.Context, arg1 types.NamespacedName, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMesh indicates an expected call of DeleteVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) DeleteVirtualMesh(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).DeleteVirtualMesh), varargs...)
}

// GetVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) GetVirtualMesh(arg0 context.Context, arg1 types.NamespacedName) (*v1alpha1.VirtualMesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMesh", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.VirtualMesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMesh indicates an expected call of GetVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) GetVirtualMesh(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).GetVirtualMesh), arg0, arg1)
}

// ListVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) ListVirtualMesh(arg0 context.Context, arg1 ...client.ListOption) (*v1alpha1.VirtualMeshList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualMesh", varargs...)
	ret0, _ := ret[0].(*v1alpha1.VirtualMeshList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMesh indicates an expected call of ListVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) ListVirtualMesh(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).ListVirtualMesh), varargs...)
}

// PatchVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) PatchVirtualMesh(arg0 context.Context, arg1 *v1alpha1.VirtualMesh, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMesh indicates an expected call of PatchVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) PatchVirtualMesh(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).PatchVirtualMesh), varargs...)
}

// PatchVirtualMeshStatus mocks base method.
func (m *MockVirtualMeshClient) PatchVirtualMeshStatus(arg0 context.Context, arg1 *v1alpha1.VirtualMesh, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMeshStatus indicates an expected call of PatchVirtualMeshStatus.
func (mr *MockVirtualMeshClientMockRecorder) PatchVirtualMeshStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMeshStatus", reflect.TypeOf((*MockVirtualMeshClient)(nil).PatchVirtualMeshStatus), varargs...)
}

// UpdateVirtualMesh mocks base method.
func (m *MockVirtualMeshClient) UpdateVirtualMesh(arg0 context.Context, arg1 *v1alpha1.VirtualMesh, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualMesh", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMesh indicates an expected call of UpdateVirtualMesh.
func (mr *MockVirtualMeshClientMockRecorder) UpdateVirtualMesh(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMesh", reflect.TypeOf((*MockVirtualMeshClient)(nil).UpdateVirtualMesh), varargs...)
}

// UpdateVirtualMeshStatus mocks base method.
func (m *MockVirtualMeshClient) UpdateVirtualMeshStatus(arg0 context.Context, arg1 *v1alpha1.VirtualMesh, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualMeshStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMeshStatus indicates an expected call of UpdateVirtualMeshStatus.
func (mr *MockVirtualMeshClientMockRecorder) UpdateVirtualMeshStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMeshStatus", reflect.TypeOf((*MockVirtualMeshClient)(nil).UpdateVirtualMeshStatus), varargs...)
}

// UpsertVirtualMeshSpec mocks base method.
func (m *MockVirtualMeshClient) UpsertVirtualMeshSpec(arg0 context.Context, arg1 *v1alpha1.VirtualMesh, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualMeshSpec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualMeshSpec indicates an expected call of UpsertVirtualMeshSpec.
func (mr *MockVirtualMeshClientMockRecorder) UpsertVirtualMeshSpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualMeshSpec", reflect.TypeOf((*MockVirtualMeshClient)(nil).UpsertVirtualMeshSpec), varargs...)
}
