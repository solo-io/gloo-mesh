// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_table_printing is a generated GoMock package.
package mock_table_printing

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	table_printing "github.com/solo-io/service-mesh-hub/cli/pkg/common/table_printing"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/networking.zephyr.solo.io/v1alpha1"
)

// MockTrafficPolicyPrinter is a mock of TrafficPolicyPrinter interface.
type MockTrafficPolicyPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficPolicyPrinterMockRecorder
}

// MockTrafficPolicyPrinterMockRecorder is the mock recorder for MockTrafficPolicyPrinter.
type MockTrafficPolicyPrinterMockRecorder struct {
	mock *MockTrafficPolicyPrinter
}

// NewMockTrafficPolicyPrinter creates a new mock instance.
func NewMockTrafficPolicyPrinter(ctrl *gomock.Controller) *MockTrafficPolicyPrinter {
	mock := &MockTrafficPolicyPrinter{ctrl: ctrl}
	mock.recorder = &MockTrafficPolicyPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficPolicyPrinter) EXPECT() *MockTrafficPolicyPrinterMockRecorder {
	return m.recorder
}

// Print mocks base method.
func (m *MockTrafficPolicyPrinter) Print(out io.Writer, printMode table_printing.PrintMode, trafficPolicies []*v1alpha1.TrafficPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Print", out, printMode, trafficPolicies)
	ret0, _ := ret[0].(error)
	return ret0
}

// Print indicates an expected call of Print.
func (mr *MockTrafficPolicyPrinterMockRecorder) Print(out, printMode, trafficPolicies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockTrafficPolicyPrinter)(nil).Print), out, printMode, trafficPolicies)
}

// MockAccessControlPolicyPrinter is a mock of AccessControlPolicyPrinter interface.
type MockAccessControlPolicyPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockAccessControlPolicyPrinterMockRecorder
}

// MockAccessControlPolicyPrinterMockRecorder is the mock recorder for MockAccessControlPolicyPrinter.
type MockAccessControlPolicyPrinterMockRecorder struct {
	mock *MockAccessControlPolicyPrinter
}

// NewMockAccessControlPolicyPrinter creates a new mock instance.
func NewMockAccessControlPolicyPrinter(ctrl *gomock.Controller) *MockAccessControlPolicyPrinter {
	mock := &MockAccessControlPolicyPrinter{ctrl: ctrl}
	mock.recorder = &MockAccessControlPolicyPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessControlPolicyPrinter) EXPECT() *MockAccessControlPolicyPrinterMockRecorder {
	return m.recorder
}

// Print mocks base method.
func (m *MockAccessControlPolicyPrinter) Print(out io.Writer, printMode table_printing.PrintMode, accessControlPolicies []*v1alpha1.AccessControlPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Print", out, printMode, accessControlPolicies)
	ret0, _ := ret[0].(error)
	return ret0
}

// Print indicates an expected call of Print.
func (mr *MockAccessControlPolicyPrinterMockRecorder) Print(out, printMode, accessControlPolicies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockAccessControlPolicyPrinter)(nil).Print), out, printMode, accessControlPolicies)
}
