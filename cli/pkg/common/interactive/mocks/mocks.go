// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_interactive is a generated GoMock package.
package mock_interactive

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	interactive "github.com/solo-io/service-mesh-hub/cli/pkg/common/interactive"
)

// MockInteractivePrompt is a mock of InteractivePrompt interface.
type MockInteractivePrompt struct {
	ctrl     *gomock.Controller
	recorder *MockInteractivePromptMockRecorder
}

// MockInteractivePromptMockRecorder is the mock recorder for MockInteractivePrompt.
type MockInteractivePromptMockRecorder struct {
	mock *MockInteractivePrompt
}

// NewMockInteractivePrompt creates a new mock instance.
func NewMockInteractivePrompt(ctrl *gomock.Controller) *MockInteractivePrompt {
	mock := &MockInteractivePrompt{ctrl: ctrl}
	mock.recorder = &MockInteractivePromptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractivePrompt) EXPECT() *MockInteractivePromptMockRecorder {
	return m.recorder
}

// PromptValue mocks base method.
func (m *MockInteractivePrompt) PromptValue(message, defaultValue string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptValue", message, defaultValue)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptValue indicates an expected call of PromptValue.
func (mr *MockInteractivePromptMockRecorder) PromptValue(message, defaultValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptValue", reflect.TypeOf((*MockInteractivePrompt)(nil).PromptValue), message, defaultValue)
}

// PromptValueWithValidator mocks base method.
func (m *MockInteractivePrompt) PromptValueWithValidator(message, defaultValue string, validator interactive.Validator) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptValueWithValidator", message, defaultValue, validator)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptValueWithValidator indicates an expected call of PromptValueWithValidator.
func (mr *MockInteractivePromptMockRecorder) PromptValueWithValidator(message, defaultValue, validator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptValueWithValidator", reflect.TypeOf((*MockInteractivePrompt)(nil).PromptValueWithValidator), message, defaultValue, validator)
}

// SelectValue mocks base method.
func (m *MockInteractivePrompt) SelectValue(message string, options []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectValue", message, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectValue indicates an expected call of SelectValue.
func (mr *MockInteractivePromptMockRecorder) SelectValue(message, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectValue", reflect.TypeOf((*MockInteractivePrompt)(nil).SelectValue), message, options)
}

// SelectMultipleValues mocks base method.
func (m *MockInteractivePrompt) SelectMultipleValues(message string, options []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectMultipleValues", message, options)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectMultipleValues indicates an expected call of SelectMultipleValues.
func (mr *MockInteractivePromptMockRecorder) SelectMultipleValues(message, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectMultipleValues", reflect.TypeOf((*MockInteractivePrompt)(nil).SelectMultipleValues), message, options)
}
