// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_config_lookup is a generated GoMock package.
package mock_config_lookup

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kubeconfig "github.com/solo-io/service-mesh-hub/pkg/kubeconfig"
)

// MockKubeConfigLookup is a mock of KubeConfigLookup interface.
type MockKubeConfigLookup struct {
	ctrl     *gomock.Controller
	recorder *MockKubeConfigLookupMockRecorder
}

// MockKubeConfigLookupMockRecorder is the mock recorder for MockKubeConfigLookup.
type MockKubeConfigLookupMockRecorder struct {
	mock *MockKubeConfigLookup
}

// NewMockKubeConfigLookup creates a new mock instance.
func NewMockKubeConfigLookup(ctrl *gomock.Controller) *MockKubeConfigLookup {
	mock := &MockKubeConfigLookup{ctrl: ctrl}
	mock.recorder = &MockKubeConfigLookupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubeConfigLookup) EXPECT() *MockKubeConfigLookupMockRecorder {
	return m.recorder
}

// FromCluster mocks base method.
func (m *MockKubeConfigLookup) FromCluster(ctx context.Context, clusterName string) (*kubeconfig.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromCluster", ctx, clusterName)
	ret0, _ := ret[0].(*kubeconfig.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromCluster indicates an expected call of FromCluster.
func (mr *MockKubeConfigLookupMockRecorder) FromCluster(ctx, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromCluster", reflect.TypeOf((*MockKubeConfigLookup)(nil).FromCluster), ctx, clusterName)
}
