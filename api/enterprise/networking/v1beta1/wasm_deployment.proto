syntax = "proto3";
package networking.enterprise.mesh.gloo.solo.io;

option go_package = "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1";

import "google/protobuf/any.proto";

import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "github.com/solo-io/gloo-mesh/api/common/v1/selectors.proto";

import "networking/v1alpha3/envoy_filter.proto";

// Deploys one or more WASM Envoy Filters to selected Sidecars and Gateways in a Mesh.
message WasmDeploymentSpec {

    // Sidecars/Gateways whose Workloads match these selectors will attach the specified WASM Filters.
    // Leave empty to have all workloads in the mesh apply receive the WASM Filter.
    repeated .common.mesh.gloo.solo.io.WorkloadSelector workload_selector = 1;

    // Specify WASM filter parameters.
    repeated WasmFilterSpec filters = 2;

    // Weight is used to determine the order of WASM Filters when applying
    // multiple WasmDeployments to a single workload.
    // Deployed WASM filters will be sorted in order of
    // highest to lowest weight. WasmDeployments with equal weights will be
    // sorted non-deterministically.
    // Note that all WASM Filters are currently inserted just before the Envoy router filter
    // in the HTTP Connection Manager's HTTP Filter Chain.
    uint32 weight = 3;
}

// Specify the WASM Filter to deploy.
message WasmFilterSpec {

    // Several options are available for providing a source of the WASM filter file.
    // An option must be specified in order to execute the WasmDeployment.
    oneof filter_source {

        // Select `local_path_source` to deploy the filter from a file accessible
        // to the workload proxy. Note that Gloo Mesh cannot verify
        // whether the target workload proxy containers contain the given path.
        // If filters do not load, please inspect the sidecar proxy logs.
        // TODO(ilackarms): see if we can somehow verify the filter exists in the proxy container and surface that on the WasmDeployment status
        string local_path_source = 1;

        // Select `http_uri_source` to deploy the filter from an HTTP/S URI accessible
        // to the workload proxy. Note that Gloo Mesh cannot verify
        // whether the target workload proxy containers have HTTP accesss the given URI.
        // If filters do not load, please inspect the sidecar proxy logs.
        // TODO(ilackarms): see if we can somehow verify the filter exists in the proxy container and surface that on the WasmDeployment status
        // TODO(ilackarms): we may need to provide options for customizing the Cluster given to envoy along with the HTTP Fetch URI. currently Gloo Mesh will create a simple plaintext HTTP cluster from the Host/Port specified in the URI.
        UriSource http_uri_source = 2;

        // fetch the image from a [WASM OCI Registry](https://webassemblyhub.io/)
        // Images can be built and pushed to registries using `meshctl` and `wasme`.
        WasmImageSource wasm_image_source = 3;
    }

    // Filter/service configuration used to configure or reconfigure a filter
    // (proxy_on_configuration).
    // Several options are available for providing a source of filter config (dynamic and static).
    oneof filter_config_source {

        // Provide configuration as a static
        // `google.protobuf.Struct` is serialized as JSON before
        // passing it to the plugin. `google.protobuf.BytesValue` and
        // `google.protobuf.StringValue` are passed directly without the wrapper.
        .google.protobuf.Any static_filter_config = 4;

        // Provide configuration from a dynamic configuration source.
        // This is used to connect proxies to a user-provided configuration server
        // rather than using the WasmDeployment CR to update filter configuration.
        // NOTE: Not currently implemented. This field serves as a placeholder.
        // passing it to the plugin. `google.protobuf.BytesValue` and
        // `google.protobuf.StringValue` are passed directly without the wrapper.
        // TODO(ilackarms): implement with dynamic filter config source (FCDS) https://github.com/envoyproxy/envoy/issues/7867
        string dynamic_filter_config = 8;
    }

    // The `root id` must match the `root id` defined inside the filter.
    // If the user does not provide this field, Gloo Mesh will attempt to pull the image
    // and set it from the `filter_conf` contained in the image config.
    // Note that if the `filter_source` is not set to `wasm_image_source`, this field is required.
    string root_id = 5;

    // An ID which will be used along with a hash of the wasm code
    // (or the name of the registered Null VM plugin) to determine which VM will be used to load the WASM filter.
    // All filters on the same proxy which use the same `vm_id` and code within will use the same VM.
    // May be left blank. Sharing a VM between plugins can reduce memory utilization and make sharing of data easier which may have security implications.
    string vm_id = 6;

    // The specific config generation context to which to attach the filter. Istio
    // generates envoy configuration in the context of a gateway,
    // inbound traffic to sidecar and outbound traffic from sidecar.
    // Uses the Istio default (`ANY`).
    .istio.networking.v1alpha3.EnvoyFilter.PatchContext filter_context = 7;

    // The filter in the Envoy HTTP Filter Chain immediately before which the WASM filter will be
    // inserted.
    // Defaults to `envoy.router`.
    string insert_before_filter = 9;

}

// Specify options for fetching WASM Filters from an HTTP URI.
message UriSource {

    // The HTTP URI from which to fetch the filter.
    string uri = 1;

    // Required. The Sha256 Checksum of the filter binary (will be verified by the proxy).
    string sha = 2;
}

// Specify options for fetching WASM Filters from a [WASM-compatible OCI Registry](https://webassemblyhub.io/).
// Images can be built and pushed to registries using `meshctl` and `wasme`.
message WasmImageSource {

    // The full tag of the wasm image. It must include the registry address at the beginning, e.g. "webassemblyhub.io/ilackarms/helloworld:v0.1".
    string wasm_image_tag = 1;
}

// NOTE: ImagePullOptions are currently unsupported.
message ImagePullOptions {

    // If a username/password is required,
    // specify the name of a secret with keys:
    // * username: <username>
    // * password: <password>
    //
    // The secret must live in the Enterprises Agent namespace.
    string pullSecret = 1;

    // If true skip verifying the image server's TLS certificate.
    bool insecureSkipVerify = 2;

    // If true use HTTP instead of HTTPS.
    bool plainHttp = 3;
}

message WasmDeploymentStatus {

    // The most recent generation observed in the the WasmDeployment metadata.
    // if the observedGeneration does not match `metadata.generation`, Gloo Mesh has not processed the most
    // recent version of this resource.
    int64 observed_generation = 1;

    // Any errors encountered while processing this generation of the resource.
    // This can include failures to pull a WASM image as well as missing or invalid
    // fields in the spec.
    string error = 2;

    // The state of the WasmDeployment as it has been applied to each individual Workload.
    map<string, WorkloadState> workload_states = 3;

    // WorkloadState is the state of the WasmDeployment resource as it has been applied to an individual Workload.
    enum WorkloadState {

        // Indicates that filters have not yet been deployed to the target Workload.
        DEPLOYMENT_PENDING = 0;

        // Indicates the WASM Filters have been deployed to the target Workload (along with any cluster dependencies).
        FILTERS_DEPLOYED = 1;

        // Indicates deploying the WASM Filters to this Workload failed.
        DEPLOYMENT_FAILED = 2;
    }

}
