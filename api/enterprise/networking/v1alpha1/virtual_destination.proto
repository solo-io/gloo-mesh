syntax = "proto3";
package networking.enterprise.mesh.gloo.solo.io;

option go_package = "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1alpha1";

import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "github.com/solo-io/gloo-mesh/api/networking/v1alpha2/selectors.proto";
import "github.com/solo-io/gloo-mesh/api/networking/v1alpha2/validation_state.proto";
import "github.com/solo-io/gloo-mesh/api/networking/v1alpha2/traffic_policy.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;

/*
    A VirtualDestination creates a new hostname to which client workloads can send requests.
    Requests will be routed based on either a list of backing traffic targets ordered by
    explicit priority, or a list of locality directives. Each TrafficTarget backing the
    VirtualDestination must be configured with outlier detection through a TrafficPolicy.

    Currently this feature only supports TrafficTargets backed by Istio.
*/
message VirtualDestinationSpec {
  // The DNS name of the VirtualDestination. Must be unique within the service mesh instance.
  string hostname = 1;

  // The port on which the VirtualDestination listens.
  Port port = 2;

  // The VirtualDestination can be made visible to either a mesh, a VirtualMesh, or a subset of meshes within the same VirtualMesh.
  oneof export_to {
    // The VirtualMesh that this VirtualDestination will be visible to.
    .core.skv2.solo.io.ObjectRef virtual_mesh = 3;
    // The meshes that this VirtualDestination will be visible to. If multiple meshes are specified, they must
    // all belong to the same VirtualMesh.
    MeshList mesh_list = 4;
  }

  // Configuration that determines failover behavior.
  oneof failover_config {
    // Failover priority is determined by an explicitly provided static ordering of TrafficTargets.
    BackingServiceList static = 5;
    // Failover priority is determined by the localities of the traffic source and destination.
    LocalityConfig localized = 6;
  }

  // The port on which the VirtualDestination listens.
  message Port {
    // Port number.
    uint32 number = 1;
    // Protocol of the requests sent to the VirtualDestination. Must be one of HTTP, HTTPS, GRPC, HTTP2, MONGO, TCP, TLS.
    string protocol = 2;
  }

  // A list of mesh references.
  message MeshList {
    repeated .core.skv2.solo.io.ObjectRef meshes = 1;
  }

  // Configure failover based on a list of TrafficTargets. When a TrafficTarget in the list
  // is in an unhealthy state (as determined by its outlier detection configuration), requests sent to the VirtualDestination will be routed to the next healthy TrafficTarget
  // in the list.
  message BackingServiceList {
    // The list of services backing the VirtualDestination, ordered by decreasing priority.
    // All services must be either in the same mesh or in meshes that are grouped under a common VirtualMesh.
    repeated BackingService services = 1;
  }

  // Enables failover based on locality. When a client workload makes a request to the VirtualDestination, Gloo Mesh will
  // first try to direct traffic to the service instance geographically closest to the client workload. If outlier
  // detection detects that the closest traffic target is in an unhealthy state, requests will instead be routed
  // to a service instance in one of the localities specified in the `to` field. Currently, each locality in the
  // `to` field will be routed to with equal probability if the local instance is unhealthy.
  message LocalityConfig {
    // Selectors for the services backing the VirtualDestination.
    // All services must be either in the same mesh or in meshes that are grouped under a common VirtualMesh.
    // Currently only one service per cluster can be selected, more than one per cluster will be considered invalid.
    repeated .networking.mesh.gloo.solo.io.TrafficTargetSelector service_selectors = 1;

    // Directives describing the locality failover behavior.
    repeated LocalityFailoverDirective failover_directives = 2;

    message LocalityFailoverDirective {
      // The locality of a client workload.
      Locality from = 1;
      // The list of traffic target localities that can be routed to if the instance local to the client workload
      // is not available.
      repeated Locality to = 2;
    }

    // A geographic location defined by a region, zone, and sub-zone.
    message Locality {
      // The locality's region.
      string region = 1;
      // The locality's zone. Currently this value is not used.
      string zone = 2;
      // The locality's sub-zone. Currently this value is not used.
      string sub_zone = 3;
    }

    // Outlier detection to determine the health of the selected services.
    networking.mesh.gloo.solo.io.TrafficPolicySpec.OutlierDetection outlier_detection = 3;
  }
}

// A service represented by a TrafficTarget
message BackingService {
  // Different traffic target types can be selected as backing services.
  oneof backing_service_type {
    // Name/namespace/cluster of a kubernetes service.
    .core.skv2.solo.io.ClusterObjectRef kube_service = 1;
  }
}

message VirtualDestinationStatus {
  // The most recent generation observed in the the VirtualDestination metadata.
  // If the observedGeneration does not match generation, the controller has not received the most
  // recent version of this resource.
  int64 observed_generation = 1;

  // The state of the overall resource, will only show accepted if it has been successfully
  // applied to all target meshes.
  .networking.mesh.gloo.solo.io.ApprovalState state = 2;

  // The status of the VirtualDestination for each Mesh to which it has been applied.
  map<string, .networking.mesh.gloo.solo.io.ApprovalStatus> meshes = 3;

  // The traffic targets that comprise this Global Service.
  repeated SelectedTrafficTarget selected_traffic_targets = 4;

  // Any errors found while processing this generation of the resource.
  repeated string errors = 5;

  message SelectedTrafficTarget {
    // Reference to the traffic target.
    .core.skv2.solo.io.ClusterObjectRef ref = 1;

    // The service that the traffic target represents.
    BackingService service = 2;
  }
}
