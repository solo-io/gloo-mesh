syntax = "proto3";
package core.smh.solo.io;
option go_package = "github.com/solo-io/service-mesh-hub/pkg/api/core.smh.solo.io/v1alpha1/types";

import "google/protobuf/wrappers.proto";
import "service-mesh-hub/api/core/v1alpha1/ref.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

/*
    Selector capable of selecting specific service identities. Useful for binding policy rules.
    Either (namespaces, cluster, service_account_names) or service_accounts can be specified.
    If all fields are omitted, any source identity is permitted.
*/
message IdentitySelector {
    message Matcher {
        // Namespaces to allow. If not set, any namespace is allowed.
        repeated string namespaces = 1;
        // Cluster to allow. If not set, any cluster is allowed.
        repeated string clusters = 2;
    }
    message ServiceAccountRefs {
        // List of ServiceAccounts to allow. If not set, any ServiceAccount is allowed.
        repeated ResourceRef service_accounts = 1;
    }
    oneof identity_selector_type {
        Matcher matcher = 1;
        ServiceAccountRefs service_account_refs = 2;
    }
}
