syntax = "proto3";
package settings.mesh.gloo.solo.io;
option go_package = "github.com/solo-io/gloo-mesh/pkg/api/settings.mesh.gloo.solo.io/v1alpha2";

import "extproto/ext.proto";
option (extproto.equal_all) = true;

import "github.com/solo-io/gloo-mesh/api/networking/v1alpha2/validation_state.proto";
import "github.com/solo-io/gloo-mesh/api/networking/v1alpha2/traffic_policy.proto";

// Configure global settings and defaults.
message SettingsSpec {

    // Configure default mTLS settings for TrafficTargets (MTLS declared in TrafficPolicies take precedence)
    .networking.mesh.gloo.solo.io.TrafficPolicySpec.MTLS mtls = 1;

    // Configure Gloo Mesh networking to communicate with one or more external gRPC NetworkingExtensions servers.
    // Updates will be applied by the servers in the order they are listed (servers towards the end of the list take precedence).
    // Note: Extension Servers have full write access to the output objects written by Gloo Mesh.
    repeated GrpcServer networking_extension_servers = 2;

    // Settings specific to the discovery controller.
    DiscoverySettings discovery = 3;

    // Enable and configure use of Relay to communicate with remote clusters.
    // This is an Enterprise-only feature.
    RelaySettings relay = 4;

}

// Relay provides a way for connecting Gloo Mesh to remote Kubernetes Clusters
// without the need to share credentials and access to remote Kube API Servers
// from the management cluster (the Gloo Mesh controllers).
//
// Relay instead uses a streaming gRPC API to pass discovery data
// from remote clusters to the management cluster, and push
// configuration from the management cluster to the remote clusters.
//
// Architecturally, it includes a Relay-agent which is installed to remote Kube clusters at
// registration time, which then connects directly to the Relay Server in the management cluster.
// to push its discovery data and pull its mesh configuration.
//
// RelaySettings contains options for configuring Gloo Mesh to use Relay for cluster management.
//
// To configure Gloo Mesh to use Relay, make sure to read the
// [Installation guide for use with Relay]({{< versioned_link_path fromRoot="/guides/setup/insatll_gloo_mesh" >}}) and
// [Cluster Registration guide for use with Relay]({{< versioned_link_path fromRoot="/guides/setup/register_cluster" >}}).
message RelaySettings {
    // enable the use of Relay for cluster management.
    // If relay is enabled, make sure to follow the [Cluster Registration guide for Relay]({{< versioned_link_path fromRoot="/guides/setup/register_cluster#relay" >}})
    // for registering your clusters.
    bool enabled = 1;

    // Connection info for the Relay Server. Gloo Mesh will fetch discovery resources from this server
    // and push translated outputs to this server.
    // Note: currently this field has no effect as the relay server runs in-process of the networking pod.
    GrpcServer server = 2;
}

message DiscoverySettings {
    // Istio-specific discovery settings
    Istio istio = 1;

    message Istio {
        // Ingress gateway detectors for each cluster. The key to the map is either a k8s cluster name or the wildcard
        // `*` meaning all clusters. If an entry is found for a given cluster, it will be used. Otherwise, the
        // wildcard entry will be used if it exists. Lastly, we will fall back to the default values.
        map<string, IngressGatewayDetector> ingress_gateway_detectors = 1;

        // Workload labels and TLS port name used during discovery to detect ingress gateways for a mesh.
        message IngressGatewayDetector {
            // The workload labels used during discovery to detect ingress gateways for a mesh.
            // If not specified, will default to `{"istio": "ingressgateway"}`.
            map<string, string> gateway_workload_labels = 1;

            // The name of the TLS port used to detect ingress gateways. Services must have a port with this name
            // in order to be recognized as an ingress gateway during discovery.
            // If not specified, will default to `tls`.
            string gateway_tls_port_name = 2;
        }
    }
}

// Options for connecting to an external gRPC server
message GrpcServer {
    // TCP address of the gRPC Server (including port)
    string address = 1;

    // Communicate over HTTP rather than HTTPS
    bool insecure = 2;

    // Instruct Gloo Mesh to automatically reconnect to the server on network failures
    bool reconnect_on_network_failures = 3;
}

message SettingsStatus {
    // The most recent generation observed in the the Settings metadata.
    // If the observedGeneration does not match generation, the controller has not processed the most
    // recent version of this resource.
    int64 observed_generation = 1;

    // The state of the overall resource.
    // It will only show accepted if no processing errors encountered.
    .networking.mesh.gloo.solo.io.ApprovalState state = 2;

    // Any errors encountered while processing Settings object.
    repeated string errors = 3;
}
