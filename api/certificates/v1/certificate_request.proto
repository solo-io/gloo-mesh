syntax = "proto3";
package certificates.mesh.gloo.solo.io;
option go_package = "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1";

import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;

/*
    CertificateRequests are generated by the Gloo Mesh agent installed on managed clusters.
    They are used to request a signed certificate from the certificate issuer (the Gloo Mesh server) based on a private key
    generated by the agent (which never leaves the managed cluster).

    When Gloo Mesh creates an IssuedCertificate on a managed cluster, the local Gloo Mesh Agent
    will generate a CertificateRequest corresponding to it.

    Gloo Mesh will then process the certificate signing request contained in the
    `CertificateRequestSpec` and write the signed SSL certificate back as a Kubernetes secret in the managed cluster,
    and update the `CertificateRequestStatus` to point to that secret.
*/
message CertificateRequestSpec {
    // Base64-encoded data for the PKCS#10 Certificate Signing Request issued
    // by the Gloo Mesh agent deployed in the managed cluster, corresponding
    // to the IssuedRequest received by the Gloo Mesh agent.
    bytes certificate_signing_request = 1;
}

message CertificateRequestStatus {

    // The most recent generation observed in the the CertificateRequest metadata.
    // If the `observedGeneration` does not match `metadata.generation`, the issuer has not processed the most
    // recent version of this request.
    int64 observed_generation = 1;

    // Any error observed which prevented the CertificateRequest from being processed.
    // If the error is empty, the request has been processed successfully
    string error = 2;

    // The current state of the CertificateRequest workflow reported by the issuer.
    State state = 3;

    // Possible states in which a CertificateRequest can exist.
    enum State {
        // The CertificateRequest has yet to be picked up by the issuer.
        PENDING = 0;

        // The issuer has replied to the request and the `signedCertificate` and `signingRootCa`
        // status fields will be populated.
        FINISHED = 1;

        // Processing the certificate workflow failed.
        FAILED = 2;
    }

    // The signed intermediate certificate issued by the CA.
    bytes signed_certificate = 4;

    // The root CA used by the issuer to sign the certificate.
    bytes signing_root_ca = 5;
}
