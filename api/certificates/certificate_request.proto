syntax = "proto3";
package certificates.smh.solo.io;
option go_package = "github.com/solo-io/service-mesh-hub/pkg/api/certificates.smh.solo.io/v1alpha2";

import "skv2/api/core/v1/core.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

/*
    CertificateRequests are generated by the CertificateRequesting Agent installed on managed clusters.
    They are used to request a signed certificate from Service Mesh Hub based on a private key
    generated by the Agent (which never leaves the managed cluster).

    When Service Mesh Hub creates an IssuedCertificate on a managed cluster, the local CertificateRequesting Agent
    will generate a CertificateRequest corresponding to it.

    Service Mesh Hub will then process the Certificate Signing Request contained in the
    CertificateRequestSpec, and write the signed SSL certificate back as a secret in the managed cluster,
    and the CertificateRequest Status to point to that secret.
*/
message CertificateRequestSpec {
    // Base64-encoded data for the PKCS#10 Certificate Signing Request issued
    // by the CertificateRequesting Agent living in the managed cluster, corresponding
    // to the IssuedRequest received by the CertificateRequesting Agent.
    bytes certificate_signing_request = 1;
}

message CertificateRequestStatus {

    // The most recent generation observed in the the CertificateRequest metadata.
    // if the observedGeneration does not match generation, the CA has not processed the most
    // recent version of this request.
    int64 observed_generation = 1;

    // any error observed which prevented the CertificateRequest from being processed.
    // if the error is empty, the request has been processed successfully
    string error = 2;

    // the current state of the CertificateRequest workflow,
    // reported by the Issuer.
    State state = 3;

    // possible states in which a CertificateRequest can exist
    enum State {
        // the CertificateRequest has yet to be picked up by the issuer.
        PENDING = 0;

        // the Issuer has replied to the request and the signedCertificate and SigningRootCa
        // status fields will be populated.
        FINISHED = 1;

        // processing the certificate workflow failed.
        FAILED = 2;
    }

    // the signed intermediate certificate issued by the CA
    bytes signed_certificate = 4;

    // the root CA used by the CA to sign the certificate
    bytes signing_root_ca = 5;
}
