syntax = "proto3";
package certificates.smh.solo.io;
option go_package = "github.com/solo-io/service-mesh-hub/pkg/api/certificates.smh.solo.io/v1alpha2";

import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

/*
    IssuedCertificates are used to issue SSL certificates
    to remote Kubernetes clusters from a central (out-of-cluster) Certificate Authority.

    When an IssuedCertificate is created, a certificate is issued to a remote cluster by a central Certificate Authority via
    the following workflow:
    - The Certificate Issuer creates the IssuedCertificate resource on the remote cluster
    - The Certificate Signature Requesting Agent installed to the remote cluster generates
      a Certificate Signing Request and writes it to the status of the IssuedCertificate
    - Finally, the Certificate Issuer generates signed a certificate for the CSR and writes
      it back as Secret in the remote cluster.

    Shared trust can therefore be established across clusters without requiring
    private keys to ever leave the node.
*/
message IssuedCertificateSpec {
    /*
         list of hostnames and IPs to generate a certificate for.
         This can also be set to the identity running the workload,
         like kubernetes service account.

         Generally for an Istio CA this will take the form `spiffe://cluster.local/ns/istio-system/sa/citadel`.

         "cluster.local" may be replaced by the root of trust domain for the mesh.
     */
    repeated string hosts = 1;

    // Organization for this certificate.
    string org = 2;

    // the secret containing the SSL certificate to be generated for this IssuedCertificate
    .core.skv2.solo.io.ObjectRef secret_ref = 3;
}

// the IssuedCertificate status is written by the CertificateRequesting agent
message IssuedCertificateStatus {

    // The most recent generation observed in the the IssuedCertificate metadata.
    // if the observedGeneration does not match generation, the Certificate Requesting Agent has not processed the most
    // recent version of this IssuedCertificate.
    int64 observed_generation = 1;

    // any errors observed which prevented the IssuedCertificate from being processed.
    // if errors is empty, the request has been processed successfully
    repeated string errors = 2;

    // the name of the CertificateRequest containing the Certificate Signing Request,
    // generated for the IssuedCertificate.
    string certificate_request_name = 3;
}
