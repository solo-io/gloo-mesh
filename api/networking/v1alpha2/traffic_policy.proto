syntax = "proto3";
package networking.smh.solo.io;
option go_package = "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha2";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

import "skv2/api/core/v1/core.proto";
import "service-mesh-hub/api/networking/v1alpha2/http.proto";
import "service-mesh-hub/api/networking/v1alpha2/selectors.proto";
import "service-mesh-hub/api/networking/v1alpha2/validation_state.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

/*
    A Traffic Policy applies some L7 routing features to an existing mesh.
    Traffic Policies specify the following for all requests:
    - originating from from **source workload**
    - sent to **destination targets**
    - matching one or more **request matcher**

    NB: If any additional TrafficPolicy action fields (i.e. non selection related fields) are added,
    the TrafficPolicy Merger's "AreTrafficPolicyActionsEqual" method must be updated to reflect the new field.
*/
message TrafficPolicySpec {

    /*
        Requests originating from these workloads will have the rule applied.
        Leave empty to have all workloads in the mesh apply these rules.

        Note: Source Selectors are ignored when TrafficPolicies are
        applied to pods in a Linkerd mesh. TrafficPolicies will apply to
        all selected destinations in Linkerd, regardless of the source.

        Note: If using the ServiceSelector.Matcher, specifying clusters is currently not supported in Istio.
    */
    repeated WorkloadSelector source_selector = 1;

    /*
        Requests destined for these k8s services will have the rule applied.
        Leave empty to apply to all destination k8s services in the mesh.
    */
    repeated ServiceSelector destination_selector = 2;

    /*
        If specified, this rule will only apply to http requests matching these conditions.
        Within a single matcher, all conditions must be satisfied for a match to occur.
        Between matchers, at least one matcher must be satisfied for the TrafficPolicy to apply.
        NB: Linkerd only supports matching on Request Path and Method.
    */
    repeated HttpMatcher http_request_matchers = 3;

    /*
        Enables traffic shifting, i.e. to reroute requests to a different service,
        to a subset of pods based on their label, and/or split traffic between multiple services.
    */
    MultiDestination traffic_shift = 4;

    // Enable fault injection on requests.
    FaultInjection fault_injection = 5;

    // Set a timeout on requests.
    google.protobuf.Duration request_timeout = 6;

    // Set a retry policy on requests.
    RetryPolicy retries = 7;

    /*
        Set a Cross-Origin Resource Sharing policy (CORS) for requests. Refer to
        https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
        for further details about cross origin resource sharing.
    */
    CorsPolicy cors_policy = 8;

    // Mirror HTTP traffic to a another destination. Traffic will still be sent to its original destination as normal.
    Mirror mirror = 9;

    // Manipulate request and response headers.
    HeaderManipulation header_manipulation = 10;

    /*
        Configure outlier detection on the targeted services.
        Setting this field requires an empty source_selector because it must apply to all traffic.
    */
    OutlierDetection outlier_detection = 11;

    /*
        RetryPolicy contains mesh-specific retry configuration.
        Different meshes support different Retry features.
        Service Mesh Hub's RetryPolicy exposes config for multiple meshes simultaneously,
        allowing the same TrafficPolicy to apply retries to different mesh types.
        The configuration applied to the target mesh will use the corresponding
        config for each type, while other config types will be ignored.
    */
    message RetryPolicy {
        // Number of retries for a given request
        int32 attempts = 1;

        // Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE >=1ms.
        google.protobuf.Duration per_try_timeout = 2;
    }

    message MultiDestination {
        message WeightedDestination {

            // A traffic shift destination which lives in kubernetes.
            message KubeDestination {
                // The name of the destination service.
                string name = 1;

                // The namespace of the destination service.
                string namespace = 2;

                // The cluster of the destination k8s service (as it is registered with Service Mesh Hub).
                string cluster_name = 3;

                // Subset routing is currently only supported on Istio.
                map<string, string> subset = 4;

                // Port on the destination k8s service to receive traffic. Required if the service exposes more than one port.
                uint32 port = 5;
            }

            // The different destination types can be selected for a traffic shift.
            oneof destination_type {
                // The use kubeService to shift traffic a Kubernetes Service/subset.
                KubeDestination kube_service = 1;

                // A traffic shift destination targeting a FailoverService.
                .core.skv2.solo.io.ObjectRef failover_service_ref = 3;
            }

            // Weights across all of the destinations must sum to 100. Each is interpreted as a percent from 0-100.
            uint32 weight = 2;

        }

        // A traffic shift destination.
        repeated WeightedDestination destinations = 1;
    }

    /*
        FaultInjection can be used to specify one or more faults to inject
        while forwarding http requests to the destination specified in a route.
        Faults include aborting the Http request from downstream service, and/or delaying
        proxying of requests. A fault rule MUST HAVE delay or abort.
    */
    message FaultInjection {

        oneof fault_injection_type {
            /*
                Delay requests before forwarding, emulating various failures such as
                network issues, overloaded upstream service, etc.
            */
            Delay delay = 1;

            /*
                Abort Http request attempts and return error codes back to downstream
                service, giving the impression that the upstream service is faulty.
            */
            Abort abort = 2;
        }

        /*
            The _fixedDelay_ field is used to indicate the amount of delay in seconds.
            The optional _percentage_ field can be used to only delay a certain
            percentage of requests. If left unspecified, all request will be delayed.
        */
        message Delay {
            oneof http_delay_type {
                /*
                    Add a fixed delay before forwarding the request. Format:
                    1h/1m/1s/1ms. MUST be >=1ms.
                */
                google.protobuf.Duration fixed_delay = 2;

                // $hide_from_docs
                google.protobuf.Duration exponential_delay = 3;
            }
        }

        /*
            The _httpStatus_ field is used to indicate the HTTP status code to
            return to the caller. The optional _percentage_ field can be used to only
            abort a certain percentage of requests. If not specified, all requests are
            aborted.
        */
        message Abort {

            oneof error_type {
                // REQUIRED. HTTP status code to use to abort the Http request.
                int32 http_status = 4;
            }
        }

        // Percentage of requests to be faulted with the error code provided. Values range between 0 and 100
        double percentage = 5;
    }

    // Manipulate request and response headers.
    message HeaderManipulation {
        // HTTP headers to remove before returning a response to the caller.
        repeated string remove_response_headers = 12;

        // Additional HTTP headers to add before returning a response to the caller.
        map<string, string> append_response_headers = 13;

        // HTTP headers to remove before forwarding a request to the destination service.
        repeated string remove_request_headers = 14;

        // Additional HTTP headers to add before forwarding a request to the destination service.
        map<string, string> append_request_headers = 15;
    }

    message CorsPolicy {
        /*
            String patterns that match allowed origins.
            An origin is allowed if any of the string matchers match.
            If a match is found, then the outgoing Access-Control-Allow-Origin would be set to the origin as provided by the client.
        */
        repeated StringMatch allow_origins = 7;

        /*
            List of HTTP methods allowed to access the resource. The content will
            be serialized into the Access-Control-Allow-Methods header.
        */
        repeated string allow_methods = 2;

        /*
            List of HTTP headers that can be used when requesting the
            resource. Serialized to Access-Control-Allow-Headers header.
        */
        repeated string allow_headers = 3;

        /*
            A white list of HTTP headers that the browsers are allowed to
            access. Serialized into Access-Control-Expose-Headers header.
        */
        repeated string expose_headers = 4;

        /*
            Specifies how long the results of a preflight request can be
            cached. Translates to the `Access-Control-Max-Age` header.
        */
        google.protobuf.Duration max_age = 5;

        /*
            Indicates whether the caller is allowed to send the actual request
            (not the preflight) using credentials. Translates to
            `Access-Control-Allow-Credentials` header.
        */
        google.protobuf.BoolValue allow_credentials = 6;
    }

    // Parameters for matching routes. All specified conditions must be satisfied for a match to occur.
    message HttpMatcher {
        oneof path_specifier {
            /*
                If specified, the route is a prefix rule meaning that the prefix must
                match the beginning of the *:path* header.
            */
            string prefix = 1;

            /*
                If specified, the route is an exact path rule meaning that the path must
                exactly match the *:path* header once the query string is removed.
            */
            string exact = 2;

            /*
                If specified, the route is a regular expression rule meaning that the
                regex must match the *:path* header once the query string is removed. The entire path
                (without the query string) must match the regex. The rule will not match if only a
                sub-sequence of the *:path* header matches the regex. The regex grammar is defined `here
                <http://en.cppreference.com/w/cpp/regex/ecmascript>`_.
            */
            string regex = 3;
        }

        // Specifies a set of headers which requests must match in entirety (all headers must match).
        repeated HeaderMatcher headers = 6;

        /*
            Specifies a set of URL query parameters which requests must match in entirety (all query params must match).
            The router will check the query string from the *path* header against all the specified query parameters
        */
        repeated QueryParameterMatcher query_parameters = 7;

        // HTTP Method/Verb to match on. If none specified, the matcher will ignore the HTTP Method
        HttpMethod method = 8;
    }

    /*
        Describes how to match a given string in HTTP headers. Match is
        case-sensitive.
    */
    message StringMatch {
        oneof match_type {

            // Exact string match.
            string exact = 1;

            // Prefix-based match.
            string prefix = 2;

            // ECMAscript style regex-based match.
            string regex = 3;
        }
    }

    message HeaderMatcher {
        // Specifies the name of the header in the request.
        string name = 1;

        /*
            Specifies the value of the header. If the value is absent a request that
            has the name header will match, regardless of the header’s value.
        */
        string value = 2;

        // Specifies whether the header value should be treated as regex or not.
        bool regex = 3;

        /*
            If set to true, the result of the match will be inverted. Defaults to false.

            Examples:
            * name=foo, invert_match=true: matches if no header named `foo` is present
            * name=foo, value=bar, invert_match=true: matches if no header named `foo` with value `bar` is present
            * name=foo, value=``\d{3}``, regex=true, invert_match=true: matches if no header named `foo` with a value consisting of three integers is present
        */
        bool invert_match = 4;
    }

    /*
        Query parameter matching treats the query string of a request's :path header
        as an ampersand-separated list of keys and/or key=value elements.
    */
    message QueryParameterMatcher {
        /*
            Specifies the name of a key that must be present in the requested
            *path*'s query string.
        */
        string name = 1;

        /*
            Specifies the value of the key. If the value is absent, a request
            that contains the key in its query string will match, whether the
            key appears with a value (e.g., "?debug=true") or not (e.g., "?debug")
        */
        string value = 2;

        /*
            Specifies whether the query parameter value is a regular expression.
            Defaults to false. The entire query parameter value (i.e., the part to
            the right of the equals sign in "key=value") must match the regex.
            E.g., the regex "\d+$" will match "123" but not "a123" or "123a".
        */
        bool regex = 3;
    }

    message Mirror {
        // Different destination types can be selected mirroring traffic.
        oneof destination_type {
            // Name/namespace/cluster of a kubernetes service.
            .core.skv2.solo.io.ClusterObjectRef kube_service = 1;
        }

        /*
            Percentage of traffic to mirror. If absent, 100% will be mirrored.
            Values range between 0 and 100
        */
        double percentage = 2;
        // Port on the destination k8s service to receive traffic. If multiple are found, and none are specified,
        // then the configuration will be considered invalid.
        uint32 port = 3;
    }

    // Express an optional HttpMethod by wrapping it in a nillable message.
    message HttpMethod {
        networking.smh.solo.io.HttpMethodValue method = 1;
    }

    /*
        Configure outlier detection settings on targeted services. If set, source selectors must be empty.
        Outlier detection settings apply to all incoming traffic.
    */
    message OutlierDetection {
        // Number of errors before a host is ejected from the connection pool. Defaults to 5.
        uint32 consecutive_errors = 1;

        // Time interval between ejection sweep analysis. Format: 1h/1m/1s/1ms. MUST BE >=1ms. Defaults to 10s.
        google.protobuf.Duration interval = 2;

        // Minimum ejection duration. Format: 1h/1m/1s/1ms. MUST BE >=1ms. Defaults to 30s.
        google.protobuf.Duration base_ejection_time = 3;
    }
}

message TrafficPolicyStatus {

    // The most recent generation observed in the the TrafficPolicy metadata.
    // if the observedGeneration does not match generation, the controller has not received the most
    // recent version of this resource.
    int64 observed_generation = 1;

    // The state of the overall resource.
    // It will only show accepted if it has been successfully
    // applied to all target meshes.
    ApprovalState state = 2;

    // The status of the TrafficPolicy for each TrafficTarget to which it has been applied.
    // A TrafficPolicy may be Accepted for some TrafficTargets and rejected for others.
    map<string, ApprovalStatus> traffic_targets = 3;
}
