syntax = "proto3";
package networking.smh.solo.io;
option go_package = "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha2";

import "service-mesh-hub/api/networking/v1alpha2/http.proto";
import "service-mesh-hub/api/networking/v1alpha2/selectors.proto";
import "service-mesh-hub/api/networking/v1alpha2/validation_state.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

/*
    Access control policies apply ALLOW policies to communication in a mesh.
    Access control policies specify the following:
    ALLOW those requests that: originate from from **source workload**, target the **destination target**,
    and match the indicated request criteria (allowed_paths, allowed_methods, allowed_ports).
    Enforcement of access control is determined by the
    [VirtualMesh's GlobalAccessPolicy]({{% versioned_link_path fromRoot="/reference/api/virtual_mesh/#networking.smh.solo.io.VirtualMeshSpec.GlobalAccessPolicy" %}})
*/
message AccessPolicySpec {
    /*
        Requests originating from these pods will have the rule applied.
        Leave empty to have all pods in the mesh apply these policies.

        Note that access control policies are mapped to source pods by their
        service account. If other pods share the same service account,
        this access control rule will apply to those pods as well.

        For fine-grained access control policies, ensure that your
        service accounts properly reflect the desired
        boundary for your access control policies.
    */
    repeated IdentitySelector source_selector = 2;

    /*
        Requests destined for these pods will have the rule applied.
        Leave empty to apply to all destination pods in the mesh.
    */
    repeated ServiceSelector destination_selector = 3;

    /*
        Optional. A list of HTTP paths or gRPC methods to allow.
        gRPC methods must be presented as fully-qualified name in the form of
        "/packageName.serviceName/methodName" and are case sensitive.
        Exact match, prefix match, and suffix match are supported for paths.
        For example, the path "/books/review" matches
        "/books/review" (exact match), "*books/" (suffix match), or "/books*" (prefix match).

        If not specified, allow any path.
    */
    repeated string allowed_paths = 4;

    /*
        Optional. A list of HTTP methods to allow (e.g., "GET", "POST").
        It is ignored in gRPC case because the value is always "POST".
        If not specified, allows any method.
    */
    repeated networking.smh.solo.io.HttpMethodValue allowed_methods = 5;

    /*
        Optional. A list of ports which to allow.
        If not set any port is allowed.
    */
    repeated uint32 allowed_ports = 6;
}

message AccessPolicyStatus {
    // The most recent generation observed in the the AccessPolicy metadata.
    // If the observedGeneration does not match generation, the controller has not received the most
    // recent version of this resource.
    int64 observed_generation = 1;

    // The state of the overall resource.
    // It will only show accepted if it has been successfully
    // applied to all target meshes.
    ApprovalState state = 2;

    // The status of the AccessPolicy for each TrafficTarget to which it has been applied.
    // An AccessPolicy may be Accepted for some TrafficTargets and rejected for others.
    map<string, ApprovalStatus> traffic_targets = 3;

    // The list of Workloads to which this policy has been applied.
    repeated string workloads = 4;
}
