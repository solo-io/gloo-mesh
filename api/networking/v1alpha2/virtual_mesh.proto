syntax = "proto3";
package networking.smh.solo.io;
option go_package = "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha2";

import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "service-mesh-hub/api/networking/v1alpha2/validation_state.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

// A VirtualMesh represents a logical grouping of meshes for
// shared configuration and cross-mesh interoperability.
//
// VirtualMeshes are used to configure things like shared trust roots (for mTLS)
// and federation of services (for cross-cluster networking).
//
// Currently, VirtualMeshes can only be constructed from Istio
// meshes.
message VirtualMeshSpec {

    // The meshes contained in this virtual mesh.
    repeated .core.skv2.solo.io.ObjectRef meshes = 1;

    // Configuration options for managing Mutual-TLS mTLS in a virtual mesh.Sets
    // a shared Certificate Authority across the defined meshes.
    MTLSConfig mtls_config = 2;

    // Determine how to expose services to cross-mesh traffic using Service Federation.
    Federation federation = 3;

    // Sets an Access Policy for the whole mesh.
    GlobalAccessPolicy global_access_policy = 4;

    // Mutual TLS Config for a Virtual Mesh.
    // This includes options for configuring Mutual TLS within an indvidual mesh, as
    // well as enabling mTLS across Meshes by establishing cross-mesh trust.
    message MTLSConfig {

        // Select a trust model in order to establish trust between mTLS-secured meshes.
        oneof trust_model {
            // Shared trust
            SharedTrust shared = 1;
            LimitedTrust limited = 2;
        }

        // Allow Service Mesh Hub to restart mesh pods when certificates are rotated.
        // If this option is not explicitly enabled,
        // users must restart the pods manually for the new certificates to be picked up.
        // `meshctl` provides the command `meshctl mesh restart` to simplify this process.
        bool auto_restart_pods = 3;

        /*
            Shared trust is a virtual mesh trust model requiring a shared root certificate, as well as shared identity
            between all entities which wish to communicate within the virtual mesh.

            The best current example of this would be the replicated control planes example from Istio:
            https://preliminary.istio.io/docs/setup/install/multicluster/gateways/
        */
        message SharedTrust {
            // Configure a Root Certificate Authority which will be shared by the
            // members of the virtual mesh.
            // If this is not provided, a self-signed certificate will be used
            // by Service Mesh Hub to establish shared trust for the purposes of failover and federation.
            RootCertificateAuthority root_certificate_authority = 1;
        }

        /*
            Limited trust is a virtual mesh trust model which does not require all meshes sharing the same root certificate
            or identity model. But rather, the limited trust creates trust between meshes running on different clusters
            by connecting their ingress/egress gateways with a common cert/identity. In this model all requests
            between different have the following request path when communicating between clusters

                            cluster 1 MTLS               shared MTLS                  cluster 2 MTLS
            client/workload <-----------> egress gateway <----------> ingress gateway <--------------> server

            This approach has the downside of not maintaining identity from client to server, but allows for ad-hoc
            addition of additional clusters into a virtual mesh.
        */
        message LimitedTrust {}

    }

    // RootCertificateAuthority defines parameters for configuring the
    // root CA for a Virtual Mesh.
    message RootCertificateAuthority {

        // Select a source for the Root CA data which Service Mesh Hub will use for the Virtual Mesh.
        oneof ca_source {
            // Generate a self-signed root certificate with the given options.
            SelfSignedCert generated = 1;

            // Use a root certificate provided in a Kubernetes Secret.
            // [Secrets provided in this way must follow a specified format, documented here.]({{% versioned_link_path fromRoot="/guides/federate_identity/" %}})
            .core.skv2.solo.io.ObjectRef secret = 2;
        }

        /*
            Configuration for generating a self-signed root certificate.
            Uses the X.509 format, RFC5280
        */
        message SelfSignedCert {
            // Number of days before root cert expires. Defaults to 365.
            uint32 ttl_days = 1;
            // Size in bytes of the root cert's private key. Defaults to 4096
            uint32 rsa_key_size_bytes = 2;
            // Root cert organization name. Defaults to "service-mesh-hub"
            string org_name = 3;
        }
    }

    // In Service Mesh Hub, Federation refers to the ability
    // to expose services on with a global DNS name
    // for traffic originating from any service within the
    // virtual mesh.
    message Federation {
        // The "mode" in which to federate services within this virtual mesh.
        oneof mode {
            // Select permissive mode to expose all services in a
            // VirtualMesh to cross-cluster traffic from all workloads
            // in that Virtual Mesh.
            .google.protobuf.Empty permissive = 1;
        };
    }

    /*
        If ENABLED, by default disallow traffic to all Services in the VirtualMesh unless explicitly allowed through AccessControlPolicies.
        If DISABLED, by default allow traffic to all Services in the VirtualMesh.
        If MESH_DEFAULT, the default value depends on the type service mesh:
            Istio: false
            Appmesh: true
    */
    enum GlobalAccessPolicy {
        MESH_DEFAULT = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

}

message VirtualMeshStatus {

    // The most recent generation observed in the the TrafficPolicy metadata.
    // if the observedGeneration does not match generation, the controller has not received the most
    // recent version of this resource.
    int64 observed_generation = 1;

    // the state of the overall resource.
    // will only show accepted if it has been successfully
    // applied to all target meshes.
    ApprovalState state = 2;

    // The status of the VirtualMesh for each Mesh to which it has been applied.
    // A TrafficPolicy may be Accepted for some Meshes and rejected for others.
    map<string, ApprovalStatus> meshes = 3;

    //    // Status of the process writing federation decision metadata onto MeshServices.
    //    core.smh.solo.io.Status federation_status = 1;
    //
    //    // Status of the process signing CSRs.
    //    core.smh.solo.io.Status certificate_status = 2;
    //
    //    // Overall validation status of this VirtualMesh.
    //    core.smh.solo.io.Status config_status = 3;
    //
    //    // Status of ensuring that access control is enforced within this VirtualMesh.
    //    core.smh.solo.io.Status access_control_enforcement_status = 4;
}
