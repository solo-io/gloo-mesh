syntax = "proto3";
package extauth.networking.mesh.gloo.solo.io;
option go_package = "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1/extauth";

import "google/protobuf/duration.proto";
import "github.com/solo-io/skv2/api/core/v1/core.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;

// Enterprise-Only: Configure the Extauth Filter on a Gateway
message GatewayExtauth {
  // The location of the envoy external authentication service to ask about auth decisions
  EnvoyExternalAuthorizationProvider extauthz_provider = 1;

  message EnvoyExternalAuthorizationProvider {

    oneof provider_type {
      // in the future we may want to allow users more control over the location of the extauth service;
      // e.g. outside the mesh to avoid extra latency on the request path (at the expense of more configuration
      // burden on the user).
      InMeshProvider mesh_provider = 1;
    }

    // similar to https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-ExtensionProvider-EnvoyExternalAuthorizationGrpcProvider
    message InMeshProvider {
      // if left empty, defaults to 'ext-auth-service.$GATEWAY_NAMESPACE.svc.cluster.local'
      string service = 1;
      // NOTE: if the port is customized in the ext-auth-service subchart via the `.Values.extAuth.service.grpcPort`
      // helm value then this value MUST be updated to match.
      // if left empty, defaults to 8083.
      uint32 port = 2;
    }
  }

  // If this is set, communication to the upstream will be via HTTP and not GRPC.
  HttpService http_service = 2;

  // TODO(kdorosh): add sanitize as follow up to MVP
  // If the auth server trusted id of the user, it will be set in this header.
  // Specifically this means that this header will be sanitized form the incoming request.
  // string user_id_header = 3;

  // Timeout for the ext auth service to respond. Defaults to 200ms
  google.protobuf.Duration request_timeout = 4;

  // In case of a failure or timeout querying the auth server, normally a request is denied.
  // if this is set to true, the request will be allowed.
  bool failure_mode_allow = 5;

  // Set this if you also want to send the body of the request, and not just the headers.
  BufferSettings request_body = 6;

  // Clears route cache in order to allow the external authorization service to correctly affect
  // routing decisions. Filter clears all cached routes when:
  //
  // 1. The field is set to *true*.
  //
  // 2. The status returned from the authorization service is a HTTP 200 or gRPC 0.
  //
  // 3. At least one *authorization response header* is added to the client request, or is used for
  // altering another client request header.
  //
  bool clear_route_cache = 7;

  // Sets the HTTP status that is returned to the client when there is a network error between the
  // filter and the authorization server. The default status is HTTP 403 Forbidden.
  // If set, this must be one of the following:
  // - 100
  // - 200 201 202 203 204 205 206 207 208 226
  // - 300 301 302 303 304 305 307 308
  // - 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 421 422 423 424 426 428 429 431
  // - 500 501 502 503 504 505 506 507 508 510 511
  uint32 status_on_error = 8;

  // Describes the transport protocol version to use when connecting to the ext auth server.
  enum ApiVersion {
    // Use v3 API.
    V3 = 0;
  }

  // Determines the API version for the `ext_authz` transport protocol that will be used by Envoy
  // to communicate with the auth server. Defaults to `V3`. For more info, see the `transport_api_version` field
  // [here](https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/ext_authz/v3/ext_authz.proto#extensions-filters-http-ext-authz-v3-extauthz).
  ApiVersion transport_api_version = 9;

  // Optional additional prefix to use when emitting statistics.
  // This allows to distinguish emitted statistics between configured ext_authz filters in an HTTP filter chain.
  string stat_prefix = 10;
}

message HttpService {
  // Sets a prefix to the value of authorization request header *Path*.
  string path_prefix = 1;

  message Request {
    // These headers will be copied from the incoming request to the request going
    // to the auth server. Note that in addition to the user's supplied matchers:
    //
    // 1. *Host*, *Method*, *Path* and *Content-Length* are automatically included to the list.
    //
    // 2. *Content-Length* will be set to 0 and the request to the authorization service will not have
    // a message body.
    repeated string allowed_headers = 1;

    // These headers that will be included to the request to authorization service. Note that
    // client request of the same key will be overridden.
    map<string, string> headers_to_add = 2;
  }
  Request request = 2;

  message Response {
    // When this is set, authorization response headers that have a will be added to the original client request and sent to the upstream.
    // Note that coexistent headers will be overridden.
    repeated string allowed_upstream_headers = 1;

    // When this. is set, authorization response headers that will be added to the client's response when auth request is denied.
    // Note that when this list is *not* set, all the authorization response headers, except *Authority
    // (Host)* will be in the response to the client. When a header is included in this list, *Path*,
    // *Status*, *Content-Length*, *WWW-Authenticate* and *Location* are automatically added.
    repeated string allowed_client_headers = 2;
  }
  Response response = 3;
}

// Configuration for buffering the request data.
message BufferSettings {
  // Sets the maximum size of a message body that the filter will hold in memory. Envoy will return
  // *HTTP 413* and will *not* initiate the authorization process when buffer reaches the number
  // set in this field. Note that this setting will have precedence over failure_mode_allow.
  // Defaults to 4KB.
  uint32 max_request_bytes = 1;

  // When this field is true, Envoy will buffer the message until *max_request_bytes* is reached.
  // The authorization request will be dispatched and no 413 HTTP error will be returned by the
  // filter.
  bool allow_partial_message = 2;

  // When this field is true, Envoy will send the body sent to the external authorization service with raw bytes.
  bool pack_as_bytes = 3;
}

// Extauth configuration for a Route or TrafficPolicy. Configures extauth for individual HTTP routes
message RouteExtauth {
  oneof spec {
    //  Set to true to disable auth on the route.
    bool disable = 1;
    // A reference to an AuthConfig. This is used to configure the Gloo Mesh Gateway extauth server.
    .core.skv2.solo.io.ObjectRef config_ref = 2;
    // TODO(kdorosh): add CustomAuth as follow up to MVP?
    // Use this field if you are running your own custom extauth server.
    // CustomAuth custom_auth = 3;
  }
}

// TODO(kdorosh): add CustomAuth as follow up to MVP?
//// Gloo Mesh is not expected to configure the ext auth server in this case.
//// This is used with custom auth servers.
//message CustomAuth {
//  // When a request matches the route or traffic policy on which this configuration is defined,
//  // Gloo Mesh will add the given context_extensions to the request that is sent to the external authorization server.
//  // This allows the server to base the auth decision on metadata that you define on the source of the request.
//  //
//  // This attribute is analogous to Envoy's config.filter.http.ext_authz.v2.CheckSettings. See the official
//  // [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/http/ext_authz/v2/ext_authz.proto.html?highlight=ext_authz#config-filter-http-ext-authz-v2-checksettings)
//  // for more details.
//  map<string, string> context_extensions = 1;
//
//  // TODO(kdorosh) re-evaluate if this is needed for MVP
//  // [Enterprise-only]
//  // Only required in the case where multiple auth servers are configured in Settings
//  // This name must match a key in the named_extauth Settings.
//  string name = 2;
//}