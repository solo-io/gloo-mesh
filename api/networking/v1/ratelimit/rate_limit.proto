syntax = "proto3";
package ratelimit.networking.mesh.gloo.solo.io;
option go_package = "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1/ratelimit";

import "github.com/solo-io/gloo-mesh/api/common/v1/refs.proto";

import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;

import "google/protobuf/struct.proto";

import "encoding/protobuf/cue/cue.proto";

import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "github.com/solo-io/solo-apis/api/rate-limiter/v1alpha1/ratelimit.proto";

// Configure the Rate-Limit Filter on a Gateway
message GatewayRateLimit {
    .core.skv2.solo.io.ObjectRef ratelimit_server_ref = 1;
    google.protobuf.Duration request_timeout = 2;

    bool deny_on_fail = 3;

    // Set this is set to true if you would like to rate limit traffic before applying external auth to it.
    // *Note*: When this is true, you will lose some features like being able to rate limit a request based on its auth state
    bool rate_limit_before_auth = 9;
}

// Rate limit configuration for a Route or TrafficPolicy. Configures rate limits for individual HTTP routes
message RouteRateLimit {

    oneof rate_limit_config_type {

        // Config for rate-limiting using simplified (gloo-specific) API
        BasicRateLimit basic = 1;

        // Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
        // supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
        // Configure rate-limit *actions* here, which define how request characteristics get translated into
        // descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
        // their associated limits on the Gloo settings.
        // Only one of `ratelimit` or `rate_limit_configs` can be set.
        AdvancedRateLimit advanced = 2;

        // References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
        // Only one of `ratelimit` or `rate_limit_configs` can be set.
        .common.mesh.gloo.solo.io.ObjectRefList config_refs = 3;
    }

    // Basic rate-limiting API
    message BasicRateLimit {
        // limits for authorized users
        RateLimitRatio authorized_limits = 1;
        // limits for unauthorized users
        RateLimitRatio anonymous_limits = 2;


        // A `RateLimitRatio` specifies the actual ratio of requests that will be permitted when there is a match.
        message RateLimitRatio {

            enum Unit {
                UNKNOWN = 0;
                SECOND = 1;
                MINUTE = 2;
                HOUR = 3;
                DAY = 4;
            }

            Unit unit = 1;

            uint32 requests_per_unit = 2;
        }
    }

    // Use this field if you want to inline the Envoy rate limits for this VirtualHost.
    // Note that this does not configure the rate limit server. If you are running Gloo Enterprise, you need to
    // specify the server configuration via the appropriate field in the Gloo `Settings` resource. If you are
    // running a custom rate limit server you need to configure it yourself.
    message AdvancedRateLimit {

        // Define individual rate limits here. Each rate limit will be evaluated, if any rate limit
        // would be throttled, the entire request returns a 429 (gets throttled)
        repeated RateLimitActions actions = 1;

        // Each action and setAction in the lists maps part of the request (or its context) to a descriptor. The tuple or set of descriptors
        // generated by the provided actions is sent to the rate limit server and matched against rate limit rules.
        // Order matters on provided actions but not on setActions, e.g. the following actions:
        // - actions:
        //   - requestHeaders:
        //      descriptorKey: account_id
        //      headerName: x-account-id
        //   - requestHeaders:
        //      descriptorKey: plan
        //      headerName: x-plan
        // define an ordered descriptor tuple like so: ('account_id', '<x-account-id value>'), ('plan', '<x-plan value>')
        //
        // While the current form matches, the same tuple in reverse order would not match the following descriptor:
        //
        // descriptors:
        // - key: account_id
        //   descriptors:
        //   - key: plan
        //     value: BASIC
        //     rateLimit:
        //       requestsPerUnit: 1
        //       unit: MINUTE
        //  - key: plan
        //    value: PLUS
        //    rateLimit:
        //      requestsPerUnit: 20
        //      unit: MINUTE
        //
        // Similarly, the following setActions:
        // - setActions:
        //   - requestHeaders:
        //      descriptorKey: account_id
        //      headerName: x-account-id
        //   - requestHeaders:
        //      descriptorKey: plan
        //      headerName: x-plan
        // define an unordered descriptor set like so: {('account_id', '<x-account-id value>'), ('plan', '<x-plan value>')}
        //
        // This set would match the following setDescriptor:
        //
        // setDescriptors:
        // - simpleDescriptors:
        //   - key: plan
        //     value: BASIC
        //   - key: account_id
        //  rateLimit:
        //    requestsPerUnit: 20
        //    unit: MINUTE
        //
        // It would also match the following setDescriptor which includes only a subset of the setActions enumerated:
        //
        // setDescriptors:
        // - simpleDescriptors:
        //   - key: account_id
        //  rateLimit:
        //    requestsPerUnit: 20
        //    unit: MINUTE
        //
        // It would even match the following setDescriptor.
        // Any setActions list would match this setDescriptor which has simpleDescriptors omitted entirely:
        //
        // setDescriptors:
        // - rateLimit:
        //    requestsPerUnit: 20
        //    unit: MINUTE
        message RateLimitActions {
            // TODO: come up with descriptive names and comments for these fields
            repeated .ratelimit.api.solo.io.Action actions = 1;
            repeated .ratelimit.api.solo.io.Action set_actions = 2;
        }

    }
}
