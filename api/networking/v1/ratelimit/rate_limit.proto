syntax = "proto3";
package ratelimit.networking.mesh.gloo.solo.io;
option go_package = "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1/ratelimit";


import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;

import "google/protobuf/struct.proto";

import "encoding/protobuf/cue/cue.proto";

import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "github.com/solo-io/solo-apis/api/rate-limiter/v1alpha1/ratelimit.proto";

// Configure the Rate-Limit Filter on a Gateway
message GatewayRateLimit {
    .core.skv2.solo.io.ObjectRef ratelimit_server_ref = 1;
    google.protobuf.Duration request_timeout = 2;

    bool deny_on_fail = 3;

    // Set this is set to true if you would like to rate limit traffic before applying external auth to it.
    // *Note*: When this is true, you will lose some features like being able to rate limit a request based on its auth state
    bool rate_limit_before_auth = 9;
}

// The RateLimitClient specifies either a simplified, abstracted rate limiting model that allows different limits for
// both authorized and anonymous users (Basic) and the ratelimit Actions directly (Advanced).
// The corresponding server config should be set in the RateLimitConfig.
message RateLimitClient {
    oneof config_type {
        AdvancedRateLimit advanced = 1;
        BasicRateLimit basic = 2;
    }

    // Basic rate-limiting API
    message BasicRateLimit {}

    // Use this field if you want to inline the Envoy rate limits.
    // Note that this does not configure the rate limit server. If you are running Gloo Mesh, you need to
    // specify the server configuration via the appropriate field in the Gloo Mesh `RateLimitConfig` resource.
    // If you are running a custom rate limit server you need to configure it yourself.
    message AdvancedRateLimit {

        // Actions specify how the client (Envoy) will compose the descriptors that
        // will be sent to the server to make a rate limiting decision.
        repeated .ratelimit.api.solo.io.RateLimitActions actions = 1;

    }
}

// Rate limit configuration for a Route or TrafficPolicy. Configures rate limits for individual HTTP routes
message RouteRateLimit {

    // RateLimitConfig ref
    .core.skv2.solo.io.ObjectRef ratelimit_config_ref = 1;

    oneof rate_limit_config_type {
        RateLimitClient client = 2;
        .core.skv2.solo.io.ObjectRef ratelimit_client_config_ref = 3;
    }
}
