syntax = "proto3";

package extensions.networking.smh.solo.io;

option go_package = "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/extensions/v1alpha1";

import "service-mesh-hub/api/discovery/v1alpha2/mesh.proto";
import "service-mesh-hub/api/discovery/v1alpha2/traffic_target.proto";
import "service-mesh-hub/api/discovery/v1alpha2/workload.proto";

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

import "networking/v1alpha3/destination_rule.proto";
import "networking/v1alpha3/envoy_filter.proto";
import "networking/v1alpha3/gateway.proto";
import "networking/v1alpha3/service_entry.proto";
import "networking/v1alpha3/sidecar.proto";
import "networking/v1alpha3/virtual_service.proto";
import "networking/v1alpha3/workload_entry.proto";

// NetworkingExtensions provides customizeable patches to Service Mesh Hub-generated configuration.
// Service Mesh Hub uses a NetworkingExtensions client to request optional patches from a pluggable
// NetworkingExtensions server.
// The server can return a set of patches which SMH will apply before writing configuration to the cluster.
service NetworkingExtensions {
    // GetTrafficTargetPatches retrieves desired patches to the set of output Mesh config resources
    // generated for a given SMH TrafficTarget
    rpc GetTrafficTargetPatches (TrafficTargetPatchRequest) returns (PatchList) {
    }

    // GetWorkloadPatches retrieves desired patches to the set of output Mesh config resources
    // generated for a given SMH Workload
    rpc GetWorkloadPatches (WorkloadPatchRequest) returns (PatchList) {
    }

    // GetMeshPatches retrieves desired patches to the set of output Mesh config resources
    // generated for a given SMH Mesh
    rpc GetMeshPatches (MeshPatchRequest) returns (PatchList) {
    }

    // WatchPushNotifications initiates a streaming connection which allows the NetworkingExtensions server
    // to push notifications to Service Mesh Hub telling it to resync its configuration.
    // This allows a NetworkingExtensions server to trigger SMH to resync its state for
    // events triggered by resources not watched by SMH.
    rpc WatchPushNotifications (WatchPushNotificationsRequest) returns (stream PushNotification) {
    }
}

// Request patches to the resources created for a TrafficTarget
message TrafficTargetPatchRequest {
    // the object for which we are requesting patches
    TrafficTargetResource traffic_target = 1;
    // the pre-patch resources generated by SMH for this object for a given discovery resource.
    // provided to the server to perform modifications.
    repeated GeneratedResource generated_resources = 2;
}

// a proto-serializable representation of a TrafficTarget object
message TrafficTargetResource {
    // metadata of the resource
    .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    // the spec of the object
    .discovery.smh.solo.io.TrafficTargetSpec spec = 2;
    // the status of the object
    .discovery.smh.solo.io.TrafficTargetStatus status = 3;
}

// Request patches to the resources created for a Workload
message WorkloadPatchRequest {
    // the object for which we are requesting patches
    WorkloadResource workload = 1;
    // the pre-patch resources generated by SMH for this object for a given discovery resource.
    // provided to the server to perform modifications.
    repeated GeneratedResource generated_resources = 2;
}

// a proto-serializable representation of a Workload object
message WorkloadResource {
    // metadata of the resource
    .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    // the spec of the object
    .discovery.smh.solo.io.WorkloadSpec spec = 2;
    // the status of the object
    .discovery.smh.solo.io.WorkloadStatus status = 3;
}

// Request patches to the resources created for a Mesh
message MeshPatchRequest {
    // the object for which we are requesting patches
    MeshResource mesh = 1;
    // the pre-patch resources generated by SMH for this object for a given discovery resource.
    // provided to the server to perform modifications.
    repeated GeneratedResource generated_resources = 2;
}

// a proto-serializable representation of a Mesh object
message MeshResource {
    // metadata of the resource
    .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    // the spec of the object
    .discovery.smh.solo.io.MeshSpec spec = 2;
    // the status of the object
    .discovery.smh.solo.io.MeshStatus status = 3;
}

// a generated resource can be of any output type supported by SMH.
// the content of the type field should be used to determine
// the type of the output resource.
// TODO(ilackarms): consider parameterizing SMH to allow excluding GeneratedResources from patch requests in the case where an implementer only performs additions (no updates required).
message GeneratedResource {
    // metadata of the resource
    .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    // type of the object.
    oneof type {
        .istio.networking.v1alpha3.DestinationRule destination_rule = 2;
        .istio.networking.v1alpha3.EnvoyFilter envoy_filter = 3;
        .istio.networking.v1alpha3.ServiceEntry service_entry = 4;
        .istio.networking.v1alpha3.VirtualService virtual_service = 5;
        // TODO(ilackarms): add more types here. note that we may need to support non-proto resourecs here in the future,
        // in which case we will probably use a proto Struct to represent the object.
    }
}

// a list of patches to be returned for modifying & adding to the output SMH snapshot
message PatchList {
    // a list of generated resources to be inserted into to the snapshot.
    repeated GeneratedResource patched_resources = 1;
}

// request to initiate push notifications
message WatchPushNotificationsRequest {
}

// triggers a resync of SMH resources
message PushNotification {

}