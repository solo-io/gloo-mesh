syntax = "proto3";
package networking.smh.solo.io;
option go_package = "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha1/types";

import "extproto/ext.proto";
option (extproto.hash_all) = true;
import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "service-mesh-hub/api/core/v1alpha1/ref.proto";
import "service-mesh-hub/api/core/v1alpha1/status.proto";
import "skv2/api/core/v1/core.proto";

/*
    A FailoverService creates a new hostname to which services can send requests.
    Requests will be routed based on a list of backing services ordered by
    decreasing priority. When outlier detection detects that a service in the list is
    in an unhealthy state, requests sent to the FailoverService will be routed
    to the next healthy service in the list. For each service referenced in the
    failover services list, outlier detection must be configured using a TrafficPolicy.

    Currently this feature only supports Services backed by Istio.
*/
message FailoverServiceSpec {
    // The port on which the failover service listens.
    message Port {
        // Port number.
        uint32 port = 1;
        // Protocol of the requests sent to the failover service, must be one of HTTP, HTTPS, GRPC, HTTP2, MONGO, TCP, TLS.
        string protocol = 2;
    }

    /*
        The DNS name of the failover service. Must be unique within the service mesh instance
        since it is used as the hostname with which clients communicate.
    */
    string hostname = 1;

    // The port on which the failover service listens.
    Port port = 2;

    // The meshes that this failover service will be visible to.
    repeated core.skv2.solo.io.ObjectRef meshes = 3;

    /*
        A list of services ordered by decreasing priority for failover.
        All services must be backed by either the same service mesh instance or
        backed by service meshes that are grouped under a common VirtualMesh.
    */
    repeated core.skv2.solo.io.ClusterObjectRef failover_services = 4;
}

message FailoverServiceStatus {
    // An error pertaining to translation of the FailoverService to mesh-specific configuration.
    message TranslatorError {
        // ID representing a translator that translates FailoverService to Mesh-specific config.
        string translator_id = 1;
        // Message describing the error(s).
        string error_message = 2;
    }

    // The generation the validation_status was observed on.
    int64 observed_generation = 1;

    // Whether or not the resource has been successfully translated into concrete, mesh-specific routing configuration.
    core.smh.solo.io.Status translation_status = 2;

    // Provides details on any translation errors that occurred. If any errors exist, this FailoverService has not been translated into mesh-specific config.
    repeated TranslatorError translator_errors = 3;

    // Whether or not this resource has passed validation. This is a required step before it can be translated into concrete, mesh-specific failover configuration.
    core.smh.solo.io.Status validation_status = 4;
}

