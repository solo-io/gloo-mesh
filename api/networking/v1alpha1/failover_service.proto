syntax = "proto3";
package networking.smh.solo.io;
option go_package = "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha1/types";

import "service-mesh-hub/api/core/v1alpha1/ref.proto";
import "service-mesh-hub/api/core/v1alpha1/status.proto";

/*
    This configures an existing service with failover functionality, where in the case of
    an unhealthy service, requests will be shifted over to other services in priority
    order defined in the list of failover services,
    i.e. an unhealthy target_service will cause failover to workloads[0], etc.

    Currently this feature only supports Services backed by Istio.
*/
message FailoverServiceSpec {
    // The service for which to add failover functionality.
    core.smh.solo.io.ResourceRef target_service = 1;

    /*
        A list of services ordered by decreasing priority for failover.
        All services must be controlled by service meshes that are grouped under a common VirtualMesh.
    */
    repeated core.smh.solo.io.ResourceRef failover_services = 2;
}

message FailoverServiceStatus {
    message TranslatorError {
        // ID representing a translator that translates FailoverService to Mesh-specific config.
        string translator_id = 1;
        string error_message = 2;
    }

    // The generation the validation_status was observed on.
    int64 observed_generation = 1;

    // Whether or not the resource has been successfully translated into concrete, mesh-specific routing configuration.
    core.smh.solo.io.Status translation_status = 2;

    // Provides details on any translation errors that occurred. If any errors exist, this FailoverService has not been translated into mesh-specific config.
    repeated TranslatorError translator_errors = 3;

    // Whether or not this resource has passed validation. This is a required step before it can be translated into concrete, mesh-specific failover configuration.
    core.smh.solo.io.Status validation_status = 4;
}

