syntax = "proto3";
package networking.smh.solo.io;
option go_package = "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha1/types";

import "service-mesh-hub/api/core/v1alpha1/ref.proto";
import "service-mesh-hub/api/core/v1alpha1/status.proto";
import "google/protobuf/wrappers.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

message VirtualMeshSpec {
    message CertificateAuthority {
        /*
            Configuration for auto-generated root certificate unique to the VirtualMesh
            Uses the X.509 format, RFC5280
        */
        message Builtin {
            // Number of days before root cert expires. Defaults to 365.
            uint32 ttl_days = 1;
            // Size in bytes of the root cert's private key. Defaults to 4096
            uint32 rsa_key_size_bytes = 2;
            // Root cert organization name. Defaults to "service-mesh-hub"
            string org_name = 3;
        }

        // Configuration for user-provided root certificate.
        message Provided {
            // Reference to a Secret object containing the root certificate.
            core.smh.solo.io.ResourceRef certificate = 3;
        }

        // If omitted, defaults to builtin.
        oneof type {
            // Use auto-generated root certificate.
            Builtin builtin = 1;

            // Use user-provided root certificate.
            Provided provided = 2;
        }
    }

    message Federation {
        enum Mode {
            // All services in a VirtualMesh will be federated to all workloads in that Virtual Mesh.
            PERMISSIVE = 0;
        }

        Mode mode = 1;
    }

    /*
        Shared trust is a virtual mesh trust model requiring a shared root certificate, as well as shared identity
        between all entities which wish to communicate within the virtual mesh.

        The best current example of this would be the replicated control planes example from Istio:
        https://preliminary.istio.io/docs/setup/install/multicluster/gateways/
    */
    message SharedTrust {}

    /*
        Limited trust is a virtual mesh trust model which does not require all meshes sharing the same root certificate
        or identity model. But rather, the limited trust creates trust between meshes running on different clusters
        by connecting their ingress/egress gateways with a common cert/identity. In this model all requests
        between different have the following request path when communicating between clusters

                        cluster 1 MTLS               shared MTLS                  cluster 2 MTLS
        client/workload <-----------> egress gateway <----------> ingress gateway <--------------> server

        This approach has the downside of not maintaining identity from client to server, but allows for ad-hoc
        addition of additional clusters into a virtual mesh.
    */
    message LimitedTrust {}

    /*
        If ENABLED, by default disallow traffic to all Services in the VirtualMesh unless explicitly allowed through AccessControlPolicies.
        If DISABLED, by default allow traffic to all Services in the VirtualMesh.
        If MESH_DEFAULT, the default value depends on the type service mesh:
            Istio: false
            Appmesh: true
    */
    enum EnforcementPolicy {
        MESH_DEFAULT = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

    // User-provided display name for the virtual mesh.
    string display_name = 1;

    // The meshes contained in this virtual mesh.
    repeated core.smh.solo.io.ResourceRef meshes = 2;

    CertificateAuthority certificate_authority = 3;

    Federation federation = 4;

    oneof trust_model {
        SharedTrust shared = 5;
        LimitedTrust limited = 6;
    }

    EnforcementPolicy enforce_access_control = 7;
}

message VirtualMeshStatus {
    // Status of the process writing federation decision metadata onto MeshServices.
    core.smh.solo.io.Status federation_status = 1;

    // Status of the process signing CSRs.
    core.smh.solo.io.Status certificate_status = 2;

    // Overall validation status of this VirtualMesh.
    core.smh.solo.io.Status config_status = 3;

    // Status of ensuring that access control is enforced within this VirtualMesh.
    core.smh.solo.io.Status access_control_enforcement_status = 4;
}
