syntax = "proto3";
package supergloo.solo.io;
option go_package = "github.com/solo-io/supergloo/pkg/api/v1";

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
option (gogoproto.equal_all) = true;

import "gloo/v1/proxy.proto";
import "istio/networking/v1alpha3/virtual_service.proto";

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";

//@solo-kit:resource.short_name=rr
//@solo-kit:resource.plural_name=routingrules
//@solo-kit:resource.resource_groups=translator.supergloo.solo.io
// rules to add features such as Fault Injection and Retries to a mesh
message RoutingRule {
    // Status indicates the validation status of this resource.
    // Status is read-only by clients, and set by gloo during validation
    core.solo.io.Status status = 100 [(gogoproto.nullable) = false, (gogoproto.moretags) = "testdiff:\"ignore\""];

    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 99 [(gogoproto.nullable) = false];

    // target where we apply this rule
    core.solo.io.ResourceRef target_mesh = 1;

    // source upstreams to apply the rule to. if empty, applies to all sources.
    repeated core.solo.io.ResourceRef sources = 2;

    // destination upstreams for which this rule applies. if empty, applies to all destinations
    repeated core.solo.io.ResourceRef destinations = 3;

    // if specified, this rule will only apply to http requests in the mesh matching these parameters
    repeated gloo.solo.io.Matcher request_matchers = 4;

    // configuration to enable traffic shifting, e.g. by percentage or for alternate destinations
    TrafficShifting traffic_shifting = 5;

    // configuration to enable fault injection for this rule
    networking.istio.io.HTTPFaultInjection fault_injection = 6;

    // Timeout for this rule
    google.protobuf.Duration timeout = 7;

    // Retry policy for for this rule
    networking.istio.io.HTTPRetry retries = 8;

    // Cross-Origin Resource Sharing policy (CORS) for this rule. Refer to
    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
    // for further details about cross origin resource sharing.
    networking.istio.io.CorsPolicy cors_policy = 10;

    // Mirror HTTP traffic to a another destination for this rule. Traffic will still be sent
    // to its original destination as normal.
    gloo.solo.io.Destination mirror = 9;

    // manipulate request and response headers for this rule
    HeaderManipulation header_manipulaition = 12;

    // TODO:
    // - outlier detection (for destination) -> must become part of an istio destinationrule
    // - mirror
    // - cors
}

// enable traffic shifting for any http requests sent to one of the destinations on this rule
message TrafficShifting {
    // split traffic between these subsets based on their weights
    // weights should add to 100
    repeated WeightedDestination destinations = 1;
}

// WeightedDestination attaches a weight to a single destination.
message WeightedDestination {
    core.solo.io.ResourceRef upstream = 1;

    // Weight must be greater than zero
    // Routing to each destination will be balanced by the ratio of the destination's weight to the total weight on a route
    uint32 weight = 2;
}

// manipulate request and response headers
message HeaderManipulation {
    // HTTP headers to remove before returning a response to the caller.
    repeated string remove_response_headers = 12;

    // Additional HTTP headers to add before returning a response to the
    // caller.
    map<string, string> append_response_headers = 13;

    // HTTP headers to remove before forwarding a request to the
    // destination service.
    repeated string remove_request_headers = 14;

    // Additional HTTP headers to add before forwarding a request to the
    // destination service.
    map<string, string> append_request_headers = 15;
}

// Percent specifies a percentage in the range of [0.0, 100.0].
message Percent {
    double value = 1;
}
