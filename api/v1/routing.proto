syntax = "proto3";
package supergloo.solo.io;
option go_package = "github.com/solo-io/supergloo/pkg/api/v1";

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
option (gogoproto.equal_all) = true;

import "github.com/solo-io/supergloo/api/v1/selector.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/proxy.proto";
import "istio/networking/v1alpha3/virtual_service.proto";
import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";

// a routing rule applies some L7 routing features to an existing mesh
// routing rules specify the following:
// for all requests:
// - originating from from **source pods**
// - sent to **destination pods**
// - matching one or more **request matcher**
// apply the specified RoutingRuleSpec
message RoutingRule {
    option (core.solo.io.resource).short_name = "rr";
    option (core.solo.io.resource).plural_name = "routingrules";

    // Status indicates the validation status of this resource.
    // Status is read-only by clients, and set by supergloo during validation
    core.solo.io.Status status = 100 [(gogoproto.nullable) = false];

    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 101 [(gogoproto.nullable) = false];

    // target where we apply this rule. this can be a mesh group or an individual mesh
    core.solo.io.ResourceRef target_mesh = 1;

    // requests originating from these pods will have the rule applied
    // leave empty to have all pods in the mesh apply these rules
    //
    // > Note: Source Selectors are ignored when RoutingRules are
    // applied to pods in a Linkerd mesh. RoutingRules will apply to
    // all selected destinations in Linkerd, regardless of the source.
    PodSelector source_selector = 2;

    // requests destined for these pods will have the rule applied
    // leave empty to apply to all destination pods in the mesh
    PodSelector destination_selector = 3;

    // if specified, this rule will only apply to http requests
    // in the mesh matching these parameters
    // note that Linkerd only supports matching on Request Path and Method
    repeated gloo.solo.io.Matcher request_matchers = 4;

    // contains the configuration that will be applied to
    // selected pods within the target mesh(es)
    RoutingRuleSpec spec = 5;
}

// the routing configuration that will be applied to the mesh(es)
message RoutingRuleSpec {

    // a routing rule can have one of several types
    // Note: types imported from istio will be replaced with our own
    // simpler types, this is just a place to start from
    oneof rule_type {

        // enables traffic shifting, i.e. to reroute requests to a different service,
        // to a subset of pods based on their label, and/or split traffic between multiple services
        TrafficShifting traffic_shifting = 1;

        // enable fault injection on requests
        FaultInjection fault_injection = 2;

        // set a timeout on requests
        google.protobuf.Duration request_timeout = 7 [(gogoproto.stdduration) = true];

        // set a retry policy on requests
        RetryPolicy retries = 8;

        // set a Cross-Origin Resource Sharing policy (CORS) for requests. Refer to
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
        // for further details about cross origin resource sharing.
        istio.networking.v1alpha3.CorsPolicy cors_policy = 10;

        // Mirror HTTP traffic to a another destination. Traffic will still be sent
        // to its original destination as normal.
        gloo.solo.io.Destination mirror = 9;

        // manipulate request and response headers
        HeaderManipulation header_manipulation = 12;
    }
}

// RetryPolicy contains mesh-specific retry configuration
// Different meshes support different Retry features
// SuperGloo's RetryPolicy exposes config for multiple meshes simultaneously,
// Allowing the same RoutingRule to apply retries to different mesh types
// The configuration applied to the target mesh will use the corresponding
// config for each type, while other config types will be ignored
message RetryPolicy {
    // retry each failed request until success or max number of retries met
    // this retry policy will be applied to any targeted Istio Mesh Instances
    istio.networking.v1alpha3.HTTPRetry max_retries = 1;

    // allocate a 'retry budget' for each mesh sidecar
    // once the proxy reaches its retry budget limit, it will
    // stop retrying all requests for the given retry window.
    // this can be used to prevent cascading failures when
    // outages cause bursts of retries.
    // this retry policy will be applied to any targeted Linkerd Mesh Instances
    RetryBudget retry_budget = 2;
}

// RetryBudget describes the maximum number of retries that should be issued to
// the destination services. Can only be applied to Linkerd meshes
message RetryBudget {

    // The ratio of additional traffic that may be added by retries.  A
    // retry_ratio of 0.1 means that 1 retry may be attempted for every 10 regular
    // requests.  A retry_ratio of 1.0 means that 1 retry may be attempted for
    // every 1 regular request (in other words, total request load may be doubled
    // as a result of retries).
    float retry_ratio = 1;

    // The proxy may always attempt this number of retries per second, even if it
    // would violate the retryRatio.  This is to allow retries to happen even
    // when the request rate is very low.
    uint32 min_retries_per_second = 2;

    // This duration indicates for how long requests should be considered for the
    // purposes of enforcing the retryRatio.  A higher value considers a larger
    // window and therefore allows burstier retries.
    google.protobuf.Duration ttl = 3 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];
}

// requests for this rule will be routed to these destinations
message TrafficShifting {
    // split traffic between these subsets based on their weights
    // weights are relative to the sum of the weights
    gloo.solo.io.MultiDestination destinations = 1;
}

// FaultInjection can be used to specify one or more faults to inject
// while forwarding http requests to the destination specified in a route.
// Faults include aborting the Http request from downstream service, and/or delaying
// proxying of requests. A fault rule MUST HAVE delay or abort.
message FaultInjection {

    oneof fault_injection_type {
        // Delay requests before forwarding, emulating various failures such as
        // network issues, overloaded upstream service, etc.
        Delay delay = 1;

        // Abort Http request attempts and return error codes back to downstream
        // service, giving the impression that the upstream service is faulty.
        Abort abort = 2;
    }

    // The _fixedDelay_ field is used to indicate the amount of delay in seconds.
    // The optional _percentage_ field can be used to only delay a certain
    // percentage of requests. If left unspecified, all request will be delayed.
    message Delay {

        // duration of delay, matches golang duration spec
        google.protobuf.Duration duration = 3 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];

        // type of delay based on the enum below
        Type delay_type = 6;

        // types of delays available, currently only fixed is supported
        enum Type {
            FIXED = 0;
            // EXPONENTIAL = 1;
        }

    }

    // The _httpStatus_ field is used to indicate the HTTP status code to
    // return to the caller. The optional _percentage_ field can be used to only
    // abort a certain percentage of requests. If not specified, all requests are
    // aborted.
    message Abort {

        oneof error_type {
            // REQUIRED. HTTP status code to use to abort the Http request.
            int32 http_status = 4;
        }
    }

    // Percentage of requests to be faulted with the error code provided.
    // Values range between 0 and 100
    double percentage = 5;
}

// manipulate request and response headers
message HeaderManipulation {
    // HTTP headers to remove before returning a response to the caller.
    repeated string remove_response_headers = 12;

    // Additional HTTP headers to add before returning a response to the
    // caller.
    map<string, string> append_response_headers = 13;

    // HTTP headers to remove before forwarding a request to the
    // destination service.
    repeated string remove_request_headers = 14;

    // Additional HTTP headers to add before forwarding a request to the
    // destination service.
    map<string, string> append_request_headers = 15;
}
