syntax = "proto3";
package discovery.zephyr.solo.io;
option go_package = "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1/types";

import "service-mesh-hub/api/core/v1alpha1/ref.proto";
import "service-mesh-hub/api/core/v1alpha1/status.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

/**
    The MeshService is an abstraction for a service which we have discovered to be part of a
    given mesh. The Mesh object has references to the MeshServices which belong to it.
*/
message MeshServiceSpec {
    message Federation {
        /**
            For any workload that this service has federated to (i.e., any MeshWorkload whose ref appears in `federated_to_workloads`),
            a client in that workload will be able to reach this service at this DNS name. This includes workloads on clusters other than
            the one hosting this service.
        */
        string multicluster_dns_name = 1;

        // The list of MeshWorkloads which are able to resolve this service's `multicluster_dns_name`.
        repeated core.zephyr.solo.io.ResourceRef federated_to_workloads = 2;
    }

    message KubeService {
        message KubeServicePort {
            // external-facing port for this service (i.e., NOT the service's target port on the backing pods)
            uint32 port = 1;
            string name = 2;
            string protocol = 3;
        }

        // A reference to the kube-native service that this MeshService represents.
        core.zephyr.solo.io.ResourceRef ref = 1;

        // Selectors for the set of pods targeted by the k8s Service.
        map<string, string> workload_selector_labels = 2;

        // Labels on the underlying k8s Service itself.
        map<string, string> labels = 3;

        // The ports exposed by the underlying service.
        repeated KubeServicePort ports = 4;
    }

    // Metadata about the kube-native service backing this MeshService.
    KubeService kube_service = 1;

    // The mesh with which this service is associated.
    core.zephyr.solo.io.ResourceRef mesh = 2;

    message Subset {
        repeated string values = 1;
    }

    // Subsets for routing, based on labels.
    map<string, Subset> subsets = 3;

    // Metadata about the decisions that Service Mesh Hub has made about what workloads this service is federated to.
    Federation federation = 4;
}

message MeshServiceStatus {
    // The status of federation artifacts being written to remote clusters as a result of the federation metadata on this object's Spec.
    core.zephyr.solo.io.Status federation_status = 1;
}
