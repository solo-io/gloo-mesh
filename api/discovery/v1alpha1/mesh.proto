syntax = "proto3";
package discovery.zephyr.solo.io;
option go_package = "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1/types";

import "service-mesh-hub/api/core/v1alpha1/ref.proto";
import "google/protobuf/wrappers.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

/*
    Meshes represent a currently registered service mesh.
*/
message MeshSpec {
    message MeshInstallation {
        // Namespace in which the control plane has been installed.
        string installation_namespace = 1;

        /*
            version of the mesh which has been installed
            Note that the version may be "latest"
        */
        string version = 2;
    }

    // Mesh object representing an installed Istio control plane
    message IstioMesh {
        message CitadelInfo {
            /*
                Istio trust domain used for https/spiffe identity.
                https://spiffe.io/spiffe/concepts/#trust-domain
                https://istio.io/docs/reference/glossary/#identity

                If empty will default to "cluster.local"
            */
            string trust_domain = 1;

            /*
                istio-citadel namespace, used to determine identity for the Istio CA cert.
                If empty will default to MeshInstallation.installation_namespace
            */
            string citadel_namespace = 2;

            /*
                istio-citadel service account, used to determine identity for the Istio CA cert.
                If empty will default to "istio-citadel"
            */
            string citadel_service_account = 3;
        }

        MeshInstallation installation = 1;
        CitadelInfo citadel_info = 2;
    }

    // Mesh object representing AWS AppMesh
    message AwsAppMesh {
        // AWS name for the AppMesh instance, must be unique across the AWS account.
        string name = 1;
        // The AWS region the AWS App Mesh control plane resources exist in.
        string region = 2;
        // The AWS Account ID associated with the Mesh. Populated at REST API registration time.
        string aws_account_id = 3;
        // The k8s clusters on which sidecars for this AppMesh instance have been discovered.
        repeated string clusters = 4;
    }

    // Mesh object representing an installed Linkerd control plane
    message LinkerdMesh {
        MeshInstallation installation = 1;

        // The cluster domain suffix this Linkerd mesh is configured with.
        // See https://linkerd.io/2/tasks/using-custom-domain/ for info
        string cluster_domain = 2;
    }

    message ConsulConnectMesh {
        MeshInstallation installation = 1;
    }

    oneof mesh_type {
        IstioMesh istio = 1;
        AwsAppMesh aws_app_mesh = 2;
        LinkerdMesh linkerd = 3;
        ConsulConnectMesh consul_connect = 4;
    }

    /*
        The cluster on which the control plane for this mesh is deployed.
        This field may not apply to all Mesh types, such as AppMesh, whose control planes
        are located externally to any user accessible compute platform.
    */
    core.zephyr.solo.io.ResourceRef cluster = 5;
}

message MeshStatus {

}
