syntax = "proto3";
package common.mesh.gloo.solo.io;
option go_package = "github.com/solo-io/gloo-mesh/pkg/api/common.mesh.gloo.solo.io/v1";

import "github.com/solo-io/skv2/api/core/v1/core.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;

message VaultCA {

	// ca_path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
	// "my_pki_mount/sign/my-role-name".
  string ca_path = 1;

	// ca_path is the mount path of the Vault PKI backend's `generate` endpoint, e.g:
	// "my_pki_mount/intermediate/generate/exported".
  // "exported" is necessary here as istio needs access to the private key
  string csr_path = 2;

  // Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
  string server = 3;

	// PEM encoded CA bundle used to validate Vault server certificate. Only used
	// if the Server URL is using HTTPS protocol. This parameter is ignored for
	// plain HTTP protocol connection. If not set the system root certificates
	// are used to validate the TLS connection.
  bytes ca_bundle = 4;

	// Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
	// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
  string namespace = 5;

  // CommonCertOptions cert_options = 5;
  oneof auth_type {

    // TokenSecretRef authenticates with Vault by presenting a token.
    .core.skv2.solo.io.ObjectRef token_secret_ref = 6;

    // Kubernetes authenticates with Vault by passing the ServiceAccount
    // token stored in the named Secret resource to the Vault server.
    Kubernetes kubernetes_auth = 8;

  }

  message Kubernetes {
    // The Vault mountPath here is the mount path to use when authenticating with
    // Vault. For example, setting a value to `/v1/auth/foo`, will use the path
    // `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
    // default value "/v1/auth/kubernetes" will be used.
    string path = 1;

    // Reference to a service account 
    .core.skv2.solo.io.ObjectRef sa_ref = 2;

    // Key in the token to search for the sa_token
    // Default to "token"
    string secret_token_key = 3;

    // A required field containing the Vault Role to assume. A Role binds a
  	// Kubernetes ServiceAccount with a set of Vault policies.
    string role = 4;
  }

}

// Configuration for generating a self-signed root certificate.
// Uses the X.509 format, RFC5280.
message CommonCertOptions {

  // Number of days before root cert expires. Defaults to 365.
  uint32 ttl_days = 1;

  // Size in bytes of the root cert's private key. Defaults to 4096.
  uint32 rsa_key_size_bytes = 2;

  // Root cert organization name. Defaults to "gloo-mesh".
  string org_name = 3;
}
