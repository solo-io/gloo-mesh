steps:

  # Can create a dep cache by running 'gcloud builds submit . --config=cloudbuild-cache.yaml'
  # These two steps should populate the cache
  - name: gcr.io/cloud-builders/gsutil
    entrypoint: 'bash'
    args: ['-c', 'mkdir -p ./gopath/pkg/dep && gsutil cat gs://solo-public-cache/supergloo/supergloo-dep.tar.gz | tar -xzf -']
    id: 'download-untar-dep-cache'
    waitFor: ['-']

  # Can create a dep cache by running 'gcloud builds submit . --config=cloudbuild-cache.yaml'
  # These two steps should populate the cache
  - name: gcr.io/cloud-builders/gsutil
    entrypoint: 'bash'
    args: ['-c', 'mkdir -p ./gopath/pkg/dep && gsutil cat gs://solo-public-cache/supergloo/supergloo-gocache.tar.gz | tar -xzf -']
    id: 'download-untar-go-cache'
    waitFor: ['-']

  # Run dep to set up the project so it can be built and tested
  # Dep modifies workspace so that the code is moved into the PROJECT_ROOT
  # All steps after this must set GOPATH
  - name: 'gcr.io/$PROJECT_ID/dep:0.1.6'
    args: ['ensure', '-v']
    env:
      - 'PROJECT_ROOT=github.com/solo-io/supergloo'
      - 'GIT_SSH_CONFIG=FALSE'
    id: 'dep'
    waitFor: ['download-untar-dep-cache']

  # Run some basic checks on the repo
  # 1) check formatting of go files
  # 2) ensure that make generated-code produces a clean diff

  # e2e-ginkgo is produced from https://github.com/solo-io/cloud-builders/e2e-ginkgo
  # Must set the GOPATH to tell the container the workspace has already been set up (by the dep step above)
  - name: 'gcr.io/$PROJECT_ID/e2e-ginkgo:0.1.6'
    env:
      - 'PROJECT_ROOT=github.com/solo-io/supergloo'
      - 'GOPATH=/workspace/gopath'
    dir: './gopath/src/github.com/solo-io/supergloo'
    entrypoint: make
    args: ['check-format']
    waitFor: ['dep']
    id: 'check-format'
  - name: 'gcr.io/$PROJECT_ID/go-make:0.1.7'
    entrypoint: 'bash'
    args: ['ci/check-code-and-docs-gen.sh']
    env:
      - 'PROJECT_ROOT=github.com/solo-io/supergloo'
      - 'GOPATH=/workspace/gopath'
      - 'TAGGED_VERSION=$TAG_NAME'
    dir: './gopath/src/github.com/solo-io/supergloo'
    waitFor: ['dep']
    id: 'check-code-and-docs-gen'

  # Helm setup
  # 1) Create directory to sync helm data
  - name: gcr.io/cloud-builders/gsutil
    entrypoint: mkdir
    args: ['-p', './_output/helm']
    dir: './gopath/src/github.com/solo-io/supergloo'
    waitFor: ['dep']
    id: 'make-helm-dir'
  # 2) Fetch supergloo helm repo
  - name: gcr.io/cloud-builders/gsutil
    args:
      - rsync
      - -r
      - gs://supergloo-helm/
      - './_output/helm'
    dir: './gopath/src/github.com/solo-io/supergloo'
    waitFor: ['make-helm-dir']
    id: 'setup-helm'

  # Compile all tests
  - name: 'gcr.io/$PROJECT_ID/e2e-ginkgo:0.1.6'
    env:
      - 'PROJECT_ROOT=github.com/solo-io/supergloo'
      - 'GOPATH=/workspace/gopath'
      - 'BUILD_ID=$BUILD_ID'
      - 'AWS_SHARED_CREDENTIALS_FILE=/workspace/aws_credentials'
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-b'
      - 'CLOUDSDK_CONTAINER_CLUSTER=supergloo-test'
      # we DISABLE interactive tests as they appear to fail our current ci environment
      # tracking with https://github.com/solo-io/supergloo/issues/243
      - 'SKIP_INTERACTIVE_TESTS=1'
    dir: './gopath/src/github.com/solo-io/supergloo'
    args: ['build', '-r', 'cli/pkg', 'pkg', 'test/e2e']
    waitFor: ['setup-helm', 'dep', 'download-untar-go-cache', 'check-code-and-docs-gen']
    id: 'compile-tests'

  # Run unit tests
  - name: 'gcr.io/$PROJECT_ID/e2e-ginkgo:0.1.6'
    env:
      - 'PROJECT_ROOT=github.com/solo-io/supergloo'
      - 'GOPATH=/workspace/gopath'
      - 'BUILD_ID=$BUILD_ID'
      - 'AWS_SHARED_CREDENTIALS_FILE=/workspace/aws_credentials'
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-b'
      - 'CLOUDSDK_CONTAINER_CLUSTER=supergloo-test'
      # we DISABLE interactive tests as they appear to fail our current ci environment
      # tracking with https://github.com/solo-io/supergloo/issues/243
      - 'SKIP_INTERACTIVE_TESTS=1'
    dir: './gopath/src/github.com/solo-io/supergloo'
    entrypoint: sh
    args: ['-c', 'for i in $(find cli pkg | grep "\.test$"); do (cd $(dirname $i); ./$(basename $i) -ginkgo.failFast) ; done']
    waitFor: ['compile-tests']
    id: 'test'

  # setup aws kubeconfig
  - name: 'gcr.io/$PROJECT_ID/awscli:0.1.6'
    args:
      - eks
      - --region=us-east-1
      - update-kubeconfig
      - --name=supergloo-test
    secretEnv: ['AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY']
    waitFor: ['test']
    id: 'aws-kubeconfig-setup'

  # copy aws config
  - name: 'gcr.io/$PROJECT_ID/awscli:0.1.6'
    entrypoint: cp
    args:
      - /builder/home/.kube/config
      - /builder/home/.kube/aws-config
    waitFor: ['aws-kubeconfig-setup']
    id: 'copy-aws-kubeconfig'

    secretEnv: ['AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY']

    # start setting up other kubeconfigs
  - name: gcr.io/cloud-builders/gcloud
    args: ['config', 'set', 'compute/zone', 'us-central1-b']
    id: 'gcloud-compute-zone'
    waitFor: ['copy-aws-kubeconfig']

  - name: gcr.io/cloud-builders/gcloud
    args: ['container', 'clusters', 'get-credentials', 'supergloo-e2e']
    id: 'gcloud-linkerd-kubeconfig'
    waitFor: ['gcloud-compute-zone']

  # copy linkerd kube config
  - name: 'gcr.io/$PROJECT_ID/awscli:0.1.6'
    entrypoint: cp
    args:
      - /builder/home/.kube/config
      - /builder/home/.kube/linkerd-config
    waitFor: ['gcloud-linkerd-kubeconfig']
    id: 'copy-linkerd-kubeconfig'

  # setup istio kubeconfig
  # no copy necessary
  - name: gcr.io/cloud-builders/gcloud
    args: ['container', 'clusters', 'get-credentials', 'supergloo-test']
    id: 'gcloud-istio-kubeconfig'
    waitFor: ['gcloud-linkerd-kubeconfig']

  # Run e2e appmesh tests
  - name: 'gcr.io/$PROJECT_ID/e2e-ginkgo:0.1.6'
    env:
      - 'PROJECT_ROOT=github.com/solo-io/supergloo'
      - 'GOPATH=/workspace/gopath'
      - 'BUILD_ID=$BUILD_ID'
      - 'AWS_SHARED_CREDENTIALS_FILE=/workspace/aws_credentials'
      - 'KUBECONFIG=/builder/home/.kube/aws-config'
    dir: './gopath/src/github.com/solo-io/supergloo'
    entrypoint: sh
    args: ['-c', 'for i in $(find test/e2e/appmesh | grep "\.test$"); do (cd $(dirname $i); ./$(basename $i) -ginkgo.failFast); done']
    secretEnv: ['AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY']
    waitFor: ['copy-aws-kubeconfig']
    id: 'appmesh-test'

  # Run e2e istio tests
  - name: 'gcr.io/$PROJECT_ID/e2e-ginkgo:0.1.6'
    env:
      - 'PROJECT_ROOT=github.com/solo-io/supergloo'
      - 'GOPATH=/workspace/gopath'
      - 'BUILD_ID=$BUILD_ID'
      - 'AWS_SHARED_CREDENTIALS_FILE=/workspace/aws_credentials'
      # we DISABLE interactive tests as they appear to fail our current ci environment
      # tracking with https://github.com/solo-io/supergloo/issues/243
      - 'SKIP_INTERACTIVE_TESTS=1'
    dir: './gopath/src/github.com/solo-io/supergloo'
    entrypoint: sh
    args: ['-c', 'for i in $(find test/e2e/istio | grep "\.test$"); do (cd $(dirname $i); ./$(basename $i) -ginkgo.failFast); done']
    waitFor: ['gcloud-istio-kubeconfig']
    id: 'istio-test'

  # Run e2e linkerd tests
  - name: 'gcr.io/$PROJECT_ID/e2e-ginkgo:0.1.6'
    env:
      - 'PROJECT_ROOT=github.com/solo-io/supergloo'
      - 'GOPATH=/workspace/gopath'
      - 'BUILD_ID=$BUILD_ID'
      - 'KUBECONFIG=/builder/home/.kube/linkerd-config'
    dir: './gopath/src/github.com/solo-io/supergloo'
    entrypoint: sh
    args: ['-c', 'for i in $(find test/e2e/linkerd | grep "\.test$"); do (cd $(dirname $i); ./$(basename $i) -ginkgo.failFast); done']
    waitFor: ['copy-linkerd-kubeconfig']
    id: 'linkerd-test'

  # Build everything
  # 1) Compile all docker images
  # 2) Run make targets to push docker images, compile manifests, produce release artifacts, deploy docs
  # 3) Publish helm chart
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: ['-c', 'docker login quay.io --username "solo-io+solobot" --password $$QUAY_IO_PASSWORD']
    secretEnv: ['QUAY_IO_PASSWORD']
    id: 'docker-login'
    waitFor: ['istio-test', 'linkerd-test', 'appmesh-test']

  - name: 'gcr.io/$PROJECT_ID/go-make:0.1.7'
    args: ['docker', 'build-cli']
    env:
      - 'PROJECT_ROOT=github.com/solo-io/supergloo'
      - 'GOPATH=/workspace/gopath'
      - 'TAGGED_VERSION=$TAG_NAME'
    dir: './gopath/src/github.com/solo-io/supergloo'
    waitFor: ['docker-login']
    id: 'compile'

  - name: 'gcr.io/$PROJECT_ID/go-make:0.1.7'
    args: ['docker-push', 'manifest', 'upload-github-release-assets', 'push-docs']
    env:
      - 'TAGGED_VERSION=$TAG_NAME'
      - 'PROJECT_ROOT=github.com/solo-io/supergloo'
      - 'GOPATH=/workspace/gopath'
      - 'HELM_HOME=/root/.helm' # tell helm where to find data
    dir: './gopath/src/github.com/solo-io/supergloo'
    secretEnv: ['GITHUB_TOKEN', 'FIREBASE_TOKEN']
    id: 'release'
    waitFor: ['compile']


  # Sync helm chart data back to google storage bucket
  - name: gcr.io/cloud-builders/gsutil
    args:
      - rsync
      - -r
      - './_output/helm'
      - gs://supergloo-helm/
    dir: './gopath/src/github.com/solo-io/supergloo'
    waitFor: ['release']
    id: 'set-helm-chart'

secrets:
  - kmsKeyName: projects/solo-public/locations/global/keyRings/build/cryptoKeys/build-key
    secretEnv:
      GITHUB_TOKEN: CiQABlzmSYYiveU0gTxGH2139eaBUedjV3vNCxQmJU+nRPlfQ/YSUQCCPGSGzbGp49fwDYuefAx9V94b8mivdp9AqB7zQAa07VtGJmrGdg9ZuhKGFrrgqxwABE0LLVNHyngCSHYSYMH8Vn/mRtT7wQuEHBlKVGtqPw==
      QUAY_IO_PASSWORD: CiQABlzmSRx5TcOqbldXa/d/+bkmAfpNAWa3PTS06WvuloZL+vASaQCCPGSGCogonVZVEUNx4G3YJtWi18gSuNx4PvLe08q8xAflTMFkjsyQirAOK3Y2oCvgYwiw/ITcuydjkpMjxDygFyENXS9FKFJoAXHlPQE5qidKr8xxmxF5ezhmjGB0gjyjXIIkbSEnBg==
      FIREBASE_TOKEN: CiQABlzmSc0BWpPfrGRtDscrxOfp9ZBkZO9fkO79tjEmA14c8ZESVwCCPGSG8uZtLSmFucmEEJGJ0080ON7Zw5TjLe2YdwuxnSOA5YzZryVwLFAMzRmfb6OBxyThTZKvGZzgfXyv6CeLwYX0exk20u7k2bnrWbFHO0Aa4TiQqw==
      AWS_ACCESS_KEY_ID: CiQABlzmSWJ3Nn0crZLTXx4MzXs0uZTHHvXvqzOo2VKBTZOd0JgSPQCCPGSGAf04xCAWsqw2b1hiHLGivKrf2bJgTO9f07JMwKRVIrAclIH07yiDoFuAxlOj+hVy/JPo1CoIjLc=
      AWS_SECRET_ACCESS_KEY: CiQABlzmSWU7vdjGClZYuj687FSEaNQrxElR5iz+LaDujtTpH7MSUQCCPGSGO3vlFcd+Qul/2A0bKQn7+Io+RHact0C8OgZarEOPTkk9LHL6a3CiU2m2vfNceetSopjR3DBM6jpwwuclxnCJMKE2V3R1YsHtkT/AEA==

timeout: 6600s
tags: ['supergloo']
options:
  machineType: 'N1_HIGHCPU_32'
