// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wire

import (
	"context"

	kubernetes_core "github.com/solo-io/service-mesh-hub/pkg/clients/kubernetes/core"
	zephyr_security "github.com/solo-io/service-mesh-hub/pkg/clients/zephyr/security"
	"github.com/solo-io/service-mesh-hub/pkg/security/certgen"
	mc_wire "github.com/solo-io/service-mesh-hub/services/common/multicluster/wire"
	csr_generator "github.com/solo-io/service-mesh-hub/services/csr-agent/pkg/csr-generator"
)

// Injectors from wire.go:

func InitializeCsrAgent(ctx context.Context) (CsrAgentContext, error) {
	config, err := mc_wire.LocalKubeConfigProvider()
	if err != nil {
		return CsrAgentContext{}, err
	}
	asyncManager, err := mc_wire.LocalManagerProvider(ctx, config)
	if err != nil {
		return CsrAgentContext{}, err
	}
	virtualMeshCertificateSigningRequestController, err := csr_generator.CsrControllerProviderLocal(asyncManager)
	if err != nil {
		return CsrAgentContext{}, err
	}
	virtualMeshCSRDataSourceFactory := csr_generator.NewVirtualMeshCSRDataSourceFactory()
	client := mc_wire.DynamicClientProvider(asyncManager)
	virtualMeshCSRClient := zephyr_security.NewVirtualMeshCSRClient(client)
	secretsClient := kubernetes_core.NewSecretsClient(client)
	signer := certgen.NewSigner()
	privateKeyGenerator := csr_generator.NewPrivateKeyGenerator()
	certClient := csr_generator.NewCertClient(secretsClient, signer, privateKeyGenerator)
	istioCSRGenerator := csr_generator.NewIstioCSRGenerator(virtualMeshCSRClient, secretsClient, certClient, signer)
	virtualMeshCSRProcessor := csr_generator.NewCsrAgentIstioProcessor(istioCSRGenerator)
	csrAgentContext := CsrAgentContextProvider(ctx, asyncManager, virtualMeshCertificateSigningRequestController, virtualMeshCSRDataSourceFactory, virtualMeshCSRProcessor, virtualMeshCSRClient)
	return csrAgentContext, nil
}
