// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_aws_utils is a generated GoMock package.
package mock_aws_utils

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	aws_utils "github.com/solo-io/service-mesh-hub/services/mesh-discovery/pkg/compute-target/aws/parser"
	v1 "k8s.io/api/core/v1"
)

// MockAppMeshParser is a mock of AppMeshParser interface.
type MockAppMeshParser struct {
	ctrl     *gomock.Controller
	recorder *MockAppMeshParserMockRecorder
}

// MockAppMeshParserMockRecorder is the mock recorder for MockAppMeshParser.
type MockAppMeshParserMockRecorder struct {
	mock *MockAppMeshParser
}

// NewMockAppMeshParser creates a new mock instance.
func NewMockAppMeshParser(ctrl *gomock.Controller) *MockAppMeshParser {
	mock := &MockAppMeshParser{ctrl: ctrl}
	mock.recorder = &MockAppMeshParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppMeshParser) EXPECT() *MockAppMeshParserMockRecorder {
	return m.recorder
}

// ScanPodForAppMesh mocks base method.
func (m *MockAppMeshParser) ScanPodForAppMesh(pod *v1.Pod) (*aws_utils.AppMeshPod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanPodForAppMesh", pod)
	ret0, _ := ret[0].(*aws_utils.AppMeshPod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanPodForAppMesh indicates an expected call of ScanPodForAppMesh.
func (mr *MockAppMeshParserMockRecorder) ScanPodForAppMesh(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanPodForAppMesh", reflect.TypeOf((*MockAppMeshParser)(nil).ScanPodForAppMesh), pod)
}

// MockArnParser is a mock of ArnParser interface.
type MockArnParser struct {
	ctrl     *gomock.Controller
	recorder *MockArnParserMockRecorder
}

// MockArnParserMockRecorder is the mock recorder for MockArnParser.
type MockArnParserMockRecorder struct {
	mock *MockArnParser
}

// NewMockArnParser creates a new mock instance.
func NewMockArnParser(ctrl *gomock.Controller) *MockArnParser {
	mock := &MockArnParser{ctrl: ctrl}
	mock.recorder = &MockArnParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArnParser) EXPECT() *MockArnParserMockRecorder {
	return m.recorder
}

// ParseAccountID mocks base method.
func (m *MockArnParser) ParseAccountID(arn string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAccountID", arn)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAccountID indicates an expected call of ParseAccountID.
func (mr *MockArnParserMockRecorder) ParseAccountID(arn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAccountID", reflect.TypeOf((*MockArnParser)(nil).ParseAccountID), arn)
}
