// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_appmesh_tenancy is a generated GoMock package.
package mock_appmesh_tenancy

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// MockAppMeshRegistrar is a mock of AppMeshRegistrar interface.
type MockAppMeshRegistrar struct {
	ctrl     *gomock.Controller
	recorder *MockAppMeshRegistrarMockRecorder
}

// MockAppMeshRegistrarMockRecorder is the mock recorder for MockAppMeshRegistrar.
type MockAppMeshRegistrarMockRecorder struct {
	mock *MockAppMeshRegistrar
}

// NewMockAppMeshRegistrar creates a new mock instance.
func NewMockAppMeshRegistrar(ctrl *gomock.Controller) *MockAppMeshRegistrar {
	mock := &MockAppMeshRegistrar{ctrl: ctrl}
	mock.recorder = &MockAppMeshRegistrarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppMeshRegistrar) EXPECT() *MockAppMeshRegistrarMockRecorder {
	return m.recorder
}

// MeshFromSidecar mocks base method.
func (m *MockAppMeshRegistrar) MeshFromSidecar(ctx context.Context, pod *v1.Pod, configMap *v1.ConfigMap) (*v1alpha1.Mesh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeshFromSidecar", ctx, pod, configMap)
	ret0, _ := ret[0].(*v1alpha1.Mesh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MeshFromSidecar indicates an expected call of MeshFromSidecar.
func (mr *MockAppMeshRegistrarMockRecorder) MeshFromSidecar(ctx, pod, configMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeshFromSidecar", reflect.TypeOf((*MockAppMeshRegistrar)(nil).MeshFromSidecar), ctx, pod, configMap)
}

// ClusterHostsMesh mocks base method.
func (m *MockAppMeshRegistrar) ClusterHostsMesh(clusterName string, mesh *v1alpha1.Mesh) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterHostsMesh", clusterName, mesh)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ClusterHostsMesh indicates an expected call of ClusterHostsMesh.
func (mr *MockAppMeshRegistrarMockRecorder) ClusterHostsMesh(clusterName, mesh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterHostsMesh", reflect.TypeOf((*MockAppMeshRegistrar)(nil).ClusterHostsMesh), clusterName, mesh)
}

// RegisterMesh mocks base method.
func (m *MockAppMeshRegistrar) RegisterMesh(ctx context.Context, clusterName string, mesh *v1alpha1.Mesh) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMesh", ctx, clusterName, mesh)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterMesh indicates an expected call of RegisterMesh.
func (mr *MockAppMeshRegistrarMockRecorder) RegisterMesh(ctx, clusterName, mesh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMesh", reflect.TypeOf((*MockAppMeshRegistrar)(nil).RegisterMesh), ctx, clusterName, mesh)
}

// DeregisterMesh mocks base method.
func (m *MockAppMeshRegistrar) DeregisterMesh(ctx context.Context, clusterName string, mesh *v1alpha1.Mesh) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterMesh", ctx, clusterName, mesh)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterMesh indicates an expected call of DeregisterMesh.
func (mr *MockAppMeshRegistrarMockRecorder) DeregisterMesh(ctx, clusterName, mesh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterMesh", reflect.TypeOf((*MockAppMeshRegistrar)(nil).DeregisterMesh), ctx, clusterName, mesh)
}
