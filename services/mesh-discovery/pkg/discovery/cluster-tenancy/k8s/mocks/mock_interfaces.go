// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_k8s_tenancy is a generated GoMock package.
package mock_k8s_tenancy

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1"
	controller "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1/controller"
	controller0 "github.com/solo-io/service-mesh-hub/pkg/api/kubernetes/core/v1/controller"
	v1 "k8s.io/api/core/v1"
)

// MockClusterTenancyFinder is a mock of ClusterTenancyFinder interface.
type MockClusterTenancyFinder struct {
	ctrl     *gomock.Controller
	recorder *MockClusterTenancyFinderMockRecorder
}

// MockClusterTenancyFinderMockRecorder is the mock recorder for MockClusterTenancyFinder.
type MockClusterTenancyFinderMockRecorder struct {
	mock *MockClusterTenancyFinder
}

// NewMockClusterTenancyFinder creates a new mock instance.
func NewMockClusterTenancyFinder(ctrl *gomock.Controller) *MockClusterTenancyFinder {
	mock := &MockClusterTenancyFinder{ctrl: ctrl}
	mock.recorder = &MockClusterTenancyFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterTenancyFinder) EXPECT() *MockClusterTenancyFinderMockRecorder {
	return m.recorder
}

// StartDiscovery mocks base method.
func (m *MockClusterTenancyFinder) StartDiscovery(ctx context.Context, podEventWatcher controller0.PodEventWatcher, meshEventWatcher controller.MeshEventWatcher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDiscovery", ctx, podEventWatcher, meshEventWatcher)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartDiscovery indicates an expected call of StartDiscovery.
func (mr *MockClusterTenancyFinderMockRecorder) StartDiscovery(ctx, podEventWatcher, meshEventWatcher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDiscovery", reflect.TypeOf((*MockClusterTenancyFinder)(nil).StartDiscovery), ctx, podEventWatcher, meshEventWatcher)
}

// MockClusterTenancyScanner is a mock of ClusterTenancyScanner interface.
type MockClusterTenancyScanner struct {
	ctrl     *gomock.Controller
	recorder *MockClusterTenancyScannerMockRecorder
}

// MockClusterTenancyScannerMockRecorder is the mock recorder for MockClusterTenancyScanner.
type MockClusterTenancyScannerMockRecorder struct {
	mock *MockClusterTenancyScanner
}

// NewMockClusterTenancyScanner creates a new mock instance.
func NewMockClusterTenancyScanner(ctrl *gomock.Controller) *MockClusterTenancyScanner {
	mock := &MockClusterTenancyScanner{ctrl: ctrl}
	mock.recorder = &MockClusterTenancyScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterTenancyScanner) EXPECT() *MockClusterTenancyScannerMockRecorder {
	return m.recorder
}

// UpdateMeshTenancy mocks base method.
func (m *MockClusterTenancyScanner) UpdateMeshTenancy(ctx context.Context, clusterName string, pod *v1.Pod, meshClient v1alpha1.MeshClient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeshTenancy", ctx, clusterName, pod, meshClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeshTenancy indicates an expected call of UpdateMeshTenancy.
func (mr *MockClusterTenancyScannerMockRecorder) UpdateMeshTenancy(ctx, clusterName, pod, meshClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshTenancy", reflect.TypeOf((*MockClusterTenancyScanner)(nil).UpdateMeshTenancy), ctx, clusterName, pod, meshClient)
}
