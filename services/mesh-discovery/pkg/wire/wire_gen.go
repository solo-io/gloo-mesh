// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wire

import (
	"context"

	"github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1"
	v1_2 "github.com/solo-io/service-mesh-hub/pkg/api/kubernetes/apps/v1"
	v1 "github.com/solo-io/service-mesh-hub/pkg/api/kubernetes/core/v1"
	"github.com/solo-io/service-mesh-hub/pkg/common/docker"
	mc_wire "github.com/solo-io/service-mesh-hub/services/common/multicluster/wire"
	mesh_workload "github.com/solo-io/service-mesh-hub/services/mesh-discovery/pkg/discovery/mesh-workload"
	"github.com/solo-io/service-mesh-hub/services/mesh-discovery/pkg/discovery/mesh/consul"
	"github.com/solo-io/service-mesh-hub/services/mesh-discovery/pkg/discovery/mesh/istio"
	"github.com/solo-io/service-mesh-hub/services/mesh-discovery/pkg/discovery/mesh/linkerd"
	"github.com/solo-io/service-mesh-hub/services/mesh-discovery/pkg/multicluster/controllers"
)

// Injectors from wire.go:

func InitializeDiscovery(ctx context.Context) (DiscoveryContext, error) {
	config, err := mc_wire.LocalKubeConfigProvider()
	if err != nil {
		return DiscoveryContext{}, err
	}
	asyncManager, err := mc_wire.LocalManagerProvider(ctx, config)
	if err != nil {
		return DiscoveryContext{}, err
	}
	asyncManagerController := mc_wire.AsyncManagerControllerProvider(ctx, asyncManager)
	asyncManagerStartOptionsFunc := mc_wire.LocalManagerStarterProvider(asyncManagerController)
	multiClusterDependencies := mc_wire.MulticlusterDependenciesProvider(ctx, asyncManager, asyncManagerController, asyncManagerStartOptionsFunc)
	imageNameParser := docker.NewImageNameParser()
	configMapClientFactory := v1.ConfigMapClientFactoryProvider()
	istioMeshScanner := istio.NewIstioMeshScanner(imageNameParser, configMapClientFactory)
	consulConnectInstallationScanner := consul.NewConsulConnectInstallationScanner(imageNameParser)
	consulConnectMeshScanner := consul.NewConsulMeshScanner(imageNameParser, consulConnectInstallationScanner)
	linkerdMeshScanner := linkerd.NewLinkerdMeshScanner(imageNameParser)
	replicaSetClientFactory := v1_2.ReplicaSetClientFactoryProvider()
	deploymentClientFactory := v1_2.DeploymentClientFactoryProvider()
	ownerFetcherFactory := mesh_workload.OwnerFetcherFactoryProvider()
	serviceClientFactory := v1.ServiceClientFactoryProvider()
	meshServiceClientFactory := v1alpha1.MeshServiceClientFactoryProvider()
	meshWorkloadClientFactory := v1alpha1.MeshWorkloadClientFactoryProvider()
	podEventWatcherFactory := controllers.NewPodEventWatcherFactory()
	serviceEventWatcherFactory := controllers.NewServiceEventWatcherFactory()
	meshWorkloadEventWatcherFactory := controllers.NewMeshWorkloadEventWatcherFactory()
	deploymentEventWatcherFactory := controllers.NewDeploymentEventWatcherFactory()
	meshClientFactory := v1alpha1.MeshClientFactoryProvider()
	podClientFactory := v1.PodClientFactoryProvider()
	meshEventWatcherFactory := controllers.NewMeshControllerFactory()
	discoveryContext := DiscoveryContextProvider(multiClusterDependencies, istioMeshScanner, consulConnectMeshScanner, linkerdMeshScanner, replicaSetClientFactory, deploymentClientFactory, ownerFetcherFactory, serviceClientFactory, meshServiceClientFactory, meshWorkloadClientFactory, podEventWatcherFactory, serviceEventWatcherFactory, meshWorkloadEventWatcherFactory, deploymentEventWatcherFactory, meshClientFactory, podClientFactory, meshEventWatcherFactory)
	return discoveryContext, nil
}
