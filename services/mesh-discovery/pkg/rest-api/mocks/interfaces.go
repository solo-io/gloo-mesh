// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_rest_api is a generated GoMock package.
package mock_rest_api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockRestAPICredsHandler is a mock of RestAPICredsHandler interface.
type MockRestAPICredsHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRestAPICredsHandlerMockRecorder
}

// MockRestAPICredsHandlerMockRecorder is the mock recorder for MockRestAPICredsHandler.
type MockRestAPICredsHandlerMockRecorder struct {
	mock *MockRestAPICredsHandler
}

// NewMockRestAPICredsHandler creates a new mock instance.
func NewMockRestAPICredsHandler(ctrl *gomock.Controller) *MockRestAPICredsHandler {
	mock := &MockRestAPICredsHandler{ctrl: ctrl}
	mock.recorder = &MockRestAPICredsHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestAPICredsHandler) EXPECT() *MockRestAPICredsHandlerMockRecorder {
	return m.recorder
}

// RestAPIAdded mocks base method.
func (m *MockRestAPICredsHandler) RestAPIAdded(ctx context.Context, secret *v1.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestAPIAdded", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestAPIAdded indicates an expected call of RestAPIAdded.
func (mr *MockRestAPICredsHandlerMockRecorder) RestAPIAdded(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestAPIAdded", reflect.TypeOf((*MockRestAPICredsHandler)(nil).RestAPIAdded), ctx, secret)
}

// RestAPIRemoved mocks base method.
func (m *MockRestAPICredsHandler) RestAPIRemoved(ctx context.Context, apiName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestAPIRemoved", ctx, apiName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestAPIRemoved indicates an expected call of RestAPIRemoved.
func (mr *MockRestAPICredsHandlerMockRecorder) RestAPIRemoved(ctx, apiName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestAPIRemoved", reflect.TypeOf((*MockRestAPICredsHandler)(nil).RestAPIRemoved), ctx, apiName)
}

// MockRestAPIReconciler is a mock of RestAPIReconciler interface.
type MockRestAPIReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRestAPIReconcilerMockRecorder
}

// MockRestAPIReconcilerMockRecorder is the mock recorder for MockRestAPIReconciler.
type MockRestAPIReconcilerMockRecorder struct {
	mock *MockRestAPIReconciler
}

// NewMockRestAPIReconciler creates a new mock instance.
func NewMockRestAPIReconciler(ctrl *gomock.Controller) *MockRestAPIReconciler {
	mock := &MockRestAPIReconciler{ctrl: ctrl}
	mock.recorder = &MockRestAPIReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestAPIReconciler) EXPECT() *MockRestAPIReconcilerMockRecorder {
	return m.recorder
}

// Reconcile mocks base method.
func (m *MockRestAPIReconciler) Reconcile(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockRestAPIReconcilerMockRecorder) Reconcile(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockRestAPIReconciler)(nil).Reconcile), ctx)
}
