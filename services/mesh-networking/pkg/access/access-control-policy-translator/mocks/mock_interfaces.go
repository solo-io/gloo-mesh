// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_acp_translator is a generated GoMock package.
package mock_acp_translator

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha1"
	types "github.com/solo-io/service-mesh-hub/pkg/api/networking.smh.solo.io/v1alpha1/types"
	acp_translator "github.com/solo-io/service-mesh-hub/services/mesh-networking/pkg/access/access-control-policy-translator"
)

// MockAcpTranslatorLoop is a mock of AcpTranslatorLoop interface.
type MockAcpTranslatorLoop struct {
	ctrl     *gomock.Controller
	recorder *MockAcpTranslatorLoopMockRecorder
}

// MockAcpTranslatorLoopMockRecorder is the mock recorder for MockAcpTranslatorLoop.
type MockAcpTranslatorLoopMockRecorder struct {
	mock *MockAcpTranslatorLoop
}

// NewMockAcpTranslatorLoop creates a new mock instance.
func NewMockAcpTranslatorLoop(ctrl *gomock.Controller) *MockAcpTranslatorLoop {
	mock := &MockAcpTranslatorLoop{ctrl: ctrl}
	mock.recorder = &MockAcpTranslatorLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAcpTranslatorLoop) EXPECT() *MockAcpTranslatorLoopMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockAcpTranslatorLoop) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockAcpTranslatorLoopMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAcpTranslatorLoop)(nil).Start), ctx)
}

// MockAcpMeshTranslator is a mock of AcpMeshTranslator interface.
type MockAcpMeshTranslator struct {
	ctrl     *gomock.Controller
	recorder *MockAcpMeshTranslatorMockRecorder
}

// MockAcpMeshTranslatorMockRecorder is the mock recorder for MockAcpMeshTranslator.
type MockAcpMeshTranslatorMockRecorder struct {
	mock *MockAcpMeshTranslator
}

// NewMockAcpMeshTranslator creates a new mock instance.
func NewMockAcpMeshTranslator(ctrl *gomock.Controller) *MockAcpMeshTranslator {
	mock := &MockAcpMeshTranslator{ctrl: ctrl}
	mock.recorder = &MockAcpMeshTranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAcpMeshTranslator) EXPECT() *MockAcpMeshTranslatorMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockAcpMeshTranslator) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAcpMeshTranslatorMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAcpMeshTranslator)(nil).Name))
}

// Translate mocks base method.
func (m *MockAcpMeshTranslator) Translate(ctx context.Context, targetServices []acp_translator.TargetService, acp *v1alpha1.AccessControlPolicy) *types.AccessControlPolicyStatus_TranslatorError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", ctx, targetServices, acp)
	ret0, _ := ret[0].(*types.AccessControlPolicyStatus_TranslatorError)
	return ret0
}

// Translate indicates an expected call of Translate.
func (mr *MockAcpMeshTranslatorMockRecorder) Translate(ctx, targetServices, acp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockAcpMeshTranslator)(nil).Translate), ctx, targetServices, acp)
}
