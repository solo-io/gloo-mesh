// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_traffic_policy_aggregation is a generated GoMock package.
package mock_traffic_policy_aggregation

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1"
	types "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1/types"
	v1alpha10 "github.com/solo-io/service-mesh-hub/pkg/api/networking.zephyr.solo.io/v1alpha1"
	types0 "github.com/solo-io/service-mesh-hub/pkg/api/networking.zephyr.solo.io/v1alpha1/types"
	mesh_translation "github.com/solo-io/service-mesh-hub/services/mesh-networking/pkg/traffic-policy-temp/translation/meshes"
)

// MockPolicyCollector is a mock of PolicyCollector interface.
type MockPolicyCollector struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyCollectorMockRecorder
}

// MockPolicyCollectorMockRecorder is the mock recorder for MockPolicyCollector.
type MockPolicyCollectorMockRecorder struct {
	mock *MockPolicyCollector
}

// NewMockPolicyCollector creates a new mock instance.
func NewMockPolicyCollector(ctrl *gomock.Controller) *MockPolicyCollector {
	mock := &MockPolicyCollector{ctrl: ctrl}
	mock.recorder = &MockPolicyCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyCollector) EXPECT() *MockPolicyCollectorMockRecorder {
	return m.recorder
}

// CollectForService mocks base method.
func (m *MockPolicyCollector) CollectForService(meshService *v1alpha1.MeshService, mesh *v1alpha1.Mesh, translationValidator mesh_translation.TranslationValidator, allTrafficPolicies []*v1alpha10.TrafficPolicy) ([]*types.MeshServiceStatus_ValidatedTrafficPolicy, map[*v1alpha10.TrafficPolicy][]*types0.TrafficPolicyStatus_ConflictError, map[*v1alpha10.TrafficPolicy][]*types0.TrafficPolicyStatus_TranslatorError, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectForService", meshService, mesh, translationValidator, allTrafficPolicies)
	ret0, _ := ret[0].([]*types.MeshServiceStatus_ValidatedTrafficPolicy)
	ret1, _ := ret[1].(map[*v1alpha10.TrafficPolicy][]*types0.TrafficPolicyStatus_ConflictError)
	ret2, _ := ret[2].(map[*v1alpha10.TrafficPolicy][]*types0.TrafficPolicyStatus_TranslatorError)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CollectForService indicates an expected call of CollectForService.
func (mr *MockPolicyCollectorMockRecorder) CollectForService(meshService, mesh, translationValidator, allTrafficPolicies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectForService", reflect.TypeOf((*MockPolicyCollector)(nil).CollectForService), meshService, mesh, translationValidator, allTrafficPolicies)
}

// MockInMemoryStatusUpdater is a mock of InMemoryStatusUpdater interface.
type MockInMemoryStatusUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockInMemoryStatusUpdaterMockRecorder
}

// MockInMemoryStatusUpdaterMockRecorder is the mock recorder for MockInMemoryStatusUpdater.
type MockInMemoryStatusUpdaterMockRecorder struct {
	mock *MockInMemoryStatusUpdater
}

// NewMockInMemoryStatusUpdater creates a new mock instance.
func NewMockInMemoryStatusUpdater(ctrl *gomock.Controller) *MockInMemoryStatusUpdater {
	mock := &MockInMemoryStatusUpdater{ctrl: ctrl}
	mock.recorder = &MockInMemoryStatusUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInMemoryStatusUpdater) EXPECT() *MockInMemoryStatusUpdaterMockRecorder {
	return m.recorder
}

// UpdateServicePolicies mocks base method.
func (m *MockInMemoryStatusUpdater) UpdateServicePolicies(meshService *v1alpha1.MeshService, newlyComputedMergeablePolicies []*types.MeshServiceStatus_ValidatedTrafficPolicy) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServicePolicies", meshService, newlyComputedMergeablePolicies)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateServicePolicies indicates an expected call of UpdateServicePolicies.
func (mr *MockInMemoryStatusUpdaterMockRecorder) UpdateServicePolicies(meshService, newlyComputedMergeablePolicies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServicePolicies", reflect.TypeOf((*MockInMemoryStatusUpdater)(nil).UpdateServicePolicies), meshService, newlyComputedMergeablePolicies)
}

// UpdateConflictAndTranslatorErrors mocks base method.
func (m *MockInMemoryStatusUpdater) UpdateConflictAndTranslatorErrors(policy *v1alpha10.TrafficPolicy, newConflictErrors []*types0.TrafficPolicyStatus_ConflictError, newTranslationErrors []*types0.TrafficPolicyStatus_TranslatorError) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConflictAndTranslatorErrors", policy, newConflictErrors, newTranslationErrors)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateConflictAndTranslatorErrors indicates an expected call of UpdateConflictAndTranslatorErrors.
func (mr *MockInMemoryStatusUpdaterMockRecorder) UpdateConflictAndTranslatorErrors(policy, newConflictErrors, newTranslationErrors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConflictAndTranslatorErrors", reflect.TypeOf((*MockInMemoryStatusUpdater)(nil).UpdateConflictAndTranslatorErrors), policy, newConflictErrors, newTranslationErrors)
}

// MockAggregator is a mock of Aggregator interface.
type MockAggregator struct {
	ctrl     *gomock.Controller
	recorder *MockAggregatorMockRecorder
}

// MockAggregatorMockRecorder is the mock recorder for MockAggregator.
type MockAggregatorMockRecorder struct {
	mock *MockAggregator
}

// NewMockAggregator creates a new mock instance.
func NewMockAggregator(ctrl *gomock.Controller) *MockAggregator {
	mock := &MockAggregator{ctrl: ctrl}
	mock.recorder = &MockAggregatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregator) EXPECT() *MockAggregatorMockRecorder {
	return m.recorder
}

// FindMergeConflict mocks base method.
func (m *MockAggregator) FindMergeConflict(trafficPolicyToMerge *types0.TrafficPolicySpec, policiesToMergeWith []*types0.TrafficPolicySpec, meshService *v1alpha1.MeshService) *types0.TrafficPolicyStatus_ConflictError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMergeConflict", trafficPolicyToMerge, policiesToMergeWith, meshService)
	ret0, _ := ret[0].(*types0.TrafficPolicyStatus_ConflictError)
	return ret0
}

// FindMergeConflict indicates an expected call of FindMergeConflict.
func (mr *MockAggregatorMockRecorder) FindMergeConflict(trafficPolicyToMerge, policiesToMergeWith, meshService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMergeConflict", reflect.TypeOf((*MockAggregator)(nil).FindMergeConflict), trafficPolicyToMerge, policiesToMergeWith, meshService)
}

// PoliciesForService mocks base method.
func (m *MockAggregator) PoliciesForService(trafficPolicies []*v1alpha10.TrafficPolicy, meshService *v1alpha1.MeshService) ([]*v1alpha10.TrafficPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoliciesForService", trafficPolicies, meshService)
	ret0, _ := ret[0].([]*v1alpha10.TrafficPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesForService indicates an expected call of PoliciesForService.
func (mr *MockAggregatorMockRecorder) PoliciesForService(trafficPolicies, meshService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesForService", reflect.TypeOf((*MockAggregator)(nil).PoliciesForService), trafficPolicies, meshService)
}
