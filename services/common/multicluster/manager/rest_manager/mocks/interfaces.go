// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_rest is a generated GoMock package.
package mock_rest

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rest "github.com/solo-io/service-mesh-hub/services/common/multicluster/manager/rest_manager"
)

// MockRestAPIHandler is a mock of RestAPIHandler interface.
type MockRestAPIHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRestAPIHandlerMockRecorder
}

// MockRestAPIHandlerMockRecorder is the mock recorder for MockRestAPIHandler.
type MockRestAPIHandlerMockRecorder struct {
	mock *MockRestAPIHandler
}

// NewMockRestAPIHandler creates a new mock instance.
func NewMockRestAPIHandler(ctrl *gomock.Controller) *MockRestAPIHandler {
	mock := &MockRestAPIHandler{ctrl: ctrl}
	mock.recorder = &MockRestAPIHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestAPIHandler) EXPECT() *MockRestAPIHandlerMockRecorder {
	return m.recorder
}

// APIAdded mocks base method.
func (m *MockRestAPIHandler) APIAdded(ctx context.Context, apiProvider rest.RestAPIProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIAdded", ctx, apiProvider)
	ret0, _ := ret[0].(error)
	return ret0
}

// APIAdded indicates an expected call of APIAdded.
func (mr *MockRestAPIHandlerMockRecorder) APIAdded(ctx, apiProvider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIAdded", reflect.TypeOf((*MockRestAPIHandler)(nil).APIAdded), ctx, apiProvider)
}

// APIRemoved mocks base method.
func (m *MockRestAPIHandler) APIRemoved(ctx context.Context, apiProvider rest.RestAPIProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIRemoved", ctx, apiProvider)
	ret0, _ := ret[0].(error)
	return ret0
}

// APIRemoved indicates an expected call of APIRemoved.
func (mr *MockRestAPIHandlerMockRecorder) APIRemoved(ctx, apiProvider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIRemoved", reflect.TypeOf((*MockRestAPIHandler)(nil).APIRemoved), ctx, apiProvider)
}

// MockRestAPIClientGetter is a mock of RestAPIClientGetter interface.
type MockRestAPIClientGetter struct {
	ctrl     *gomock.Controller
	recorder *MockRestAPIClientGetterMockRecorder
}

// MockRestAPIClientGetterMockRecorder is the mock recorder for MockRestAPIClientGetter.
type MockRestAPIClientGetterMockRecorder struct {
	mock *MockRestAPIClientGetter
}

// NewMockRestAPIClientGetter creates a new mock instance.
func NewMockRestAPIClientGetter(ctrl *gomock.Controller) *MockRestAPIClientGetter {
	mock := &MockRestAPIClientGetter{ctrl: ctrl}
	mock.recorder = &MockRestAPIClientGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestAPIClientGetter) EXPECT() *MockRestAPIClientGetterMockRecorder {
	return m.recorder
}

// GetClientForRestAPI mocks base method.
func (m *MockRestAPIClientGetter) GetClientForRestAPI(ctx context.Context, apiProvider rest.RestAPIProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientForRestAPI", ctx, apiProvider)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClientForRestAPI indicates an expected call of GetClientForRestAPI.
func (mr *MockRestAPIClientGetterMockRecorder) GetClientForRestAPI(ctx, apiProvider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientForRestAPI", reflect.TypeOf((*MockRestAPIClientGetter)(nil).GetClientForRestAPI), ctx, apiProvider)
}
