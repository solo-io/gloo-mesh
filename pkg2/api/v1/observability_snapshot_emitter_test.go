// Code generated by solo-kit. DO NOT EDIT.

// +build solokit

package v1

import (
	"context"
	"os"
	"time"

	config_prometheus_io "github.com/solo-io/supergloo/pkg2/api/external/prometheus/v1"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/solo-io/go-utils/kubeutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/utils/log"
	"github.com/solo-io/solo-kit/test/helpers"
	"github.com/solo-io/solo-kit/test/setup"
	"k8s.io/client-go/rest"

	// Needed to run tests in GKE
	_ "k8s.io/client-go/plugin/pkg/client/auth/gcp"

	// From https://github.com/kubernetes/client-go/blob/53c7adfd0294caa142d961e1f780f74081d5b15f/examples/out-of-cluster-client-configuration/main.go#L31
	"k8s.io/client-go/kubernetes"
	_ "k8s.io/client-go/plugin/pkg/client/auth/gcp"
)

var _ = Describe("V1Emitter", func() {
	if os.Getenv("RUN_KUBE_TESTS") != "1" {
		log.Printf("This test creates kubernetes resources and is disabled by default. To enable, set RUN_KUBE_TESTS=1 in your env.")
		return
	}
	var (
		namespace1             string
		namespace2             string
		name1, name2           = "angela" + helpers.RandString(3), "bob" + helpers.RandString(3)
		cfg                    *rest.Config
		emitter                ObservabilityEmitter
		prometheusConfigClient config_prometheus_io.PrometheusConfigClient
	)

	BeforeEach(func() {
		namespace1 = helpers.RandString(8)
		namespace2 = helpers.RandString(8)
		var err error
		cfg, err = kubeutils.GetConfig("", "")
		Expect(err).NotTo(HaveOccurred())
		err = setup.SetupKubeForTest(namespace1)
		Expect(err).NotTo(HaveOccurred())
		err = setup.SetupKubeForTest(namespace2)
		Expect(err).NotTo(HaveOccurred())
		var kube kubernetes.Interface
		// PrometheusConfig Constructor
		kube, err = kubernetes.NewForConfig(cfg)
		Expect(err).NotTo(HaveOccurred())

		prometheusConfigClientFactory := &factory.KubeConfigMapClientFactory{
			Clientset: kube,
		}
		prometheusConfigClient, err = config_prometheus_io.NewPrometheusConfigClient(prometheusConfigClientFactory)
		Expect(err).NotTo(HaveOccurred())
		emitter = NewObservabilityEmitter(prometheusConfigClient)
	})
	AfterEach(func() {
		setup.TeardownKube(namespace1)
		setup.TeardownKube(namespace2)
	})
	It("tracks snapshots on changes to any resource", func() {
		ctx := context.Background()
		err := emitter.Register()
		Expect(err).NotTo(HaveOccurred())

		snapshots, errs, err := emitter.Snapshots([]string{namespace1, namespace2}, clients.WatchOpts{
			Ctx:         ctx,
			RefreshRate: time.Second,
		})
		Expect(err).NotTo(HaveOccurred())

		var snap *ObservabilitySnapshot

		/*
			PrometheusConfig
		*/

		assertSnapshotPrometheusconfigs := func(expectPrometheusconfigs config_prometheus_io.PrometheusConfigList, unexpectPrometheusconfigs config_prometheus_io.PrometheusConfigList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectPrometheusconfigs {
						if _, err := snap.Prometheusconfigs.List().Find(expected.Metadata.Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectPrometheusconfigs {
						if _, err := snap.Prometheusconfigs.List().Find(unexpected.Metadata.Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := prometheusConfigClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := prometheusConfigClient.List(namespace2, clients.ListOpts{})
					combined := nsList1.ByNamespace()
					combined.Add(nsList2...)
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		prometheusConfig1a, err := prometheusConfigClient.Write(config_prometheus_io.NewPrometheusConfig(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		prometheusConfig1b, err := prometheusConfigClient.Write(config_prometheus_io.NewPrometheusConfig(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotPrometheusconfigs(config_prometheus_io.PrometheusConfigList{prometheusConfig1a, prometheusConfig1b}, nil)
		prometheusConfig2a, err := prometheusConfigClient.Write(config_prometheus_io.NewPrometheusConfig(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		prometheusConfig2b, err := prometheusConfigClient.Write(config_prometheus_io.NewPrometheusConfig(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotPrometheusconfigs(config_prometheus_io.PrometheusConfigList{prometheusConfig1a, prometheusConfig1b, prometheusConfig2a, prometheusConfig2b}, nil)

		err = prometheusConfigClient.Delete(prometheusConfig2a.Metadata.Namespace, prometheusConfig2a.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = prometheusConfigClient.Delete(prometheusConfig2b.Metadata.Namespace, prometheusConfig2b.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotPrometheusconfigs(config_prometheus_io.PrometheusConfigList{prometheusConfig1a, prometheusConfig1b}, config_prometheus_io.PrometheusConfigList{prometheusConfig2a, prometheusConfig2b})

		err = prometheusConfigClient.Delete(prometheusConfig1a.Metadata.Namespace, prometheusConfig1a.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = prometheusConfigClient.Delete(prometheusConfig1b.Metadata.Namespace, prometheusConfig1b.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotPrometheusconfigs(nil, config_prometheus_io.PrometheusConfigList{prometheusConfig1a, prometheusConfig1b, prometheusConfig2a, prometheusConfig2b})
	})
})
