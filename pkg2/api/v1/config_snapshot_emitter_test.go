// Code generated by solo-kit. DO NOT EDIT.

// +build solokit

package v1

import (
	"context"
	"os"
	"time"

	gloo_solo_io "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	istio_networking_v1alpha3 "github.com/solo-io/supergloo/pkg2/api/external/istio/networking/v1alpha3"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/solo-io/go-utils/kubeutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	kuberc "github.com/solo-io/solo-kit/pkg/api/v1/clients/kube"
	"github.com/solo-io/solo-kit/pkg/utils/log"
	"github.com/solo-io/solo-kit/test/helpers"
	"github.com/solo-io/solo-kit/test/setup"
	"k8s.io/client-go/rest"

	// Needed to run tests in GKE
	_ "k8s.io/client-go/plugin/pkg/client/auth/gcp"

	// From https://github.com/kubernetes/client-go/blob/53c7adfd0294caa142d961e1f780f74081d5b15f/examples/out-of-cluster-client-configuration/main.go#L31
	"k8s.io/client-go/kubernetes"
	_ "k8s.io/client-go/plugin/pkg/client/auth/gcp"
)

var _ = Describe("V1Emitter", func() {
	if os.Getenv("RUN_KUBE_TESTS") != "1" {
		log.Printf("This test creates kubernetes resources and is disabled by default. To enable, set RUN_KUBE_TESTS=1 in your env.")
		return
	}
	var (
		namespace1            string
		namespace2            string
		name1, name2          = "angela" + helpers.RandString(3), "bob" + helpers.RandString(3)
		cfg                   *rest.Config
		emitter               ConfigEmitter
		meshClient            MeshClient
		meshGroupClient       MeshGroupClient
		upstreamClient        gloo_solo_io.UpstreamClient
		routingRuleClient     RoutingRuleClient
		tlsSecretClient       TlsSecretClient
		destinationRuleClient istio_networking_v1alpha3.DestinationRuleClient
		virtualServiceClient  istio_networking_v1alpha3.VirtualServiceClient
	)

	BeforeEach(func() {
		namespace1 = helpers.RandString(8)
		namespace2 = helpers.RandString(8)
		var err error
		cfg, err = kubeutils.GetConfig("", "")
		Expect(err).NotTo(HaveOccurred())
		err = setup.SetupKubeForTest(namespace1)
		Expect(err).NotTo(HaveOccurred())
		err = setup.SetupKubeForTest(namespace2)
		Expect(err).NotTo(HaveOccurred())
		var kube kubernetes.Interface
		// Mesh Constructor
		meshClientFactory := &factory.KubeResourceClientFactory{
			Crd:         MeshCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(),
		}
		meshClient, err = NewMeshClient(meshClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// MeshGroup Constructor
		meshGroupClientFactory := &factory.KubeResourceClientFactory{
			Crd:         MeshGroupCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(),
		}
		meshGroupClient, err = NewMeshGroupClient(meshGroupClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// Upstream Constructor
		upstreamClientFactory := &factory.KubeResourceClientFactory{
			Crd:         gloo_solo_io.UpstreamCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(),
		}
		upstreamClient, err = gloo_solo_io.NewUpstreamClient(upstreamClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// RoutingRule Constructor
		routingRuleClientFactory := &factory.KubeResourceClientFactory{
			Crd:         RoutingRuleCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(),
		}
		routingRuleClient, err = NewRoutingRuleClient(routingRuleClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// TlsSecret Constructor
		kube, err = kubernetes.NewForConfig(cfg)
		Expect(err).NotTo(HaveOccurred())

		tlsSecretClientFactory := &factory.KubeConfigMapClientFactory{
			Clientset: kube,
		}
		tlsSecretClient, err = NewTlsSecretClient(tlsSecretClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// DestinationRule Constructor
		destinationRuleClientFactory := &factory.KubeResourceClientFactory{
			Crd:         istio_networking_v1alpha3.DestinationRuleCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(),
		}
		destinationRuleClient, err = istio_networking_v1alpha3.NewDestinationRuleClient(destinationRuleClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// VirtualService Constructor
		virtualServiceClientFactory := &factory.KubeResourceClientFactory{
			Crd:         istio_networking_v1alpha3.VirtualServiceCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(),
		}
		virtualServiceClient, err = istio_networking_v1alpha3.NewVirtualServiceClient(virtualServiceClientFactory)
		Expect(err).NotTo(HaveOccurred())
		emitter = NewConfigEmitter(meshClient, meshGroupClient, upstreamClient, routingRuleClient, tlsSecretClient, destinationRuleClient, virtualServiceClient)
	})
	AfterEach(func() {
		setup.TeardownKube(namespace1)
		setup.TeardownKube(namespace2)
	})
	It("tracks snapshots on changes to any resource", func() {
		ctx := context.Background()
		err := emitter.Register()
		Expect(err).NotTo(HaveOccurred())

		snapshots, errs, err := emitter.Snapshots([]string{namespace1, namespace2}, clients.WatchOpts{
			Ctx:         ctx,
			RefreshRate: time.Second,
		})
		Expect(err).NotTo(HaveOccurred())

		var snap *ConfigSnapshot

		/*
			Mesh
		*/

		assertSnapshotMeshes := func(expectMeshes MeshList, unexpectMeshes MeshList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectMeshes {
						if _, err := snap.Meshes.List().Find(expected.Metadata.Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectMeshes {
						if _, err := snap.Meshes.List().Find(unexpected.Metadata.Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := meshClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := meshClient.List(namespace2, clients.ListOpts{})
					combined := nsList1.ByNamespace()
					combined.Add(nsList2...)
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		mesh1a, err := meshClient.Write(NewMesh(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mesh1b, err := meshClient.Write(NewMesh(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshes(MeshList{mesh1a, mesh1b}, nil)
		mesh2a, err := meshClient.Write(NewMesh(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mesh2b, err := meshClient.Write(NewMesh(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshes(MeshList{mesh1a, mesh1b, mesh2a, mesh2b}, nil)

		err = meshClient.Delete(mesh2a.Metadata.Namespace, mesh2a.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = meshClient.Delete(mesh2b.Metadata.Namespace, mesh2b.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshes(MeshList{mesh1a, mesh1b}, MeshList{mesh2a, mesh2b})

		err = meshClient.Delete(mesh1a.Metadata.Namespace, mesh1a.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = meshClient.Delete(mesh1b.Metadata.Namespace, mesh1b.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshes(nil, MeshList{mesh1a, mesh1b, mesh2a, mesh2b})

		/*
			MeshGroup
		*/

		assertSnapshotMeshgroups := func(expectMeshgroups MeshGroupList, unexpectMeshgroups MeshGroupList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectMeshgroups {
						if _, err := snap.Meshgroups.List().Find(expected.Metadata.Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectMeshgroups {
						if _, err := snap.Meshgroups.List().Find(unexpected.Metadata.Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := meshGroupClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := meshGroupClient.List(namespace2, clients.ListOpts{})
					combined := nsList1.ByNamespace()
					combined.Add(nsList2...)
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		meshGroup1a, err := meshGroupClient.Write(NewMeshGroup(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		meshGroup1b, err := meshGroupClient.Write(NewMeshGroup(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshgroups(MeshGroupList{meshGroup1a, meshGroup1b}, nil)
		meshGroup2a, err := meshGroupClient.Write(NewMeshGroup(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		meshGroup2b, err := meshGroupClient.Write(NewMeshGroup(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshgroups(MeshGroupList{meshGroup1a, meshGroup1b, meshGroup2a, meshGroup2b}, nil)

		err = meshGroupClient.Delete(meshGroup2a.Metadata.Namespace, meshGroup2a.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = meshGroupClient.Delete(meshGroup2b.Metadata.Namespace, meshGroup2b.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshgroups(MeshGroupList{meshGroup1a, meshGroup1b}, MeshGroupList{meshGroup2a, meshGroup2b})

		err = meshGroupClient.Delete(meshGroup1a.Metadata.Namespace, meshGroup1a.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = meshGroupClient.Delete(meshGroup1b.Metadata.Namespace, meshGroup1b.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotMeshgroups(nil, MeshGroupList{meshGroup1a, meshGroup1b, meshGroup2a, meshGroup2b})

		/*
			Upstream
		*/

		assertSnapshotUpstreams := func(expectUpstreams gloo_solo_io.UpstreamList, unexpectUpstreams gloo_solo_io.UpstreamList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectUpstreams {
						if _, err := snap.Upstreams.List().Find(expected.Metadata.Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectUpstreams {
						if _, err := snap.Upstreams.List().Find(unexpected.Metadata.Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := upstreamClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := upstreamClient.List(namespace2, clients.ListOpts{})
					combined := nsList1.ByNamespace()
					combined.Add(nsList2...)
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		upstream1a, err := upstreamClient.Write(gloo_solo_io.NewUpstream(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		upstream1b, err := upstreamClient.Write(gloo_solo_io.NewUpstream(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotUpstreams(gloo_solo_io.UpstreamList{upstream1a, upstream1b}, nil)
		upstream2a, err := upstreamClient.Write(gloo_solo_io.NewUpstream(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		upstream2b, err := upstreamClient.Write(gloo_solo_io.NewUpstream(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotUpstreams(gloo_solo_io.UpstreamList{upstream1a, upstream1b, upstream2a, upstream2b}, nil)

		err = upstreamClient.Delete(upstream2a.Metadata.Namespace, upstream2a.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = upstreamClient.Delete(upstream2b.Metadata.Namespace, upstream2b.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotUpstreams(gloo_solo_io.UpstreamList{upstream1a, upstream1b}, gloo_solo_io.UpstreamList{upstream2a, upstream2b})

		err = upstreamClient.Delete(upstream1a.Metadata.Namespace, upstream1a.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = upstreamClient.Delete(upstream1b.Metadata.Namespace, upstream1b.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotUpstreams(nil, gloo_solo_io.UpstreamList{upstream1a, upstream1b, upstream2a, upstream2b})

		/*
			RoutingRule
		*/

		assertSnapshotRoutingrules := func(expectRoutingrules RoutingRuleList, unexpectRoutingrules RoutingRuleList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectRoutingrules {
						if _, err := snap.Routingrules.List().Find(expected.Metadata.Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectRoutingrules {
						if _, err := snap.Routingrules.List().Find(unexpected.Metadata.Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := routingRuleClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := routingRuleClient.List(namespace2, clients.ListOpts{})
					combined := nsList1.ByNamespace()
					combined.Add(nsList2...)
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		routingRule1a, err := routingRuleClient.Write(NewRoutingRule(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		routingRule1b, err := routingRuleClient.Write(NewRoutingRule(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotRoutingrules(RoutingRuleList{routingRule1a, routingRule1b}, nil)
		routingRule2a, err := routingRuleClient.Write(NewRoutingRule(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		routingRule2b, err := routingRuleClient.Write(NewRoutingRule(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotRoutingrules(RoutingRuleList{routingRule1a, routingRule1b, routingRule2a, routingRule2b}, nil)

		err = routingRuleClient.Delete(routingRule2a.Metadata.Namespace, routingRule2a.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = routingRuleClient.Delete(routingRule2b.Metadata.Namespace, routingRule2b.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotRoutingrules(RoutingRuleList{routingRule1a, routingRule1b}, RoutingRuleList{routingRule2a, routingRule2b})

		err = routingRuleClient.Delete(routingRule1a.Metadata.Namespace, routingRule1a.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = routingRuleClient.Delete(routingRule1b.Metadata.Namespace, routingRule1b.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotRoutingrules(nil, RoutingRuleList{routingRule1a, routingRule1b, routingRule2a, routingRule2b})

		/*
			TlsSecret
		*/

		assertSnapshotTlssecrets := func(expectTlssecrets TlsSecretList, unexpectTlssecrets TlsSecretList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectTlssecrets {
						if _, err := snap.Tlssecrets.List().Find(expected.Metadata.Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectTlssecrets {
						if _, err := snap.Tlssecrets.List().Find(unexpected.Metadata.Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := tlsSecretClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := tlsSecretClient.List(namespace2, clients.ListOpts{})
					combined := nsList1.ByNamespace()
					combined.Add(nsList2...)
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		tlsSecret1a, err := tlsSecretClient.Write(NewTlsSecret(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		tlsSecret1b, err := tlsSecretClient.Write(NewTlsSecret(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotTlssecrets(TlsSecretList{tlsSecret1a, tlsSecret1b}, nil)
		tlsSecret2a, err := tlsSecretClient.Write(NewTlsSecret(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		tlsSecret2b, err := tlsSecretClient.Write(NewTlsSecret(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotTlssecrets(TlsSecretList{tlsSecret1a, tlsSecret1b, tlsSecret2a, tlsSecret2b}, nil)

		err = tlsSecretClient.Delete(tlsSecret2a.Metadata.Namespace, tlsSecret2a.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = tlsSecretClient.Delete(tlsSecret2b.Metadata.Namespace, tlsSecret2b.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotTlssecrets(TlsSecretList{tlsSecret1a, tlsSecret1b}, TlsSecretList{tlsSecret2a, tlsSecret2b})

		err = tlsSecretClient.Delete(tlsSecret1a.Metadata.Namespace, tlsSecret1a.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = tlsSecretClient.Delete(tlsSecret1b.Metadata.Namespace, tlsSecret1b.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotTlssecrets(nil, TlsSecretList{tlsSecret1a, tlsSecret1b, tlsSecret2a, tlsSecret2b})

		/*
			DestinationRule
		*/

		assertSnapshotDestinationrules := func(expectDestinationrules istio_networking_v1alpha3.DestinationRuleList, unexpectDestinationrules istio_networking_v1alpha3.DestinationRuleList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectDestinationrules {
						if _, err := snap.Destinationrules.List().Find(expected.Metadata.Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectDestinationrules {
						if _, err := snap.Destinationrules.List().Find(unexpected.Metadata.Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := destinationRuleClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := destinationRuleClient.List(namespace2, clients.ListOpts{})
					combined := nsList1.ByNamespace()
					combined.Add(nsList2...)
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		destinationRule1a, err := destinationRuleClient.Write(istio_networking_v1alpha3.NewDestinationRule(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		destinationRule1b, err := destinationRuleClient.Write(istio_networking_v1alpha3.NewDestinationRule(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotDestinationrules(istio_networking_v1alpha3.DestinationRuleList{destinationRule1a, destinationRule1b}, nil)
		destinationRule2a, err := destinationRuleClient.Write(istio_networking_v1alpha3.NewDestinationRule(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		destinationRule2b, err := destinationRuleClient.Write(istio_networking_v1alpha3.NewDestinationRule(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotDestinationrules(istio_networking_v1alpha3.DestinationRuleList{destinationRule1a, destinationRule1b, destinationRule2a, destinationRule2b}, nil)

		err = destinationRuleClient.Delete(destinationRule2a.Metadata.Namespace, destinationRule2a.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = destinationRuleClient.Delete(destinationRule2b.Metadata.Namespace, destinationRule2b.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotDestinationrules(istio_networking_v1alpha3.DestinationRuleList{destinationRule1a, destinationRule1b}, istio_networking_v1alpha3.DestinationRuleList{destinationRule2a, destinationRule2b})

		err = destinationRuleClient.Delete(destinationRule1a.Metadata.Namespace, destinationRule1a.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = destinationRuleClient.Delete(destinationRule1b.Metadata.Namespace, destinationRule1b.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotDestinationrules(nil, istio_networking_v1alpha3.DestinationRuleList{destinationRule1a, destinationRule1b, destinationRule2a, destinationRule2b})

		/*
			VirtualService
		*/

		assertSnapshotVirtualservices := func(expectVirtualservices istio_networking_v1alpha3.VirtualServiceList, unexpectVirtualservices istio_networking_v1alpha3.VirtualServiceList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectVirtualservices {
						if _, err := snap.Virtualservices.List().Find(expected.Metadata.Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectVirtualservices {
						if _, err := snap.Virtualservices.List().Find(unexpected.Metadata.Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := virtualServiceClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := virtualServiceClient.List(namespace2, clients.ListOpts{})
					combined := nsList1.ByNamespace()
					combined.Add(nsList2...)
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}
		virtualService1a, err := virtualServiceClient.Write(istio_networking_v1alpha3.NewVirtualService(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		virtualService1b, err := virtualServiceClient.Write(istio_networking_v1alpha3.NewVirtualService(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotVirtualservices(istio_networking_v1alpha3.VirtualServiceList{virtualService1a, virtualService1b}, nil)
		virtualService2a, err := virtualServiceClient.Write(istio_networking_v1alpha3.NewVirtualService(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		virtualService2b, err := virtualServiceClient.Write(istio_networking_v1alpha3.NewVirtualService(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotVirtualservices(istio_networking_v1alpha3.VirtualServiceList{virtualService1a, virtualService1b, virtualService2a, virtualService2b}, nil)

		err = virtualServiceClient.Delete(virtualService2a.Metadata.Namespace, virtualService2a.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = virtualServiceClient.Delete(virtualService2b.Metadata.Namespace, virtualService2b.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotVirtualservices(istio_networking_v1alpha3.VirtualServiceList{virtualService1a, virtualService1b}, istio_networking_v1alpha3.VirtualServiceList{virtualService2a, virtualService2b})

		err = virtualServiceClient.Delete(virtualService1a.Metadata.Namespace, virtualService1a.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = virtualServiceClient.Delete(virtualService1b.Metadata.Namespace, virtualService1b.Metadata.Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())

		assertSnapshotVirtualservices(nil, istio_networking_v1alpha3.VirtualServiceList{virtualService1a, virtualService1b, virtualService2a, virtualService2b})
	})
})
