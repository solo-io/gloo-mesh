// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"sync"
	"time"

	gloo_solo_io "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	encryption_istio_io "github.com/solo-io/supergloo/pkg2/api/external/istio/encryption/v1"

	"go.opencensus.io/stats"
	"go.opencensus.io/stats/view"
	"go.opencensus.io/tag"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/errors"
	"github.com/solo-io/solo-kit/pkg/utils/errutils"
)

var (
	mTranslatorSnapshotIn  = stats.Int64("translator.supergloo.solo.io/snap_emitter/snap_in", "The number of snapshots in", "1")
	mTranslatorSnapshotOut = stats.Int64("translator.supergloo.solo.io/snap_emitter/snap_out", "The number of snapshots out", "1")

	translatorsnapshotInView = &view.View{
		Name:        "translator.supergloo.solo.io_snap_emitter/snap_in",
		Measure:     mTranslatorSnapshotIn,
		Description: "The number of snapshots updates coming in",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
	translatorsnapshotOutView = &view.View{
		Name:        "translator.supergloo.solo.io/snap_emitter/snap_out",
		Measure:     mTranslatorSnapshotOut,
		Description: "The number of snapshots updates going out",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
)

func init() {
	view.Register(translatorsnapshotInView, translatorsnapshotOutView)
}

type TranslatorEmitter interface {
	Register() error
	Secret() gloo_solo_io.SecretClient
	Upstream() gloo_solo_io.UpstreamClient
	Mesh() MeshClient
	RoutingRule() RoutingRuleClient
	IstioCacertsSecret() encryption_istio_io.IstioCacertsSecretClient
	Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *TranslatorSnapshot, <-chan error, error)
}

func NewTranslatorEmitter(secretClient gloo_solo_io.SecretClient, upstreamClient gloo_solo_io.UpstreamClient, meshClient MeshClient, routingRuleClient RoutingRuleClient, istioCacertsSecretClient encryption_istio_io.IstioCacertsSecretClient) TranslatorEmitter {
	return NewTranslatorEmitterWithEmit(secretClient, upstreamClient, meshClient, routingRuleClient, istioCacertsSecretClient, make(chan struct{}))
}

func NewTranslatorEmitterWithEmit(secretClient gloo_solo_io.SecretClient, upstreamClient gloo_solo_io.UpstreamClient, meshClient MeshClient, routingRuleClient RoutingRuleClient, istioCacertsSecretClient encryption_istio_io.IstioCacertsSecretClient, emit <-chan struct{}) TranslatorEmitter {
	return &translatorEmitter{
		secret:             secretClient,
		upstream:           upstreamClient,
		mesh:               meshClient,
		routingRule:        routingRuleClient,
		istioCacertsSecret: istioCacertsSecretClient,
		forceEmit:          emit,
	}
}

type translatorEmitter struct {
	forceEmit          <-chan struct{}
	secret             gloo_solo_io.SecretClient
	upstream           gloo_solo_io.UpstreamClient
	mesh               MeshClient
	routingRule        RoutingRuleClient
	istioCacertsSecret encryption_istio_io.IstioCacertsSecretClient
}

func (c *translatorEmitter) Register() error {
	if err := c.secret.Register(); err != nil {
		return err
	}
	if err := c.upstream.Register(); err != nil {
		return err
	}
	if err := c.mesh.Register(); err != nil {
		return err
	}
	if err := c.routingRule.Register(); err != nil {
		return err
	}
	if err := c.istioCacertsSecret.Register(); err != nil {
		return err
	}
	return nil
}

func (c *translatorEmitter) Secret() gloo_solo_io.SecretClient {
	return c.secret
}

func (c *translatorEmitter) Upstream() gloo_solo_io.UpstreamClient {
	return c.upstream
}

func (c *translatorEmitter) Mesh() MeshClient {
	return c.mesh
}

func (c *translatorEmitter) RoutingRule() RoutingRuleClient {
	return c.routingRule
}

func (c *translatorEmitter) IstioCacertsSecret() encryption_istio_io.IstioCacertsSecretClient {
	return c.istioCacertsSecret
}

func (c *translatorEmitter) Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *TranslatorSnapshot, <-chan error, error) {
	errs := make(chan error)
	var done sync.WaitGroup
	ctx := opts.Ctx
	/* Create channel for Secret */
	type secretListWithNamespace struct {
		list      gloo_solo_io.SecretList
		namespace string
	}
	secretChan := make(chan secretListWithNamespace)
	/* Create channel for Upstream */
	type upstreamListWithNamespace struct {
		list      gloo_solo_io.UpstreamList
		namespace string
	}
	upstreamChan := make(chan upstreamListWithNamespace)
	/* Create channel for Mesh */
	type meshListWithNamespace struct {
		list      MeshList
		namespace string
	}
	meshChan := make(chan meshListWithNamespace)
	/* Create channel for RoutingRule */
	type routingRuleListWithNamespace struct {
		list      RoutingRuleList
		namespace string
	}
	routingRuleChan := make(chan routingRuleListWithNamespace)
	/* Create channel for IstioCacertsSecret */
	type istioCacertsSecretListWithNamespace struct {
		list      encryption_istio_io.IstioCacertsSecretList
		namespace string
	}
	istioCacertsSecretChan := make(chan istioCacertsSecretListWithNamespace)

	for _, namespace := range watchNamespaces {
		/* Setup namespaced watch for Secret */
		secretNamespacesChan, secretErrs, err := c.secret.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting Secret watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, secretErrs, namespace+"-secrets")
		}(namespace)
		/* Setup namespaced watch for Upstream */
		upstreamNamespacesChan, upstreamErrs, err := c.upstream.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting Upstream watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, upstreamErrs, namespace+"-upstreams")
		}(namespace)
		/* Setup namespaced watch for Mesh */
		meshNamespacesChan, meshErrs, err := c.mesh.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting Mesh watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, meshErrs, namespace+"-meshes")
		}(namespace)
		/* Setup namespaced watch for RoutingRule */
		routingRuleNamespacesChan, routingRuleErrs, err := c.routingRule.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting RoutingRule watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, routingRuleErrs, namespace+"-routingrules")
		}(namespace)
		/* Setup namespaced watch for IstioCacertsSecret */
		istioCacertsSecretNamespacesChan, istioCacertsSecretErrs, err := c.istioCacertsSecret.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting IstioCacertsSecret watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, istioCacertsSecretErrs, namespace+"-istiocerts")
		}(namespace)

		/* Watch for changes and update snapshot */
		go func(namespace string) {
			for {
				select {
				case <-ctx.Done():
					return
				case secretList := <-secretNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case secretChan <- secretListWithNamespace{list: secretList, namespace: namespace}:
					}
				case upstreamList := <-upstreamNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case upstreamChan <- upstreamListWithNamespace{list: upstreamList, namespace: namespace}:
					}
				case meshList := <-meshNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case meshChan <- meshListWithNamespace{list: meshList, namespace: namespace}:
					}
				case routingRuleList := <-routingRuleNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case routingRuleChan <- routingRuleListWithNamespace{list: routingRuleList, namespace: namespace}:
					}
				case istioCacertsSecretList := <-istioCacertsSecretNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case istioCacertsSecretChan <- istioCacertsSecretListWithNamespace{list: istioCacertsSecretList, namespace: namespace}:
					}
				}
			}
		}(namespace)
	}

	snapshots := make(chan *TranslatorSnapshot)
	go func() {
		originalSnapshot := TranslatorSnapshot{}
		currentSnapshot := originalSnapshot.Clone()
		timer := time.NewTicker(time.Second * 1)
		sync := func() {
			if originalSnapshot.Hash() == currentSnapshot.Hash() {
				return
			}

			stats.Record(ctx, mTranslatorSnapshotOut.M(1))
			originalSnapshot = currentSnapshot.Clone()
			sentSnapshot := currentSnapshot.Clone()
			snapshots <- &sentSnapshot
		}

		/* TODO (yuval-k): figure out how to make this work to avoid a stale snapshot.
		   		// construct the first snapshot from all the configs that are currently there
		   		// that guarantees that the first snapshot contains all the data.
		   		for range watchNamespaces {
		      secretNamespacedList := <- secretChan
		      currentSnapshot.Secrets.Clear(secretNamespacedList.namespace)
		      secretList := secretNamespacedList.list
		   	currentSnapshot.Secrets.Add(secretList...)
		      upstreamNamespacedList := <- upstreamChan
		      currentSnapshot.Upstreams.Clear(upstreamNamespacedList.namespace)
		      upstreamList := upstreamNamespacedList.list
		   	currentSnapshot.Upstreams.Add(upstreamList...)
		      meshNamespacedList := <- meshChan
		      currentSnapshot.Meshes.Clear(meshNamespacedList.namespace)
		      meshList := meshNamespacedList.list
		   	currentSnapshot.Meshes.Add(meshList...)
		      routingRuleNamespacedList := <- routingRuleChan
		      currentSnapshot.Routingrules.Clear(routingRuleNamespacedList.namespace)
		      routingRuleList := routingRuleNamespacedList.list
		   	currentSnapshot.Routingrules.Add(routingRuleList...)
		      istioCacertsSecretNamespacedList := <- istioCacertsSecretChan
		      currentSnapshot.Istiocerts.Clear(istioCacertsSecretNamespacedList.namespace)
		      istioCacertsSecretList := istioCacertsSecretNamespacedList.list
		   	currentSnapshot.Istiocerts.Add(istioCacertsSecretList...)
		   		}
		*/

		for {
			record := func() { stats.Record(ctx, mTranslatorSnapshotIn.M(1)) }

			select {
			case <-timer.C:
				sync()
			case <-ctx.Done():
				close(snapshots)
				done.Wait()
				close(errs)
				return
			case <-c.forceEmit:
				sentSnapshot := currentSnapshot.Clone()
				snapshots <- &sentSnapshot
			case secretNamespacedList := <-secretChan:
				record()

				namespace := secretNamespacedList.namespace
				secretList := secretNamespacedList.list

				currentSnapshot.Secrets.Clear(namespace)
				currentSnapshot.Secrets.Add(secretList...)
			case upstreamNamespacedList := <-upstreamChan:
				record()

				namespace := upstreamNamespacedList.namespace
				upstreamList := upstreamNamespacedList.list

				currentSnapshot.Upstreams.Clear(namespace)
				currentSnapshot.Upstreams.Add(upstreamList...)
			case meshNamespacedList := <-meshChan:
				record()

				namespace := meshNamespacedList.namespace
				meshList := meshNamespacedList.list

				currentSnapshot.Meshes.Clear(namespace)
				currentSnapshot.Meshes.Add(meshList...)
			case routingRuleNamespacedList := <-routingRuleChan:
				record()

				namespace := routingRuleNamespacedList.namespace
				routingRuleList := routingRuleNamespacedList.list

				currentSnapshot.Routingrules.Clear(namespace)
				currentSnapshot.Routingrules.Add(routingRuleList...)
			case istioCacertsSecretNamespacedList := <-istioCacertsSecretChan:
				record()

				namespace := istioCacertsSecretNamespacedList.namespace
				istioCacertsSecretList := istioCacertsSecretNamespacedList.list

				currentSnapshot.Istiocerts.Clear(namespace)
				currentSnapshot.Istiocerts.Add(istioCacertsSecretList...)
			}
		}
	}()
	return snapshots, errs, nil
}
