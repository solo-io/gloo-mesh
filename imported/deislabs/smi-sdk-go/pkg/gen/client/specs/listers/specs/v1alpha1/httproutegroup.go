/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/solo-io/supergloo/imported/deislabs/smi-sdk-go/pkg/apis/specs/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HTTPRouteGroupLister helps list HTTPRouteGroups.
type HTTPRouteGroupLister interface {
	// List lists all HTTPRouteGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.HTTPRouteGroup, err error)
	// HTTPRouteGroups returns an object that can list and get HTTPRouteGroups.
	HTTPRouteGroups(namespace string) HTTPRouteGroupNamespaceLister
	HTTPRouteGroupListerExpansion
}

// hTTPRouteGroupLister implements the HTTPRouteGroupLister interface.
type hTTPRouteGroupLister struct {
	indexer cache.Indexer
}

// NewHTTPRouteGroupLister returns a new HTTPRouteGroupLister.
func NewHTTPRouteGroupLister(indexer cache.Indexer) HTTPRouteGroupLister {
	return &hTTPRouteGroupLister{indexer: indexer}
}

// List lists all HTTPRouteGroups in the indexer.
func (s *hTTPRouteGroupLister) List(selector labels.Selector) (ret []*v1alpha1.HTTPRouteGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HTTPRouteGroup))
	})
	return ret, err
}

// HTTPRouteGroups returns an object that can list and get HTTPRouteGroups.
func (s *hTTPRouteGroupLister) HTTPRouteGroups(namespace string) HTTPRouteGroupNamespaceLister {
	return hTTPRouteGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HTTPRouteGroupNamespaceLister helps list and get HTTPRouteGroups.
type HTTPRouteGroupNamespaceLister interface {
	// List lists all HTTPRouteGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.HTTPRouteGroup, err error)
	// Get retrieves the HTTPRouteGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.HTTPRouteGroup, error)
	HTTPRouteGroupNamespaceListerExpansion
}

// hTTPRouteGroupNamespaceLister implements the HTTPRouteGroupNamespaceLister
// interface.
type hTTPRouteGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HTTPRouteGroups in the indexer for a given namespace.
func (s hTTPRouteGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HTTPRouteGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HTTPRouteGroup))
	})
	return ret, err
}

// Get retrieves the HTTPRouteGroup from the indexer for a given namespace and name.
func (s hTTPRouteGroupNamespaceLister) Get(name string) (*v1alpha1.HTTPRouteGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("httproutegroup"), name)
	}
	return obj.(*v1alpha1.HTTPRouteGroup), nil
}
