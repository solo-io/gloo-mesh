syntax = "proto3";
package supergloo.solo.io;
option go_package = "github.com/solo-io/supergloo/pkg2/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";

import "observability.proto";
import "encryption.proto";
import "policy.proto";

/*
@solo-kit:resource.short_name=mesh
@solo-kit:resource.plural_name=meshes
@solo-kit:resource.resource_groups=translator.supergloo.solo.io
*/
message Mesh {
    // Status indicates the validation status of this resource.
    // Status is read-only by clients, and set by gloo during validation
    core.solo.io.Status status = 6 [(gogoproto.nullable) = false, (gogoproto.moretags) = "testdiff:\"ignore\""];

    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 7 [(gogoproto.nullable) = false];

    // mesh-specific configuration
    oneof mesh_type {
        Istio istio = 10;
        Linkerd2 linkerd2= 20;
        Consul consul= 30;
        AppMesh app_mesh = 50;
    };

    // policy applied to the mesh
    // TODO: rick-ducott, yuval-k: consider splitting these out as in routing.proto
    Encryption encryption = 98;
    Observability observability = 99;
    Policy policy = 100;
}

// configuration for an istio mesh. this will be autogenerated if Supergloo installs Istio for you.
message Istio {
    // which namespace is istio installed to?
    string installation_namespace = 1;
    // the namespaces istio is watching for its crd-based configuration. leave empty if istio install is cluster-wide
    repeated string watch_namespaces = 2;
    // if provided, this will give Supergloo a reference to the prometheus configuration associated with this istio install
    // if empty, Supergloo will look for the configmap `istio-system.prometheus`
    core.solo.io.ResourceRef prometheus_configmap = 3;
}

// configuration for an linkerd2 mesh. this will be autogenerated if Supergloo installs Linkerd2 for you.
message Linkerd2 {
    // which namespace is linkerd2 installed to?
    string installation_namespace = 1;
    // the namespaces linkerd2 is watching for its crd-based configuration. leave empty if linkerd2 install is cluster-wide
    repeated string watch_namespaces = 2;
    // if provided, this will give Supergloo a reference to the prometheus configuration associated with this linkerd2 install
    // if empty, Supergloo will look for the configmap `linkerd.prometheus`
    core.solo.io.ResourceRef prometheus_configmap = 3;
}


// configuration for an consul mesh. this will be autogenerated if Supergloo installs Consul for you.
message Consul {
    // which namespace is consul instatlled to?
    string installation_namespace = 1;
    // address of the consul api server
    string server_address = 2;
    // if provided, this will give Supergloo a reference to the prometheus configuration associated with this consul install
    // if empty, Supergloo will look for the configmap `linkerd.prometheus`
    core.solo.io.ResourceRef prometheus_configmap = 3;
}

// configuration for an AWS AppMesh mesh.
message AppMesh {
    // the region where this mesh should be deployed
    string aws_region = 1;

    // ref to a Secret containing aws credentials
    core.solo.io.ResourceRef aws_credentials= 3;
}
